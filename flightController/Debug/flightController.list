
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008948  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08008ae8  08008ae8  00018ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b98  08008b98  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  08008b98  08008b98  00018b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ba0  08008ba0  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ba0  08008ba0  00018ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ba4  08008ba4  00018ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  08008ba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001620  2000015c  08008d04  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000177c  08008d04  0002177c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012832  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034c7  00000000  00000000  00032a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  00035ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad6  00000000  00000000  00036d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d02  00000000  00000000  00037806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000141cc  00000000  00000000  00050508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008916d  00000000  00000000  000646d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f18  00000000  00000000  000ed844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  000f175c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000015c 	.word	0x2000015c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008ad0 	.word	0x08008ad0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000160 	.word	0x20000160
 80001dc:	08008ad0 	.word	0x08008ad0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b08c      	sub	sp, #48	; 0x30
 8000580:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000582:	f000 fbad 	bl	8000ce0 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000586:	f000 f82d 	bl	80005e4 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800058a:	f000 f895 	bl	80006b8 <MX_GPIO_Init>
    MX_USB_DEVICE_Init();
 800058e:	f007 f8e3 	bl	8007758 <MX_USB_DEVICE_Init>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    uint8_t str[32] = {0};
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	f107 0308 	add.w	r3, r7, #8
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]
 80005a6:	615a      	str	r2, [r3, #20]
 80005a8:	619a      	str	r2, [r3, #24]
    uint8_t channel = CHANNEL_3;
 80005aa:	2303      	movs	r3, #3
 80005ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    iBus_HandleTypeDef_t * rc_controller = FSA8S_RC_Init();
 80005b0:	f000 fb30 	bl	8000c14 <FSA8S_RC_Init>
 80005b4:	62b8      	str	r0, [r7, #40]	; 0x28

    while (1) {
        uint16_t value = FSA8S_RC_ReadChannel(rc_controller, channel);
 80005b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005ba:	4619      	mov	r1, r3
 80005bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80005be:	f000 fb63 	bl	8000c88 <FSA8S_RC_ReadChannel>
 80005c2:	4603      	mov	r3, r0
 80005c4:	84fb      	strh	r3, [r7, #38]	; 0x26
        sprintf(str, (const char *)"Channel %d: %d\r\n", channel, value);
 80005c6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80005ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005cc:	1d38      	adds	r0, r7, #4
 80005ce:	4904      	ldr	r1, [pc, #16]	; (80005e0 <main+0x64>)
 80005d0:	f007 fe86 	bl	80082e0 <siprintf>

        CDC_Transmit_FS(str, sizeof(str));
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2120      	movs	r1, #32
 80005d8:	4618      	mov	r0, r3
 80005da:	f007 f97b 	bl	80078d4 <CDC_Transmit_FS>
    while (1) {
 80005de:	e7ea      	b.n	80005b6 <main+0x3a>
 80005e0:	08008ae8 	.word	0x08008ae8

080005e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f007 fe94 	bl	8008320 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a27      	ldr	r2, [pc, #156]	; (80006b0 <SystemClock_Config+0xcc>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000630:	4a20      	ldr	r2, [pc, #128]	; (80006b4 <SystemClock_Config+0xd0>)
 8000632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 15;
 8000658:	230f      	movs	r3, #15
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 144;
 800065c:	2390      	movs	r3, #144	; 0x90
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000660:	2304      	movs	r3, #4
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 5;
 8000664:	2305      	movs	r3, #5
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f002 fac7 	bl	8002c00 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x98>
        Error_Handler();
 8000678:	f000 f846 	bl	8000708 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType =
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
        RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2302      	movs	r3, #2
 8000682:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	2101      	movs	r1, #1
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fd29 	bl	80030f0 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xc4>
        Error_Handler();
 80006a4:	f000 f830 	bl	8000708 <Error_Handler>
    }
}
 80006a8:	bf00      	nop
 80006aa:	3750      	adds	r7, #80	; 0x50
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_GPIO_Init+0x4c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a0f      	ldr	r2, [pc, #60]	; (8000704 <MX_GPIO_Init+0x4c>)
 80006c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <MX_GPIO_Init+0x4c>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_GPIO_Init+0x4c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a08      	ldr	r2, [pc, #32]	; (8000704 <MX_GPIO_Init+0x4c>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_GPIO_Init+0x4c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800

08000708 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* USER CODE END Error_Handler_Debug */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
	...

08000718 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <HAL_MspInit+0x4c>)
 8000724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000726:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <HAL_MspInit+0x4c>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072c:	6453      	str	r3, [r2, #68]	; 0x44
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <HAL_MspInit+0x4c>)
 8000730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_MspInit+0x4c>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	4a08      	ldr	r2, [pc, #32]	; (8000764 <HAL_MspInit+0x4c>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000748:	6413      	str	r3, [r2, #64]	; 0x40
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_MspInit+0x4c>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800

08000768 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef * huart) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
    if (huart->Instance == USART2) {
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a30      	ldr	r2, [pc, #192]	; (8000848 <HAL_UART_MspInit+0xe0>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d15a      	bne.n	8000840 <HAL_UART_MspInit+0xd8>
        /* USER CODE BEGIN USART2_MspInit 0 */

        /* USER CODE END USART2_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART2_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b2f      	ldr	r3, [pc, #188]	; (800084c <HAL_UART_MspInit+0xe4>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	4a2e      	ldr	r2, [pc, #184]	; (800084c <HAL_UART_MspInit+0xe4>)
 8000794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000798:	6413      	str	r3, [r2, #64]	; 0x40
 800079a:	4b2c      	ldr	r3, [pc, #176]	; (800084c <HAL_UART_MspInit+0xe4>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b28      	ldr	r3, [pc, #160]	; (800084c <HAL_UART_MspInit+0xe4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a27      	ldr	r2, [pc, #156]	; (800084c <HAL_UART_MspInit+0xe4>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b25      	ldr	r3, [pc, #148]	; (800084c <HAL_UART_MspInit+0xe4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
        /**USART2 GPIO Configuration
        PA2     ------> USART2_TX
        PA3     ------> USART2_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80007c2:	230c      	movs	r3, #12
 80007c4:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007d2:	2307      	movs	r3, #7
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	481c      	ldr	r0, [pc, #112]	; (8000850 <HAL_UART_MspInit+0xe8>)
 80007de:	f000 fe0d 	bl	80013fc <HAL_GPIO_Init>

        /* USART2 DMA Init */
        /* USART2_RX Init */
        hdma_usart2_rx.Instance = DMA1_Stream5;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <HAL_UART_MspInit+0xec>)
 80007e4:	4a1c      	ldr	r2, [pc, #112]	; (8000858 <HAL_UART_MspInit+0xf0>)
 80007e6:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <HAL_UART_MspInit+0xec>)
 80007ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007ee:	605a      	str	r2, [r3, #4]
        hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <HAL_UART_MspInit+0xec>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
        hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <HAL_UART_MspInit+0xec>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
        hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_UART_MspInit+0xec>)
 80007fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000802:	611a      	str	r2, [r3, #16]
        hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <HAL_UART_MspInit+0xec>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
        hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_UART_MspInit+0xec>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
        hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000810:	4b10      	ldr	r3, [pc, #64]	; (8000854 <HAL_UART_MspInit+0xec>)
 8000812:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000816:	61da      	str	r2, [r3, #28]
        hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <HAL_UART_MspInit+0xec>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
        hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <HAL_UART_MspInit+0xec>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	; 0x24
        if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <HAL_UART_MspInit+0xec>)
 8000826:	f000 fc03 	bl	8001030 <HAL_DMA_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <HAL_UART_MspInit+0xcc>
            Error_Handler();
 8000830:	f7ff ff6a 	bl	8000708 <Error_Handler>
        }

        __HAL_LINKDMA(huart, hdmarx, hdma_usart2_rx);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a07      	ldr	r2, [pc, #28]	; (8000854 <HAL_UART_MspInit+0xec>)
 8000838:	639a      	str	r2, [r3, #56]	; 0x38
 800083a:	4a06      	ldr	r2, [pc, #24]	; (8000854 <HAL_UART_MspInit+0xec>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6393      	str	r3, [r2, #56]	; 0x38

        /* USER CODE BEGIN USART2_MspInit 1 */

        /* USER CODE END USART2_MspInit 1 */
    }
}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	; 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40004400 	.word	0x40004400
 800084c:	40023800 	.word	0x40023800
 8000850:	40020000 	.word	0x40020000
 8000854:	200001c0 	.word	0x200001c0
 8000858:	40026088 	.word	0x40026088

0800085c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8000860:	e7fe      	b.n	8000860 <NMI_Handler+0x4>

08000862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <HardFault_Handler+0x4>

08000868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <MemManage_Handler+0x4>

0800086e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <BusFault_Handler+0x4>

08000874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <UsageFault_Handler+0x4>

0800087a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a8:	f000 fa6c 	bl	8000d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008b4:	4802      	ldr	r0, [pc, #8]	; (80008c0 <OTG_FS_IRQHandler+0x10>)
 80008b6:	f001 f875 	bl	80019a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000f08 	.word	0x20000f08

080008c4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008cc:	4a14      	ldr	r2, [pc, #80]	; (8000920 <_sbrk+0x5c>)
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <_sbrk+0x60>)
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <_sbrk+0x64>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <_sbrk+0x68>)
 80008e4:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d207      	bcs.n	8000904 <_sbrk+0x40>
        errno = ENOMEM;
 80008f4:	f007 fd2c 	bl	8008350 <__errno>
 80008f8:	4603      	mov	r3, r0
 80008fa:	220c      	movs	r2, #12
 80008fc:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000902:	e009      	b.n	8000918 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <_sbrk+0x64>)
 8000914:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8000916:	68fb      	ldr	r3, [r7, #12]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20010000 	.word	0x20010000
 8000924:	00000400 	.word	0x00000400
 8000928:	20000178 	.word	0x20000178
 800092c:	20001780 	.word	0x20001780

08000930 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <SystemInit+0x20>)
 8000936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093a:	4a05      	ldr	r2, [pc, #20]	; (8000950 <SystemInit+0x20>)
 800093c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800098c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000958:	480d      	ldr	r0, [pc, #52]	; (8000990 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800095a:	490e      	ldr	r1, [pc, #56]	; (8000994 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800095c:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000970:	4c0b      	ldr	r4, [pc, #44]	; (80009a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800097e:	f7ff ffd7 	bl	8000930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000982:	f007 fceb 	bl	800835c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000986:	f7ff fdf9 	bl	800057c <main>
  bx  lr
 800098a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800098c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000994:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000998:	08008ba8 	.word	0x08008ba8
  ldr r2, =_sbss
 800099c:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 80009a0:	2000177c 	.word	0x2000177c

080009a4 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC_IRQHandler>
	...

080009a8 <MX_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t MX_UART_Init(UART_HandleTypeDef * huart) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
    /* BEGIN MODIFY 1*/
    huart->Instance = FSA8S_RC_UART_INSTANCE;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <MX_UART_Init+0x54>)
 80009b4:	601a      	str	r2, [r3, #0]
    huart->Init.BaudRate = 115200;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009bc:	605a      	str	r2, [r3, #4]
    huart->Init.WordLength = UART_WORDLENGTH_8B;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
    huart->Init.StopBits = UART_STOPBITS_1;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
    huart->Init.Parity = UART_PARITY_NONE;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
    huart->Init.Mode = UART_MODE_RX;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2204      	movs	r2, #4
 80009d4:	615a      	str	r2, [r3, #20]
    huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
    huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
    /* Initialize UART peripheral with function located on the "stm32f4xx_hal_uart.c"
     * file, taking the previously defined UART handle as argument.
     */

    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_UART_Init(huart)) {
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f002 fd64 	bl	80034b0 <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_UART_Init+0x4a>
        /* END MODIFY 2 */
        return false;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e000      	b.n	80009f4 <MX_UART_Init+0x4c>
    }

    return true;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40004400 	.word	0x40004400

08000a00 <MX_DMA_Init>:

static void MX_DMA_Init(void) {
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
     * HAL_DMA_Init() on the "stm32f4xx_hal_dma.c" file which sets all the configuration.
     */

    /* DMA controller clock enable */
    /* BEGIN MODIFY 3 */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_DMA_Init+0x30>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <MX_DMA_Init+0x30>)
 8000a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_DMA_Init+0x30>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
    /* END MODIFY 3 */
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <iBus_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
bool_t iBus_Init(iBus_HandleTypeDef_t * hibus) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]

    hibus->huart = &huart;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <iBus_Init+0x54>)
 8000a40:	601a      	str	r2, [r3, #0]

    MX_DMA_Init();
 8000a42:	f7ff ffdd 	bl	8000a00 <MX_DMA_Init>

    /* Initialize UART */
    if (!MX_UART_Init(hibus->huart)) {
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff ffac 	bl	80009a8 <MX_UART_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	f083 0301 	eor.w	r3, r3, #1
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <iBus_Init+0x2c>
        /* UART initialization was unsuccessful */
        return false;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	e00f      	b.n	8000a80 <iBus_Init+0x4c>
    }

    /* Initialize DMA reception */
    /* BEGIN MODIFY 4 */
    if (HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize)) {
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6818      	ldr	r0, [r3, #0]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6859      	ldr	r1, [r3, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	7a1b      	ldrb	r3, [r3, #8]
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	461a      	mov	r2, r3
 8000a70:	f002 fd6b 	bl	800354a <HAL_UART_Receive_DMA>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <iBus_Init+0x4a>
        /* END MODIFY 4 */

        /* DMA initialization was unsuccessful */
        return false;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e000      	b.n	8000a80 <iBus_Init+0x4c>
    }

    /* iBus initialization was successful */
    return true;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	2000017c 	.word	0x2000017c

08000a8c <FSA8S_RC_CheckFirstBytes>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t FSA8S_RC_CheckFirstBytes(iBus_HandleTypeDef_t * hibus) {
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]

    if (IBUS_BUFFER_LENGTH == hibus->buffer[0] && IBUS_COMMAND == hibus->buffer[1]) {
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b20      	cmp	r3, #32
 8000a9c:	d107      	bne.n	8000aae <FSA8S_RC_CheckFirstBytes+0x22>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b40      	cmp	r3, #64	; 0x40
 8000aa8:	d101      	bne.n	8000aae <FSA8S_RC_CheckFirstBytes+0x22>
        /* First two bytes are correct */
        return true;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e000      	b.n	8000ab0 <FSA8S_RC_CheckFirstBytes+0x24>
    } else {
        /* First two bytes are not correct */
        return false;
 8000aae:	2300      	movs	r3, #0
    }
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <FSA8S_RC_Checksum>:

static bool_t FSA8S_RC_Checksum(iBus_HandleTypeDef_t * hibus) {
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

    uint16_t sentChecksum;
    uint16_t receivedChecksum = 0xFFFF;
 8000ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ac8:	81fb      	strh	r3, [r7, #14]

    /* Get received checksum value */
    sentChecksum =
        (hibus->buffer[hibus->bufferSize - 1] << 8) | (hibus->buffer[hibus->bufferSize - 2]);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	7a1b      	ldrb	r3, [r3, #8]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	4413      	add	r3, r2
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	021b      	lsls	r3, r3, #8
 8000ada:	b21a      	sxth	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6859      	ldr	r1, [r3, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	7a1b      	ldrb	r3, [r3, #8]
 8000ae4:	3b02      	subs	r3, #2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	b21b      	sxth	r3, r3
 8000aec:	4313      	orrs	r3, r2
 8000aee:	b21b      	sxth	r3, r3
    sentChecksum =
 8000af0:	817b      	strh	r3, [r7, #10]

    /* Calculate checksum */
    for (uint8_t i = 0; i < 30; i++) {
 8000af2:	2300      	movs	r3, #0
 8000af4:	737b      	strb	r3, [r7, #13]
 8000af6:	e00b      	b.n	8000b10 <FSA8S_RC_Checksum+0x54>
        receivedChecksum -= hibus->buffer[i];
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	7b7b      	ldrb	r3, [r7, #13]
 8000afe:	4413      	add	r3, r2
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	89fa      	ldrh	r2, [r7, #14]
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < 30; i++) {
 8000b0a:	7b7b      	ldrb	r3, [r7, #13]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	737b      	strb	r3, [r7, #13]
 8000b10:	7b7b      	ldrb	r3, [r7, #13]
 8000b12:	2b1d      	cmp	r3, #29
 8000b14:	d9f0      	bls.n	8000af8 <FSA8S_RC_Checksum+0x3c>
    }

    /* Compare received checksum value with calculated one */
    if (sentChecksum == receivedChecksum) {
 8000b16:	897a      	ldrh	r2, [r7, #10]
 8000b18:	89fb      	ldrh	r3, [r7, #14]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d101      	bne.n	8000b22 <FSA8S_RC_Checksum+0x66>
        /* Received data is correct */
        return true;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <FSA8S_RC_Checksum+0x68>
    } else {
        /* Received data is corrupted */
        return false;
 8000b22:	2300      	movs	r3, #0
    }
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <FSA8S_RC_AmendData>:

static void FSA8S_RC_AmendData(iBus_HandleTypeDef_t * hibus) {
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]

    uint16_t channelValue;

    for (uint8_t i = 2; i <= (hibus->bufferSize - 2); i += 2) {
 8000b38:	2302      	movs	r3, #2
 8000b3a:	737b      	strb	r3, [r7, #13]
 8000b3c:	e059      	b.n	8000bf2 <FSA8S_RC_AmendData+0xc2>

        channelValue = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	81fb      	strh	r3, [r7, #14]

        /* Swap channel bytes */
        channelValue =
            ((hibus->buffer[i + 1] << 8) | (hibus->buffer[i])) - calibrationValues[(i - 2) / 2];
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	685a      	ldr	r2, [r3, #4]
 8000b46:	7b7b      	ldrb	r3, [r7, #13]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	4413      	add	r3, r2
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	021b      	lsls	r3, r3, #8
 8000b50:	b21a      	sxth	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6859      	ldr	r1, [r3, #4]
 8000b56:	7b7b      	ldrb	r3, [r7, #13]
 8000b58:	440b      	add	r3, r1
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b21b      	sxth	r3, r3
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b21b      	sxth	r3, r3
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	7b7b      	ldrb	r3, [r7, #13]
 8000b66:	3b02      	subs	r3, #2
 8000b68:	0fd9      	lsrs	r1, r3, #31
 8000b6a:	440b      	add	r3, r1
 8000b6c:	105b      	asrs	r3, r3, #1
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <FSA8S_RC_AmendData+0xdc>)
 8000b72:	5c5b      	ldrb	r3, [r3, r1]
 8000b74:	b29b      	uxth	r3, r3
        channelValue =
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	81fb      	strh	r3, [r7, #14]

        /* Map channel value from 0 to IBUS_CHANNEL_MAX_VALUE */
        if ((1000 <= channelValue) && (2000 >= channelValue)) {
 8000b7a:	89fb      	ldrh	r3, [r7, #14]
 8000b7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b80:	d308      	bcc.n	8000b94 <FSA8S_RC_AmendData+0x64>
 8000b82:	89fb      	ldrh	r3, [r7, #14]
 8000b84:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b88:	d804      	bhi.n	8000b94 <FSA8S_RC_AmendData+0x64>
            channelValue -= 1000;
 8000b8a:	89fb      	ldrh	r3, [r7, #14]
 8000b8c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000b90:	81fb      	strh	r3, [r7, #14]
 8000b92:	e001      	b.n	8000b98 <FSA8S_RC_AmendData+0x68>
        } else {
            channelValue = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	81fb      	strh	r3, [r7, #14]
        }

        hibus->data[(i - 2) / 2] =
            channelValue *
 8000b98:	89fb      	ldrh	r3, [r7, #14]
 8000b9a:	ee07 3a90 	vmov	s15, r3
 8000b9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
            ((float)(IBUS_CHANNEL_MAX_VALUE +
                     (calibrationValues[(i - 2) / 2] * ((float)IBUS_CHANNEL_MAX_VALUE / 1000))) /
 8000ba2:	7b7b      	ldrb	r3, [r7, #13]
 8000ba4:	3b02      	subs	r3, #2
 8000ba6:	0fda      	lsrs	r2, r3, #31
 8000ba8:	4413      	add	r3, r2
 8000baa:	105b      	asrs	r3, r3, #1
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <FSA8S_RC_AmendData+0xdc>)
 8000bb0:	5c9b      	ldrb	r3, [r3, r2]
 8000bb2:	ee07 3a90 	vmov	s15, r3
 8000bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ((float)(IBUS_CHANNEL_MAX_VALUE +
 8000bba:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000c10 <FSA8S_RC_AmendData+0xe0>
 8000bbe:	ee77 6aa6 	vadd.f32	s13, s15, s13
                     (calibrationValues[(i - 2) / 2] * ((float)IBUS_CHANNEL_MAX_VALUE / 1000))) /
 8000bc2:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8000c10 <FSA8S_RC_AmendData+0xe0>
 8000bc6:	eec6 7a86 	vdiv.f32	s15, s13, s12
            channelValue *
 8000bca:	ee67 7a27 	vmul.f32	s15, s14, s15
        hibus->data[(i - 2) / 2] =
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	68da      	ldr	r2, [r3, #12]
 8000bd2:	7b7b      	ldrb	r3, [r7, #13]
 8000bd4:	3b02      	subs	r3, #2
 8000bd6:	0fd9      	lsrs	r1, r3, #31
 8000bd8:	440b      	add	r3, r1
 8000bda:	105b      	asrs	r3, r3, #1
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	4413      	add	r3, r2
 8000be0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000be4:	ee17 2a90 	vmov	r2, s15
 8000be8:	b292      	uxth	r2, r2
 8000bea:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 2; i <= (hibus->bufferSize - 2); i += 2) {
 8000bec:	7b7b      	ldrb	r3, [r7, #13]
 8000bee:	3302      	adds	r3, #2
 8000bf0:	737b      	strb	r3, [r7, #13]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	7a1b      	ldrb	r3, [r3, #8]
 8000bf6:	1e5a      	subs	r2, r3, #1
 8000bf8:	7b7b      	ldrb	r3, [r7, #13]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	dc9f      	bgt.n	8000b3e <FSA8S_RC_AmendData+0xe>
             1000);

        // hibus->data[(i - 2) / 2] = channelValue;
    }
}
 8000bfe:	bf00      	nop
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	20000004 	.word	0x20000004
 8000c10:	447a0000 	.word	0x447a0000

08000c14 <FSA8S_RC_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
iBus_HandleTypeDef_t * FSA8S_RC_Init() {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0

    static uint8_t alreadyInitialized = false;

    /* Check if driver was already initialized */
    if (alreadyInitialized) {
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <FSA8S_RC_Init+0x70>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <FSA8S_RC_Init+0x12>
        return NULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	e029      	b.n	8000c7a <FSA8S_RC_Init+0x66>
#ifdef USE_FREERTOS
    iBus_HandleTypeDef_t * hibus = pvPortmalloc(sizeof(iBus_HandleTypeDef_t));
    uint8_t * buffer = pvortMalloc(sizeof(IBUS_BUFFER_LENGTH));
    uint16_t * data = pvortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
#else
    iBus_HandleTypeDef_t * hibus = malloc(sizeof(iBus_HandleTypeDef_t));
 8000c26:	2014      	movs	r0, #20
 8000c28:	f007 faa6 	bl	8008178 <malloc>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	60fb      	str	r3, [r7, #12]
    uint8_t * buffer = malloc(sizeof(IBUS_BUFFER_LENGTH));
 8000c30:	2004      	movs	r0, #4
 8000c32:	f007 faa1 	bl	8008178 <malloc>
 8000c36:	4603      	mov	r3, r0
 8000c38:	60bb      	str	r3, [r7, #8]
    uint16_t * data = malloc(sizeof(uint16_t));
 8000c3a:	2002      	movs	r0, #2
 8000c3c:	f007 fa9c 	bl	8008178 <malloc>
 8000c40:	4603      	mov	r3, r0
 8000c42:	607b      	str	r3, [r7, #4]
#endif

    /* Initialize iBus_HandleTypeDef structure */
    if (hibus) {
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d00b      	beq.n	8000c62 <FSA8S_RC_Init+0x4e>
        hibus->buffer = buffer;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	68ba      	ldr	r2, [r7, #8]
 8000c4e:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGTH;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2220      	movs	r2, #32
 8000c54:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	220e      	movs	r2, #14
 8000c60:	741a      	strb	r2, [r3, #16]
    }

    /* Initialize iBus communication */
    if (iBus_Init(hibus)) {
 8000c62:	68f8      	ldr	r0, [r7, #12]
 8000c64:	f7ff fee6 	bl	8000a34 <iBus_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d004      	beq.n	8000c78 <FSA8S_RC_Init+0x64>
        /* Initialization was successful */
        alreadyInitialized = true;
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <FSA8S_RC_Init+0x70>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	701a      	strb	r2, [r3, #0]
        return hibus;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	e000      	b.n	8000c7a <FSA8S_RC_Init+0x66>
    } else {
        /* Initialization was unsuccessful */
        return NULL;
 8000c78:	2300      	movs	r3, #0
    }
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000220 	.word	0x20000220

08000c88 <FSA8S_RC_ReadChannel>:

uint16_t FSA8S_RC_ReadChannel(iBus_HandleTypeDef_t * hibus, FSA8S_RC_CHANNEL_t channel) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	70fb      	strb	r3, [r7, #3]

    /* Check if first two bytes are IBUS_LENGTH and IBUS_COMMAND */
    while (1) {
        while (!FSA8S_RC_CheckFirstBytes(hibus)) {
 8000c94:	bf00      	nop
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff fef8 	bl	8000a8c <FSA8S_RC_CheckFirstBytes>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	f083 0301 	eor.w	r3, r3, #1
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1f6      	bne.n	8000c96 <FSA8S_RC_ReadChannel+0xe>
            /* Wait until a data frame with the right format is received */
        }

        /* Perform a checksum */
        if (!FSA8S_RC_Checksum(hibus)) {
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ff07 	bl	8000abc <FSA8S_RC_Checksum>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	f083 0301 	eor.w	r3, r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <FSA8S_RC_ReadChannel+0x36>
            /* Received data is corrupted */
            continue;
 8000cba:	bf00      	nop
        while (!FSA8S_RC_CheckFirstBytes(hibus)) {
 8000cbc:	e7ea      	b.n	8000c94 <FSA8S_RC_ReadChannel+0xc>
        } else {
            /* Received data is correct */
            break;
 8000cbe:	bf00      	nop
        }
    }

    /* Get channels data in little-endian */
    FSA8S_RC_AmendData(hibus);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ff35 	bl	8000b30 <FSA8S_RC_AmendData>

    return hibus->data[channel - 1];
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	68da      	ldr	r2, [r3, #12]
 8000cca:	78fb      	ldrb	r3, [r7, #3]
 8000ccc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	881b      	ldrh	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	; (8000d20 <HAL_Init+0x40>)
 8000cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <HAL_Init+0x40>)
 8000cf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <HAL_Init+0x40>)
 8000d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d08:	2003      	movs	r0, #3
 8000d0a:	f000 f94f 	bl	8000fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0e:	200f      	movs	r0, #15
 8000d10:	f000 f808 	bl	8000d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d14:	f7ff fd00 	bl	8000718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023c00 	.word	0x40023c00

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_InitTick+0x54>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_InitTick+0x58>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4619      	mov	r1, r3
 8000d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f967 	bl	8001016 <HAL_SYSTICK_Config>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e00e      	b.n	8000d70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b0f      	cmp	r3, #15
 8000d56:	d80a      	bhi.n	8000d6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d60:	f000 f92f 	bl	8000fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d64:	4a06      	ldr	r2, [pc, #24]	; (8000d80 <HAL_InitTick+0x5c>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e000      	b.n	8000d70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	20000018 	.word	0x20000018
 8000d80:	20000014 	.word	0x20000014

08000d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x20>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x24>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_IncTick+0x24>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000018 	.word	0x20000018
 8000da8:	20000224 	.word	0x20000224

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <HAL_GetTick+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000224 	.word	0x20000224

08000dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dcc:	f7ff ffee 	bl	8000dac <HAL_GetTick>
 8000dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ddc:	d005      	beq.n	8000dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <HAL_Delay+0x44>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4413      	add	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dea:	bf00      	nop
 8000dec:	f7ff ffde 	bl	8000dac <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d8f7      	bhi.n	8000dec <HAL_Delay+0x28>
  {
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000018 	.word	0x20000018

08000e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3e:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <__NVIC_GetPriorityGrouping+0x18>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	f003 0307 	and.w	r3, r3, #7
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db0b      	blt.n	8000e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 021f 	and.w	r2, r3, #31
 8000e88:	4907      	ldr	r1, [pc, #28]	; (8000ea8 <__NVIC_EnableIRQ+0x38>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	2001      	movs	r0, #1
 8000e92:	fa00 f202 	lsl.w	r2, r0, r2
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	; (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	; (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
         );
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	; 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f78:	d301      	bcc.n	8000f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00f      	b.n	8000f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <SysTick_Config+0x40>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f86:	210f      	movs	r1, #15
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f8c:	f7ff ff8e 	bl	8000eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <SysTick_Config+0x40>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f96:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <SysTick_Config+0x40>)
 8000f98:	2207      	movs	r2, #7
 8000f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	e000e010 	.word	0xe000e010

08000fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ff29 	bl	8000e0c <__NVIC_SetPriorityGrouping>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd4:	f7ff ff3e 	bl	8000e54 <__NVIC_GetPriorityGrouping>
 8000fd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68b9      	ldr	r1, [r7, #8]
 8000fde:	6978      	ldr	r0, [r7, #20]
 8000fe0:	f7ff ff8e 	bl	8000f00 <NVIC_EncodePriority>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff5d 	bl	8000eac <__NVIC_SetPriority>
}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff31 	bl	8000e70 <__NVIC_EnableIRQ>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ffa2 	bl	8000f68 <SysTick_Config>
 8001024:	4603      	mov	r3, r0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff feb6 	bl	8000dac <HAL_GetTick>
 8001040:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d101      	bne.n	800104c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e099      	b.n	8001180 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2202      	movs	r2, #2
 8001050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0201 	bic.w	r2, r2, #1
 800106a:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800106c:	e00f      	b.n	800108e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800106e:	f7ff fe9d 	bl	8000dac <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b05      	cmp	r3, #5
 800107a:	d908      	bls.n	800108e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2220      	movs	r2, #32
 8001080:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2203      	movs	r2, #3
 8001086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e078      	b.n	8001180 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1e8      	bne.n	800106e <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	4b38      	ldr	r3, [pc, #224]	; (8001188 <HAL_DMA_Init+0x158>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	4313      	orrs	r3, r2
 80010de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	d107      	bne.n	80010f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	4313      	orrs	r3, r2
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f023 0307 	bic.w	r3, r3, #7
 800110e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	4313      	orrs	r3, r2
 8001118:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	2b04      	cmp	r3, #4
 8001120:	d117      	bne.n	8001152 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	4313      	orrs	r3, r2
 800112a:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00e      	beq.n	8001152 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 f8e5 	bl	8001304 <DMA_CheckFifoParam>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d008      	beq.n	8001152 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2240      	movs	r2, #64	; 0x40
 8001144:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e016      	b.n	8001180 <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f89c 	bl	8001298 <DMA_CalcBaseAndBitshift>
 8001160:	4603      	mov	r3, r0
 8001162:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001168:	223f      	movs	r2, #63	; 0x3f
 800116a:	409a      	lsls	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	f010803f 	.word	0xf010803f

0800118c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d101      	bne.n	80011b2 <HAL_DMA_Start_IT+0x26>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e040      	b.n	8001234 <HAL_DMA_Start_IT+0xa8>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d12f      	bne.n	8001226 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2202      	movs	r2, #2
 80011ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2200      	movs	r2, #0
 80011d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f000 f82e 	bl	800123c <DMA_SetConfig>

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e4:	223f      	movs	r2, #63	; 0x3f
 80011e6:	409a      	lsls	r2, r3
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	609a      	str	r2, [r3, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 0216 	orr.w	r2, r2, #22
 80011fa:	601a      	str	r2, [r3, #0]

    if(hdma->XferHalfCpltCallback != NULL)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	2b00      	cmp	r3, #0
 8001202:	d007      	beq.n	8001214 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f042 0208 	orr.w	r2, r2, #8
 8001212:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 0201 	orr.w	r2, r2, #1
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	e005      	b.n	8001232 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 800122e:	2302      	movs	r3, #2
 8001230:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001232:	7dfb      	ldrb	r3, [r7, #23]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001258:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	2b40      	cmp	r3, #64	; 0x40
 8001268:	d108      	bne.n	800127c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800127a:	e007      	b.n	800128c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68ba      	ldr	r2, [r7, #8]
 8001282:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	60da      	str	r2, [r3, #12]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	3b10      	subs	r3, #16
 80012a8:	4a14      	ldr	r2, [pc, #80]	; (80012fc <DMA_CalcBaseAndBitshift+0x64>)
 80012aa:	fba2 2303 	umull	r2, r3, r2, r3
 80012ae:	091b      	lsrs	r3, r3, #4
 80012b0:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80012b2:	4a13      	ldr	r2, [pc, #76]	; (8001300 <DMA_CalcBaseAndBitshift+0x68>)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d909      	bls.n	80012da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012ce:	f023 0303 	bic.w	r3, r3, #3
 80012d2:	1d1a      	adds	r2, r3, #4
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	659a      	str	r2, [r3, #88]	; 0x58
 80012d8:	e007      	b.n	80012ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012e2:	f023 0303 	bic.w	r3, r3, #3
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	aaaaaaab 	.word	0xaaaaaaab
 8001300:	08008b5c 	.word	0x08008b5c

08001304 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001314:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d11f      	bne.n	800135e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	2b03      	cmp	r3, #3
 8001322:	d856      	bhi.n	80013d2 <DMA_CheckFifoParam+0xce>
 8001324:	a201      	add	r2, pc, #4	; (adr r2, 800132c <DMA_CheckFifoParam+0x28>)
 8001326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132a:	bf00      	nop
 800132c:	0800133d 	.word	0x0800133d
 8001330:	0800134f 	.word	0x0800134f
 8001334:	0800133d 	.word	0x0800133d
 8001338:	080013d3 	.word	0x080013d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001340:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d046      	beq.n	80013d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800134c:	e043      	b.n	80013d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001356:	d140      	bne.n	80013da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800135c:	e03d      	b.n	80013da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001366:	d121      	bne.n	80013ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	2b03      	cmp	r3, #3
 800136c:	d837      	bhi.n	80013de <DMA_CheckFifoParam+0xda>
 800136e:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <DMA_CheckFifoParam+0x70>)
 8001370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001374:	08001385 	.word	0x08001385
 8001378:	0800138b 	.word	0x0800138b
 800137c:	08001385 	.word	0x08001385
 8001380:	0800139d 	.word	0x0800139d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	73fb      	strb	r3, [r7, #15]
      break;
 8001388:	e030      	b.n	80013ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d025      	beq.n	80013e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800139a:	e022      	b.n	80013e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013a4:	d11f      	bne.n	80013e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013aa:	e01c      	b.n	80013e6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d903      	bls.n	80013ba <DMA_CheckFifoParam+0xb6>
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d003      	beq.n	80013c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80013b8:	e018      	b.n	80013ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	73fb      	strb	r3, [r7, #15]
      break;
 80013be:	e015      	b.n	80013ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d00e      	beq.n	80013ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
      break;
 80013d0:	e00b      	b.n	80013ea <DMA_CheckFifoParam+0xe6>
      break;
 80013d2:	bf00      	nop
 80013d4:	e00a      	b.n	80013ec <DMA_CheckFifoParam+0xe8>
      break;
 80013d6:	bf00      	nop
 80013d8:	e008      	b.n	80013ec <DMA_CheckFifoParam+0xe8>
      break;
 80013da:	bf00      	nop
 80013dc:	e006      	b.n	80013ec <DMA_CheckFifoParam+0xe8>
      break;
 80013de:	bf00      	nop
 80013e0:	e004      	b.n	80013ec <DMA_CheckFifoParam+0xe8>
      break;
 80013e2:	bf00      	nop
 80013e4:	e002      	b.n	80013ec <DMA_CheckFifoParam+0xe8>
      break;
 80013e6:	bf00      	nop
 80013e8:	e000      	b.n	80013ec <DMA_CheckFifoParam+0xe8>
      break;
 80013ea:	bf00      	nop
    }
  }

  return status;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop

080013fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
 8001416:	e159      	b.n	80016cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001418:	2201      	movs	r2, #1
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	429a      	cmp	r2, r3
 8001432:	f040 8148 	bne.w	80016c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	2b01      	cmp	r3, #1
 8001440:	d005      	beq.n	800144e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800144a:	2b02      	cmp	r3, #2
 800144c:	d130      	bne.n	80014b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	2203      	movs	r2, #3
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	68da      	ldr	r2, [r3, #12]
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001484:	2201      	movs	r2, #1
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	091b      	lsrs	r3, r3, #4
 800149a:	f003 0201 	and.w	r2, r3, #1
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d017      	beq.n	80014ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	2203      	movs	r2, #3
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d123      	bne.n	8001540 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	08da      	lsrs	r2, r3, #3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3208      	adds	r2, #8
 8001500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	220f      	movs	r2, #15
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	08da      	lsrs	r2, r3, #3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3208      	adds	r2, #8
 800153a:	69b9      	ldr	r1, [r7, #24]
 800153c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	2203      	movs	r2, #3
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0203 	and.w	r2, r3, #3
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 80a2 	beq.w	80016c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	4b57      	ldr	r3, [pc, #348]	; (80016e4 <HAL_GPIO_Init+0x2e8>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	4a56      	ldr	r2, [pc, #344]	; (80016e4 <HAL_GPIO_Init+0x2e8>)
 800158c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001590:	6453      	str	r3, [r2, #68]	; 0x44
 8001592:	4b54      	ldr	r3, [pc, #336]	; (80016e4 <HAL_GPIO_Init+0x2e8>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800159e:	4a52      	ldr	r2, [pc, #328]	; (80016e8 <HAL_GPIO_Init+0x2ec>)
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	089b      	lsrs	r3, r3, #2
 80015a4:	3302      	adds	r3, #2
 80015a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	220f      	movs	r2, #15
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a49      	ldr	r2, [pc, #292]	; (80016ec <HAL_GPIO_Init+0x2f0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d019      	beq.n	80015fe <HAL_GPIO_Init+0x202>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a48      	ldr	r2, [pc, #288]	; (80016f0 <HAL_GPIO_Init+0x2f4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d013      	beq.n	80015fa <HAL_GPIO_Init+0x1fe>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a47      	ldr	r2, [pc, #284]	; (80016f4 <HAL_GPIO_Init+0x2f8>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d00d      	beq.n	80015f6 <HAL_GPIO_Init+0x1fa>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a46      	ldr	r2, [pc, #280]	; (80016f8 <HAL_GPIO_Init+0x2fc>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d007      	beq.n	80015f2 <HAL_GPIO_Init+0x1f6>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a45      	ldr	r2, [pc, #276]	; (80016fc <HAL_GPIO_Init+0x300>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d101      	bne.n	80015ee <HAL_GPIO_Init+0x1f2>
 80015ea:	2304      	movs	r3, #4
 80015ec:	e008      	b.n	8001600 <HAL_GPIO_Init+0x204>
 80015ee:	2307      	movs	r3, #7
 80015f0:	e006      	b.n	8001600 <HAL_GPIO_Init+0x204>
 80015f2:	2303      	movs	r3, #3
 80015f4:	e004      	b.n	8001600 <HAL_GPIO_Init+0x204>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e002      	b.n	8001600 <HAL_GPIO_Init+0x204>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <HAL_GPIO_Init+0x204>
 80015fe:	2300      	movs	r3, #0
 8001600:	69fa      	ldr	r2, [r7, #28]
 8001602:	f002 0203 	and.w	r2, r2, #3
 8001606:	0092      	lsls	r2, r2, #2
 8001608:	4093      	lsls	r3, r2
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001610:	4935      	ldr	r1, [pc, #212]	; (80016e8 <HAL_GPIO_Init+0x2ec>)
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	089b      	lsrs	r3, r3, #2
 8001616:	3302      	adds	r3, #2
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800161e:	4b38      	ldr	r3, [pc, #224]	; (8001700 <HAL_GPIO_Init+0x304>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001642:	4a2f      	ldr	r2, [pc, #188]	; (8001700 <HAL_GPIO_Init+0x304>)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001648:	4b2d      	ldr	r3, [pc, #180]	; (8001700 <HAL_GPIO_Init+0x304>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800166c:	4a24      	ldr	r2, [pc, #144]	; (8001700 <HAL_GPIO_Init+0x304>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001672:	4b23      	ldr	r3, [pc, #140]	; (8001700 <HAL_GPIO_Init+0x304>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001696:	4a1a      	ldr	r2, [pc, #104]	; (8001700 <HAL_GPIO_Init+0x304>)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <HAL_GPIO_Init+0x304>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016c0:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <HAL_GPIO_Init+0x304>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3301      	adds	r3, #1
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	2b0f      	cmp	r3, #15
 80016d0:	f67f aea2 	bls.w	8001418 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40013800 	.word	0x40013800
 80016ec:	40020000 	.word	0x40020000
 80016f0:	40020400 	.word	0x40020400
 80016f4:	40020800 	.word	0x40020800
 80016f8:	40020c00 	.word	0x40020c00
 80016fc:	40021000 	.word	0x40021000
 8001700:	40013c00 	.word	0x40013c00

08001704 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001706:	b08f      	sub	sp, #60	; 0x3c
 8001708:	af0a      	add	r7, sp, #40	; 0x28
 800170a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e10f      	b.n	8001936 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d106      	bne.n	8001736 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f006 fa17 	bl	8007b64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2203      	movs	r2, #3
 800173a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f002 fcfe 	bl	8004156 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	687e      	ldr	r6, [r7, #4]
 8001762:	466d      	mov	r5, sp
 8001764:	f106 0410 	add.w	r4, r6, #16
 8001768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001770:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001774:	e885 0003 	stmia.w	r5, {r0, r1}
 8001778:	1d33      	adds	r3, r6, #4
 800177a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800177c:	6838      	ldr	r0, [r7, #0]
 800177e:	f002 fbd5 	bl	8003f2c <USB_CoreInit>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2202      	movs	r2, #2
 800178c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0d0      	b.n	8001936 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f002 fcec 	bl	8004178 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a0:	2300      	movs	r3, #0
 80017a2:	73fb      	strb	r3, [r7, #15]
 80017a4:	e04a      	b.n	800183c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017a6:	7bfa      	ldrb	r2, [r7, #15]
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4413      	add	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	440b      	add	r3, r1
 80017b4:	333d      	adds	r3, #61	; 0x3d
 80017b6:	2201      	movs	r2, #1
 80017b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017ba:	7bfa      	ldrb	r2, [r7, #15]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4413      	add	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	333c      	adds	r3, #60	; 0x3c
 80017ca:	7bfa      	ldrb	r2, [r7, #15]
 80017cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017ce:	7bfa      	ldrb	r2, [r7, #15]
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	b298      	uxth	r0, r3
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	3344      	adds	r3, #68	; 0x44
 80017e2:	4602      	mov	r2, r0
 80017e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017e6:	7bfa      	ldrb	r2, [r7, #15]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	3340      	adds	r3, #64	; 0x40
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017fa:	7bfa      	ldrb	r2, [r7, #15]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	4413      	add	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	3348      	adds	r3, #72	; 0x48
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800180e:	7bfa      	ldrb	r2, [r7, #15]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	334c      	adds	r3, #76	; 0x4c
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	3354      	adds	r3, #84	; 0x54
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	3301      	adds	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	429a      	cmp	r2, r3
 8001844:	d3af      	bcc.n	80017a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001846:	2300      	movs	r3, #0
 8001848:	73fb      	strb	r3, [r7, #15]
 800184a:	e044      	b.n	80018d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800184c:	7bfa      	ldrb	r2, [r7, #15]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001862:	7bfa      	ldrb	r2, [r7, #15]
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001878:	7bfa      	ldrb	r2, [r7, #15]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4413      	add	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018a4:	7bfa      	ldrb	r2, [r7, #15]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4413      	add	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018ba:	7bfa      	ldrb	r2, [r7, #15]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4413      	add	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	3301      	adds	r3, #1
 80018d4:	73fb      	strb	r3, [r7, #15]
 80018d6:	7bfa      	ldrb	r2, [r7, #15]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d3b5      	bcc.n	800184c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	687e      	ldr	r6, [r7, #4]
 80018e8:	466d      	mov	r5, sp
 80018ea:	f106 0410 	add.w	r4, r6, #16
 80018ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80018fe:	1d33      	adds	r3, r6, #4
 8001900:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001902:	6838      	ldr	r0, [r7, #0]
 8001904:	f002 fc84 	bl	8004210 <USB_DevInit>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2202      	movs	r2, #2
 8001912:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e00d      	b.n	8001936 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f003 fdd3 	bl	80054da <USB_DevDisconnect>

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800193e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b084      	sub	sp, #16
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001952:	2b01      	cmp	r3, #1
 8001954:	d101      	bne.n	800195a <HAL_PCD_Start+0x1c>
 8001956:	2302      	movs	r3, #2
 8001958:	e020      	b.n	800199c <HAL_PCD_Start+0x5e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	2b01      	cmp	r3, #1
 8001968:	d109      	bne.n	800197e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800196e:	2b01      	cmp	r3, #1
 8001970:	d005      	beq.n	800197e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001976:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f002 fbd6 	bl	8004134 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f003 fd83 	bl	8005498 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019a4:	b590      	push	{r4, r7, lr}
 80019a6:	b08d      	sub	sp, #52	; 0x34
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 fe41 	bl	8005642 <USB_GetMode>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f040 848a 	bne.w	80022dc <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f003 fda5 	bl	800551c <USB_ReadInterrupts>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 8480 	beq.w	80022da <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	0a1b      	lsrs	r3, r3, #8
 80019e4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 fd92 	bl	800551c <USB_ReadInterrupts>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d107      	bne.n	8001a12 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695a      	ldr	r2, [r3, #20]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f002 0202 	and.w	r2, r2, #2
 8001a10:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 fd80 	bl	800551c <USB_ReadInterrupts>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f003 0310 	and.w	r3, r3, #16
 8001a22:	2b10      	cmp	r3, #16
 8001a24:	d161      	bne.n	8001aea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	699a      	ldr	r2, [r3, #24]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0210 	bic.w	r2, r2, #16
 8001a34:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	f003 020f 	and.w	r2, r3, #15
 8001a42:	4613      	mov	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	4413      	add	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	3304      	adds	r3, #4
 8001a54:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	0c5b      	lsrs	r3, r3, #17
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d124      	bne.n	8001aac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d035      	beq.n	8001ada <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	6a38      	ldr	r0, [r7, #32]
 8001a82:	f003 fbb7 	bl	80051f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	691a      	ldr	r2, [r3, #16]
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a92:	441a      	add	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	6a1a      	ldr	r2, [r3, #32]
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	091b      	lsrs	r3, r3, #4
 8001aa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aa4:	441a      	add	r2, r3
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	621a      	str	r2, [r3, #32]
 8001aaa:	e016      	b.n	8001ada <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	0c5b      	lsrs	r3, r3, #17
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	2b06      	cmp	r3, #6
 8001ab6:	d110      	bne.n	8001ada <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001abe:	2208      	movs	r2, #8
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	6a38      	ldr	r0, [r7, #32]
 8001ac4:	f003 fb96 	bl	80051f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	6a1a      	ldr	r2, [r3, #32]
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	091b      	lsrs	r3, r3, #4
 8001ad0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ad4:	441a      	add	r2, r3
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	699a      	ldr	r2, [r3, #24]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 0210 	orr.w	r2, r2, #16
 8001ae8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 fd14 	bl	800551c <USB_ReadInterrupts>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001afa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001afe:	f040 80a7 	bne.w	8001c50 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f003 fd19 	bl	8005542 <USB_ReadDevAllOutEpInterrupt>
 8001b10:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001b12:	e099      	b.n	8001c48 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 808e 	beq.w	8001c3c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	4611      	mov	r1, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 fd3d 	bl	80055aa <USB_ReadDevOutEPInterrupt>
 8001b30:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00c      	beq.n	8001b56 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	015a      	lsls	r2, r3, #5
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	4413      	add	r3, r2
 8001b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fec3 	bl	80028dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00c      	beq.n	8001b7a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	015a      	lsls	r2, r3, #5
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	4413      	add	r3, r2
 8001b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	2308      	movs	r3, #8
 8001b70:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 ff99 	bl	8002aac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d008      	beq.n	8001b96 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	015a      	lsls	r2, r3, #5
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b90:	461a      	mov	r2, r3
 8001b92:	2310      	movs	r3, #16
 8001b94:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d030      	beq.n	8001c02 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba8:	2b80      	cmp	r3, #128	; 0x80
 8001baa:	d109      	bne.n	8001bc0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bbe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	78db      	ldrb	r3, [r3, #3]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d108      	bne.n	8001bf0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	2200      	movs	r2, #0
 8001be2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	4619      	mov	r1, r3
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f006 f8b6 	bl	8007d5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	015a      	lsls	r2, r3, #5
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	2302      	movs	r3, #2
 8001c00:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	f003 0320 	and.w	r3, r3, #32
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d008      	beq.n	8001c1e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	015a      	lsls	r2, r3, #5
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c18:	461a      	mov	r2, r3
 8001c1a:	2320      	movs	r3, #32
 8001c1c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d009      	beq.n	8001c3c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	015a      	lsls	r2, r3, #5
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	4413      	add	r3, r2
 8001c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c34:	461a      	mov	r2, r3
 8001c36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c3a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	3301      	adds	r3, #1
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c44:	085b      	lsrs	r3, r3, #1
 8001c46:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f47f af62 	bne.w	8001b14 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f003 fc61 	bl	800551c <USB_ReadInterrupts>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c64:	f040 80db 	bne.w	8001e1e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f003 fc82 	bl	8005576 <USB_ReadDevAllInEpInterrupt>
 8001c72:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001c78:	e0cd      	b.n	8001e16 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 80c2 	beq.w	8001e0a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	4611      	mov	r1, r2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f003 fca8 	bl	80055e6 <USB_ReadDevInEPInterrupt>
 8001c96:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d057      	beq.n	8001d52 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	f003 030f 	and.w	r3, r3, #15
 8001ca8:	2201      	movs	r2, #1
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69f9      	ldr	r1, [r7, #28]
 8001cbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	015a      	lsls	r2, r3, #5
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d132      	bne.n	8001d46 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4413      	add	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	334c      	adds	r3, #76	; 0x4c
 8001cf0:	6819      	ldr	r1, [r3, #0]
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4403      	add	r3, r0
 8001d00:	3348      	adds	r3, #72	; 0x48
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4419      	add	r1, r3
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4413      	add	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4403      	add	r3, r0
 8001d14:	334c      	adds	r3, #76	; 0x4c
 8001d16:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d113      	bne.n	8001d46 <HAL_PCD_IRQHandler+0x3a2>
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d22:	4613      	mov	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	3354      	adds	r3, #84	; 0x54
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d108      	bne.n	8001d46 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2101      	movs	r1, #1
 8001d42:	f003 fcaf 	bl	80056a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f005 ff8a 	bl	8007c66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	015a      	lsls	r2, r3, #5
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	4413      	add	r3, r2
 8001d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d68:	461a      	mov	r2, r3
 8001d6a:	2308      	movs	r3, #8
 8001d6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	015a      	lsls	r2, r3, #5
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	4413      	add	r3, r2
 8001d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d84:	461a      	mov	r2, r3
 8001d86:	2310      	movs	r3, #16
 8001d88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	015a      	lsls	r2, r3, #5
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001da0:	461a      	mov	r2, r3
 8001da2:	2340      	movs	r3, #64	; 0x40
 8001da4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d023      	beq.n	8001df8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001db0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001db2:	6a38      	ldr	r0, [r7, #32]
 8001db4:	f002 fb90 	bl	80044d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dba:	4613      	mov	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	3338      	adds	r3, #56	; 0x38
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3304      	adds	r3, #4
 8001dca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	78db      	ldrb	r3, [r3, #3]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d108      	bne.n	8001de6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	4619      	mov	r1, r3
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f005 ffcd 	bl	8007d80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001df2:	461a      	mov	r2, r3
 8001df4:	2302      	movs	r3, #2
 8001df6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 fcdb 	bl	80027c0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e12:	085b      	lsrs	r3, r3, #1
 8001e14:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f47f af2e 	bne.w	8001c7a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f003 fb7a 	bl	800551c <USB_ReadInterrupts>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e32:	d122      	bne.n	8001e7a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	69fa      	ldr	r2, [r7, #28]
 8001e3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e42:	f023 0301 	bic.w	r3, r3, #1
 8001e46:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d108      	bne.n	8001e64 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 fec3 	bl	8002be8 <HAL_PCDEx_LPM_Callback>
 8001e62:	e002      	b.n	8001e6a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f005 ff6b 	bl	8007d40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	695a      	ldr	r2, [r3, #20]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f003 fb4c 	bl	800551c <USB_ReadInterrupts>
 8001e84:	4603      	mov	r3, r0
 8001e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e8e:	d112      	bne.n	8001eb6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d102      	bne.n	8001ea6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f005 ff27 	bl	8007cf4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695a      	ldr	r2, [r3, #20]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001eb4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 fb2e 	bl	800551c <USB_ReadInterrupts>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eca:	f040 80b7 	bne.w	800203c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2110      	movs	r1, #16
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f002 faf5 	bl	80044d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef2:	e046      	b.n	8001f82 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef6:	015a      	lsls	r2, r3, #5
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f00:	461a      	mov	r2, r3
 8001f02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f06:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0a:	015a      	lsls	r2, r3, #5
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	4413      	add	r3, r2
 8001f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f18:	0151      	lsls	r1, r2, #5
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	440a      	add	r2, r1
 8001f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2a:	015a      	lsls	r2, r3, #5
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f34:	461a      	mov	r2, r3
 8001f36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f3a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3e:	015a      	lsls	r2, r3, #5
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	4413      	add	r3, r2
 8001f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f4c:	0151      	lsls	r1, r2, #5
 8001f4e:	69fa      	ldr	r2, [r7, #28]
 8001f50:	440a      	add	r2, r1
 8001f52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f5a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f6c:	0151      	lsls	r1, r2, #5
 8001f6e:	69fa      	ldr	r2, [r7, #28]
 8001f70:	440a      	add	r2, r1
 8001f72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f7a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7e:	3301      	adds	r3, #1
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d3b3      	bcc.n	8001ef4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f9a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001f9e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d016      	beq.n	8001fd6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fb8:	f043 030b 	orr.w	r3, r3, #11
 8001fbc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc8:	69fa      	ldr	r2, [r7, #28]
 8001fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fce:	f043 030b 	orr.w	r3, r3, #11
 8001fd2:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd4:	e015      	b.n	8002002 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fe4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fe8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001fec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	69fa      	ldr	r2, [r7, #28]
 8001ff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ffc:	f043 030b 	orr.w	r3, r3, #11
 8002000:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002010:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002014:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002026:	461a      	mov	r2, r3
 8002028:	f003 fb3c 	bl	80056a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800203a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f003 fa6b 	bl	800551c <USB_ReadInterrupts>
 8002046:	4603      	mov	r3, r0
 8002048:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800204c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002050:	d124      	bne.n	800209c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f003 fb01 	bl	800565e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f002 fab6 	bl	80045d2 <USB_GetDevSpeed>
 8002066:	4603      	mov	r3, r0
 8002068:	461a      	mov	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681c      	ldr	r4, [r3, #0]
 8002072:	f001 f9e9 	bl	8003448 <HAL_RCC_GetHCLKFreq>
 8002076:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800207c:	b2db      	uxtb	r3, r3
 800207e:	461a      	mov	r2, r3
 8002080:	4620      	mov	r0, r4
 8002082:	f001 ffb5 	bl	8003ff0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f005 fe15 	bl	8007cb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800209a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f003 fa3b 	bl	800551c <USB_ReadInterrupts>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d10a      	bne.n	80020c6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f005 fdf2 	bl	8007c9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f002 0208 	and.w	r2, r2, #8
 80020c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f003 fa26 	bl	800551c <USB_ReadInterrupts>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d6:	2b80      	cmp	r3, #128	; 0x80
 80020d8:	d122      	bne.n	8002120 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020e6:	2301      	movs	r3, #1
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ea:	e014      	b.n	8002116 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d105      	bne.n	8002110 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	b2db      	uxtb	r3, r3
 8002108:	4619      	mov	r1, r3
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 fb27 	bl	800275e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	3301      	adds	r3, #1
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211c:	429a      	cmp	r2, r3
 800211e:	d3e5      	bcc.n	80020ec <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f003 f9f9 	bl	800551c <USB_ReadInterrupts>
 800212a:	4603      	mov	r3, r0
 800212c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002130:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002134:	d13b      	bne.n	80021ae <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002136:	2301      	movs	r3, #1
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
 800213a:	e02b      	b.n	8002194 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	4413      	add	r3, r2
 8002144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	3340      	adds	r3, #64	; 0x40
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d115      	bne.n	800218e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002162:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002164:	2b00      	cmp	r3, #0
 8002166:	da12      	bge.n	800218e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	333f      	adds	r3, #63	; 0x3f
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	b2db      	uxtb	r3, r3
 8002180:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002184:	b2db      	uxtb	r3, r3
 8002186:	4619      	mov	r1, r3
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 fae8 	bl	800275e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	3301      	adds	r3, #1
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219a:	429a      	cmp	r2, r3
 800219c:	d3ce      	bcc.n	800213c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	695a      	ldr	r2, [r3, #20]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80021ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f003 f9b2 	bl	800551c <USB_ReadInterrupts>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021c2:	d155      	bne.n	8002270 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021c4:	2301      	movs	r3, #1
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
 80021c8:	e045      	b.n	8002256 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021de:	4613      	mov	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d12e      	bne.n	8002250 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80021f2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	da2b      	bge.n	8002250 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002204:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002208:	429a      	cmp	r2, r3
 800220a:	d121      	bne.n	8002250 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800221e:	2201      	movs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10a      	bne.n	8002250 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	69fa      	ldr	r2, [r7, #28]
 8002244:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800224c:	6053      	str	r3, [r2, #4]
            break;
 800224e:	e007      	b.n	8002260 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	3301      	adds	r3, #1
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225c:	429a      	cmp	r2, r3
 800225e:	d3b4      	bcc.n	80021ca <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800226e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f003 f951 	bl	800551c <USB_ReadInterrupts>
 800227a:	4603      	mov	r3, r0
 800227c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002284:	d10a      	bne.n	800229c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f005 fd8c 	bl	8007da4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800229a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f003 f93b 	bl	800551c <USB_ReadInterrupts>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d115      	bne.n	80022dc <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f005 fd7c 	bl	8007dc0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6859      	ldr	r1, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	e000      	b.n	80022dc <HAL_PCD_IRQHandler+0x938>
      return;
 80022da:	bf00      	nop
    }
  }
}
 80022dc:	3734      	adds	r7, #52	; 0x34
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd90      	pop	{r4, r7, pc}

080022e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	460b      	mov	r3, r1
 80022ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_PCD_SetAddress+0x1a>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e013      	b.n	8002324 <HAL_PCD_SetAddress+0x42>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	78fa      	ldrb	r2, [r7, #3]
 8002308:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	78fa      	ldrb	r2, [r7, #3]
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f003 f899 	bl	800544c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	4608      	mov	r0, r1
 8002336:	4611      	mov	r1, r2
 8002338:	461a      	mov	r2, r3
 800233a:	4603      	mov	r3, r0
 800233c:	70fb      	strb	r3, [r7, #3]
 800233e:	460b      	mov	r3, r1
 8002340:	803b      	strh	r3, [r7, #0]
 8002342:	4613      	mov	r3, r2
 8002344:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800234a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800234e:	2b00      	cmp	r3, #0
 8002350:	da0f      	bge.n	8002372 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	f003 020f 	and.w	r2, r3, #15
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	3338      	adds	r3, #56	; 0x38
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	3304      	adds	r3, #4
 8002368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2201      	movs	r2, #1
 800236e:	705a      	strb	r2, [r3, #1]
 8002370:	e00f      	b.n	8002392 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	f003 020f 	and.w	r2, r3, #15
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	3304      	adds	r3, #4
 800238a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	b2da      	uxtb	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800239e:	883a      	ldrh	r2, [r7, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	78ba      	ldrb	r2, [r7, #2]
 80023a8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	785b      	ldrb	r3, [r3, #1]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d004      	beq.n	80023bc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023bc:	78bb      	ldrb	r3, [r7, #2]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d102      	bne.n	80023c8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_PCD_EP_Open+0xaa>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e00e      	b.n	80023f4 <HAL_PCD_EP_Open+0xc8>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68f9      	ldr	r1, [r7, #12]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f002 f919 	bl	800461c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80023f2:	7afb      	ldrb	r3, [r7, #11]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800240c:	2b00      	cmp	r3, #0
 800240e:	da0f      	bge.n	8002430 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	f003 020f 	and.w	r2, r3, #15
 8002416:	4613      	mov	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	3338      	adds	r3, #56	; 0x38
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	4413      	add	r3, r2
 8002424:	3304      	adds	r3, #4
 8002426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2201      	movs	r2, #1
 800242c:	705a      	strb	r2, [r3, #1]
 800242e:	e00f      	b.n	8002450 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	f003 020f 	and.w	r2, r3, #15
 8002436:	4613      	mov	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	3304      	adds	r3, #4
 8002448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	b2da      	uxtb	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_PCD_EP_Close+0x6e>
 8002466:	2302      	movs	r3, #2
 8002468:	e00e      	b.n	8002488 <HAL_PCD_EP_Close+0x8c>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68f9      	ldr	r1, [r7, #12]
 8002478:	4618      	mov	r0, r3
 800247a:	f002 f957 	bl	800472c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	603b      	str	r3, [r7, #0]
 800249c:	460b      	mov	r3, r1
 800249e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024a0:	7afb      	ldrb	r3, [r7, #11]
 80024a2:	f003 020f 	and.w	r2, r3, #15
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4413      	add	r3, r2
 80024b6:	3304      	adds	r3, #4
 80024b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2200      	movs	r2, #0
 80024ca:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2200      	movs	r2, #0
 80024d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024d2:	7afb      	ldrb	r3, [r7, #11]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d102      	bne.n	80024ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024ec:	7afb      	ldrb	r3, [r7, #11]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	6979      	ldr	r1, [r7, #20]
 8002504:	f002 fc36 	bl	8004d74 <USB_EP0StartXfer>
 8002508:	e008      	b.n	800251c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	461a      	mov	r2, r3
 8002516:	6979      	ldr	r1, [r7, #20]
 8002518:	f002 f9e4 	bl	80048e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	460b      	mov	r3, r1
 8002530:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002532:	78fb      	ldrb	r3, [r7, #3]
 8002534:	f003 020f 	and.w	r2, r3, #15
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002548:	681b      	ldr	r3, [r3, #0]
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	603b      	str	r3, [r7, #0]
 8002562:	460b      	mov	r3, r1
 8002564:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002566:	7afb      	ldrb	r3, [r7, #11]
 8002568:	f003 020f 	and.w	r2, r3, #15
 800256c:	4613      	mov	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4413      	add	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	3338      	adds	r3, #56	; 0x38
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4413      	add	r3, r2
 800257a:	3304      	adds	r3, #4
 800257c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2200      	movs	r2, #0
 800258e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2201      	movs	r2, #1
 8002594:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002596:	7afb      	ldrb	r3, [r7, #11]
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	b2da      	uxtb	r2, r3
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d102      	bne.n	80025b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025b0:	7afb      	ldrb	r3, [r7, #11]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	6979      	ldr	r1, [r7, #20]
 80025c8:	f002 fbd4 	bl	8004d74 <USB_EP0StartXfer>
 80025cc:	e008      	b.n	80025e0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	6979      	ldr	r1, [r7, #20]
 80025dc:	f002 f982 	bl	80048e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	460b      	mov	r3, r1
 80025f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	f003 020f 	and.w	r2, r3, #15
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	429a      	cmp	r2, r3
 8002602:	d901      	bls.n	8002608 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e050      	b.n	80026aa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800260c:	2b00      	cmp	r3, #0
 800260e:	da0f      	bge.n	8002630 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	f003 020f 	and.w	r2, r3, #15
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	3338      	adds	r3, #56	; 0x38
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	4413      	add	r3, r2
 8002624:	3304      	adds	r3, #4
 8002626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2201      	movs	r2, #1
 800262c:	705a      	strb	r2, [r3, #1]
 800262e:	e00d      	b.n	800264c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002630:	78fa      	ldrb	r2, [r7, #3]
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	3304      	adds	r3, #4
 8002644:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002652:	78fb      	ldrb	r3, [r7, #3]
 8002654:	f003 030f 	and.w	r3, r3, #15
 8002658:	b2da      	uxtb	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_PCD_EP_SetStall+0x82>
 8002668:	2302      	movs	r3, #2
 800266a:	e01e      	b.n	80026aa <HAL_PCD_EP_SetStall+0xc0>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68f9      	ldr	r1, [r7, #12]
 800267a:	4618      	mov	r0, r3
 800267c:	f002 fe12 	bl	80052a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10a      	bne.n	80026a0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	b2d9      	uxtb	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800269a:	461a      	mov	r2, r3
 800269c:	f003 f802 	bl	80056a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	460b      	mov	r3, r1
 80026bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026be:	78fb      	ldrb	r3, [r7, #3]
 80026c0:	f003 020f 	and.w	r2, r3, #15
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d901      	bls.n	80026d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e042      	b.n	8002756 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	da0f      	bge.n	80026f8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	f003 020f 	and.w	r2, r3, #15
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	3338      	adds	r3, #56	; 0x38
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	4413      	add	r3, r2
 80026ec:	3304      	adds	r3, #4
 80026ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2201      	movs	r2, #1
 80026f4:	705a      	strb	r2, [r3, #1]
 80026f6:	e00f      	b.n	8002718 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	f003 020f 	and.w	r2, r3, #15
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	3304      	adds	r3, #4
 8002710:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	b2da      	uxtb	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_PCD_EP_ClrStall+0x86>
 8002734:	2302      	movs	r3, #2
 8002736:	e00e      	b.n	8002756 <HAL_PCD_EP_ClrStall+0xa4>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68f9      	ldr	r1, [r7, #12]
 8002746:	4618      	mov	r0, r3
 8002748:	f002 fe1a 	bl	8005380 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	460b      	mov	r3, r1
 8002768:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800276a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800276e:	2b00      	cmp	r3, #0
 8002770:	da0c      	bge.n	800278c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002772:	78fb      	ldrb	r3, [r7, #3]
 8002774:	f003 020f 	and.w	r2, r3, #15
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	3338      	adds	r3, #56	; 0x38
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	3304      	adds	r3, #4
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	e00c      	b.n	80027a6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	f003 020f 	and.w	r2, r3, #15
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	3304      	adds	r3, #4
 80027a4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68f9      	ldr	r1, [r7, #12]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f002 fc39 	bl	8005024 <USB_EPStopXfer>
 80027b2:	4603      	mov	r3, r0
 80027b4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80027b6:	7afb      	ldrb	r3, [r7, #11]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	; 0x28
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	3338      	adds	r3, #56	; 0x38
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	4413      	add	r3, r2
 80027e4:	3304      	adds	r3, #4
 80027e6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a1a      	ldr	r2, [r3, #32]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d901      	bls.n	80027f8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e06c      	b.n	80028d2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	699a      	ldr	r2, [r3, #24]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	69fa      	ldr	r2, [r7, #28]
 800280a:	429a      	cmp	r2, r3
 800280c:	d902      	bls.n	8002814 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	3303      	adds	r3, #3
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800281c:	e02b      	b.n	8002876 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	429a      	cmp	r2, r3
 8002832:	d902      	bls.n	800283a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3303      	adds	r3, #3
 800283e:	089b      	lsrs	r3, r3, #2
 8002840:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6919      	ldr	r1, [r3, #16]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	b2da      	uxtb	r2, r3
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002852:	b2db      	uxtb	r3, r3
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	4603      	mov	r3, r0
 8002858:	6978      	ldr	r0, [r7, #20]
 800285a:	f002 fc8d 	bl	8005178 <USB_WritePacket>

    ep->xfer_buff  += len;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	441a      	add	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a1a      	ldr	r2, [r3, #32]
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	441a      	add	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4413      	add	r3, r2
 800287e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	429a      	cmp	r2, r3
 800288a:	d809      	bhi.n	80028a0 <PCD_WriteEmptyTxFifo+0xe0>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a1a      	ldr	r2, [r3, #32]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002894:	429a      	cmp	r2, r3
 8002896:	d203      	bcs.n	80028a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1be      	bne.n	800281e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	699a      	ldr	r2, [r3, #24]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d811      	bhi.n	80028d0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	2201      	movs	r2, #1
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	6939      	ldr	r1, [r7, #16]
 80028c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028cc:	4013      	ands	r3, r2
 80028ce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3720      	adds	r7, #32
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	333c      	adds	r3, #60	; 0x3c
 80028f4:	3304      	adds	r3, #4
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4413      	add	r3, r2
 8002902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d17b      	bne.n	8002a0a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	2b00      	cmp	r3, #0
 800291a:	d015      	beq.n	8002948 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	4a61      	ldr	r2, [pc, #388]	; (8002aa4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	f240 80b9 	bls.w	8002a98 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 80b3 	beq.w	8002a98 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	4413      	add	r3, r2
 800293a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800293e:	461a      	mov	r2, r3
 8002940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002944:	6093      	str	r3, [r2, #8]
 8002946:	e0a7      	b.n	8002a98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	4413      	add	r3, r2
 800295a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800295e:	461a      	mov	r2, r3
 8002960:	2320      	movs	r3, #32
 8002962:	6093      	str	r3, [r2, #8]
 8002964:	e098      	b.n	8002a98 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800296c:	2b00      	cmp	r3, #0
 800296e:	f040 8093 	bne.w	8002a98 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	4a4b      	ldr	r2, [pc, #300]	; (8002aa4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d90f      	bls.n	800299a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00a      	beq.n	800299a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	4413      	add	r3, r2
 800298c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002990:	461a      	mov	r2, r3
 8002992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002996:	6093      	str	r3, [r2, #8]
 8002998:	e07e      	b.n	8002a98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	4613      	mov	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	4413      	add	r3, r2
 80029ac:	3304      	adds	r3, #4
 80029ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	69da      	ldr	r2, [r3, #28]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	0159      	lsls	r1, r3, #5
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	440b      	add	r3, r1
 80029bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c6:	1ad2      	subs	r2, r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d114      	bne.n	80029fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029e4:	461a      	mov	r2, r3
 80029e6:	2101      	movs	r1, #1
 80029e8:	f002 fe5c 	bl	80056a4 <USB_EP0_OutStart>
 80029ec:	e006      	b.n	80029fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	441a      	add	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	4619      	mov	r1, r3
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f005 f914 	bl	8007c30 <HAL_PCD_DataOutStageCallback>
 8002a08:	e046      	b.n	8002a98 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	4a26      	ldr	r2, [pc, #152]	; (8002aa8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d124      	bne.n	8002a5c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a28:	461a      	mov	r2, r3
 8002a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a2e:	6093      	str	r3, [r2, #8]
 8002a30:	e032      	b.n	8002a98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2320      	movs	r3, #32
 8002a4c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	4619      	mov	r1, r3
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f005 f8eb 	bl	8007c30 <HAL_PCD_DataOutStageCallback>
 8002a5a:	e01d      	b.n	8002a98 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d114      	bne.n	8002a8c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	4613      	mov	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d108      	bne.n	8002a8c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a84:	461a      	mov	r2, r3
 8002a86:	2100      	movs	r1, #0
 8002a88:	f002 fe0c 	bl	80056a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	4619      	mov	r1, r3
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f005 f8cc 	bl	8007c30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3720      	adds	r7, #32
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	4f54300a 	.word	0x4f54300a
 8002aa8:	4f54310a 	.word	0x4f54310a

08002aac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	333c      	adds	r3, #60	; 0x3c
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4a15      	ldr	r2, [pc, #84]	; (8002b34 <PCD_EP_OutSetupPacket_int+0x88>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d90e      	bls.n	8002b00 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d009      	beq.n	8002b00 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002af8:	461a      	mov	r2, r3
 8002afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002afe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f005 f883 	bl	8007c0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4a0a      	ldr	r2, [pc, #40]	; (8002b34 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d90c      	bls.n	8002b28 <PCD_EP_OutSetupPacket_int+0x7c>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d108      	bne.n	8002b28 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b20:	461a      	mov	r2, r3
 8002b22:	2101      	movs	r1, #1
 8002b24:	f002 fdbe 	bl	80056a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	4f54300a 	.word	0x4f54300a

08002b38 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	70fb      	strb	r3, [r7, #3]
 8002b44:	4613      	mov	r3, r2
 8002b46:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d107      	bne.n	8002b66 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b56:	883b      	ldrh	r3, [r7, #0]
 8002b58:	0419      	lsls	r1, r3, #16
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
 8002b64:	e028      	b.n	8002bb8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	0c1b      	lsrs	r3, r3, #16
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	4413      	add	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b74:	2300      	movs	r3, #0
 8002b76:	73fb      	strb	r3, [r7, #15]
 8002b78:	e00d      	b.n	8002b96 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	3340      	adds	r3, #64	; 0x40
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	0c1b      	lsrs	r3, r3, #16
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	3301      	adds	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
 8002b96:	7bfa      	ldrb	r2, [r7, #15]
 8002b98:	78fb      	ldrb	r3, [r7, #3]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d3ec      	bcc.n	8002b7a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ba0:	883b      	ldrh	r3, [r7, #0]
 8002ba2:	0418      	lsls	r0, r3, #16
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6819      	ldr	r1, [r3, #0]
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	4302      	orrs	r2, r0
 8002bb0:	3340      	adds	r3, #64	; 0x40
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	887a      	ldrh	r2, [r7, #2]
 8002bd8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e267      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d075      	beq.n	8002d0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c1e:	4b88      	ldr	r3, [pc, #544]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 030c 	and.w	r3, r3, #12
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d00c      	beq.n	8002c44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c2a:	4b85      	ldr	r3, [pc, #532]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d112      	bne.n	8002c5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c36:	4b82      	ldr	r3, [pc, #520]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c42:	d10b      	bne.n	8002c5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	4b7e      	ldr	r3, [pc, #504]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d05b      	beq.n	8002d08 <HAL_RCC_OscConfig+0x108>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d157      	bne.n	8002d08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e242      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c64:	d106      	bne.n	8002c74 <HAL_RCC_OscConfig+0x74>
 8002c66:	4b76      	ldr	r3, [pc, #472]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a75      	ldr	r2, [pc, #468]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e01d      	b.n	8002cb0 <HAL_RCC_OscConfig+0xb0>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x98>
 8002c7e:	4b70      	ldr	r3, [pc, #448]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a6f      	ldr	r2, [pc, #444]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	4b6d      	ldr	r3, [pc, #436]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a6c      	ldr	r2, [pc, #432]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e00b      	b.n	8002cb0 <HAL_RCC_OscConfig+0xb0>
 8002c98:	4b69      	ldr	r3, [pc, #420]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a68      	ldr	r2, [pc, #416]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	4b66      	ldr	r3, [pc, #408]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a65      	ldr	r2, [pc, #404]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d013      	beq.n	8002ce0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7fe f878 	bl	8000dac <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7fe f874 	bl	8000dac <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	; 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e207      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	4b5b      	ldr	r3, [pc, #364]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0xc0>
 8002cde:	e014      	b.n	8002d0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7fe f864 	bl	8000dac <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7fe f860 	bl	8000dac <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	; 0x64
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e1f3      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfa:	4b51      	ldr	r3, [pc, #324]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0xe8>
 8002d06:	e000      	b.n	8002d0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d063      	beq.n	8002dde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d16:	4b4a      	ldr	r3, [pc, #296]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d22:	4b47      	ldr	r3, [pc, #284]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d11c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d2e:	4b44      	ldr	r3, [pc, #272]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d116      	bne.n	8002d68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3a:	4b41      	ldr	r3, [pc, #260]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <HAL_RCC_OscConfig+0x152>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d001      	beq.n	8002d52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e1c7      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d52:	4b3b      	ldr	r3, [pc, #236]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4937      	ldr	r1, [pc, #220]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d66:	e03a      	b.n	8002dde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d020      	beq.n	8002db2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d70:	4b34      	ldr	r3, [pc, #208]	; (8002e44 <HAL_RCC_OscConfig+0x244>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d76:	f7fe f819 	bl	8000dac <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d7e:	f7fe f815 	bl	8000dac <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e1a8      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d90:	4b2b      	ldr	r3, [pc, #172]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0f0      	beq.n	8002d7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9c:	4b28      	ldr	r3, [pc, #160]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4925      	ldr	r1, [pc, #148]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	600b      	str	r3, [r1, #0]
 8002db0:	e015      	b.n	8002dde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db2:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <HAL_RCC_OscConfig+0x244>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7fd fff8 	bl	8000dac <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc0:	f7fd fff4 	bl	8000dac <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e187      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd2:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d036      	beq.n	8002e58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d016      	beq.n	8002e20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df2:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <HAL_RCC_OscConfig+0x248>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df8:	f7fd ffd8 	bl	8000dac <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e00:	f7fd ffd4 	bl	8000dac <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e167      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e12:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0f0      	beq.n	8002e00 <HAL_RCC_OscConfig+0x200>
 8002e1e:	e01b      	b.n	8002e58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e20:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <HAL_RCC_OscConfig+0x248>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e26:	f7fd ffc1 	bl	8000dac <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2c:	e00e      	b.n	8002e4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e2e:	f7fd ffbd 	bl	8000dac <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d907      	bls.n	8002e4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e150      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
 8002e40:	40023800 	.word	0x40023800
 8002e44:	42470000 	.word	0x42470000
 8002e48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4c:	4b88      	ldr	r3, [pc, #544]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1ea      	bne.n	8002e2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 8097 	beq.w	8002f94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e66:	2300      	movs	r3, #0
 8002e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e6a:	4b81      	ldr	r3, [pc, #516]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10f      	bne.n	8002e96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	4b7d      	ldr	r3, [pc, #500]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	4a7c      	ldr	r2, [pc, #496]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e84:	6413      	str	r3, [r2, #64]	; 0x40
 8002e86:	4b7a      	ldr	r3, [pc, #488]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e92:	2301      	movs	r3, #1
 8002e94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e96:	4b77      	ldr	r3, [pc, #476]	; (8003074 <HAL_RCC_OscConfig+0x474>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d118      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea2:	4b74      	ldr	r3, [pc, #464]	; (8003074 <HAL_RCC_OscConfig+0x474>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a73      	ldr	r2, [pc, #460]	; (8003074 <HAL_RCC_OscConfig+0x474>)
 8002ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eae:	f7fd ff7d 	bl	8000dac <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb6:	f7fd ff79 	bl	8000dac <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e10c      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec8:	4b6a      	ldr	r3, [pc, #424]	; (8003074 <HAL_RCC_OscConfig+0x474>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d106      	bne.n	8002eea <HAL_RCC_OscConfig+0x2ea>
 8002edc:	4b64      	ldr	r3, [pc, #400]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee0:	4a63      	ldr	r2, [pc, #396]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee8:	e01c      	b.n	8002f24 <HAL_RCC_OscConfig+0x324>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b05      	cmp	r3, #5
 8002ef0:	d10c      	bne.n	8002f0c <HAL_RCC_OscConfig+0x30c>
 8002ef2:	4b5f      	ldr	r3, [pc, #380]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	4a5e      	ldr	r2, [pc, #376]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002ef8:	f043 0304 	orr.w	r3, r3, #4
 8002efc:	6713      	str	r3, [r2, #112]	; 0x70
 8002efe:	4b5c      	ldr	r3, [pc, #368]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f02:	4a5b      	ldr	r2, [pc, #364]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0a:	e00b      	b.n	8002f24 <HAL_RCC_OscConfig+0x324>
 8002f0c:	4b58      	ldr	r3, [pc, #352]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f10:	4a57      	ldr	r2, [pc, #348]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	6713      	str	r3, [r2, #112]	; 0x70
 8002f18:	4b55      	ldr	r3, [pc, #340]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1c:	4a54      	ldr	r2, [pc, #336]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	f023 0304 	bic.w	r3, r3, #4
 8002f22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d015      	beq.n	8002f58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2c:	f7fd ff3e 	bl	8000dac <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f34:	f7fd ff3a 	bl	8000dac <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e0cb      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4a:	4b49      	ldr	r3, [pc, #292]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0ee      	beq.n	8002f34 <HAL_RCC_OscConfig+0x334>
 8002f56:	e014      	b.n	8002f82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f58:	f7fd ff28 	bl	8000dac <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f60:	f7fd ff24 	bl	8000dac <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e0b5      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f76:	4b3e      	ldr	r3, [pc, #248]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1ee      	bne.n	8002f60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f82:	7dfb      	ldrb	r3, [r7, #23]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d105      	bne.n	8002f94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f88:	4b39      	ldr	r3, [pc, #228]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	4a38      	ldr	r2, [pc, #224]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80a1 	beq.w	80030e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f9e:	4b34      	ldr	r3, [pc, #208]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d05c      	beq.n	8003064 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d141      	bne.n	8003036 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb2:	4b31      	ldr	r3, [pc, #196]	; (8003078 <HAL_RCC_OscConfig+0x478>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb8:	f7fd fef8 	bl	8000dac <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc0:	f7fd fef4 	bl	8000dac <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e087      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd2:	4b27      	ldr	r3, [pc, #156]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69da      	ldr	r2, [r3, #28]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	019b      	lsls	r3, r3, #6
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	085b      	lsrs	r3, r3, #1
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	041b      	lsls	r3, r3, #16
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	061b      	lsls	r3, r3, #24
 8003002:	491b      	ldr	r1, [pc, #108]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003008:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <HAL_RCC_OscConfig+0x478>)
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300e:	f7fd fecd 	bl	8000dac <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003016:	f7fd fec9 	bl	8000dac <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e05c      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003028:	4b11      	ldr	r3, [pc, #68]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x416>
 8003034:	e054      	b.n	80030e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003036:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_RCC_OscConfig+0x478>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7fd feb6 	bl	8000dac <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003044:	f7fd feb2 	bl	8000dac <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e045      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x444>
 8003062:	e03d      	b.n	80030e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d107      	bne.n	800307c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e038      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
 8003070:	40023800 	.word	0x40023800
 8003074:	40007000 	.word	0x40007000
 8003078:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800307c:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <HAL_RCC_OscConfig+0x4ec>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d028      	beq.n	80030dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003094:	429a      	cmp	r2, r3
 8003096:	d121      	bne.n	80030dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d11a      	bne.n	80030dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030ac:	4013      	ands	r3, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d111      	bne.n	80030dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c2:	085b      	lsrs	r3, r3, #1
 80030c4:	3b01      	subs	r3, #1
 80030c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800

080030f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0cc      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003104:	4b68      	ldr	r3, [pc, #416]	; (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d90c      	bls.n	800312c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003112:	4b65      	ldr	r3, [pc, #404]	; (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b63      	ldr	r3, [pc, #396]	; (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0b8      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d020      	beq.n	800317a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003144:	4b59      	ldr	r3, [pc, #356]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4a58      	ldr	r2, [pc, #352]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800314e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800315c:	4b53      	ldr	r3, [pc, #332]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	4a52      	ldr	r2, [pc, #328]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003166:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003168:	4b50      	ldr	r3, [pc, #320]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	494d      	ldr	r1, [pc, #308]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d044      	beq.n	8003210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	4b47      	ldr	r3, [pc, #284]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d119      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e07f      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d003      	beq.n	80031ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d107      	bne.n	80031be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ae:	4b3f      	ldr	r3, [pc, #252]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e06f      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031be:	4b3b      	ldr	r3, [pc, #236]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e067      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ce:	4b37      	ldr	r3, [pc, #220]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f023 0203 	bic.w	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4934      	ldr	r1, [pc, #208]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e0:	f7fd fde4 	bl	8000dac <HAL_GetTick>
 80031e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e8:	f7fd fde0 	bl	8000dac <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e04f      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	4b2b      	ldr	r3, [pc, #172]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 020c 	and.w	r2, r3, #12
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	429a      	cmp	r2, r3
 800320e:	d1eb      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003210:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d20c      	bcs.n	8003238 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321e:	4b22      	ldr	r3, [pc, #136]	; (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e032      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003244:	4b19      	ldr	r3, [pc, #100]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4916      	ldr	r1, [pc, #88]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003262:	4b12      	ldr	r3, [pc, #72]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	490e      	ldr	r1, [pc, #56]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003276:	f000 f821 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 800327a:	4602      	mov	r2, r0
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	490a      	ldr	r1, [pc, #40]	; (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003288:	5ccb      	ldrb	r3, [r1, r3]
 800328a:	fa22 f303 	lsr.w	r3, r2, r3
 800328e:	4a09      	ldr	r2, [pc, #36]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003292:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd fd44 	bl	8000d24 <HAL_InitTick>

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023c00 	.word	0x40023c00
 80032ac:	40023800 	.word	0x40023800
 80032b0:	08008b44 	.word	0x08008b44
 80032b4:	20000000 	.word	0x20000000
 80032b8:	20000014 	.word	0x20000014

080032bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032c0:	b090      	sub	sp, #64	; 0x40
 80032c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	637b      	str	r3, [r7, #52]	; 0x34
 80032c8:	2300      	movs	r3, #0
 80032ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032cc:	2300      	movs	r3, #0
 80032ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032d4:	4b59      	ldr	r3, [pc, #356]	; (800343c <HAL_RCC_GetSysClockFreq+0x180>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d00d      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x40>
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	f200 80a1 	bhi.w	8003428 <HAL_RCC_GetSysClockFreq+0x16c>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_RCC_GetSysClockFreq+0x34>
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d003      	beq.n	80032f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ee:	e09b      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032f0:	4b53      	ldr	r3, [pc, #332]	; (8003440 <HAL_RCC_GetSysClockFreq+0x184>)
 80032f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80032f4:	e09b      	b.n	800342e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032f6:	4b53      	ldr	r3, [pc, #332]	; (8003444 <HAL_RCC_GetSysClockFreq+0x188>)
 80032f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032fa:	e098      	b.n	800342e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032fc:	4b4f      	ldr	r3, [pc, #316]	; (800343c <HAL_RCC_GetSysClockFreq+0x180>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003304:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003306:	4b4d      	ldr	r3, [pc, #308]	; (800343c <HAL_RCC_GetSysClockFreq+0x180>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d028      	beq.n	8003364 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003312:	4b4a      	ldr	r3, [pc, #296]	; (800343c <HAL_RCC_GetSysClockFreq+0x180>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	099b      	lsrs	r3, r3, #6
 8003318:	2200      	movs	r2, #0
 800331a:	623b      	str	r3, [r7, #32]
 800331c:	627a      	str	r2, [r7, #36]	; 0x24
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003324:	2100      	movs	r1, #0
 8003326:	4b47      	ldr	r3, [pc, #284]	; (8003444 <HAL_RCC_GetSysClockFreq+0x188>)
 8003328:	fb03 f201 	mul.w	r2, r3, r1
 800332c:	2300      	movs	r3, #0
 800332e:	fb00 f303 	mul.w	r3, r0, r3
 8003332:	4413      	add	r3, r2
 8003334:	4a43      	ldr	r2, [pc, #268]	; (8003444 <HAL_RCC_GetSysClockFreq+0x188>)
 8003336:	fba0 1202 	umull	r1, r2, r0, r2
 800333a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800333c:	460a      	mov	r2, r1
 800333e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003342:	4413      	add	r3, r2
 8003344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003348:	2200      	movs	r2, #0
 800334a:	61bb      	str	r3, [r7, #24]
 800334c:	61fa      	str	r2, [r7, #28]
 800334e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003352:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003356:	f7fc ff93 	bl	8000280 <__aeabi_uldivmod>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4613      	mov	r3, r2
 8003360:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003362:	e053      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003364:	4b35      	ldr	r3, [pc, #212]	; (800343c <HAL_RCC_GetSysClockFreq+0x180>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	099b      	lsrs	r3, r3, #6
 800336a:	2200      	movs	r2, #0
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	617a      	str	r2, [r7, #20]
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003376:	f04f 0b00 	mov.w	fp, #0
 800337a:	4652      	mov	r2, sl
 800337c:	465b      	mov	r3, fp
 800337e:	f04f 0000 	mov.w	r0, #0
 8003382:	f04f 0100 	mov.w	r1, #0
 8003386:	0159      	lsls	r1, r3, #5
 8003388:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800338c:	0150      	lsls	r0, r2, #5
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	ebb2 080a 	subs.w	r8, r2, sl
 8003396:	eb63 090b 	sbc.w	r9, r3, fp
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033ae:	ebb2 0408 	subs.w	r4, r2, r8
 80033b2:	eb63 0509 	sbc.w	r5, r3, r9
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	00eb      	lsls	r3, r5, #3
 80033c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033c4:	00e2      	lsls	r2, r4, #3
 80033c6:	4614      	mov	r4, r2
 80033c8:	461d      	mov	r5, r3
 80033ca:	eb14 030a 	adds.w	r3, r4, sl
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	eb45 030b 	adc.w	r3, r5, fp
 80033d4:	607b      	str	r3, [r7, #4]
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033e2:	4629      	mov	r1, r5
 80033e4:	028b      	lsls	r3, r1, #10
 80033e6:	4621      	mov	r1, r4
 80033e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033ec:	4621      	mov	r1, r4
 80033ee:	028a      	lsls	r2, r1, #10
 80033f0:	4610      	mov	r0, r2
 80033f2:	4619      	mov	r1, r3
 80033f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f6:	2200      	movs	r2, #0
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	60fa      	str	r2, [r7, #12]
 80033fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003400:	f7fc ff3e 	bl	8000280 <__aeabi_uldivmod>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4613      	mov	r3, r2
 800340a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_RCC_GetSysClockFreq+0x180>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	0c1b      	lsrs	r3, r3, #16
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	3301      	adds	r3, #1
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800341c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003420:	fbb2 f3f3 	udiv	r3, r2, r3
 8003424:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003426:	e002      	b.n	800342e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <HAL_RCC_GetSysClockFreq+0x184>)
 800342a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800342c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003430:	4618      	mov	r0, r3
 8003432:	3740      	adds	r7, #64	; 0x40
 8003434:	46bd      	mov	sp, r7
 8003436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800343a:	bf00      	nop
 800343c:	40023800 	.word	0x40023800
 8003440:	00f42400 	.word	0x00f42400
 8003444:	017d7840 	.word	0x017d7840

08003448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <HAL_RCC_GetHCLKFreq+0x14>)
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	4618      	mov	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20000000 	.word	0x20000000

08003460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003464:	f7ff fff0 	bl	8003448 <HAL_RCC_GetHCLKFreq>
 8003468:	4602      	mov	r2, r0
 800346a:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_RCC_GetPCLK1Freq+0x20>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	0a9b      	lsrs	r3, r3, #10
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	4903      	ldr	r1, [pc, #12]	; (8003484 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003476:	5ccb      	ldrb	r3, [r1, r3]
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800347c:	4618      	mov	r0, r3
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40023800 	.word	0x40023800
 8003484:	08008b54 	.word	0x08008b54

08003488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800348c:	f7ff ffdc 	bl	8003448 <HAL_RCC_GetHCLKFreq>
 8003490:	4602      	mov	r2, r0
 8003492:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	0b5b      	lsrs	r3, r3, #13
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	4903      	ldr	r1, [pc, #12]	; (80034ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800349e:	5ccb      	ldrb	r3, [r1, r3]
 80034a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40023800 	.word	0x40023800
 80034ac:	08008b54 	.word	0x08008b54

080034b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e03f      	b.n	8003542 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd f946 	bl	8000768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2224      	movs	r2, #36	; 0x24
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 faa5 	bl	8003a44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	4613      	mov	r3, r2
 8003556:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b20      	cmp	r3, #32
 8003562:	d11d      	bne.n	80035a0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <HAL_UART_Receive_DMA+0x26>
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e016      	b.n	80035a2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_UART_Receive_DMA+0x38>
 800357e:	2302      	movs	r3, #2
 8003580:	e00f      	b.n	80035a2 <HAL_UART_Receive_DMA+0x58>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	461a      	mov	r2, r3
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f92a 	bl	80037f0 <UART_Start_Receive_DMA>
 800359c:	4603      	mov	r3, r0
 800359e:	e000      	b.n	80035a2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80035a0:	2302      	movs	r3, #2
  }
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	460b      	mov	r3, r1
 80035f0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b09c      	sub	sp, #112	; 0x70
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003616:	2b00      	cmp	r3, #0
 8003618:	d172      	bne.n	8003700 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800361a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361c:	2200      	movs	r2, #0
 800361e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	330c      	adds	r3, #12
 8003626:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800362a:	e853 3f00 	ldrex	r3, [r3]
 800362e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003632:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003636:	66bb      	str	r3, [r7, #104]	; 0x68
 8003638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	330c      	adds	r3, #12
 800363e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003640:	65ba      	str	r2, [r7, #88]	; 0x58
 8003642:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003644:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003646:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003648:	e841 2300 	strex	r3, r2, [r1]
 800364c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800364e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1e5      	bne.n	8003620 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	3314      	adds	r3, #20
 800365a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365e:	e853 3f00 	ldrex	r3, [r3]
 8003662:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003666:	f023 0301 	bic.w	r3, r3, #1
 800366a:	667b      	str	r3, [r7, #100]	; 0x64
 800366c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3314      	adds	r3, #20
 8003672:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003674:	647a      	str	r2, [r7, #68]	; 0x44
 8003676:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003678:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800367a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800367c:	e841 2300 	strex	r3, r2, [r1]
 8003680:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e5      	bne.n	8003654 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3314      	adds	r3, #20
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	e853 3f00 	ldrex	r3, [r3]
 8003696:	623b      	str	r3, [r7, #32]
   return(result);
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800369e:	663b      	str	r3, [r7, #96]	; 0x60
 80036a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3314      	adds	r3, #20
 80036a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036a8:	633a      	str	r2, [r7, #48]	; 0x30
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b0:	e841 2300 	strex	r3, r2, [r1]
 80036b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e5      	bne.n	8003688 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d119      	bne.n	8003700 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	330c      	adds	r3, #12
 80036d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	e853 3f00 	ldrex	r3, [r3]
 80036da:	60fb      	str	r3, [r7, #12]
   return(result);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0310 	bic.w	r3, r3, #16
 80036e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	330c      	adds	r3, #12
 80036ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80036ec:	61fa      	str	r2, [r7, #28]
 80036ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	69b9      	ldr	r1, [r7, #24]
 80036f2:	69fa      	ldr	r2, [r7, #28]
 80036f4:	e841 2300 	strex	r3, r2, [r1]
 80036f8:	617b      	str	r3, [r7, #20]
   return(result);
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e5      	bne.n	80036cc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	2b01      	cmp	r3, #1
 8003706:	d106      	bne.n	8003716 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800370c:	4619      	mov	r1, r3
 800370e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003710:	f7ff ff69 	bl	80035e6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003714:	e002      	b.n	800371c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003716:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003718:	f7ff ff47 	bl	80035aa <HAL_UART_RxCpltCallback>
}
 800371c:	bf00      	nop
 800371e:	3770      	adds	r7, #112	; 0x70
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	2b01      	cmp	r3, #1
 8003738:	d108      	bne.n	800374c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800373e:	085b      	lsrs	r3, r3, #1
 8003740:	b29b      	uxth	r3, r3
 8003742:	4619      	mov	r1, r3
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f7ff ff4e 	bl	80035e6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800374a:	e002      	b.n	8003752 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f7ff ff36 	bl	80035be <HAL_UART_RxHalfCpltCallback>
}
 8003752:	bf00      	nop
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003776:	2b80      	cmp	r3, #128	; 0x80
 8003778:	bf0c      	ite	eq
 800377a:	2301      	moveq	r3, #1
 800377c:	2300      	movne	r3, #0
 800377e:	b2db      	uxtb	r3, r3
 8003780:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b21      	cmp	r3, #33	; 0x21
 800378c:	d108      	bne.n	80037a0 <UART_DMAError+0x46>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2200      	movs	r2, #0
 8003798:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800379a:	68b8      	ldr	r0, [r7, #8]
 800379c:	f000 f8c6 	bl	800392c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037aa:	2b40      	cmp	r3, #64	; 0x40
 80037ac:	bf0c      	ite	eq
 80037ae:	2301      	moveq	r3, #1
 80037b0:	2300      	movne	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b22      	cmp	r3, #34	; 0x22
 80037c0:	d108      	bne.n	80037d4 <UART_DMAError+0x7a>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2200      	movs	r2, #0
 80037cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80037ce:	68b8      	ldr	r0, [r7, #8]
 80037d0:	f000 f8d4 	bl	800397c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	f043 0210 	orr.w	r2, r3, #16
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037e0:	68b8      	ldr	r0, [r7, #8]
 80037e2:	f7ff fef6 	bl	80035d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037e6:	bf00      	nop
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b098      	sub	sp, #96	; 0x60
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	4613      	mov	r3, r2
 80037fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	88fa      	ldrh	r2, [r7, #6]
 8003808:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2222      	movs	r2, #34	; 0x22
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	4a40      	ldr	r2, [pc, #256]	; (8003920 <UART_Start_Receive_DMA+0x130>)
 800381e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	4a3f      	ldr	r2, [pc, #252]	; (8003924 <UART_Start_Receive_DMA+0x134>)
 8003826:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	4a3e      	ldr	r2, [pc, #248]	; (8003928 <UART_Start_Receive_DMA+0x138>)
 800382e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	2200      	movs	r2, #0
 8003836:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003838:	f107 0308 	add.w	r3, r7, #8
 800383c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	3304      	adds	r3, #4
 8003848:	4619      	mov	r1, r3
 800384a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	88fb      	ldrh	r3, [r7, #6]
 8003850:	f7fd fc9c 	bl	800118c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003854:	2300      	movs	r3, #0
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	613b      	str	r3, [r7, #16]
 8003868:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d019      	beq.n	80038ae <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	330c      	adds	r3, #12
 8003880:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003884:	e853 3f00 	ldrex	r3, [r3]
 8003888:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800388a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800388c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003890:	65bb      	str	r3, [r7, #88]	; 0x58
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	330c      	adds	r3, #12
 8003898:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800389a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800389c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80038a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80038a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1e5      	bne.n	800387a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3314      	adds	r3, #20
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	e853 3f00 	ldrex	r3, [r3]
 80038bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	657b      	str	r3, [r7, #84]	; 0x54
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3314      	adds	r3, #20
 80038cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038ce:	63ba      	str	r2, [r7, #56]	; 0x38
 80038d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80038d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038d6:	e841 2300 	strex	r3, r2, [r1]
 80038da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1e5      	bne.n	80038ae <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	3314      	adds	r3, #20
 80038e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	e853 3f00 	ldrex	r3, [r3]
 80038f0:	617b      	str	r3, [r7, #20]
   return(result);
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038f8:	653b      	str	r3, [r7, #80]	; 0x50
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3314      	adds	r3, #20
 8003900:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003902:	627a      	str	r2, [r7, #36]	; 0x24
 8003904:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003906:	6a39      	ldr	r1, [r7, #32]
 8003908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1e5      	bne.n	80038e2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3760      	adds	r7, #96	; 0x60
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	080035ff 	.word	0x080035ff
 8003924:	08003725 	.word	0x08003725
 8003928:	0800375b 	.word	0x0800375b

0800392c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800392c:	b480      	push	{r7}
 800392e:	b089      	sub	sp, #36	; 0x24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	330c      	adds	r3, #12
 800393a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	e853 3f00 	ldrex	r3, [r3]
 8003942:	60bb      	str	r3, [r7, #8]
   return(result);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800394a:	61fb      	str	r3, [r7, #28]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	330c      	adds	r3, #12
 8003952:	69fa      	ldr	r2, [r7, #28]
 8003954:	61ba      	str	r2, [r7, #24]
 8003956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003958:	6979      	ldr	r1, [r7, #20]
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	e841 2300 	strex	r3, r2, [r1]
 8003960:	613b      	str	r3, [r7, #16]
   return(result);
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1e5      	bne.n	8003934 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003970:	bf00      	nop
 8003972:	3724      	adds	r7, #36	; 0x24
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800397c:	b480      	push	{r7}
 800397e:	b095      	sub	sp, #84	; 0x54
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	330c      	adds	r3, #12
 800398a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398e:	e853 3f00 	ldrex	r3, [r3]
 8003992:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003996:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800399a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	330c      	adds	r3, #12
 80039a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039a4:	643a      	str	r2, [r7, #64]	; 0x40
 80039a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039ac:	e841 2300 	strex	r3, r2, [r1]
 80039b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e5      	bne.n	8003984 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3314      	adds	r3, #20
 80039be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	e853 3f00 	ldrex	r3, [r3]
 80039c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f023 0301 	bic.w	r3, r3, #1
 80039ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3314      	adds	r3, #20
 80039d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039e0:	e841 2300 	strex	r3, r2, [r1]
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1e5      	bne.n	80039b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d119      	bne.n	8003a28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	330c      	adds	r3, #12
 80039fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	e853 3f00 	ldrex	r3, [r3]
 8003a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f023 0310 	bic.w	r3, r3, #16
 8003a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	330c      	adds	r3, #12
 8003a12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a14:	61ba      	str	r2, [r7, #24]
 8003a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a18:	6979      	ldr	r1, [r7, #20]
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	e841 2300 	strex	r3, r2, [r1]
 8003a20:	613b      	str	r3, [r7, #16]
   return(result);
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e5      	bne.n	80039f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a36:	bf00      	nop
 8003a38:	3754      	adds	r7, #84	; 0x54
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a48:	b0c0      	sub	sp, #256	; 0x100
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a60:	68d9      	ldr	r1, [r3, #12]
 8003a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	ea40 0301 	orr.w	r3, r0, r1
 8003a6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a9c:	f021 010c 	bic.w	r1, r1, #12
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003aaa:	430b      	orrs	r3, r1
 8003aac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003abe:	6999      	ldr	r1, [r3, #24]
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	ea40 0301 	orr.w	r3, r0, r1
 8003aca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4b8f      	ldr	r3, [pc, #572]	; (8003d10 <UART_SetConfig+0x2cc>)
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d005      	beq.n	8003ae4 <UART_SetConfig+0xa0>
 8003ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	4b8d      	ldr	r3, [pc, #564]	; (8003d14 <UART_SetConfig+0x2d0>)
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d104      	bne.n	8003aee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ae4:	f7ff fcd0 	bl	8003488 <HAL_RCC_GetPCLK2Freq>
 8003ae8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003aec:	e003      	b.n	8003af6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aee:	f7ff fcb7 	bl	8003460 <HAL_RCC_GetPCLK1Freq>
 8003af2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b00:	f040 810c 	bne.w	8003d1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b16:	4622      	mov	r2, r4
 8003b18:	462b      	mov	r3, r5
 8003b1a:	1891      	adds	r1, r2, r2
 8003b1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b1e:	415b      	adcs	r3, r3
 8003b20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b26:	4621      	mov	r1, r4
 8003b28:	eb12 0801 	adds.w	r8, r2, r1
 8003b2c:	4629      	mov	r1, r5
 8003b2e:	eb43 0901 	adc.w	r9, r3, r1
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b46:	4690      	mov	r8, r2
 8003b48:	4699      	mov	r9, r3
 8003b4a:	4623      	mov	r3, r4
 8003b4c:	eb18 0303 	adds.w	r3, r8, r3
 8003b50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b54:	462b      	mov	r3, r5
 8003b56:	eb49 0303 	adc.w	r3, r9, r3
 8003b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b72:	460b      	mov	r3, r1
 8003b74:	18db      	adds	r3, r3, r3
 8003b76:	653b      	str	r3, [r7, #80]	; 0x50
 8003b78:	4613      	mov	r3, r2
 8003b7a:	eb42 0303 	adc.w	r3, r2, r3
 8003b7e:	657b      	str	r3, [r7, #84]	; 0x54
 8003b80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b88:	f7fc fb7a 	bl	8000280 <__aeabi_uldivmod>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4b61      	ldr	r3, [pc, #388]	; (8003d18 <UART_SetConfig+0x2d4>)
 8003b92:	fba3 2302 	umull	r2, r3, r3, r2
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	011c      	lsls	r4, r3, #4
 8003b9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ba4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ba8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003bac:	4642      	mov	r2, r8
 8003bae:	464b      	mov	r3, r9
 8003bb0:	1891      	adds	r1, r2, r2
 8003bb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003bb4:	415b      	adcs	r3, r3
 8003bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003bbc:	4641      	mov	r1, r8
 8003bbe:	eb12 0a01 	adds.w	sl, r2, r1
 8003bc2:	4649      	mov	r1, r9
 8003bc4:	eb43 0b01 	adc.w	fp, r3, r1
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bdc:	4692      	mov	sl, r2
 8003bde:	469b      	mov	fp, r3
 8003be0:	4643      	mov	r3, r8
 8003be2:	eb1a 0303 	adds.w	r3, sl, r3
 8003be6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bea:	464b      	mov	r3, r9
 8003bec:	eb4b 0303 	adc.w	r3, fp, r3
 8003bf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	18db      	adds	r3, r3, r3
 8003c0c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c0e:	4613      	mov	r3, r2
 8003c10:	eb42 0303 	adc.w	r3, r2, r3
 8003c14:	647b      	str	r3, [r7, #68]	; 0x44
 8003c16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c1e:	f7fc fb2f 	bl	8000280 <__aeabi_uldivmod>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4611      	mov	r1, r2
 8003c28:	4b3b      	ldr	r3, [pc, #236]	; (8003d18 <UART_SetConfig+0x2d4>)
 8003c2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	2264      	movs	r2, #100	; 0x64
 8003c32:	fb02 f303 	mul.w	r3, r2, r3
 8003c36:	1acb      	subs	r3, r1, r3
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c3e:	4b36      	ldr	r3, [pc, #216]	; (8003d18 <UART_SetConfig+0x2d4>)
 8003c40:	fba3 2302 	umull	r2, r3, r3, r2
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c4c:	441c      	add	r4, r3
 8003c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c60:	4642      	mov	r2, r8
 8003c62:	464b      	mov	r3, r9
 8003c64:	1891      	adds	r1, r2, r2
 8003c66:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c68:	415b      	adcs	r3, r3
 8003c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c70:	4641      	mov	r1, r8
 8003c72:	1851      	adds	r1, r2, r1
 8003c74:	6339      	str	r1, [r7, #48]	; 0x30
 8003c76:	4649      	mov	r1, r9
 8003c78:	414b      	adcs	r3, r1
 8003c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c88:	4659      	mov	r1, fp
 8003c8a:	00cb      	lsls	r3, r1, #3
 8003c8c:	4651      	mov	r1, sl
 8003c8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c92:	4651      	mov	r1, sl
 8003c94:	00ca      	lsls	r2, r1, #3
 8003c96:	4610      	mov	r0, r2
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4642      	mov	r2, r8
 8003c9e:	189b      	adds	r3, r3, r2
 8003ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ca4:	464b      	mov	r3, r9
 8003ca6:	460a      	mov	r2, r1
 8003ca8:	eb42 0303 	adc.w	r3, r2, r3
 8003cac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003cbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003cc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	18db      	adds	r3, r3, r3
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cca:	4613      	mov	r3, r2
 8003ccc:	eb42 0303 	adc.w	r3, r2, r3
 8003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003cda:	f7fc fad1 	bl	8000280 <__aeabi_uldivmod>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	; (8003d18 <UART_SetConfig+0x2d4>)
 8003ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	2164      	movs	r1, #100	; 0x64
 8003cec:	fb01 f303 	mul.w	r3, r1, r3
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	3332      	adds	r3, #50	; 0x32
 8003cf6:	4a08      	ldr	r2, [pc, #32]	; (8003d18 <UART_SetConfig+0x2d4>)
 8003cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfc:	095b      	lsrs	r3, r3, #5
 8003cfe:	f003 0207 	and.w	r2, r3, #7
 8003d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4422      	add	r2, r4
 8003d0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d0c:	e106      	b.n	8003f1c <UART_SetConfig+0x4d8>
 8003d0e:	bf00      	nop
 8003d10:	40011000 	.word	0x40011000
 8003d14:	40011400 	.word	0x40011400
 8003d18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d20:	2200      	movs	r2, #0
 8003d22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d2e:	4642      	mov	r2, r8
 8003d30:	464b      	mov	r3, r9
 8003d32:	1891      	adds	r1, r2, r2
 8003d34:	6239      	str	r1, [r7, #32]
 8003d36:	415b      	adcs	r3, r3
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d3e:	4641      	mov	r1, r8
 8003d40:	1854      	adds	r4, r2, r1
 8003d42:	4649      	mov	r1, r9
 8003d44:	eb43 0501 	adc.w	r5, r3, r1
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	00eb      	lsls	r3, r5, #3
 8003d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d56:	00e2      	lsls	r2, r4, #3
 8003d58:	4614      	mov	r4, r2
 8003d5a:	461d      	mov	r5, r3
 8003d5c:	4643      	mov	r3, r8
 8003d5e:	18e3      	adds	r3, r4, r3
 8003d60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d64:	464b      	mov	r3, r9
 8003d66:	eb45 0303 	adc.w	r3, r5, r3
 8003d6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	008b      	lsls	r3, r1, #2
 8003d8e:	4621      	mov	r1, r4
 8003d90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d94:	4621      	mov	r1, r4
 8003d96:	008a      	lsls	r2, r1, #2
 8003d98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d9c:	f7fc fa70 	bl	8000280 <__aeabi_uldivmod>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4b60      	ldr	r3, [pc, #384]	; (8003f28 <UART_SetConfig+0x4e4>)
 8003da6:	fba3 2302 	umull	r2, r3, r3, r2
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	011c      	lsls	r4, r3, #4
 8003dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003db2:	2200      	movs	r2, #0
 8003db4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003db8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003dbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003dc0:	4642      	mov	r2, r8
 8003dc2:	464b      	mov	r3, r9
 8003dc4:	1891      	adds	r1, r2, r2
 8003dc6:	61b9      	str	r1, [r7, #24]
 8003dc8:	415b      	adcs	r3, r3
 8003dca:	61fb      	str	r3, [r7, #28]
 8003dcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dd0:	4641      	mov	r1, r8
 8003dd2:	1851      	adds	r1, r2, r1
 8003dd4:	6139      	str	r1, [r7, #16]
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	414b      	adcs	r3, r1
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003de8:	4659      	mov	r1, fp
 8003dea:	00cb      	lsls	r3, r1, #3
 8003dec:	4651      	mov	r1, sl
 8003dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003df2:	4651      	mov	r1, sl
 8003df4:	00ca      	lsls	r2, r1, #3
 8003df6:	4610      	mov	r0, r2
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4642      	mov	r2, r8
 8003dfe:	189b      	adds	r3, r3, r2
 8003e00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e04:	464b      	mov	r3, r9
 8003e06:	460a      	mov	r2, r1
 8003e08:	eb42 0303 	adc.w	r3, r2, r3
 8003e0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e28:	4649      	mov	r1, r9
 8003e2a:	008b      	lsls	r3, r1, #2
 8003e2c:	4641      	mov	r1, r8
 8003e2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e32:	4641      	mov	r1, r8
 8003e34:	008a      	lsls	r2, r1, #2
 8003e36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e3a:	f7fc fa21 	bl	8000280 <__aeabi_uldivmod>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4611      	mov	r1, r2
 8003e44:	4b38      	ldr	r3, [pc, #224]	; (8003f28 <UART_SetConfig+0x4e4>)
 8003e46:	fba3 2301 	umull	r2, r3, r3, r1
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	2264      	movs	r2, #100	; 0x64
 8003e4e:	fb02 f303 	mul.w	r3, r2, r3
 8003e52:	1acb      	subs	r3, r1, r3
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	3332      	adds	r3, #50	; 0x32
 8003e58:	4a33      	ldr	r2, [pc, #204]	; (8003f28 <UART_SetConfig+0x4e4>)
 8003e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e64:	441c      	add	r4, r3
 8003e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	673b      	str	r3, [r7, #112]	; 0x70
 8003e6e:	677a      	str	r2, [r7, #116]	; 0x74
 8003e70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e74:	4642      	mov	r2, r8
 8003e76:	464b      	mov	r3, r9
 8003e78:	1891      	adds	r1, r2, r2
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	415b      	adcs	r3, r3
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e84:	4641      	mov	r1, r8
 8003e86:	1851      	adds	r1, r2, r1
 8003e88:	6039      	str	r1, [r7, #0]
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	414b      	adcs	r3, r1
 8003e8e:	607b      	str	r3, [r7, #4]
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e9c:	4659      	mov	r1, fp
 8003e9e:	00cb      	lsls	r3, r1, #3
 8003ea0:	4651      	mov	r1, sl
 8003ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ea6:	4651      	mov	r1, sl
 8003ea8:	00ca      	lsls	r2, r1, #3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	4619      	mov	r1, r3
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	189b      	adds	r3, r3, r2
 8003eb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003eb6:	464b      	mov	r3, r9
 8003eb8:	460a      	mov	r2, r1
 8003eba:	eb42 0303 	adc.w	r3, r2, r3
 8003ebe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	663b      	str	r3, [r7, #96]	; 0x60
 8003eca:	667a      	str	r2, [r7, #100]	; 0x64
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ed8:	4649      	mov	r1, r9
 8003eda:	008b      	lsls	r3, r1, #2
 8003edc:	4641      	mov	r1, r8
 8003ede:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ee2:	4641      	mov	r1, r8
 8003ee4:	008a      	lsls	r2, r1, #2
 8003ee6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003eea:	f7fc f9c9 	bl	8000280 <__aeabi_uldivmod>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <UART_SetConfig+0x4e4>)
 8003ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef8:	095b      	lsrs	r3, r3, #5
 8003efa:	2164      	movs	r1, #100	; 0x64
 8003efc:	fb01 f303 	mul.w	r3, r1, r3
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	3332      	adds	r3, #50	; 0x32
 8003f06:	4a08      	ldr	r2, [pc, #32]	; (8003f28 <UART_SetConfig+0x4e4>)
 8003f08:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	f003 020f 	and.w	r2, r3, #15
 8003f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4422      	add	r2, r4
 8003f1a:	609a      	str	r2, [r3, #8]
}
 8003f1c:	bf00      	nop
 8003f1e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f22:	46bd      	mov	sp, r7
 8003f24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f28:	51eb851f 	.word	0x51eb851f

08003f2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	f107 001c 	add.w	r0, r7, #28
 8003f3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d122      	bne.n	8003f8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d105      	bne.n	8003f7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f001 fbee 	bl	8005760 <USB_CoreReset>
 8003f84:	4603      	mov	r3, r0
 8003f86:	73fb      	strb	r3, [r7, #15]
 8003f88:	e01a      	b.n	8003fc0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f001 fbe2 	bl	8005760 <USB_CoreReset>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003faa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	639a      	str	r2, [r3, #56]	; 0x38
 8003fb2:	e005      	b.n	8003fc0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d10b      	bne.n	8003fde <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f043 0206 	orr.w	r2, r3, #6
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f043 0220 	orr.w	r2, r3, #32
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fea:	b004      	add	sp, #16
 8003fec:	4770      	bx	lr
	...

08003ff0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	2b02      	cmp	r3, #2
 8004002:	d165      	bne.n	80040d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	4a41      	ldr	r2, [pc, #260]	; (800410c <USB_SetTurnaroundTime+0x11c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d906      	bls.n	800401a <USB_SetTurnaroundTime+0x2a>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4a40      	ldr	r2, [pc, #256]	; (8004110 <USB_SetTurnaroundTime+0x120>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d202      	bcs.n	800401a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004014:	230f      	movs	r3, #15
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	e062      	b.n	80040e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	4a3c      	ldr	r2, [pc, #240]	; (8004110 <USB_SetTurnaroundTime+0x120>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d306      	bcc.n	8004030 <USB_SetTurnaroundTime+0x40>
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	4a3b      	ldr	r2, [pc, #236]	; (8004114 <USB_SetTurnaroundTime+0x124>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d202      	bcs.n	8004030 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800402a:	230e      	movs	r3, #14
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	e057      	b.n	80040e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4a38      	ldr	r2, [pc, #224]	; (8004114 <USB_SetTurnaroundTime+0x124>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d306      	bcc.n	8004046 <USB_SetTurnaroundTime+0x56>
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4a37      	ldr	r2, [pc, #220]	; (8004118 <USB_SetTurnaroundTime+0x128>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d202      	bcs.n	8004046 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004040:	230d      	movs	r3, #13
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	e04c      	b.n	80040e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	4a33      	ldr	r2, [pc, #204]	; (8004118 <USB_SetTurnaroundTime+0x128>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d306      	bcc.n	800405c <USB_SetTurnaroundTime+0x6c>
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4a32      	ldr	r2, [pc, #200]	; (800411c <USB_SetTurnaroundTime+0x12c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d802      	bhi.n	800405c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004056:	230c      	movs	r3, #12
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	e041      	b.n	80040e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4a2f      	ldr	r2, [pc, #188]	; (800411c <USB_SetTurnaroundTime+0x12c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d906      	bls.n	8004072 <USB_SetTurnaroundTime+0x82>
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4a2e      	ldr	r2, [pc, #184]	; (8004120 <USB_SetTurnaroundTime+0x130>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d802      	bhi.n	8004072 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800406c:	230b      	movs	r3, #11
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	e036      	b.n	80040e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	4a2a      	ldr	r2, [pc, #168]	; (8004120 <USB_SetTurnaroundTime+0x130>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d906      	bls.n	8004088 <USB_SetTurnaroundTime+0x98>
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	4a29      	ldr	r2, [pc, #164]	; (8004124 <USB_SetTurnaroundTime+0x134>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d802      	bhi.n	8004088 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004082:	230a      	movs	r3, #10
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	e02b      	b.n	80040e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4a26      	ldr	r2, [pc, #152]	; (8004124 <USB_SetTurnaroundTime+0x134>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d906      	bls.n	800409e <USB_SetTurnaroundTime+0xae>
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	4a25      	ldr	r2, [pc, #148]	; (8004128 <USB_SetTurnaroundTime+0x138>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d202      	bcs.n	800409e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004098:	2309      	movs	r3, #9
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	e020      	b.n	80040e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	4a21      	ldr	r2, [pc, #132]	; (8004128 <USB_SetTurnaroundTime+0x138>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d306      	bcc.n	80040b4 <USB_SetTurnaroundTime+0xc4>
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	4a20      	ldr	r2, [pc, #128]	; (800412c <USB_SetTurnaroundTime+0x13c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d802      	bhi.n	80040b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80040ae:	2308      	movs	r3, #8
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	e015      	b.n	80040e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4a1d      	ldr	r2, [pc, #116]	; (800412c <USB_SetTurnaroundTime+0x13c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d906      	bls.n	80040ca <USB_SetTurnaroundTime+0xda>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4a1c      	ldr	r2, [pc, #112]	; (8004130 <USB_SetTurnaroundTime+0x140>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d202      	bcs.n	80040ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80040c4:	2307      	movs	r3, #7
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	e00a      	b.n	80040e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80040ca:	2306      	movs	r3, #6
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	e007      	b.n	80040e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80040d0:	79fb      	ldrb	r3, [r7, #7]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d102      	bne.n	80040dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80040d6:	2309      	movs	r3, #9
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	e001      	b.n	80040e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80040dc:	2309      	movs	r3, #9
 80040de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	029b      	lsls	r3, r3, #10
 80040f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80040f8:	431a      	orrs	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	00d8acbf 	.word	0x00d8acbf
 8004110:	00e4e1c0 	.word	0x00e4e1c0
 8004114:	00f42400 	.word	0x00f42400
 8004118:	01067380 	.word	0x01067380
 800411c:	011a499f 	.word	0x011a499f
 8004120:	01312cff 	.word	0x01312cff
 8004124:	014ca43f 	.word	0x014ca43f
 8004128:	016e3600 	.word	0x016e3600
 800412c:	01a6ab1f 	.word	0x01a6ab1f
 8004130:	01e84800 	.word	0x01e84800

08004134 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f043 0201 	orr.w	r2, r3, #1
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f023 0201 	bic.w	r2, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d115      	bne.n	80041c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041a6:	2001      	movs	r0, #1
 80041a8:	f7fc fe0c 	bl	8000dc4 <HAL_Delay>
      ms++;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3301      	adds	r3, #1
 80041b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f001 fa45 	bl	8005642 <USB_GetMode>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d01e      	beq.n	80041fc <USB_SetCurrentMode+0x84>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b31      	cmp	r3, #49	; 0x31
 80041c2:	d9f0      	bls.n	80041a6 <USB_SetCurrentMode+0x2e>
 80041c4:	e01a      	b.n	80041fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d115      	bne.n	80041f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041d8:	2001      	movs	r0, #1
 80041da:	f7fc fdf3 	bl	8000dc4 <HAL_Delay>
      ms++;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3301      	adds	r3, #1
 80041e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f001 fa2c 	bl	8005642 <USB_GetMode>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <USB_SetCurrentMode+0x84>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b31      	cmp	r3, #49	; 0x31
 80041f4:	d9f0      	bls.n	80041d8 <USB_SetCurrentMode+0x60>
 80041f6:	e001      	b.n	80041fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e005      	b.n	8004208 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b32      	cmp	r3, #50	; 0x32
 8004200:	d101      	bne.n	8004206 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e000      	b.n	8004208 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004210:	b084      	sub	sp, #16
 8004212:	b580      	push	{r7, lr}
 8004214:	b086      	sub	sp, #24
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800421e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800422a:	2300      	movs	r3, #0
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	e009      	b.n	8004244 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	3340      	adds	r3, #64	; 0x40
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	2200      	movs	r2, #0
 800423c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	3301      	adds	r3, #1
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	2b0e      	cmp	r3, #14
 8004248:	d9f2      	bls.n	8004230 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800424a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800424c:	2b00      	cmp	r3, #0
 800424e:	d11c      	bne.n	800428a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800425e:	f043 0302 	orr.w	r3, r3, #2
 8004262:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004274:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	639a      	str	r2, [r3, #56]	; 0x38
 8004288:	e00b      	b.n	80042a2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042a8:	461a      	mov	r2, r3
 80042aa:	2300      	movs	r3, #0
 80042ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b4:	4619      	mov	r1, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042bc:	461a      	mov	r2, r3
 80042be:	680b      	ldr	r3, [r1, #0]
 80042c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d10c      	bne.n	80042e2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d104      	bne.n	80042d8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042ce:	2100      	movs	r1, #0
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f965 	bl	80045a0 <USB_SetDevSpeed>
 80042d6:	e008      	b.n	80042ea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042d8:	2101      	movs	r1, #1
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f960 	bl	80045a0 <USB_SetDevSpeed>
 80042e0:	e003      	b.n	80042ea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042e2:	2103      	movs	r1, #3
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f95b 	bl	80045a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042ea:	2110      	movs	r1, #16
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f8f3 	bl	80044d8 <USB_FlushTxFifo>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f91f 	bl	8004540 <USB_FlushRxFifo>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004312:	461a      	mov	r2, r3
 8004314:	2300      	movs	r3, #0
 8004316:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431e:	461a      	mov	r2, r3
 8004320:	2300      	movs	r3, #0
 8004322:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432a:	461a      	mov	r2, r3
 800432c:	2300      	movs	r3, #0
 800432e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004330:	2300      	movs	r3, #0
 8004332:	613b      	str	r3, [r7, #16]
 8004334:	e043      	b.n	80043be <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004348:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800434c:	d118      	bne.n	8004380 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10a      	bne.n	800436a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004360:	461a      	mov	r2, r3
 8004362:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	e013      	b.n	8004392 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004376:	461a      	mov	r2, r3
 8004378:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	e008      	b.n	8004392 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438c:	461a      	mov	r2, r3
 800438e:	2300      	movs	r3, #0
 8004390:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439e:	461a      	mov	r2, r3
 80043a0:	2300      	movs	r3, #0
 80043a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b0:	461a      	mov	r2, r3
 80043b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	3301      	adds	r3, #1
 80043bc:	613b      	str	r3, [r7, #16]
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d3b7      	bcc.n	8004336 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043c6:	2300      	movs	r3, #0
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	e043      	b.n	8004454 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043e2:	d118      	bne.n	8004416 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10a      	bne.n	8004400 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f6:	461a      	mov	r2, r3
 80043f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	e013      	b.n	8004428 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440c:	461a      	mov	r2, r3
 800440e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	e008      	b.n	8004428 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004422:	461a      	mov	r2, r3
 8004424:	2300      	movs	r3, #0
 8004426:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004434:	461a      	mov	r2, r3
 8004436:	2300      	movs	r3, #0
 8004438:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004446:	461a      	mov	r2, r3
 8004448:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800444c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	3301      	adds	r3, #1
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	429a      	cmp	r2, r3
 800445a:	d3b7      	bcc.n	80043cc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800446a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800446e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800447c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004480:	2b00      	cmp	r3, #0
 8004482:	d105      	bne.n	8004490 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f043 0210 	orr.w	r2, r3, #16
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	699a      	ldr	r2, [r3, #24]
 8004494:	4b0f      	ldr	r3, [pc, #60]	; (80044d4 <USB_DevInit+0x2c4>)
 8004496:	4313      	orrs	r3, r2
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800449c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	f043 0208 	orr.w	r2, r3, #8
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80044ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d107      	bne.n	80044c4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044bc:	f043 0304 	orr.w	r3, r3, #4
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80044c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044d0:	b004      	add	sp, #16
 80044d2:	4770      	bx	lr
 80044d4:	803c3800 	.word	0x803c3800

080044d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	3301      	adds	r3, #1
 80044ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4a13      	ldr	r2, [pc, #76]	; (800453c <USB_FlushTxFifo+0x64>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d901      	bls.n	80044f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e01b      	b.n	8004530 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	daf2      	bge.n	80044e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	019b      	lsls	r3, r3, #6
 8004508:	f043 0220 	orr.w	r2, r3, #32
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3301      	adds	r3, #1
 8004514:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4a08      	ldr	r2, [pc, #32]	; (800453c <USB_FlushTxFifo+0x64>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d901      	bls.n	8004522 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e006      	b.n	8004530 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0320 	and.w	r3, r3, #32
 800452a:	2b20      	cmp	r3, #32
 800452c:	d0f0      	beq.n	8004510 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	00030d40 	.word	0x00030d40

08004540 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	3301      	adds	r3, #1
 8004550:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4a11      	ldr	r2, [pc, #68]	; (800459c <USB_FlushRxFifo+0x5c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d901      	bls.n	800455e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e018      	b.n	8004590 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	2b00      	cmp	r3, #0
 8004564:	daf2      	bge.n	800454c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2210      	movs	r2, #16
 800456e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	3301      	adds	r3, #1
 8004574:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4a08      	ldr	r2, [pc, #32]	; (800459c <USB_FlushRxFifo+0x5c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e006      	b.n	8004590 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b10      	cmp	r3, #16
 800458c:	d0f0      	beq.n	8004570 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	00030d40 	.word	0x00030d40

080045a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	68f9      	ldr	r1, [r7, #12]
 80045bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045c0:	4313      	orrs	r3, r2
 80045c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b087      	sub	sp, #28
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 0306 	and.w	r3, r3, #6
 80045ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d102      	bne.n	80045f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80045f2:	2300      	movs	r3, #0
 80045f4:	75fb      	strb	r3, [r7, #23]
 80045f6:	e00a      	b.n	800460e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d002      	beq.n	8004604 <USB_GetDevSpeed+0x32>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b06      	cmp	r3, #6
 8004602:	d102      	bne.n	800460a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004604:	2302      	movs	r3, #2
 8004606:	75fb      	strb	r3, [r7, #23]
 8004608:	e001      	b.n	800460e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800460a:	230f      	movs	r3, #15
 800460c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800460e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004610:	4618      	mov	r0, r3
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	785b      	ldrb	r3, [r3, #1]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d13a      	bne.n	80046ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463e:	69da      	ldr	r2, [r3, #28]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	f003 030f 	and.w	r3, r3, #15
 8004648:	2101      	movs	r1, #1
 800464a:	fa01 f303 	lsl.w	r3, r1, r3
 800464e:	b29b      	uxth	r3, r3
 8004650:	68f9      	ldr	r1, [r7, #12]
 8004652:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004656:	4313      	orrs	r3, r2
 8004658:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d155      	bne.n	800471c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	791b      	ldrb	r3, [r3, #4]
 800468a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800468c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	059b      	lsls	r3, r3, #22
 8004692:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004694:	4313      	orrs	r3, r2
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	0151      	lsls	r1, r2, #5
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	440a      	add	r2, r1
 800469e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	e036      	b.n	800471c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b4:	69da      	ldr	r2, [r3, #28]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	2101      	movs	r1, #1
 80046c0:	fa01 f303 	lsl.w	r3, r1, r3
 80046c4:	041b      	lsls	r3, r3, #16
 80046c6:	68f9      	ldr	r1, [r7, #12]
 80046c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046cc:	4313      	orrs	r3, r2
 80046ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d11a      	bne.n	800471c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	791b      	ldrb	r3, [r3, #4]
 8004700:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004702:	430b      	orrs	r3, r1
 8004704:	4313      	orrs	r3, r2
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	0151      	lsls	r1, r2, #5
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	440a      	add	r2, r1
 800470e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800471a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
	...

0800472c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	785b      	ldrb	r3, [r3, #1]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d161      	bne.n	800480c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800475a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800475e:	d11f      	bne.n	80047a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	0151      	lsls	r1, r2, #5
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	440a      	add	r2, r1
 8004776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800477a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800477e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	0151      	lsls	r1, r2, #5
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	440a      	add	r2, r1
 8004796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800479a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800479e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	f003 030f 	and.w	r3, r3, #15
 80047b0:	2101      	movs	r1, #1
 80047b2:	fa01 f303 	lsl.w	r3, r1, r3
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	43db      	mvns	r3, r3
 80047ba:	68f9      	ldr	r1, [r7, #12]
 80047bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047c0:	4013      	ands	r3, r2
 80047c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ca:	69da      	ldr	r2, [r3, #28]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	f003 030f 	and.w	r3, r3, #15
 80047d4:	2101      	movs	r1, #1
 80047d6:	fa01 f303 	lsl.w	r3, r1, r3
 80047da:	b29b      	uxth	r3, r3
 80047dc:	43db      	mvns	r3, r3
 80047de:	68f9      	ldr	r1, [r7, #12]
 80047e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047e4:	4013      	ands	r3, r2
 80047e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	0159      	lsls	r1, r3, #5
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	440b      	add	r3, r1
 80047fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004802:	4619      	mov	r1, r3
 8004804:	4b35      	ldr	r3, [pc, #212]	; (80048dc <USB_DeactivateEndpoint+0x1b0>)
 8004806:	4013      	ands	r3, r2
 8004808:	600b      	str	r3, [r1, #0]
 800480a:	e060      	b.n	80048ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800481e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004822:	d11f      	bne.n	8004864 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	0151      	lsls	r1, r2, #5
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	440a      	add	r2, r1
 800483a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800483e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004842:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	0151      	lsls	r1, r2, #5
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	440a      	add	r2, r1
 800485a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800485e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004862:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	f003 030f 	and.w	r3, r3, #15
 8004874:	2101      	movs	r1, #1
 8004876:	fa01 f303 	lsl.w	r3, r1, r3
 800487a:	041b      	lsls	r3, r3, #16
 800487c:	43db      	mvns	r3, r3
 800487e:	68f9      	ldr	r1, [r7, #12]
 8004880:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004884:	4013      	ands	r3, r2
 8004886:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488e:	69da      	ldr	r2, [r3, #28]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	f003 030f 	and.w	r3, r3, #15
 8004898:	2101      	movs	r1, #1
 800489a:	fa01 f303 	lsl.w	r3, r1, r3
 800489e:	041b      	lsls	r3, r3, #16
 80048a0:	43db      	mvns	r3, r3
 80048a2:	68f9      	ldr	r1, [r7, #12]
 80048a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048a8:	4013      	ands	r3, r2
 80048aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	0159      	lsls	r1, r3, #5
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	440b      	add	r3, r1
 80048c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c6:	4619      	mov	r1, r3
 80048c8:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <USB_DeactivateEndpoint+0x1b4>)
 80048ca:	4013      	ands	r3, r2
 80048cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	ec337800 	.word	0xec337800
 80048e0:	eff37800 	.word	0xeff37800

080048e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08a      	sub	sp, #40	; 0x28
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	4613      	mov	r3, r2
 80048f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	785b      	ldrb	r3, [r3, #1]
 8004900:	2b01      	cmp	r3, #1
 8004902:	f040 815c 	bne.w	8004bbe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d132      	bne.n	8004974 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	0151      	lsls	r1, r2, #5
 8004920:	69fa      	ldr	r2, [r7, #28]
 8004922:	440a      	add	r2, r1
 8004924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004928:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800492c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004930:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	0151      	lsls	r1, r2, #5
 8004944:	69fa      	ldr	r2, [r7, #28]
 8004946:	440a      	add	r2, r1
 8004948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800494c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004950:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	0151      	lsls	r1, r2, #5
 8004964:	69fa      	ldr	r2, [r7, #28]
 8004966:	440a      	add	r2, r1
 8004968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800496c:	0cdb      	lsrs	r3, r3, #19
 800496e:	04db      	lsls	r3, r3, #19
 8004970:	6113      	str	r3, [r2, #16]
 8004972:	e074      	b.n	8004a5e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	0151      	lsls	r1, r2, #5
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	440a      	add	r2, r1
 800498a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800498e:	0cdb      	lsrs	r3, r3, #19
 8004990:	04db      	lsls	r3, r3, #19
 8004992:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	0151      	lsls	r1, r2, #5
 80049a6:	69fa      	ldr	r2, [r7, #28]
 80049a8:	440a      	add	r2, r1
 80049aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	6999      	ldr	r1, [r3, #24]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	440b      	add	r3, r1
 80049d0:	1e59      	subs	r1, r3, #1
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80049da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80049dc:	4b9d      	ldr	r3, [pc, #628]	; (8004c54 <USB_EPStartXfer+0x370>)
 80049de:	400b      	ands	r3, r1
 80049e0:	69b9      	ldr	r1, [r7, #24]
 80049e2:	0148      	lsls	r0, r1, #5
 80049e4:	69f9      	ldr	r1, [r7, #28]
 80049e6:	4401      	add	r1, r0
 80049e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049ec:	4313      	orrs	r3, r2
 80049ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fc:	691a      	ldr	r2, [r3, #16]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a06:	69b9      	ldr	r1, [r7, #24]
 8004a08:	0148      	lsls	r0, r1, #5
 8004a0a:	69f9      	ldr	r1, [r7, #28]
 8004a0c:	4401      	add	r1, r0
 8004a0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a12:	4313      	orrs	r3, r2
 8004a14:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	791b      	ldrb	r3, [r3, #4]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d11f      	bne.n	8004a5e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	0151      	lsls	r1, r2, #5
 8004a30:	69fa      	ldr	r2, [r7, #28]
 8004a32:	440a      	add	r2, r1
 8004a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a38:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004a3c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	0151      	lsls	r1, r2, #5
 8004a50:	69fa      	ldr	r2, [r7, #28]
 8004a52:	440a      	add	r2, r1
 8004a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a5c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004a5e:	79fb      	ldrb	r3, [r7, #7]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d14b      	bne.n	8004afc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d009      	beq.n	8004a80 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a78:	461a      	mov	r2, r3
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	791b      	ldrb	r3, [r3, #4]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d128      	bne.n	8004ada <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d110      	bne.n	8004aba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	0151      	lsls	r1, r2, #5
 8004aaa:	69fa      	ldr	r2, [r7, #28]
 8004aac:	440a      	add	r2, r1
 8004aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	e00f      	b.n	8004ada <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	0151      	lsls	r1, r2, #5
 8004acc:	69fa      	ldr	r2, [r7, #28]
 8004ace:	440a      	add	r2, r1
 8004ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	0151      	lsls	r1, r2, #5
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	440a      	add	r2, r1
 8004af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	e133      	b.n	8004d64 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	0151      	lsls	r1, r2, #5
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	440a      	add	r2, r1
 8004b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b1a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	791b      	ldrb	r3, [r3, #4]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d015      	beq.n	8004b50 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 811b 	beq.w	8004d64 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	2101      	movs	r1, #1
 8004b40:	fa01 f303 	lsl.w	r3, r1, r3
 8004b44:	69f9      	ldr	r1, [r7, #28]
 8004b46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	634b      	str	r3, [r1, #52]	; 0x34
 8004b4e:	e109      	b.n	8004d64 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d110      	bne.n	8004b82 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	0151      	lsls	r1, r2, #5
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	440a      	add	r2, r1
 8004b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	e00f      	b.n	8004ba2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	0151      	lsls	r1, r2, #5
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	440a      	add	r2, r1
 8004b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	6919      	ldr	r1, [r3, #16]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	781a      	ldrb	r2, [r3, #0]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	b298      	uxth	r0, r3
 8004bb0:	79fb      	ldrb	r3, [r7, #7]
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 fade 	bl	8005178 <USB_WritePacket>
 8004bbc:	e0d2      	b.n	8004d64 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	0151      	lsls	r1, r2, #5
 8004bd0:	69fa      	ldr	r2, [r7, #28]
 8004bd2:	440a      	add	r2, r1
 8004bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bd8:	0cdb      	lsrs	r3, r3, #19
 8004bda:	04db      	lsls	r3, r3, #19
 8004bdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	0151      	lsls	r1, r2, #5
 8004bf0:	69fa      	ldr	r2, [r7, #28]
 8004bf2:	440a      	add	r2, r1
 8004bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bf8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bfc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c00:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d126      	bne.n	8004c58 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c20:	69b9      	ldr	r1, [r7, #24]
 8004c22:	0148      	lsls	r0, r1, #5
 8004c24:	69f9      	ldr	r1, [r7, #28]
 8004c26:	4401      	add	r1, r0
 8004c28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	0151      	lsls	r1, r2, #5
 8004c42:	69fa      	ldr	r2, [r7, #28]
 8004c44:	440a      	add	r2, r1
 8004c46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c4e:	6113      	str	r3, [r2, #16]
 8004c50:	e03a      	b.n	8004cc8 <USB_EPStartXfer+0x3e4>
 8004c52:	bf00      	nop
 8004c54:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	699a      	ldr	r2, [r3, #24]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	4413      	add	r3, r2
 8004c62:	1e5a      	subs	r2, r3, #1
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	8afa      	ldrh	r2, [r7, #22]
 8004c74:	fb03 f202 	mul.w	r2, r3, r2
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	8afb      	ldrh	r3, [r7, #22]
 8004c8c:	04d9      	lsls	r1, r3, #19
 8004c8e:	4b38      	ldr	r3, [pc, #224]	; (8004d70 <USB_EPStartXfer+0x48c>)
 8004c90:	400b      	ands	r3, r1
 8004c92:	69b9      	ldr	r1, [r7, #24]
 8004c94:	0148      	lsls	r0, r1, #5
 8004c96:	69f9      	ldr	r1, [r7, #28]
 8004c98:	4401      	add	r1, r0
 8004c9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb8:	69b9      	ldr	r1, [r7, #24]
 8004cba:	0148      	lsls	r0, r1, #5
 8004cbc:	69f9      	ldr	r1, [r7, #28]
 8004cbe:	4401      	add	r1, r0
 8004cc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004cc8:	79fb      	ldrb	r3, [r7, #7]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d10d      	bne.n	8004cea <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d009      	beq.n	8004cea <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	6919      	ldr	r1, [r3, #16]
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce6:	460a      	mov	r2, r1
 8004ce8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	791b      	ldrb	r3, [r3, #4]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d128      	bne.n	8004d44 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d110      	bne.n	8004d24 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	0151      	lsls	r1, r2, #5
 8004d14:	69fa      	ldr	r2, [r7, #28]
 8004d16:	440a      	add	r2, r1
 8004d18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	e00f      	b.n	8004d44 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	0151      	lsls	r1, r2, #5
 8004d36:	69fa      	ldr	r2, [r7, #28]
 8004d38:	440a      	add	r2, r1
 8004d3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d42:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	0151      	lsls	r1, r2, #5
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	440a      	add	r2, r1
 8004d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3720      	adds	r7, #32
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	1ff80000 	.word	0x1ff80000

08004d74 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	785b      	ldrb	r3, [r3, #1]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	f040 80ce 	bne.w	8004f32 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d132      	bne.n	8004e04 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	0151      	lsls	r1, r2, #5
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	440a      	add	r2, r1
 8004db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004db8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	0151      	lsls	r1, r2, #5
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	440a      	add	r2, r1
 8004dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ddc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004de0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	0151      	lsls	r1, r2, #5
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	440a      	add	r2, r1
 8004df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dfc:	0cdb      	lsrs	r3, r3, #19
 8004dfe:	04db      	lsls	r3, r3, #19
 8004e00:	6113      	str	r3, [r2, #16]
 8004e02:	e04e      	b.n	8004ea2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	0151      	lsls	r1, r2, #5
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	440a      	add	r2, r1
 8004e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e1e:	0cdb      	lsrs	r3, r3, #19
 8004e20:	04db      	lsls	r3, r3, #19
 8004e22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	0151      	lsls	r1, r2, #5
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	440a      	add	r2, r1
 8004e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e46:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d903      	bls.n	8004e5c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	0151      	lsls	r1, r2, #5
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	440a      	add	r2, r1
 8004e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e88:	691a      	ldr	r2, [r3, #16]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e92:	6939      	ldr	r1, [r7, #16]
 8004e94:	0148      	lsls	r0, r1, #5
 8004e96:	6979      	ldr	r1, [r7, #20]
 8004e98:	4401      	add	r1, r0
 8004e9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ea2:	79fb      	ldrb	r3, [r7, #7]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d11e      	bne.n	8004ee6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d009      	beq.n	8004ec4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	0151      	lsls	r1, r2, #5
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	440a      	add	r2, r1
 8004eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ede:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	e097      	b.n	8005016 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	0151      	lsls	r1, r2, #5
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	440a      	add	r2, r1
 8004efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f04:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 8083 	beq.w	8005016 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	2101      	movs	r1, #1
 8004f22:	fa01 f303 	lsl.w	r3, r1, r3
 8004f26:	6979      	ldr	r1, [r7, #20]
 8004f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	634b      	str	r3, [r1, #52]	; 0x34
 8004f30:	e071      	b.n	8005016 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	0151      	lsls	r1, r2, #5
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	440a      	add	r2, r1
 8004f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f4c:	0cdb      	lsrs	r3, r3, #19
 8004f4e:	04db      	lsls	r3, r3, #19
 8004f50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	0151      	lsls	r1, r2, #5
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	440a      	add	r2, r1
 8004f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f74:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	0151      	lsls	r1, r2, #5
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	440a      	add	r2, r1
 8004fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fc4:	6939      	ldr	r1, [r7, #16]
 8004fc6:	0148      	lsls	r0, r1, #5
 8004fc8:	6979      	ldr	r1, [r7, #20]
 8004fca:	4401      	add	r1, r0
 8004fcc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004fd4:	79fb      	ldrb	r3, [r7, #7]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d10d      	bne.n	8004ff6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d009      	beq.n	8004ff6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	6919      	ldr	r1, [r3, #16]
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff2:	460a      	mov	r2, r1
 8004ff4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	0151      	lsls	r1, r2, #5
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	440a      	add	r2, r1
 800500c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005010:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005014:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	371c      	adds	r7, #28
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800502e:	2300      	movs	r3, #0
 8005030:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	785b      	ldrb	r3, [r3, #1]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d14a      	bne.n	80050d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005056:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800505a:	f040 8086 	bne.w	800516a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	7812      	ldrb	r2, [r2, #0]
 8005072:	0151      	lsls	r1, r2, #5
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	440a      	add	r2, r1
 8005078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800507c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005080:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	7812      	ldrb	r2, [r2, #0]
 8005096:	0151      	lsls	r1, r2, #5
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	440a      	add	r2, r1
 800509c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	3301      	adds	r3, #1
 80050aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d902      	bls.n	80050bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	75fb      	strb	r3, [r7, #23]
          break;
 80050ba:	e056      	b.n	800516a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050d4:	d0e7      	beq.n	80050a6 <USB_EPStopXfer+0x82>
 80050d6:	e048      	b.n	800516a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050f0:	d13b      	bne.n	800516a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	7812      	ldrb	r2, [r2, #0]
 8005106:	0151      	lsls	r1, r2, #5
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	440a      	add	r2, r1
 800510c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005110:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005114:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	7812      	ldrb	r2, [r2, #0]
 800512a:	0151      	lsls	r1, r2, #5
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	440a      	add	r2, r1
 8005130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005134:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005138:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3301      	adds	r3, #1
 800513e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f242 7210 	movw	r2, #10000	; 0x2710
 8005146:	4293      	cmp	r3, r2
 8005148:	d902      	bls.n	8005150 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	75fb      	strb	r3, [r7, #23]
          break;
 800514e:	e00c      	b.n	800516a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005168:	d0e7      	beq.n	800513a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800516a:	7dfb      	ldrb	r3, [r7, #23]
}
 800516c:	4618      	mov	r0, r3
 800516e:	371c      	adds	r7, #28
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005178:	b480      	push	{r7}
 800517a:	b089      	sub	sp, #36	; 0x24
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	4611      	mov	r1, r2
 8005184:	461a      	mov	r2, r3
 8005186:	460b      	mov	r3, r1
 8005188:	71fb      	strb	r3, [r7, #7]
 800518a:	4613      	mov	r3, r2
 800518c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005196:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800519a:	2b00      	cmp	r3, #0
 800519c:	d123      	bne.n	80051e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800519e:	88bb      	ldrh	r3, [r7, #4]
 80051a0:	3303      	adds	r3, #3
 80051a2:	089b      	lsrs	r3, r3, #2
 80051a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80051a6:	2300      	movs	r3, #0
 80051a8:	61bb      	str	r3, [r7, #24]
 80051aa:	e018      	b.n	80051de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80051ac:	79fb      	ldrb	r3, [r7, #7]
 80051ae:	031a      	lsls	r2, r3, #12
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b8:	461a      	mov	r2, r3
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	3301      	adds	r3, #1
 80051c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	3301      	adds	r3, #1
 80051ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	3301      	adds	r3, #1
 80051d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	3301      	adds	r3, #1
 80051d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	3301      	adds	r3, #1
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d3e2      	bcc.n	80051ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3724      	adds	r7, #36	; 0x24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b08b      	sub	sp, #44	; 0x2c
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	4613      	mov	r3, r2
 8005200:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800520a:	88fb      	ldrh	r3, [r7, #6]
 800520c:	089b      	lsrs	r3, r3, #2
 800520e:	b29b      	uxth	r3, r3
 8005210:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005212:	88fb      	ldrh	r3, [r7, #6]
 8005214:	f003 0303 	and.w	r3, r3, #3
 8005218:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800521a:	2300      	movs	r3, #0
 800521c:	623b      	str	r3, [r7, #32]
 800521e:	e014      	b.n	800524a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	601a      	str	r2, [r3, #0]
    pDest++;
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	3301      	adds	r3, #1
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	3301      	adds	r3, #1
 8005236:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	3301      	adds	r3, #1
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	3301      	adds	r3, #1
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	3301      	adds	r3, #1
 8005248:	623b      	str	r3, [r7, #32]
 800524a:	6a3a      	ldr	r2, [r7, #32]
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	429a      	cmp	r2, r3
 8005250:	d3e6      	bcc.n	8005220 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005252:	8bfb      	ldrh	r3, [r7, #30]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01e      	beq.n	8005296 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005262:	461a      	mov	r2, r3
 8005264:	f107 0310 	add.w	r3, r7, #16
 8005268:	6812      	ldr	r2, [r2, #0]
 800526a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	b2db      	uxtb	r3, r3
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	fa22 f303 	lsr.w	r3, r2, r3
 8005278:	b2da      	uxtb	r2, r3
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	701a      	strb	r2, [r3, #0]
      i++;
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	3301      	adds	r3, #1
 8005282:	623b      	str	r3, [r7, #32]
      pDest++;
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	3301      	adds	r3, #1
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800528a:	8bfb      	ldrh	r3, [r7, #30]
 800528c:	3b01      	subs	r3, #1
 800528e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005290:	8bfb      	ldrh	r3, [r7, #30]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1ea      	bne.n	800526c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005298:	4618      	mov	r0, r3
 800529a:	372c      	adds	r7, #44	; 0x2c
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	785b      	ldrb	r3, [r3, #1]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d12c      	bne.n	800531a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	db12      	blt.n	80052f8 <USB_EPSetStall+0x54>
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00f      	beq.n	80052f8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	0151      	lsls	r1, r2, #5
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	440a      	add	r2, r1
 80052ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052f6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	0151      	lsls	r1, r2, #5
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	440a      	add	r2, r1
 800530e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005312:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	e02b      	b.n	8005372 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	db12      	blt.n	8005352 <USB_EPSetStall+0xae>
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00f      	beq.n	8005352 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	0151      	lsls	r1, r2, #5
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	440a      	add	r2, r1
 8005348:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800534c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005350:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	0151      	lsls	r1, r2, #5
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	440a      	add	r2, r1
 8005368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800536c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005370:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	785b      	ldrb	r3, [r3, #1]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d128      	bne.n	80053ee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053ba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	791b      	ldrb	r3, [r3, #4]
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d003      	beq.n	80053cc <USB_EPClearStall+0x4c>
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	791b      	ldrb	r3, [r3, #4]
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d138      	bne.n	800543e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	0151      	lsls	r1, r2, #5
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	440a      	add	r2, r1
 80053e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ea:	6013      	str	r3, [r2, #0]
 80053ec:	e027      	b.n	800543e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	0151      	lsls	r1, r2, #5
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	440a      	add	r2, r1
 8005404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005408:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800540c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	791b      	ldrb	r3, [r3, #4]
 8005412:	2b03      	cmp	r3, #3
 8005414:	d003      	beq.n	800541e <USB_EPClearStall+0x9e>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	791b      	ldrb	r3, [r3, #4]
 800541a:	2b02      	cmp	r3, #2
 800541c:	d10f      	bne.n	800543e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	0151      	lsls	r1, r2, #5
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	440a      	add	r2, r1
 8005434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800543c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800546a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800546e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005480:	68f9      	ldr	r1, [r7, #12]
 8005482:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005486:	4313      	orrs	r3, r2
 8005488:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054b2:	f023 0303 	bic.w	r3, r3, #3
 80054b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054c6:	f023 0302 	bic.w	r3, r3, #2
 80054ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054f4:	f023 0303 	bic.w	r3, r3, #3
 80054f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005508:	f043 0302 	orr.w	r3, r3, #2
 800550c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4013      	ands	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005534:	68fb      	ldr	r3, [r7, #12]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005542:	b480      	push	{r7}
 8005544:	b085      	sub	sp, #20
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	4013      	ands	r3, r2
 8005564:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	0c1b      	lsrs	r3, r3, #16
}
 800556a:	4618      	mov	r0, r3
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005576:	b480      	push	{r7}
 8005578:	b085      	sub	sp, #20
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	4013      	ands	r3, r2
 8005598:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	b29b      	uxth	r3, r3
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b085      	sub	sp, #20
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	460b      	mov	r3, r1
 80055b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80055ba:	78fb      	ldrb	r3, [r7, #3]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	4013      	ands	r3, r2
 80055d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055d8:	68bb      	ldr	r3, [r7, #8]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b087      	sub	sp, #28
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	460b      	mov	r3, r1
 80055f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005608:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	fa22 f303 	lsr.w	r3, r2, r3
 8005616:	01db      	lsls	r3, r3, #7
 8005618:	b2db      	uxtb	r3, r3
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4313      	orrs	r3, r2
 800561e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4013      	ands	r3, r2
 8005632:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005634:	68bb      	ldr	r3, [r7, #8]
}
 8005636:	4618      	mov	r0, r3
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f003 0301 	and.w	r3, r3, #1
}
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800565e:	b480      	push	{r7}
 8005660:	b085      	sub	sp, #20
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005678:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800567c:	f023 0307 	bic.w	r3, r3, #7
 8005680:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005694:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	460b      	mov	r3, r1
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	333c      	adds	r3, #60	; 0x3c
 80056ba:	3304      	adds	r3, #4
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	4a26      	ldr	r2, [pc, #152]	; (800575c <USB_EP0_OutStart+0xb8>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d90a      	bls.n	80056de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056d8:	d101      	bne.n	80056de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	e037      	b.n	800574e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e4:	461a      	mov	r2, r3
 80056e6:	2300      	movs	r3, #0
 80056e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800570c:	f043 0318 	orr.w	r3, r3, #24
 8005710:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005720:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005724:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005726:	7afb      	ldrb	r3, [r7, #11]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d10f      	bne.n	800574c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005732:	461a      	mov	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005746:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800574a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	371c      	adds	r7, #28
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	4f54300a 	.word	0x4f54300a

08005760 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3301      	adds	r3, #1
 8005770:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4a13      	ldr	r2, [pc, #76]	; (80057c4 <USB_CoreReset+0x64>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d901      	bls.n	800577e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e01b      	b.n	80057b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	daf2      	bge.n	800576c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f043 0201 	orr.w	r2, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3301      	adds	r3, #1
 800579a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4a09      	ldr	r2, [pc, #36]	; (80057c4 <USB_CoreReset+0x64>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d901      	bls.n	80057a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e006      	b.n	80057b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d0f0      	beq.n	8005796 <USB_CoreReset+0x36>

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	00030d40 	.word	0x00030d40

080057c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80057d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80057d8:	f002 fc8a 	bl	80080f0 <USBD_static_malloc>
 80057dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d109      	bne.n	80057f8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	32b0      	adds	r2, #176	; 0xb0
 80057ee:	2100      	movs	r1, #0
 80057f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80057f4:	2302      	movs	r3, #2
 80057f6:	e0d4      	b.n	80059a2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80057f8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80057fc:	2100      	movs	r1, #0
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f002 fd8e 	bl	8008320 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	32b0      	adds	r2, #176	; 0xb0
 800580e:	68f9      	ldr	r1, [r7, #12]
 8005810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	32b0      	adds	r2, #176	; 0xb0
 800581e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	7c1b      	ldrb	r3, [r3, #16]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d138      	bne.n	80058a2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005830:	4b5e      	ldr	r3, [pc, #376]	; (80059ac <USBD_CDC_Init+0x1e4>)
 8005832:	7819      	ldrb	r1, [r3, #0]
 8005834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005838:	2202      	movs	r2, #2
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f002 fb35 	bl	8007eaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005840:	4b5a      	ldr	r3, [pc, #360]	; (80059ac <USBD_CDC_Init+0x1e4>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	f003 020f 	and.w	r2, r3, #15
 8005848:	6879      	ldr	r1, [r7, #4]
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	440b      	add	r3, r1
 8005854:	3324      	adds	r3, #36	; 0x24
 8005856:	2201      	movs	r2, #1
 8005858:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800585a:	4b55      	ldr	r3, [pc, #340]	; (80059b0 <USBD_CDC_Init+0x1e8>)
 800585c:	7819      	ldrb	r1, [r3, #0]
 800585e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005862:	2202      	movs	r2, #2
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f002 fb20 	bl	8007eaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800586a:	4b51      	ldr	r3, [pc, #324]	; (80059b0 <USBD_CDC_Init+0x1e8>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	f003 020f 	and.w	r2, r3, #15
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	440b      	add	r3, r1
 800587e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005882:	2201      	movs	r2, #1
 8005884:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005886:	4b4b      	ldr	r3, [pc, #300]	; (80059b4 <USBD_CDC_Init+0x1ec>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	f003 020f 	and.w	r2, r3, #15
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	4613      	mov	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	440b      	add	r3, r1
 800589a:	3326      	adds	r3, #38	; 0x26
 800589c:	2210      	movs	r2, #16
 800589e:	801a      	strh	r2, [r3, #0]
 80058a0:	e035      	b.n	800590e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80058a2:	4b42      	ldr	r3, [pc, #264]	; (80059ac <USBD_CDC_Init+0x1e4>)
 80058a4:	7819      	ldrb	r1, [r3, #0]
 80058a6:	2340      	movs	r3, #64	; 0x40
 80058a8:	2202      	movs	r2, #2
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f002 fafd 	bl	8007eaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80058b0:	4b3e      	ldr	r3, [pc, #248]	; (80059ac <USBD_CDC_Init+0x1e4>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	f003 020f 	and.w	r2, r3, #15
 80058b8:	6879      	ldr	r1, [r7, #4]
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	440b      	add	r3, r1
 80058c4:	3324      	adds	r3, #36	; 0x24
 80058c6:	2201      	movs	r2, #1
 80058c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80058ca:	4b39      	ldr	r3, [pc, #228]	; (80059b0 <USBD_CDC_Init+0x1e8>)
 80058cc:	7819      	ldrb	r1, [r3, #0]
 80058ce:	2340      	movs	r3, #64	; 0x40
 80058d0:	2202      	movs	r2, #2
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f002 fae9 	bl	8007eaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80058d8:	4b35      	ldr	r3, [pc, #212]	; (80059b0 <USBD_CDC_Init+0x1e8>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	f003 020f 	and.w	r2, r3, #15
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	4613      	mov	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	440b      	add	r3, r1
 80058ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80058f0:	2201      	movs	r2, #1
 80058f2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80058f4:	4b2f      	ldr	r3, [pc, #188]	; (80059b4 <USBD_CDC_Init+0x1ec>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	f003 020f 	and.w	r2, r3, #15
 80058fc:	6879      	ldr	r1, [r7, #4]
 80058fe:	4613      	mov	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	440b      	add	r3, r1
 8005908:	3326      	adds	r3, #38	; 0x26
 800590a:	2210      	movs	r2, #16
 800590c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800590e:	4b29      	ldr	r3, [pc, #164]	; (80059b4 <USBD_CDC_Init+0x1ec>)
 8005910:	7819      	ldrb	r1, [r3, #0]
 8005912:	2308      	movs	r3, #8
 8005914:	2203      	movs	r2, #3
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f002 fac7 	bl	8007eaa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800591c:	4b25      	ldr	r3, [pc, #148]	; (80059b4 <USBD_CDC_Init+0x1ec>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	f003 020f 	and.w	r2, r3, #15
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	440b      	add	r3, r1
 8005930:	3324      	adds	r3, #36	; 0x24
 8005932:	2201      	movs	r2, #1
 8005934:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	33b0      	adds	r3, #176	; 0xb0
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800596c:	2302      	movs	r3, #2
 800596e:	e018      	b.n	80059a2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	7c1b      	ldrb	r3, [r3, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10a      	bne.n	800598e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005978:	4b0d      	ldr	r3, [pc, #52]	; (80059b0 <USBD_CDC_Init+0x1e8>)
 800597a:	7819      	ldrb	r1, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f002 fb7e 	bl	8008088 <USBD_LL_PrepareReceive>
 800598c:	e008      	b.n	80059a0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800598e:	4b08      	ldr	r3, [pc, #32]	; (80059b0 <USBD_CDC_Init+0x1e8>)
 8005990:	7819      	ldrb	r1, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005998:	2340      	movs	r3, #64	; 0x40
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f002 fb74 	bl	8008088 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	200000a3 	.word	0x200000a3
 80059b0:	200000a4 	.word	0x200000a4
 80059b4:	200000a5 	.word	0x200000a5

080059b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	460b      	mov	r3, r1
 80059c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80059c4:	4b3a      	ldr	r3, [pc, #232]	; (8005ab0 <USBD_CDC_DeInit+0xf8>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	4619      	mov	r1, r3
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f002 fa93 	bl	8007ef6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80059d0:	4b37      	ldr	r3, [pc, #220]	; (8005ab0 <USBD_CDC_DeInit+0xf8>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	f003 020f 	and.w	r2, r3, #15
 80059d8:	6879      	ldr	r1, [r7, #4]
 80059da:	4613      	mov	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	440b      	add	r3, r1
 80059e4:	3324      	adds	r3, #36	; 0x24
 80059e6:	2200      	movs	r2, #0
 80059e8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80059ea:	4b32      	ldr	r3, [pc, #200]	; (8005ab4 <USBD_CDC_DeInit+0xfc>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	4619      	mov	r1, r3
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f002 fa80 	bl	8007ef6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80059f6:	4b2f      	ldr	r3, [pc, #188]	; (8005ab4 <USBD_CDC_DeInit+0xfc>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	f003 020f 	and.w	r2, r3, #15
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	4613      	mov	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a0e:	2200      	movs	r2, #0
 8005a10:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005a12:	4b29      	ldr	r3, [pc, #164]	; (8005ab8 <USBD_CDC_DeInit+0x100>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	4619      	mov	r1, r3
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f002 fa6c 	bl	8007ef6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005a1e:	4b26      	ldr	r3, [pc, #152]	; (8005ab8 <USBD_CDC_DeInit+0x100>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	f003 020f 	and.w	r2, r3, #15
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	440b      	add	r3, r1
 8005a32:	3324      	adds	r3, #36	; 0x24
 8005a34:	2200      	movs	r2, #0
 8005a36:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005a38:	4b1f      	ldr	r3, [pc, #124]	; (8005ab8 <USBD_CDC_DeInit+0x100>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	f003 020f 	and.w	r2, r3, #15
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	4613      	mov	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	3326      	adds	r3, #38	; 0x26
 8005a4e:	2200      	movs	r2, #0
 8005a50:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	32b0      	adds	r2, #176	; 0xb0
 8005a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01f      	beq.n	8005aa4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	33b0      	adds	r3, #176	; 0xb0
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	32b0      	adds	r2, #176	; 0xb0
 8005a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f002 fb40 	bl	800810c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	32b0      	adds	r2, #176	; 0xb0
 8005a96:	2100      	movs	r1, #0
 8005a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	200000a3 	.word	0x200000a3
 8005ab4:	200000a4 	.word	0x200000a4
 8005ab8:	200000a5 	.word	0x200000a5

08005abc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	32b0      	adds	r2, #176	; 0xb0
 8005ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e0bf      	b.n	8005c6c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d050      	beq.n	8005b9a <USBD_CDC_Setup+0xde>
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	f040 80af 	bne.w	8005c5c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	88db      	ldrh	r3, [r3, #6]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d03a      	beq.n	8005b7c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	b25b      	sxtb	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	da1b      	bge.n	8005b48 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	33b0      	adds	r3, #176	; 0xb0
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005b26:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	88d2      	ldrh	r2, [r2, #6]
 8005b2c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	88db      	ldrh	r3, [r3, #6]
 8005b32:	2b07      	cmp	r3, #7
 8005b34:	bf28      	it	cs
 8005b36:	2307      	movcs	r3, #7
 8005b38:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	89fa      	ldrh	r2, [r7, #14]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f001 fd89 	bl	8007658 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005b46:	e090      	b.n	8005c6a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	785a      	ldrb	r2, [r3, #1]
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	88db      	ldrh	r3, [r3, #6]
 8005b56:	2b3f      	cmp	r3, #63	; 0x3f
 8005b58:	d803      	bhi.n	8005b62 <USBD_CDC_Setup+0xa6>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	88db      	ldrh	r3, [r3, #6]
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	e000      	b.n	8005b64 <USBD_CDC_Setup+0xa8>
 8005b62:	2240      	movs	r2, #64	; 0x40
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005b6a:	6939      	ldr	r1, [r7, #16]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005b72:	461a      	mov	r2, r3
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f001 fd9b 	bl	80076b0 <USBD_CtlPrepareRx>
      break;
 8005b7a:	e076      	b.n	8005c6a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	33b0      	adds	r3, #176	; 0xb0
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	7850      	ldrb	r0, [r2, #1]
 8005b92:	2200      	movs	r2, #0
 8005b94:	6839      	ldr	r1, [r7, #0]
 8005b96:	4798      	blx	r3
      break;
 8005b98:	e067      	b.n	8005c6a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	785b      	ldrb	r3, [r3, #1]
 8005b9e:	2b0b      	cmp	r3, #11
 8005ba0:	d851      	bhi.n	8005c46 <USBD_CDC_Setup+0x18a>
 8005ba2:	a201      	add	r2, pc, #4	; (adr r2, 8005ba8 <USBD_CDC_Setup+0xec>)
 8005ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba8:	08005bd9 	.word	0x08005bd9
 8005bac:	08005c55 	.word	0x08005c55
 8005bb0:	08005c47 	.word	0x08005c47
 8005bb4:	08005c47 	.word	0x08005c47
 8005bb8:	08005c47 	.word	0x08005c47
 8005bbc:	08005c47 	.word	0x08005c47
 8005bc0:	08005c47 	.word	0x08005c47
 8005bc4:	08005c47 	.word	0x08005c47
 8005bc8:	08005c47 	.word	0x08005c47
 8005bcc:	08005c47 	.word	0x08005c47
 8005bd0:	08005c03 	.word	0x08005c03
 8005bd4:	08005c2d 	.word	0x08005c2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d107      	bne.n	8005bf4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005be4:	f107 030a 	add.w	r3, r7, #10
 8005be8:	2202      	movs	r2, #2
 8005bea:	4619      	mov	r1, r3
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f001 fd33 	bl	8007658 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bf2:	e032      	b.n	8005c5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005bf4:	6839      	ldr	r1, [r7, #0]
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f001 fcbd 	bl	8007576 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	75fb      	strb	r3, [r7, #23]
          break;
 8005c00:	e02b      	b.n	8005c5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d107      	bne.n	8005c1e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c0e:	f107 030d 	add.w	r3, r7, #13
 8005c12:	2201      	movs	r2, #1
 8005c14:	4619      	mov	r1, r3
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f001 fd1e 	bl	8007658 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c1c:	e01d      	b.n	8005c5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f001 fca8 	bl	8007576 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c26:	2303      	movs	r3, #3
 8005c28:	75fb      	strb	r3, [r7, #23]
          break;
 8005c2a:	e016      	b.n	8005c5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d00f      	beq.n	8005c58 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005c38:	6839      	ldr	r1, [r7, #0]
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f001 fc9b 	bl	8007576 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c40:	2303      	movs	r3, #3
 8005c42:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005c44:	e008      	b.n	8005c58 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f001 fc94 	bl	8007576 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	75fb      	strb	r3, [r7, #23]
          break;
 8005c52:	e002      	b.n	8005c5a <USBD_CDC_Setup+0x19e>
          break;
 8005c54:	bf00      	nop
 8005c56:	e008      	b.n	8005c6a <USBD_CDC_Setup+0x1ae>
          break;
 8005c58:	bf00      	nop
      }
      break;
 8005c5a:	e006      	b.n	8005c6a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005c5c:	6839      	ldr	r1, [r7, #0]
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f001 fc89 	bl	8007576 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c64:	2303      	movs	r3, #3
 8005c66:	75fb      	strb	r3, [r7, #23]
      break;
 8005c68:	bf00      	nop
  }

  return (uint8_t)ret;
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005c86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	32b0      	adds	r2, #176	; 0xb0
 8005c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e065      	b.n	8005d6a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	32b0      	adds	r2, #176	; 0xb0
 8005ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005cae:	78fb      	ldrb	r3, [r7, #3]
 8005cb0:	f003 020f 	and.w	r2, r3, #15
 8005cb4:	6879      	ldr	r1, [r7, #4]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	440b      	add	r3, r1
 8005cc0:	3318      	adds	r3, #24
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d02f      	beq.n	8005d28 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	f003 020f 	and.w	r2, r3, #15
 8005cce:	6879      	ldr	r1, [r7, #4]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	440b      	add	r3, r1
 8005cda:	3318      	adds	r3, #24
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	78fb      	ldrb	r3, [r7, #3]
 8005ce0:	f003 010f 	and.w	r1, r3, #15
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	440b      	add	r3, r1
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4403      	add	r3, r0
 8005cf0:	3348      	adds	r3, #72	; 0x48
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	fbb2 f1f3 	udiv	r1, r2, r3
 8005cf8:	fb01 f303 	mul.w	r3, r1, r3
 8005cfc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d112      	bne.n	8005d28 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005d02:	78fb      	ldrb	r3, [r7, #3]
 8005d04:	f003 020f 	and.w	r2, r3, #15
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	440b      	add	r3, r1
 8005d14:	3318      	adds	r3, #24
 8005d16:	2200      	movs	r2, #0
 8005d18:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005d1a:	78f9      	ldrb	r1, [r7, #3]
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	2200      	movs	r2, #0
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f002 f990 	bl	8008046 <USBD_LL_Transmit>
 8005d26:	e01f      	b.n	8005d68 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	33b0      	adds	r3, #176	; 0xb0
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d010      	beq.n	8005d68 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	33b0      	adds	r3, #176	; 0xb0
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005d64:	78fa      	ldrb	r2, [r7, #3]
 8005d66:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b084      	sub	sp, #16
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	32b0      	adds	r2, #176	; 0xb0
 8005d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d8c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	32b0      	adds	r2, #176	; 0xb0
 8005d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e01a      	b.n	8005dda <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005da4:	78fb      	ldrb	r3, [r7, #3]
 8005da6:	4619      	mov	r1, r3
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f002 f98e 	bl	80080ca <USBD_LL_GetRxDataSize>
 8005dae:	4602      	mov	r2, r0
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	33b0      	adds	r3, #176	; 0xb0
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b084      	sub	sp, #16
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	32b0      	adds	r2, #176	; 0xb0
 8005df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e025      	b.n	8005e50 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	33b0      	adds	r3, #176	; 0xb0
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d01a      	beq.n	8005e4e <USBD_CDC_EP0_RxReady+0x6c>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005e1e:	2bff      	cmp	r3, #255	; 0xff
 8005e20:	d015      	beq.n	8005e4e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	33b0      	adds	r3, #176	; 0xb0
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005e3a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005e42:	b292      	uxth	r2, r2
 8005e44:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	22ff      	movs	r2, #255	; 0xff
 8005e4a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e60:	2182      	movs	r1, #130	; 0x82
 8005e62:	4818      	ldr	r0, [pc, #96]	; (8005ec4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e64:	f000 fd4f 	bl	8006906 <USBD_GetEpDesc>
 8005e68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	4815      	ldr	r0, [pc, #84]	; (8005ec4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e6e:	f000 fd4a 	bl	8006906 <USBD_GetEpDesc>
 8005e72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e74:	2181      	movs	r1, #129	; 0x81
 8005e76:	4813      	ldr	r0, [pc, #76]	; (8005ec4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e78:	f000 fd45 	bl	8006906 <USBD_GetEpDesc>
 8005e7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	2210      	movs	r2, #16
 8005e88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d006      	beq.n	8005e9e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e98:	711a      	strb	r2, [r3, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d006      	beq.n	8005eb2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eac:	711a      	strb	r2, [r3, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2243      	movs	r2, #67	; 0x43
 8005eb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005eb8:	4b02      	ldr	r3, [pc, #8]	; (8005ec4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20000060 	.word	0x20000060

08005ec8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ed0:	2182      	movs	r1, #130	; 0x82
 8005ed2:	4818      	ldr	r0, [pc, #96]	; (8005f34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ed4:	f000 fd17 	bl	8006906 <USBD_GetEpDesc>
 8005ed8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005eda:	2101      	movs	r1, #1
 8005edc:	4815      	ldr	r0, [pc, #84]	; (8005f34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ede:	f000 fd12 	bl	8006906 <USBD_GetEpDesc>
 8005ee2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ee4:	2181      	movs	r1, #129	; 0x81
 8005ee6:	4813      	ldr	r0, [pc, #76]	; (8005f34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ee8:	f000 fd0d 	bl	8006906 <USBD_GetEpDesc>
 8005eec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	2210      	movs	r2, #16
 8005ef8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d006      	beq.n	8005f0e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	2200      	movs	r2, #0
 8005f04:	711a      	strb	r2, [r3, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f042 0202 	orr.w	r2, r2, #2
 8005f0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d006      	beq.n	8005f22 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	711a      	strb	r2, [r3, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f042 0202 	orr.w	r2, r2, #2
 8005f20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2243      	movs	r2, #67	; 0x43
 8005f26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f28:	4b02      	ldr	r3, [pc, #8]	; (8005f34 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3718      	adds	r7, #24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20000060 	.word	0x20000060

08005f38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f40:	2182      	movs	r1, #130	; 0x82
 8005f42:	4818      	ldr	r0, [pc, #96]	; (8005fa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f44:	f000 fcdf 	bl	8006906 <USBD_GetEpDesc>
 8005f48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	4815      	ldr	r0, [pc, #84]	; (8005fa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f4e:	f000 fcda 	bl	8006906 <USBD_GetEpDesc>
 8005f52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f54:	2181      	movs	r1, #129	; 0x81
 8005f56:	4813      	ldr	r0, [pc, #76]	; (8005fa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f58:	f000 fcd5 	bl	8006906 <USBD_GetEpDesc>
 8005f5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2210      	movs	r2, #16
 8005f68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d006      	beq.n	8005f7e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f78:	711a      	strb	r2, [r3, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d006      	beq.n	8005f92 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f8c:	711a      	strb	r2, [r3, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2243      	movs	r2, #67	; 0x43
 8005f96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f98:	4b02      	ldr	r3, [pc, #8]	; (8005fa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20000060 	.word	0x20000060

08005fa8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	220a      	movs	r2, #10
 8005fb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005fb6:	4b03      	ldr	r3, [pc, #12]	; (8005fc4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	2000001c 	.word	0x2000001c

08005fc8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e009      	b.n	8005ff0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	33b0      	adds	r3, #176	; 0xb0
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b087      	sub	sp, #28
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	32b0      	adds	r2, #176	; 0xb0
 8006012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006016:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800601e:	2303      	movs	r3, #3
 8006020:	e008      	b.n	8006034 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	371c      	adds	r7, #28
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	32b0      	adds	r2, #176	; 0xb0
 8006054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006058:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006060:	2303      	movs	r3, #3
 8006062:	e004      	b.n	800606e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
	...

0800607c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	32b0      	adds	r2, #176	; 0xb0
 800608e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006092:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006094:	2301      	movs	r3, #1
 8006096:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	32b0      	adds	r2, #176	; 0xb0
 80060a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e025      	b.n	80060fa <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d11f      	bne.n	80060f8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80060c0:	4b10      	ldr	r3, [pc, #64]	; (8006104 <USBD_CDC_TransmitPacket+0x88>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	f003 020f 	and.w	r2, r3, #15
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4403      	add	r3, r0
 80060da:	3318      	adds	r3, #24
 80060dc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80060de:	4b09      	ldr	r3, [pc, #36]	; (8006104 <USBD_CDC_TransmitPacket+0x88>)
 80060e0:	7819      	ldrb	r1, [r3, #0]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f001 ffa9 	bl	8008046 <USBD_LL_Transmit>

    ret = USBD_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	200000a3 	.word	0x200000a3

08006108 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	32b0      	adds	r2, #176	; 0xb0
 800611a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800611e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	32b0      	adds	r2, #176	; 0xb0
 800612a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006132:	2303      	movs	r3, #3
 8006134:	e018      	b.n	8006168 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	7c1b      	ldrb	r3, [r3, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10a      	bne.n	8006154 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800613e:	4b0c      	ldr	r3, [pc, #48]	; (8006170 <USBD_CDC_ReceivePacket+0x68>)
 8006140:	7819      	ldrb	r1, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f001 ff9b 	bl	8008088 <USBD_LL_PrepareReceive>
 8006152:	e008      	b.n	8006166 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006154:	4b06      	ldr	r3, [pc, #24]	; (8006170 <USBD_CDC_ReceivePacket+0x68>)
 8006156:	7819      	ldrb	r1, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800615e:	2340      	movs	r3, #64	; 0x40
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f001 ff91 	bl	8008088 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	200000a4 	.word	0x200000a4

08006174 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	4613      	mov	r3, r2
 8006180:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006188:	2303      	movs	r3, #3
 800618a:	e01f      	b.n	80061cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	79fa      	ldrb	r2, [r7, #7]
 80061be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f001 fe0b 	bl	8007ddc <USBD_LL_Init>
 80061c6:	4603      	mov	r3, r0
 80061c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80061ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3718      	adds	r7, #24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e025      	b.n	8006238 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	32ae      	adds	r2, #174	; 0xae
 80061fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00f      	beq.n	8006228 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	32ae      	adds	r2, #174	; 0xae
 8006212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	f107 020e 	add.w	r2, r7, #14
 800621c:	4610      	mov	r0, r2
 800621e:	4798      	blx	r3
 8006220:	4602      	mov	r2, r0
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f001 fe13 	bl	8007e74 <USBD_LL_Start>
 800624e:	4603      	mov	r3, r0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006260:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006262:	4618      	mov	r0, r3
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	460b      	mov	r3, r1
 8006278:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006284:	2b00      	cmp	r3, #0
 8006286:	d009      	beq.n	800629c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	78fa      	ldrb	r2, [r7, #3]
 8006292:	4611      	mov	r1, r2
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	4798      	blx	r3
 8006298:	4603      	mov	r3, r0
 800629a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800629c:	7bfb      	ldrb	r3, [r7, #15]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	460b      	mov	r3, r1
 80062b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	78fa      	ldrb	r2, [r7, #3]
 80062c0:	4611      	mov	r1, r2
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	4798      	blx	r3
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80062cc:	2303      	movs	r3, #3
 80062ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b084      	sub	sp, #16
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
 80062e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062ea:	6839      	ldr	r1, [r7, #0]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f001 f908 	bl	8007502 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006300:	461a      	mov	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800630e:	f003 031f 	and.w	r3, r3, #31
 8006312:	2b02      	cmp	r3, #2
 8006314:	d01a      	beq.n	800634c <USBD_LL_SetupStage+0x72>
 8006316:	2b02      	cmp	r3, #2
 8006318:	d822      	bhi.n	8006360 <USBD_LL_SetupStage+0x86>
 800631a:	2b00      	cmp	r3, #0
 800631c:	d002      	beq.n	8006324 <USBD_LL_SetupStage+0x4a>
 800631e:	2b01      	cmp	r3, #1
 8006320:	d00a      	beq.n	8006338 <USBD_LL_SetupStage+0x5e>
 8006322:	e01d      	b.n	8006360 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fb5f 	bl	80069f0 <USBD_StdDevReq>
 8006332:	4603      	mov	r3, r0
 8006334:	73fb      	strb	r3, [r7, #15]
      break;
 8006336:	e020      	b.n	800637a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800633e:	4619      	mov	r1, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fbc7 	bl	8006ad4 <USBD_StdItfReq>
 8006346:	4603      	mov	r3, r0
 8006348:	73fb      	strb	r3, [r7, #15]
      break;
 800634a:	e016      	b.n	800637a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006352:	4619      	mov	r1, r3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fc29 	bl	8006bac <USBD_StdEPReq>
 800635a:	4603      	mov	r3, r0
 800635c:	73fb      	strb	r3, [r7, #15]
      break;
 800635e:	e00c      	b.n	800637a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006366:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800636a:	b2db      	uxtb	r3, r3
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f001 fde0 	bl	8007f34 <USBD_LL_StallEP>
 8006374:	4603      	mov	r3, r0
 8006376:	73fb      	strb	r3, [r7, #15]
      break;
 8006378:	bf00      	nop
  }

  return ret;
 800637a:	7bfb      	ldrb	r3, [r7, #15]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	460b      	mov	r3, r1
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006396:	7afb      	ldrb	r3, [r7, #11]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d16e      	bne.n	800647a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80063a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	f040 8098 	bne.w	80064e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d913      	bls.n	80063e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	1ad2      	subs	r2, r2, r3
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	4293      	cmp	r3, r2
 80063d4:	bf28      	it	cs
 80063d6:	4613      	movcs	r3, r2
 80063d8:	461a      	mov	r2, r3
 80063da:	6879      	ldr	r1, [r7, #4]
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f001 f984 	bl	80076ea <USBD_CtlContinueRx>
 80063e2:	e07d      	b.n	80064e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063ea:	f003 031f 	and.w	r3, r3, #31
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d014      	beq.n	800641c <USBD_LL_DataOutStage+0x98>
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d81d      	bhi.n	8006432 <USBD_LL_DataOutStage+0xae>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <USBD_LL_DataOutStage+0x7c>
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d003      	beq.n	8006406 <USBD_LL_DataOutStage+0x82>
 80063fe:	e018      	b.n	8006432 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	75bb      	strb	r3, [r7, #22]
            break;
 8006404:	e018      	b.n	8006438 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800640c:	b2db      	uxtb	r3, r3
 800640e:	4619      	mov	r1, r3
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 fa5e 	bl	80068d2 <USBD_CoreFindIF>
 8006416:	4603      	mov	r3, r0
 8006418:	75bb      	strb	r3, [r7, #22]
            break;
 800641a:	e00d      	b.n	8006438 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006422:	b2db      	uxtb	r3, r3
 8006424:	4619      	mov	r1, r3
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 fa60 	bl	80068ec <USBD_CoreFindEP>
 800642c:	4603      	mov	r3, r0
 800642e:	75bb      	strb	r3, [r7, #22]
            break;
 8006430:	e002      	b.n	8006438 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	75bb      	strb	r3, [r7, #22]
            break;
 8006436:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006438:	7dbb      	ldrb	r3, [r7, #22]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d119      	bne.n	8006472 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b03      	cmp	r3, #3
 8006448:	d113      	bne.n	8006472 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800644a:	7dba      	ldrb	r2, [r7, #22]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	32ae      	adds	r2, #174	; 0xae
 8006450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00b      	beq.n	8006472 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800645a:	7dba      	ldrb	r2, [r7, #22]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006462:	7dba      	ldrb	r2, [r7, #22]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	32ae      	adds	r2, #174	; 0xae
 8006468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f001 f94a 	bl	800770c <USBD_CtlSendStatus>
 8006478:	e032      	b.n	80064e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800647a:	7afb      	ldrb	r3, [r7, #11]
 800647c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006480:	b2db      	uxtb	r3, r3
 8006482:	4619      	mov	r1, r3
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fa31 	bl	80068ec <USBD_CoreFindEP>
 800648a:	4603      	mov	r3, r0
 800648c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800648e:	7dbb      	ldrb	r3, [r7, #22]
 8006490:	2bff      	cmp	r3, #255	; 0xff
 8006492:	d025      	beq.n	80064e0 <USBD_LL_DataOutStage+0x15c>
 8006494:	7dbb      	ldrb	r3, [r7, #22]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d122      	bne.n	80064e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d117      	bne.n	80064d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80064a6:	7dba      	ldrb	r2, [r7, #22]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	32ae      	adds	r2, #174	; 0xae
 80064ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00f      	beq.n	80064d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80064b6:	7dba      	ldrb	r2, [r7, #22]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80064be:	7dba      	ldrb	r2, [r7, #22]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	32ae      	adds	r2, #174	; 0xae
 80064c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	7afa      	ldrb	r2, [r7, #11]
 80064cc:	4611      	mov	r1, r2
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	4798      	blx	r3
 80064d2:	4603      	mov	r3, r0
 80064d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80064d6:	7dfb      	ldrb	r3, [r7, #23]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80064dc:	7dfb      	ldrb	r3, [r7, #23]
 80064de:	e000      	b.n	80064e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b086      	sub	sp, #24
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	60f8      	str	r0, [r7, #12]
 80064f2:	460b      	mov	r3, r1
 80064f4:	607a      	str	r2, [r7, #4]
 80064f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80064f8:	7afb      	ldrb	r3, [r7, #11]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d16f      	bne.n	80065de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3314      	adds	r3, #20
 8006502:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800650a:	2b02      	cmp	r3, #2
 800650c:	d15a      	bne.n	80065c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	689a      	ldr	r2, [r3, #8]
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	429a      	cmp	r2, r3
 8006518:	d914      	bls.n	8006544 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	689a      	ldr	r2, [r3, #8]
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	1ad2      	subs	r2, r2, r3
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	461a      	mov	r2, r3
 800652e:	6879      	ldr	r1, [r7, #4]
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f001 f8ac 	bl	800768e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006536:	2300      	movs	r3, #0
 8006538:	2200      	movs	r2, #0
 800653a:	2100      	movs	r1, #0
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f001 fda3 	bl	8008088 <USBD_LL_PrepareReceive>
 8006542:	e03f      	b.n	80065c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	68da      	ldr	r2, [r3, #12]
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	429a      	cmp	r2, r3
 800654e:	d11c      	bne.n	800658a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006558:	429a      	cmp	r2, r3
 800655a:	d316      	bcc.n	800658a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006566:	429a      	cmp	r2, r3
 8006568:	d20f      	bcs.n	800658a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800656a:	2200      	movs	r2, #0
 800656c:	2100      	movs	r1, #0
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f001 f88d 	bl	800768e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800657c:	2300      	movs	r3, #0
 800657e:	2200      	movs	r2, #0
 8006580:	2100      	movs	r1, #0
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f001 fd80 	bl	8008088 <USBD_LL_PrepareReceive>
 8006588:	e01c      	b.n	80065c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b03      	cmp	r3, #3
 8006594:	d10f      	bne.n	80065b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d009      	beq.n	80065b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80065b6:	2180      	movs	r1, #128	; 0x80
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f001 fcbb 	bl	8007f34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f001 f8b7 	bl	8007732 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d03a      	beq.n	8006644 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f7ff fe42 	bl	8006258 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80065dc:	e032      	b.n	8006644 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80065de:	7afb      	ldrb	r3, [r7, #11]
 80065e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	4619      	mov	r1, r3
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 f97f 	bl	80068ec <USBD_CoreFindEP>
 80065ee:	4603      	mov	r3, r0
 80065f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065f2:	7dfb      	ldrb	r3, [r7, #23]
 80065f4:	2bff      	cmp	r3, #255	; 0xff
 80065f6:	d025      	beq.n	8006644 <USBD_LL_DataInStage+0x15a>
 80065f8:	7dfb      	ldrb	r3, [r7, #23]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d122      	bne.n	8006644 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b03      	cmp	r3, #3
 8006608:	d11c      	bne.n	8006644 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800660a:	7dfa      	ldrb	r2, [r7, #23]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	32ae      	adds	r2, #174	; 0xae
 8006610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d014      	beq.n	8006644 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800661a:	7dfa      	ldrb	r2, [r7, #23]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006622:	7dfa      	ldrb	r2, [r7, #23]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	32ae      	adds	r2, #174	; 0xae
 8006628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	7afa      	ldrb	r2, [r7, #11]
 8006630:	4611      	mov	r1, r2
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	4798      	blx	r3
 8006636:	4603      	mov	r3, r0
 8006638:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800663a:	7dbb      	ldrb	r3, [r7, #22]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006640:	7dbb      	ldrb	r3, [r7, #22]
 8006642:	e000      	b.n	8006646 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006686:	2b00      	cmp	r3, #0
 8006688:	d014      	beq.n	80066b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00e      	beq.n	80066b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6852      	ldr	r2, [r2, #4]
 80066a2:	b2d2      	uxtb	r2, r2
 80066a4:	4611      	mov	r1, r2
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	4798      	blx	r3
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80066b0:	2303      	movs	r3, #3
 80066b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066b4:	2340      	movs	r3, #64	; 0x40
 80066b6:	2200      	movs	r2, #0
 80066b8:	2100      	movs	r1, #0
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f001 fbf5 	bl	8007eaa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2240      	movs	r2, #64	; 0x40
 80066cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066d0:	2340      	movs	r3, #64	; 0x40
 80066d2:	2200      	movs	r2, #0
 80066d4:	2180      	movs	r1, #128	; 0x80
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f001 fbe7 	bl	8007eaa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2240      	movs	r2, #64	; 0x40
 80066e6:	621a      	str	r2, [r3, #32]

  return ret;
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	460b      	mov	r3, r1
 80066fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	78fa      	ldrb	r2, [r7, #3]
 8006702:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006720:	b2da      	uxtb	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2204      	movs	r2, #4
 800672c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b04      	cmp	r3, #4
 8006750:	d106      	bne.n	8006760 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006758:	b2da      	uxtb	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b082      	sub	sp, #8
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b03      	cmp	r3, #3
 8006780:	d110      	bne.n	80067a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00b      	beq.n	80067a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d005      	beq.n	80067a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b082      	sub	sp, #8
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	460b      	mov	r3, r1
 80067b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	32ae      	adds	r2, #174	; 0xae
 80067c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e01c      	b.n	800680a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d115      	bne.n	8006808 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	32ae      	adds	r2, #174	; 0xae
 80067e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00b      	beq.n	8006808 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	32ae      	adds	r2, #174	; 0xae
 80067fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	78fa      	ldrb	r2, [r7, #3]
 8006802:	4611      	mov	r1, r2
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	460b      	mov	r3, r1
 800681c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	32ae      	adds	r2, #174	; 0xae
 8006828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006830:	2303      	movs	r3, #3
 8006832:	e01c      	b.n	800686e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b03      	cmp	r3, #3
 800683e:	d115      	bne.n	800686c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	32ae      	adds	r2, #174	; 0xae
 800684a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00b      	beq.n	800686c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	32ae      	adds	r2, #174	; 0xae
 800685e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	78fa      	ldrb	r2, [r7, #3]
 8006866:	4611      	mov	r1, r2
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006894:	2300      	movs	r3, #0
 8006896:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00e      	beq.n	80068c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6852      	ldr	r2, [r2, #4]
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	4611      	mov	r1, r2
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	4798      	blx	r3
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80068c4:	2303      	movs	r3, #3
 80068c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	460b      	mov	r3, r1
 80068dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80068de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80068f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b086      	sub	sp, #24
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	460b      	mov	r3, r1
 8006910:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800691a:	2300      	movs	r3, #0
 800691c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	885b      	ldrh	r3, [r3, #2]
 8006922:	b29a      	uxth	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	b29b      	uxth	r3, r3
 800692a:	429a      	cmp	r2, r3
 800692c:	d920      	bls.n	8006970 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	b29b      	uxth	r3, r3
 8006934:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006936:	e013      	b.n	8006960 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006938:	f107 030a 	add.w	r3, r7, #10
 800693c:	4619      	mov	r1, r3
 800693e:	6978      	ldr	r0, [r7, #20]
 8006940:	f000 f81b 	bl	800697a <USBD_GetNextDesc>
 8006944:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	785b      	ldrb	r3, [r3, #1]
 800694a:	2b05      	cmp	r3, #5
 800694c:	d108      	bne.n	8006960 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	789b      	ldrb	r3, [r3, #2]
 8006956:	78fa      	ldrb	r2, [r7, #3]
 8006958:	429a      	cmp	r2, r3
 800695a:	d008      	beq.n	800696e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800695c:	2300      	movs	r3, #0
 800695e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	885b      	ldrh	r3, [r3, #2]
 8006964:	b29a      	uxth	r2, r3
 8006966:	897b      	ldrh	r3, [r7, #10]
 8006968:	429a      	cmp	r2, r3
 800696a:	d8e5      	bhi.n	8006938 <USBD_GetEpDesc+0x32>
 800696c:	e000      	b.n	8006970 <USBD_GetEpDesc+0x6a>
          break;
 800696e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006970:	693b      	ldr	r3, [r7, #16]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3718      	adds	r7, #24
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800697a:	b480      	push	{r7}
 800697c:	b085      	sub	sp, #20
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	881a      	ldrh	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	b29b      	uxth	r3, r3
 8006992:	4413      	add	r3, r2
 8006994:	b29a      	uxth	r2, r3
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4413      	add	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80069a6:	68fb      	ldr	r3, [r7, #12]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	3301      	adds	r3, #1
 80069ca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80069d2:	8a3b      	ldrh	r3, [r7, #16]
 80069d4:	021b      	lsls	r3, r3, #8
 80069d6:	b21a      	sxth	r2, r3
 80069d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80069dc:	4313      	orrs	r3, r2
 80069de:	b21b      	sxth	r3, r3
 80069e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80069e2:	89fb      	ldrh	r3, [r7, #14]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	371c      	adds	r7, #28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a06:	2b40      	cmp	r3, #64	; 0x40
 8006a08:	d005      	beq.n	8006a16 <USBD_StdDevReq+0x26>
 8006a0a:	2b40      	cmp	r3, #64	; 0x40
 8006a0c:	d857      	bhi.n	8006abe <USBD_StdDevReq+0xce>
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00f      	beq.n	8006a32 <USBD_StdDevReq+0x42>
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	d153      	bne.n	8006abe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	32ae      	adds	r2, #174	; 0xae
 8006a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	4798      	blx	r3
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a30:	e04a      	b.n	8006ac8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	785b      	ldrb	r3, [r3, #1]
 8006a36:	2b09      	cmp	r3, #9
 8006a38:	d83b      	bhi.n	8006ab2 <USBD_StdDevReq+0xc2>
 8006a3a:	a201      	add	r2, pc, #4	; (adr r2, 8006a40 <USBD_StdDevReq+0x50>)
 8006a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a40:	08006a95 	.word	0x08006a95
 8006a44:	08006aa9 	.word	0x08006aa9
 8006a48:	08006ab3 	.word	0x08006ab3
 8006a4c:	08006a9f 	.word	0x08006a9f
 8006a50:	08006ab3 	.word	0x08006ab3
 8006a54:	08006a73 	.word	0x08006a73
 8006a58:	08006a69 	.word	0x08006a69
 8006a5c:	08006ab3 	.word	0x08006ab3
 8006a60:	08006a8b 	.word	0x08006a8b
 8006a64:	08006a7d 	.word	0x08006a7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fa3c 	bl	8006ee8 <USBD_GetDescriptor>
          break;
 8006a70:	e024      	b.n	8006abc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fba1 	bl	80071bc <USBD_SetAddress>
          break;
 8006a7a:	e01f      	b.n	8006abc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fbe0 	bl	8007244 <USBD_SetConfig>
 8006a84:	4603      	mov	r3, r0
 8006a86:	73fb      	strb	r3, [r7, #15]
          break;
 8006a88:	e018      	b.n	8006abc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fc83 	bl	8007398 <USBD_GetConfig>
          break;
 8006a92:	e013      	b.n	8006abc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fcb4 	bl	8007404 <USBD_GetStatus>
          break;
 8006a9c:	e00e      	b.n	8006abc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fce3 	bl	800746c <USBD_SetFeature>
          break;
 8006aa6:	e009      	b.n	8006abc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fd07 	bl	80074be <USBD_ClrFeature>
          break;
 8006ab0:	e004      	b.n	8006abc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fd5e 	bl	8007576 <USBD_CtlError>
          break;
 8006aba:	bf00      	nop
      }
      break;
 8006abc:	e004      	b.n	8006ac8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fd58 	bl	8007576 <USBD_CtlError>
      break;
 8006ac6:	bf00      	nop
  }

  return ret;
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop

08006ad4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006aea:	2b40      	cmp	r3, #64	; 0x40
 8006aec:	d005      	beq.n	8006afa <USBD_StdItfReq+0x26>
 8006aee:	2b40      	cmp	r3, #64	; 0x40
 8006af0:	d852      	bhi.n	8006b98 <USBD_StdItfReq+0xc4>
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <USBD_StdItfReq+0x26>
 8006af6:	2b20      	cmp	r3, #32
 8006af8:	d14e      	bne.n	8006b98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	3b01      	subs	r3, #1
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d840      	bhi.n	8006b8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	889b      	ldrh	r3, [r3, #4]
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d836      	bhi.n	8006b80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	889b      	ldrh	r3, [r3, #4]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7ff fed9 	bl	80068d2 <USBD_CoreFindIF>
 8006b20:	4603      	mov	r3, r0
 8006b22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b24:	7bbb      	ldrb	r3, [r7, #14]
 8006b26:	2bff      	cmp	r3, #255	; 0xff
 8006b28:	d01d      	beq.n	8006b66 <USBD_StdItfReq+0x92>
 8006b2a:	7bbb      	ldrb	r3, [r7, #14]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d11a      	bne.n	8006b66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006b30:	7bba      	ldrb	r2, [r7, #14]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	32ae      	adds	r2, #174	; 0xae
 8006b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00f      	beq.n	8006b60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006b40:	7bba      	ldrb	r2, [r7, #14]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b48:	7bba      	ldrb	r2, [r7, #14]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	32ae      	adds	r2, #174	; 0xae
 8006b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	4798      	blx	r3
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b5e:	e004      	b.n	8006b6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006b60:	2303      	movs	r3, #3
 8006b62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b64:	e001      	b.n	8006b6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006b66:	2303      	movs	r3, #3
 8006b68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	88db      	ldrh	r3, [r3, #6]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d110      	bne.n	8006b94 <USBD_StdItfReq+0xc0>
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10d      	bne.n	8006b94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fdc7 	bl	800770c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b7e:	e009      	b.n	8006b94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fcf7 	bl	8007576 <USBD_CtlError>
          break;
 8006b88:	e004      	b.n	8006b94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fcf2 	bl	8007576 <USBD_CtlError>
          break;
 8006b92:	e000      	b.n	8006b96 <USBD_StdItfReq+0xc2>
          break;
 8006b94:	bf00      	nop
      }
      break;
 8006b96:	e004      	b.n	8006ba2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fceb 	bl	8007576 <USBD_CtlError>
      break;
 8006ba0:	bf00      	nop
  }

  return ret;
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	889b      	ldrh	r3, [r3, #4]
 8006bbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bc8:	2b40      	cmp	r3, #64	; 0x40
 8006bca:	d007      	beq.n	8006bdc <USBD_StdEPReq+0x30>
 8006bcc:	2b40      	cmp	r3, #64	; 0x40
 8006bce:	f200 817f 	bhi.w	8006ed0 <USBD_StdEPReq+0x324>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d02a      	beq.n	8006c2c <USBD_StdEPReq+0x80>
 8006bd6:	2b20      	cmp	r3, #32
 8006bd8:	f040 817a 	bne.w	8006ed0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff fe83 	bl	80068ec <USBD_CoreFindEP>
 8006be6:	4603      	mov	r3, r0
 8006be8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bea:	7b7b      	ldrb	r3, [r7, #13]
 8006bec:	2bff      	cmp	r3, #255	; 0xff
 8006bee:	f000 8174 	beq.w	8006eda <USBD_StdEPReq+0x32e>
 8006bf2:	7b7b      	ldrb	r3, [r7, #13]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f040 8170 	bne.w	8006eda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006bfa:	7b7a      	ldrb	r2, [r7, #13]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006c02:	7b7a      	ldrb	r2, [r7, #13]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	32ae      	adds	r2, #174	; 0xae
 8006c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 8163 	beq.w	8006eda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006c14:	7b7a      	ldrb	r2, [r7, #13]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	32ae      	adds	r2, #174	; 0xae
 8006c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	6839      	ldr	r1, [r7, #0]
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	4798      	blx	r3
 8006c26:	4603      	mov	r3, r0
 8006c28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c2a:	e156      	b.n	8006eda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	785b      	ldrb	r3, [r3, #1]
 8006c30:	2b03      	cmp	r3, #3
 8006c32:	d008      	beq.n	8006c46 <USBD_StdEPReq+0x9a>
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	f300 8145 	bgt.w	8006ec4 <USBD_StdEPReq+0x318>
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 809b 	beq.w	8006d76 <USBD_StdEPReq+0x1ca>
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d03c      	beq.n	8006cbe <USBD_StdEPReq+0x112>
 8006c44:	e13e      	b.n	8006ec4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d002      	beq.n	8006c58 <USBD_StdEPReq+0xac>
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	d016      	beq.n	8006c84 <USBD_StdEPReq+0xd8>
 8006c56:	e02c      	b.n	8006cb2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c58:	7bbb      	ldrb	r3, [r7, #14]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00d      	beq.n	8006c7a <USBD_StdEPReq+0xce>
 8006c5e:	7bbb      	ldrb	r3, [r7, #14]
 8006c60:	2b80      	cmp	r3, #128	; 0x80
 8006c62:	d00a      	beq.n	8006c7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c64:	7bbb      	ldrb	r3, [r7, #14]
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f001 f963 	bl	8007f34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c6e:	2180      	movs	r1, #128	; 0x80
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 f95f 	bl	8007f34 <USBD_LL_StallEP>
 8006c76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c78:	e020      	b.n	8006cbc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fc7a 	bl	8007576 <USBD_CtlError>
              break;
 8006c82:	e01b      	b.n	8006cbc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	885b      	ldrh	r3, [r3, #2]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10e      	bne.n	8006caa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00b      	beq.n	8006caa <USBD_StdEPReq+0xfe>
 8006c92:	7bbb      	ldrb	r3, [r7, #14]
 8006c94:	2b80      	cmp	r3, #128	; 0x80
 8006c96:	d008      	beq.n	8006caa <USBD_StdEPReq+0xfe>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	88db      	ldrh	r3, [r3, #6]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d104      	bne.n	8006caa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f001 f945 	bl	8007f34 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fd2e 	bl	800770c <USBD_CtlSendStatus>

              break;
 8006cb0:	e004      	b.n	8006cbc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fc5e 	bl	8007576 <USBD_CtlError>
              break;
 8006cba:	bf00      	nop
          }
          break;
 8006cbc:	e107      	b.n	8006ece <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d002      	beq.n	8006cd0 <USBD_StdEPReq+0x124>
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d016      	beq.n	8006cfc <USBD_StdEPReq+0x150>
 8006cce:	e04b      	b.n	8006d68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cd0:	7bbb      	ldrb	r3, [r7, #14]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00d      	beq.n	8006cf2 <USBD_StdEPReq+0x146>
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	2b80      	cmp	r3, #128	; 0x80
 8006cda:	d00a      	beq.n	8006cf2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 f927 	bl	8007f34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ce6:	2180      	movs	r1, #128	; 0x80
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f001 f923 	bl	8007f34 <USBD_LL_StallEP>
 8006cee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006cf0:	e040      	b.n	8006d74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fc3e 	bl	8007576 <USBD_CtlError>
              break;
 8006cfa:	e03b      	b.n	8006d74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	885b      	ldrh	r3, [r3, #2]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d136      	bne.n	8006d72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d04:	7bbb      	ldrb	r3, [r7, #14]
 8006d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d004      	beq.n	8006d18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d0e:	7bbb      	ldrb	r3, [r7, #14]
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f001 f92d 	bl	8007f72 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fcf7 	bl	800770c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006d1e:	7bbb      	ldrb	r3, [r7, #14]
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7ff fde2 	bl	80068ec <USBD_CoreFindEP>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d2c:	7b7b      	ldrb	r3, [r7, #13]
 8006d2e:	2bff      	cmp	r3, #255	; 0xff
 8006d30:	d01f      	beq.n	8006d72 <USBD_StdEPReq+0x1c6>
 8006d32:	7b7b      	ldrb	r3, [r7, #13]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d11c      	bne.n	8006d72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006d38:	7b7a      	ldrb	r2, [r7, #13]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006d40:	7b7a      	ldrb	r2, [r7, #13]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	32ae      	adds	r2, #174	; 0xae
 8006d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d010      	beq.n	8006d72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d50:	7b7a      	ldrb	r2, [r7, #13]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	32ae      	adds	r2, #174	; 0xae
 8006d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	4798      	blx	r3
 8006d62:	4603      	mov	r3, r0
 8006d64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006d66:	e004      	b.n	8006d72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fc03 	bl	8007576 <USBD_CtlError>
              break;
 8006d70:	e000      	b.n	8006d74 <USBD_StdEPReq+0x1c8>
              break;
 8006d72:	bf00      	nop
          }
          break;
 8006d74:	e0ab      	b.n	8006ece <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d002      	beq.n	8006d88 <USBD_StdEPReq+0x1dc>
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d032      	beq.n	8006dec <USBD_StdEPReq+0x240>
 8006d86:	e097      	b.n	8006eb8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d007      	beq.n	8006d9e <USBD_StdEPReq+0x1f2>
 8006d8e:	7bbb      	ldrb	r3, [r7, #14]
 8006d90:	2b80      	cmp	r3, #128	; 0x80
 8006d92:	d004      	beq.n	8006d9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fbed 	bl	8007576 <USBD_CtlError>
                break;
 8006d9c:	e091      	b.n	8006ec2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	da0b      	bge.n	8006dbe <USBD_StdEPReq+0x212>
 8006da6:	7bbb      	ldrb	r3, [r7, #14]
 8006da8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	3310      	adds	r3, #16
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	4413      	add	r3, r2
 8006dba:	3304      	adds	r3, #4
 8006dbc:	e00b      	b.n	8006dd6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006dbe:	7bbb      	ldrb	r3, [r7, #14]
 8006dc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2202      	movs	r2, #2
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fc37 	bl	8007658 <USBD_CtlSendData>
              break;
 8006dea:	e06a      	b.n	8006ec2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006dec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	da11      	bge.n	8006e18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006df4:	7bbb      	ldrb	r3, [r7, #14]
 8006df6:	f003 020f 	and.w	r2, r3, #15
 8006dfa:	6879      	ldr	r1, [r7, #4]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	440b      	add	r3, r1
 8006e06:	3324      	adds	r3, #36	; 0x24
 8006e08:	881b      	ldrh	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d117      	bne.n	8006e3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fbb0 	bl	8007576 <USBD_CtlError>
                  break;
 8006e16:	e054      	b.n	8006ec2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
 8006e1a:	f003 020f 	and.w	r2, r3, #15
 8006e1e:	6879      	ldr	r1, [r7, #4]
 8006e20:	4613      	mov	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	440b      	add	r3, r1
 8006e2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d104      	bne.n	8006e3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fb9d 	bl	8007576 <USBD_CtlError>
                  break;
 8006e3c:	e041      	b.n	8006ec2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	da0b      	bge.n	8006e5e <USBD_StdEPReq+0x2b2>
 8006e46:	7bbb      	ldrb	r3, [r7, #14]
 8006e48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	3310      	adds	r3, #16
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	4413      	add	r3, r2
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	e00b      	b.n	8006e76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e64:	4613      	mov	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	4413      	add	r3, r2
 8006e74:	3304      	adds	r3, #4
 8006e76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e78:	7bbb      	ldrb	r3, [r7, #14]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d002      	beq.n	8006e84 <USBD_StdEPReq+0x2d8>
 8006e7e:	7bbb      	ldrb	r3, [r7, #14]
 8006e80:	2b80      	cmp	r3, #128	; 0x80
 8006e82:	d103      	bne.n	8006e8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2200      	movs	r2, #0
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	e00e      	b.n	8006eaa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006e8c:	7bbb      	ldrb	r3, [r7, #14]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f001 f88d 	bl	8007fb0 <USBD_LL_IsStallEP>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d003      	beq.n	8006ea4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	e002      	b.n	8006eaa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2202      	movs	r2, #2
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fbd1 	bl	8007658 <USBD_CtlSendData>
              break;
 8006eb6:	e004      	b.n	8006ec2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fb5b 	bl	8007576 <USBD_CtlError>
              break;
 8006ec0:	bf00      	nop
          }
          break;
 8006ec2:	e004      	b.n	8006ece <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fb55 	bl	8007576 <USBD_CtlError>
          break;
 8006ecc:	bf00      	nop
      }
      break;
 8006ece:	e005      	b.n	8006edc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fb4f 	bl	8007576 <USBD_CtlError>
      break;
 8006ed8:	e000      	b.n	8006edc <USBD_StdEPReq+0x330>
      break;
 8006eda:	bf00      	nop
  }

  return ret;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	885b      	ldrh	r3, [r3, #2]
 8006f02:	0a1b      	lsrs	r3, r3, #8
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	3b01      	subs	r3, #1
 8006f08:	2b06      	cmp	r3, #6
 8006f0a:	f200 8128 	bhi.w	800715e <USBD_GetDescriptor+0x276>
 8006f0e:	a201      	add	r2, pc, #4	; (adr r2, 8006f14 <USBD_GetDescriptor+0x2c>)
 8006f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f14:	08006f31 	.word	0x08006f31
 8006f18:	08006f49 	.word	0x08006f49
 8006f1c:	08006f89 	.word	0x08006f89
 8006f20:	0800715f 	.word	0x0800715f
 8006f24:	0800715f 	.word	0x0800715f
 8006f28:	080070ff 	.word	0x080070ff
 8006f2c:	0800712b 	.word	0x0800712b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	7c12      	ldrb	r2, [r2, #16]
 8006f3c:	f107 0108 	add.w	r1, r7, #8
 8006f40:	4610      	mov	r0, r2
 8006f42:	4798      	blx	r3
 8006f44:	60f8      	str	r0, [r7, #12]
      break;
 8006f46:	e112      	b.n	800716e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	7c1b      	ldrb	r3, [r3, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10d      	bne.n	8006f6c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f58:	f107 0208 	add.w	r2, r7, #8
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	4798      	blx	r3
 8006f60:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3301      	adds	r3, #1
 8006f66:	2202      	movs	r2, #2
 8006f68:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f6a:	e100      	b.n	800716e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	f107 0208 	add.w	r2, r7, #8
 8006f78:	4610      	mov	r0, r2
 8006f7a:	4798      	blx	r3
 8006f7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3301      	adds	r3, #1
 8006f82:	2202      	movs	r2, #2
 8006f84:	701a      	strb	r2, [r3, #0]
      break;
 8006f86:	e0f2      	b.n	800716e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	885b      	ldrh	r3, [r3, #2]
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b05      	cmp	r3, #5
 8006f90:	f200 80ac 	bhi.w	80070ec <USBD_GetDescriptor+0x204>
 8006f94:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <USBD_GetDescriptor+0xb4>)
 8006f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9a:	bf00      	nop
 8006f9c:	08006fb5 	.word	0x08006fb5
 8006fa0:	08006fe9 	.word	0x08006fe9
 8006fa4:	0800701d 	.word	0x0800701d
 8006fa8:	08007051 	.word	0x08007051
 8006fac:	08007085 	.word	0x08007085
 8006fb0:	080070b9 	.word	0x080070b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00b      	beq.n	8006fd8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	7c12      	ldrb	r2, [r2, #16]
 8006fcc:	f107 0108 	add.w	r1, r7, #8
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	4798      	blx	r3
 8006fd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fd6:	e091      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 facb 	bl	8007576 <USBD_CtlError>
            err++;
 8006fe0:	7afb      	ldrb	r3, [r7, #11]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	72fb      	strb	r3, [r7, #11]
          break;
 8006fe6:	e089      	b.n	80070fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00b      	beq.n	800700c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	7c12      	ldrb	r2, [r2, #16]
 8007000:	f107 0108 	add.w	r1, r7, #8
 8007004:	4610      	mov	r0, r2
 8007006:	4798      	blx	r3
 8007008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800700a:	e077      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fab1 	bl	8007576 <USBD_CtlError>
            err++;
 8007014:	7afb      	ldrb	r3, [r7, #11]
 8007016:	3301      	adds	r3, #1
 8007018:	72fb      	strb	r3, [r7, #11]
          break;
 800701a:	e06f      	b.n	80070fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00b      	beq.n	8007040 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	7c12      	ldrb	r2, [r2, #16]
 8007034:	f107 0108 	add.w	r1, r7, #8
 8007038:	4610      	mov	r0, r2
 800703a:	4798      	blx	r3
 800703c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800703e:	e05d      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fa97 	bl	8007576 <USBD_CtlError>
            err++;
 8007048:	7afb      	ldrb	r3, [r7, #11]
 800704a:	3301      	adds	r3, #1
 800704c:	72fb      	strb	r3, [r7, #11]
          break;
 800704e:	e055      	b.n	80070fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00b      	beq.n	8007074 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	7c12      	ldrb	r2, [r2, #16]
 8007068:	f107 0108 	add.w	r1, r7, #8
 800706c:	4610      	mov	r0, r2
 800706e:	4798      	blx	r3
 8007070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007072:	e043      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fa7d 	bl	8007576 <USBD_CtlError>
            err++;
 800707c:	7afb      	ldrb	r3, [r7, #11]
 800707e:	3301      	adds	r3, #1
 8007080:	72fb      	strb	r3, [r7, #11]
          break;
 8007082:	e03b      	b.n	80070fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00b      	beq.n	80070a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	7c12      	ldrb	r2, [r2, #16]
 800709c:	f107 0108 	add.w	r1, r7, #8
 80070a0:	4610      	mov	r0, r2
 80070a2:	4798      	blx	r3
 80070a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070a6:	e029      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fa63 	bl	8007576 <USBD_CtlError>
            err++;
 80070b0:	7afb      	ldrb	r3, [r7, #11]
 80070b2:	3301      	adds	r3, #1
 80070b4:	72fb      	strb	r3, [r7, #11]
          break;
 80070b6:	e021      	b.n	80070fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00b      	beq.n	80070dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	7c12      	ldrb	r2, [r2, #16]
 80070d0:	f107 0108 	add.w	r1, r7, #8
 80070d4:	4610      	mov	r0, r2
 80070d6:	4798      	blx	r3
 80070d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070da:	e00f      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fa49 	bl	8007576 <USBD_CtlError>
            err++;
 80070e4:	7afb      	ldrb	r3, [r7, #11]
 80070e6:	3301      	adds	r3, #1
 80070e8:	72fb      	strb	r3, [r7, #11]
          break;
 80070ea:	e007      	b.n	80070fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80070ec:	6839      	ldr	r1, [r7, #0]
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fa41 	bl	8007576 <USBD_CtlError>
          err++;
 80070f4:	7afb      	ldrb	r3, [r7, #11]
 80070f6:	3301      	adds	r3, #1
 80070f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80070fa:	bf00      	nop
      }
      break;
 80070fc:	e037      	b.n	800716e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	7c1b      	ldrb	r3, [r3, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d109      	bne.n	800711a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800710e:	f107 0208 	add.w	r2, r7, #8
 8007112:	4610      	mov	r0, r2
 8007114:	4798      	blx	r3
 8007116:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007118:	e029      	b.n	800716e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fa2a 	bl	8007576 <USBD_CtlError>
        err++;
 8007122:	7afb      	ldrb	r3, [r7, #11]
 8007124:	3301      	adds	r3, #1
 8007126:	72fb      	strb	r3, [r7, #11]
      break;
 8007128:	e021      	b.n	800716e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	7c1b      	ldrb	r3, [r3, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10d      	bne.n	800714e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713a:	f107 0208 	add.w	r2, r7, #8
 800713e:	4610      	mov	r0, r2
 8007140:	4798      	blx	r3
 8007142:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3301      	adds	r3, #1
 8007148:	2207      	movs	r2, #7
 800714a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800714c:	e00f      	b.n	800716e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fa10 	bl	8007576 <USBD_CtlError>
        err++;
 8007156:	7afb      	ldrb	r3, [r7, #11]
 8007158:	3301      	adds	r3, #1
 800715a:	72fb      	strb	r3, [r7, #11]
      break;
 800715c:	e007      	b.n	800716e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fa08 	bl	8007576 <USBD_CtlError>
      err++;
 8007166:	7afb      	ldrb	r3, [r7, #11]
 8007168:	3301      	adds	r3, #1
 800716a:	72fb      	strb	r3, [r7, #11]
      break;
 800716c:	bf00      	nop
  }

  if (err != 0U)
 800716e:	7afb      	ldrb	r3, [r7, #11]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d11e      	bne.n	80071b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	88db      	ldrh	r3, [r3, #6]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d016      	beq.n	80071aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800717c:	893b      	ldrh	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00e      	beq.n	80071a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	88da      	ldrh	r2, [r3, #6]
 8007186:	893b      	ldrh	r3, [r7, #8]
 8007188:	4293      	cmp	r3, r2
 800718a:	bf28      	it	cs
 800718c:	4613      	movcs	r3, r2
 800718e:	b29b      	uxth	r3, r3
 8007190:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007192:	893b      	ldrh	r3, [r7, #8]
 8007194:	461a      	mov	r2, r3
 8007196:	68f9      	ldr	r1, [r7, #12]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fa5d 	bl	8007658 <USBD_CtlSendData>
 800719e:	e009      	b.n	80071b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f9e7 	bl	8007576 <USBD_CtlError>
 80071a8:	e004      	b.n	80071b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 faae 	bl	800770c <USBD_CtlSendStatus>
 80071b0:	e000      	b.n	80071b4 <USBD_GetDescriptor+0x2cc>
    return;
 80071b2:	bf00      	nop
  }
}
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop

080071bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	889b      	ldrh	r3, [r3, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d131      	bne.n	8007232 <USBD_SetAddress+0x76>
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	88db      	ldrh	r3, [r3, #6]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d12d      	bne.n	8007232 <USBD_SetAddress+0x76>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	885b      	ldrh	r3, [r3, #2]
 80071da:	2b7f      	cmp	r3, #127	; 0x7f
 80071dc:	d829      	bhi.n	8007232 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	885b      	ldrh	r3, [r3, #2]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d104      	bne.n	8007200 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f9bc 	bl	8007576 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071fe:	e01d      	b.n	800723c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	7bfa      	ldrb	r2, [r7, #15]
 8007204:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007208:	7bfb      	ldrb	r3, [r7, #15]
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fefb 	bl	8008008 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fa7a 	bl	800770c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007218:	7bfb      	ldrb	r3, [r7, #15]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d004      	beq.n	8007228 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2202      	movs	r2, #2
 8007222:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007226:	e009      	b.n	800723c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007230:	e004      	b.n	800723c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f99e 	bl	8007576 <USBD_CtlError>
  }
}
 800723a:	bf00      	nop
 800723c:	bf00      	nop
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800724e:	2300      	movs	r3, #0
 8007250:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	885b      	ldrh	r3, [r3, #2]
 8007256:	b2da      	uxtb	r2, r3
 8007258:	4b4e      	ldr	r3, [pc, #312]	; (8007394 <USBD_SetConfig+0x150>)
 800725a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800725c:	4b4d      	ldr	r3, [pc, #308]	; (8007394 <USBD_SetConfig+0x150>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d905      	bls.n	8007270 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007264:	6839      	ldr	r1, [r7, #0]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f985 	bl	8007576 <USBD_CtlError>
    return USBD_FAIL;
 800726c:	2303      	movs	r3, #3
 800726e:	e08c      	b.n	800738a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b02      	cmp	r3, #2
 800727a:	d002      	beq.n	8007282 <USBD_SetConfig+0x3e>
 800727c:	2b03      	cmp	r3, #3
 800727e:	d029      	beq.n	80072d4 <USBD_SetConfig+0x90>
 8007280:	e075      	b.n	800736e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007282:	4b44      	ldr	r3, [pc, #272]	; (8007394 <USBD_SetConfig+0x150>)
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d020      	beq.n	80072cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800728a:	4b42      	ldr	r3, [pc, #264]	; (8007394 <USBD_SetConfig+0x150>)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007294:	4b3f      	ldr	r3, [pc, #252]	; (8007394 <USBD_SetConfig+0x150>)
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	4619      	mov	r1, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7fe ffe7 	bl	800626e <USBD_SetClassConfig>
 80072a0:	4603      	mov	r3, r0
 80072a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d008      	beq.n	80072bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f962 	bl	8007576 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2202      	movs	r2, #2
 80072b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072ba:	e065      	b.n	8007388 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fa25 	bl	800770c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2203      	movs	r2, #3
 80072c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80072ca:	e05d      	b.n	8007388 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fa1d 	bl	800770c <USBD_CtlSendStatus>
      break;
 80072d2:	e059      	b.n	8007388 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80072d4:	4b2f      	ldr	r3, [pc, #188]	; (8007394 <USBD_SetConfig+0x150>)
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d112      	bne.n	8007302 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80072e4:	4b2b      	ldr	r3, [pc, #172]	; (8007394 <USBD_SetConfig+0x150>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072ee:	4b29      	ldr	r3, [pc, #164]	; (8007394 <USBD_SetConfig+0x150>)
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7fe ffd6 	bl	80062a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fa06 	bl	800770c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007300:	e042      	b.n	8007388 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007302:	4b24      	ldr	r3, [pc, #144]	; (8007394 <USBD_SetConfig+0x150>)
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	461a      	mov	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	429a      	cmp	r2, r3
 800730e:	d02a      	beq.n	8007366 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	b2db      	uxtb	r3, r3
 8007316:	4619      	mov	r1, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7fe ffc4 	bl	80062a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800731e:	4b1d      	ldr	r3, [pc, #116]	; (8007394 <USBD_SetConfig+0x150>)
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007328:	4b1a      	ldr	r3, [pc, #104]	; (8007394 <USBD_SetConfig+0x150>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7fe ff9d 	bl	800626e <USBD_SetClassConfig>
 8007334:	4603      	mov	r3, r0
 8007336:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00f      	beq.n	800735e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f918 	bl	8007576 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	b2db      	uxtb	r3, r3
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7fe ffa9 	bl	80062a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2202      	movs	r2, #2
 8007358:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800735c:	e014      	b.n	8007388 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f9d4 	bl	800770c <USBD_CtlSendStatus>
      break;
 8007364:	e010      	b.n	8007388 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f9d0 	bl	800770c <USBD_CtlSendStatus>
      break;
 800736c:	e00c      	b.n	8007388 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f900 	bl	8007576 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007376:	4b07      	ldr	r3, [pc, #28]	; (8007394 <USBD_SetConfig+0x150>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7fe ff92 	bl	80062a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007382:	2303      	movs	r3, #3
 8007384:	73fb      	strb	r3, [r7, #15]
      break;
 8007386:	bf00      	nop
  }

  return ret;
 8007388:	7bfb      	ldrb	r3, [r7, #15]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	20000228 	.word	0x20000228

08007398 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	88db      	ldrh	r3, [r3, #6]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d004      	beq.n	80073b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f8e2 	bl	8007576 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80073b2:	e023      	b.n	80073fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	dc02      	bgt.n	80073c6 <USBD_GetConfig+0x2e>
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	dc03      	bgt.n	80073cc <USBD_GetConfig+0x34>
 80073c4:	e015      	b.n	80073f2 <USBD_GetConfig+0x5a>
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d00b      	beq.n	80073e2 <USBD_GetConfig+0x4a>
 80073ca:	e012      	b.n	80073f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	3308      	adds	r3, #8
 80073d6:	2201      	movs	r2, #1
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f93c 	bl	8007658 <USBD_CtlSendData>
        break;
 80073e0:	e00c      	b.n	80073fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	3304      	adds	r3, #4
 80073e6:	2201      	movs	r2, #1
 80073e8:	4619      	mov	r1, r3
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f934 	bl	8007658 <USBD_CtlSendData>
        break;
 80073f0:	e004      	b.n	80073fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f8be 	bl	8007576 <USBD_CtlError>
        break;
 80073fa:	bf00      	nop
}
 80073fc:	bf00      	nop
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007414:	b2db      	uxtb	r3, r3
 8007416:	3b01      	subs	r3, #1
 8007418:	2b02      	cmp	r3, #2
 800741a:	d81e      	bhi.n	800745a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	88db      	ldrh	r3, [r3, #6]
 8007420:	2b02      	cmp	r3, #2
 8007422:	d004      	beq.n	800742e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f8a5 	bl	8007576 <USBD_CtlError>
        break;
 800742c:	e01a      	b.n	8007464 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800743a:	2b00      	cmp	r3, #0
 800743c:	d005      	beq.n	800744a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	f043 0202 	orr.w	r2, r3, #2
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	330c      	adds	r3, #12
 800744e:	2202      	movs	r2, #2
 8007450:	4619      	mov	r1, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f900 	bl	8007658 <USBD_CtlSendData>
      break;
 8007458:	e004      	b.n	8007464 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f88a 	bl	8007576 <USBD_CtlError>
      break;
 8007462:	bf00      	nop
  }
}
 8007464:	bf00      	nop
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	885b      	ldrh	r3, [r3, #2]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d107      	bne.n	800748e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f940 	bl	800770c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800748c:	e013      	b.n	80074b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	885b      	ldrh	r3, [r3, #2]
 8007492:	2b02      	cmp	r3, #2
 8007494:	d10b      	bne.n	80074ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	889b      	ldrh	r3, [r3, #4]
 800749a:	0a1b      	lsrs	r3, r3, #8
 800749c:	b29b      	uxth	r3, r3
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f930 	bl	800770c <USBD_CtlSendStatus>
}
 80074ac:	e003      	b.n	80074b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f860 	bl	8007576 <USBD_CtlError>
}
 80074b6:	bf00      	nop
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b082      	sub	sp, #8
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	3b01      	subs	r3, #1
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d80b      	bhi.n	80074ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	885b      	ldrh	r3, [r3, #2]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d10c      	bne.n	80074f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f910 	bl	800770c <USBD_CtlSendStatus>
      }
      break;
 80074ec:	e004      	b.n	80074f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f840 	bl	8007576 <USBD_CtlError>
      break;
 80074f6:	e000      	b.n	80074fa <USBD_ClrFeature+0x3c>
      break;
 80074f8:	bf00      	nop
  }
}
 80074fa:	bf00      	nop
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b084      	sub	sp, #16
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	781a      	ldrb	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	3301      	adds	r3, #1
 800751c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	781a      	ldrb	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	3301      	adds	r3, #1
 800752a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f7ff fa41 	bl	80069b4 <SWAPBYTE>
 8007532:	4603      	mov	r3, r0
 8007534:	461a      	mov	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	3301      	adds	r3, #1
 800753e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3301      	adds	r3, #1
 8007544:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f7ff fa34 	bl	80069b4 <SWAPBYTE>
 800754c:	4603      	mov	r3, r0
 800754e:	461a      	mov	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3301      	adds	r3, #1
 8007558:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f7ff fa27 	bl	80069b4 <SWAPBYTE>
 8007566:	4603      	mov	r3, r0
 8007568:	461a      	mov	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	80da      	strh	r2, [r3, #6]
}
 800756e:	bf00      	nop
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b082      	sub	sp, #8
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007580:	2180      	movs	r1, #128	; 0x80
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fcd6 	bl	8007f34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007588:	2100      	movs	r1, #0
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fcd2 	bl	8007f34 <USBD_LL_StallEP>
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d036      	beq.n	800761c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80075b2:	6938      	ldr	r0, [r7, #16]
 80075b4:	f000 f836 	bl	8007624 <USBD_GetLen>
 80075b8:	4603      	mov	r3, r0
 80075ba:	3301      	adds	r3, #1
 80075bc:	b29b      	uxth	r3, r3
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	4413      	add	r3, r2
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	7812      	ldrb	r2, [r2, #0]
 80075d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80075d2:	7dfb      	ldrb	r3, [r7, #23]
 80075d4:	3301      	adds	r3, #1
 80075d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80075d8:	7dfb      	ldrb	r3, [r7, #23]
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	4413      	add	r3, r2
 80075de:	2203      	movs	r2, #3
 80075e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80075e2:	7dfb      	ldrb	r3, [r7, #23]
 80075e4:	3301      	adds	r3, #1
 80075e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80075e8:	e013      	b.n	8007612 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80075ea:	7dfb      	ldrb	r3, [r7, #23]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	4413      	add	r3, r2
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	7812      	ldrb	r2, [r2, #0]
 80075f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	3301      	adds	r3, #1
 80075fa:	613b      	str	r3, [r7, #16]
    idx++;
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
 80075fe:	3301      	adds	r3, #1
 8007600:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007602:	7dfb      	ldrb	r3, [r7, #23]
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	4413      	add	r3, r2
 8007608:	2200      	movs	r2, #0
 800760a:	701a      	strb	r2, [r3, #0]
    idx++;
 800760c:	7dfb      	ldrb	r3, [r7, #23]
 800760e:	3301      	adds	r3, #1
 8007610:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e7      	bne.n	80075ea <USBD_GetString+0x52>
 800761a:	e000      	b.n	800761e <USBD_GetString+0x86>
    return;
 800761c:	bf00      	nop
  }
}
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800762c:	2300      	movs	r3, #0
 800762e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007634:	e005      	b.n	8007642 <USBD_GetLen+0x1e>
  {
    len++;
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	3301      	adds	r3, #1
 800763a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	3301      	adds	r3, #1
 8007640:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1f5      	bne.n	8007636 <USBD_GetLen+0x12>
  }

  return len;
 800764a:	7bfb      	ldrb	r3, [r7, #15]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2202      	movs	r2, #2
 8007668:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	2100      	movs	r1, #0
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 fce1 	bl	8008046 <USBD_LL_Transmit>

  return USBD_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b084      	sub	sp, #16
 8007692:	af00      	add	r7, sp, #0
 8007694:	60f8      	str	r0, [r7, #12]
 8007696:	60b9      	str	r1, [r7, #8]
 8007698:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	2100      	movs	r1, #0
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 fcd0 	bl	8008046 <USBD_LL_Transmit>

  return USBD_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2203      	movs	r2, #3
 80076c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	2100      	movs	r1, #0
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 fcd4 	bl	8008088 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b084      	sub	sp, #16
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	60b9      	str	r1, [r7, #8]
 80076f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	2100      	movs	r1, #0
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 fcc3 	bl	8008088 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2204      	movs	r2, #4
 8007718:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800771c:	2300      	movs	r3, #0
 800771e:	2200      	movs	r2, #0
 8007720:	2100      	movs	r1, #0
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fc8f 	bl	8008046 <USBD_LL_Transmit>

  return USBD_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b082      	sub	sp, #8
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2205      	movs	r2, #5
 800773e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007742:	2300      	movs	r3, #0
 8007744:	2200      	movs	r2, #0
 8007746:	2100      	movs	r1, #0
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fc9d 	bl	8008088 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800775c:	2200      	movs	r2, #0
 800775e:	4912      	ldr	r1, [pc, #72]	; (80077a8 <MX_USB_DEVICE_Init+0x50>)
 8007760:	4812      	ldr	r0, [pc, #72]	; (80077ac <MX_USB_DEVICE_Init+0x54>)
 8007762:	f7fe fd07 	bl	8006174 <USBD_Init>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d001      	beq.n	8007770 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800776c:	f7f8 ffcc 	bl	8000708 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007770:	490f      	ldr	r1, [pc, #60]	; (80077b0 <MX_USB_DEVICE_Init+0x58>)
 8007772:	480e      	ldr	r0, [pc, #56]	; (80077ac <MX_USB_DEVICE_Init+0x54>)
 8007774:	f7fe fd2e 	bl	80061d4 <USBD_RegisterClass>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800777e:	f7f8 ffc3 	bl	8000708 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007782:	490c      	ldr	r1, [pc, #48]	; (80077b4 <MX_USB_DEVICE_Init+0x5c>)
 8007784:	4809      	ldr	r0, [pc, #36]	; (80077ac <MX_USB_DEVICE_Init+0x54>)
 8007786:	f7fe fc1f 	bl	8005fc8 <USBD_CDC_RegisterInterface>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007790:	f7f8 ffba 	bl	8000708 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007794:	4805      	ldr	r0, [pc, #20]	; (80077ac <MX_USB_DEVICE_Init+0x54>)
 8007796:	f7fe fd53 	bl	8006240 <USBD_Start>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d001      	beq.n	80077a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80077a0:	f7f8 ffb2 	bl	8000708 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80077a4:	bf00      	nop
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	200000bc 	.word	0x200000bc
 80077ac:	2000022c 	.word	0x2000022c
 80077b0:	20000028 	.word	0x20000028
 80077b4:	200000a8 	.word	0x200000a8

080077b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80077bc:	2200      	movs	r2, #0
 80077be:	4905      	ldr	r1, [pc, #20]	; (80077d4 <CDC_Init_FS+0x1c>)
 80077c0:	4805      	ldr	r0, [pc, #20]	; (80077d8 <CDC_Init_FS+0x20>)
 80077c2:	f7fe fc1b 	bl	8005ffc <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80077c6:	4905      	ldr	r1, [pc, #20]	; (80077dc <CDC_Init_FS+0x24>)
 80077c8:	4803      	ldr	r0, [pc, #12]	; (80077d8 <CDC_Init_FS+0x20>)
 80077ca:	f7fe fc39 	bl	8006040 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 80077ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	20000908 	.word	0x20000908
 80077d8:	2000022c 	.word	0x2000022c
 80077dc:	20000508 	.word	0x20000508

080077e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80077e0:	b480      	push	{r7}
 80077e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 80077e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	4603      	mov	r3, r0
 80077f8:	6039      	str	r1, [r7, #0]
 80077fa:	71fb      	strb	r3, [r7, #7]
 80077fc:	4613      	mov	r3, r2
 80077fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 8007800:	79fb      	ldrb	r3, [r7, #7]
 8007802:	2b23      	cmp	r3, #35	; 0x23
 8007804:	d84a      	bhi.n	800789c <CDC_Control_FS+0xac>
 8007806:	a201      	add	r2, pc, #4	; (adr r2, 800780c <CDC_Control_FS+0x1c>)
 8007808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780c:	0800789d 	.word	0x0800789d
 8007810:	0800789d 	.word	0x0800789d
 8007814:	0800789d 	.word	0x0800789d
 8007818:	0800789d 	.word	0x0800789d
 800781c:	0800789d 	.word	0x0800789d
 8007820:	0800789d 	.word	0x0800789d
 8007824:	0800789d 	.word	0x0800789d
 8007828:	0800789d 	.word	0x0800789d
 800782c:	0800789d 	.word	0x0800789d
 8007830:	0800789d 	.word	0x0800789d
 8007834:	0800789d 	.word	0x0800789d
 8007838:	0800789d 	.word	0x0800789d
 800783c:	0800789d 	.word	0x0800789d
 8007840:	0800789d 	.word	0x0800789d
 8007844:	0800789d 	.word	0x0800789d
 8007848:	0800789d 	.word	0x0800789d
 800784c:	0800789d 	.word	0x0800789d
 8007850:	0800789d 	.word	0x0800789d
 8007854:	0800789d 	.word	0x0800789d
 8007858:	0800789d 	.word	0x0800789d
 800785c:	0800789d 	.word	0x0800789d
 8007860:	0800789d 	.word	0x0800789d
 8007864:	0800789d 	.word	0x0800789d
 8007868:	0800789d 	.word	0x0800789d
 800786c:	0800789d 	.word	0x0800789d
 8007870:	0800789d 	.word	0x0800789d
 8007874:	0800789d 	.word	0x0800789d
 8007878:	0800789d 	.word	0x0800789d
 800787c:	0800789d 	.word	0x0800789d
 8007880:	0800789d 	.word	0x0800789d
 8007884:	0800789d 	.word	0x0800789d
 8007888:	0800789d 	.word	0x0800789d
 800788c:	0800789d 	.word	0x0800789d
 8007890:	0800789d 	.word	0x0800789d
 8007894:	0800789d 	.word	0x0800789d
 8007898:	0800789d 	.word	0x0800789d
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 800789c:	bf00      	nop
    }

    return (USBD_OK);
 800789e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80078b6:	6879      	ldr	r1, [r7, #4]
 80078b8:	4805      	ldr	r0, [pc, #20]	; (80078d0 <CDC_Receive_FS+0x24>)
 80078ba:	f7fe fbc1 	bl	8006040 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80078be:	4804      	ldr	r0, [pc, #16]	; (80078d0 <CDC_Receive_FS+0x24>)
 80078c0:	f7fe fc22 	bl	8006108 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 80078c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	2000022c 	.word	0x2000022c

080078d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	460b      	mov	r3, r1
 80078de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 80078e4:	4b0d      	ldr	r3, [pc, #52]	; (800791c <CDC_Transmit_FS+0x48>)
 80078e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078ea:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e00b      	b.n	8007912 <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80078fa:	887b      	ldrh	r3, [r7, #2]
 80078fc:	461a      	mov	r2, r3
 80078fe:	6879      	ldr	r1, [r7, #4]
 8007900:	4806      	ldr	r0, [pc, #24]	; (800791c <CDC_Transmit_FS+0x48>)
 8007902:	f7fe fb7b 	bl	8005ffc <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007906:	4805      	ldr	r0, [pc, #20]	; (800791c <CDC_Transmit_FS+0x48>)
 8007908:	f7fe fbb8 	bl	800607c <USBD_CDC_TransmitPacket>
 800790c:	4603      	mov	r3, r0
 800790e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007910:	7bfb      	ldrb	r3, [r7, #15]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	2000022c 	.word	0x2000022c

08007920 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	4613      	mov	r3, r2
 800792c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007932:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007936:	4618      	mov	r0, r3
 8007938:	371c      	adds	r7, #28
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
	...

08007944 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	4603      	mov	r3, r0
 800794c:	6039      	str	r1, [r7, #0]
 800794e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2212      	movs	r2, #18
 8007954:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007956:	4b03      	ldr	r3, [pc, #12]	; (8007964 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007958:	4618      	mov	r0, r3
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	200000d8 	.word	0x200000d8

08007968 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	4603      	mov	r3, r0
 8007970:	6039      	str	r1, [r7, #0]
 8007972:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	2204      	movs	r2, #4
 8007978:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800797a:	4b03      	ldr	r3, [pc, #12]	; (8007988 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800797c:	4618      	mov	r0, r3
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	200000ec 	.word	0x200000ec

0800798c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	4603      	mov	r3, r0
 8007994:	6039      	str	r1, [r7, #0]
 8007996:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007998:	79fb      	ldrb	r3, [r7, #7]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d105      	bne.n	80079aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	4907      	ldr	r1, [pc, #28]	; (80079c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80079a2:	4808      	ldr	r0, [pc, #32]	; (80079c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80079a4:	f7ff fdf8 	bl	8007598 <USBD_GetString>
 80079a8:	e004      	b.n	80079b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	4904      	ldr	r1, [pc, #16]	; (80079c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80079ae:	4805      	ldr	r0, [pc, #20]	; (80079c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80079b0:	f7ff fdf2 	bl	8007598 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079b4:	4b02      	ldr	r3, [pc, #8]	; (80079c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	20000d08 	.word	0x20000d08
 80079c4:	08008afc 	.word	0x08008afc

080079c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	6039      	str	r1, [r7, #0]
 80079d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	4904      	ldr	r1, [pc, #16]	; (80079e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80079d8:	4804      	ldr	r0, [pc, #16]	; (80079ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80079da:	f7ff fddd 	bl	8007598 <USBD_GetString>
  return USBD_StrDesc;
 80079de:	4b02      	ldr	r3, [pc, #8]	; (80079e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	20000d08 	.word	0x20000d08
 80079ec:	08008b14 	.word	0x08008b14

080079f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	6039      	str	r1, [r7, #0]
 80079fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	221a      	movs	r2, #26
 8007a00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007a02:	f000 f843 	bl	8007a8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007a06:	4b02      	ldr	r3, [pc, #8]	; (8007a10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	200000f0 	.word	0x200000f0

08007a14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	6039      	str	r1, [r7, #0]
 8007a1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007a20:	79fb      	ldrb	r3, [r7, #7]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d105      	bne.n	8007a32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	4907      	ldr	r1, [pc, #28]	; (8007a48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a2a:	4808      	ldr	r0, [pc, #32]	; (8007a4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a2c:	f7ff fdb4 	bl	8007598 <USBD_GetString>
 8007a30:	e004      	b.n	8007a3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	4904      	ldr	r1, [pc, #16]	; (8007a48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a36:	4805      	ldr	r0, [pc, #20]	; (8007a4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a38:	f7ff fdae 	bl	8007598 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a3c:	4b02      	ldr	r3, [pc, #8]	; (8007a48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	20000d08 	.word	0x20000d08
 8007a4c:	08008b28 	.word	0x08008b28

08007a50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	4603      	mov	r3, r0
 8007a58:	6039      	str	r1, [r7, #0]
 8007a5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a5c:	79fb      	ldrb	r3, [r7, #7]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d105      	bne.n	8007a6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	4907      	ldr	r1, [pc, #28]	; (8007a84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a66:	4808      	ldr	r0, [pc, #32]	; (8007a88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a68:	f7ff fd96 	bl	8007598 <USBD_GetString>
 8007a6c:	e004      	b.n	8007a78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	4904      	ldr	r1, [pc, #16]	; (8007a84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a72:	4805      	ldr	r0, [pc, #20]	; (8007a88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a74:	f7ff fd90 	bl	8007598 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a78:	4b02      	ldr	r3, [pc, #8]	; (8007a84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20000d08 	.word	0x20000d08
 8007a88:	08008b34 	.word	0x08008b34

08007a8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a92:	4b0f      	ldr	r3, [pc, #60]	; (8007ad0 <Get_SerialNum+0x44>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a98:	4b0e      	ldr	r3, [pc, #56]	; (8007ad4 <Get_SerialNum+0x48>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a9e:	4b0e      	ldr	r3, [pc, #56]	; (8007ad8 <Get_SerialNum+0x4c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d009      	beq.n	8007ac6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007ab2:	2208      	movs	r2, #8
 8007ab4:	4909      	ldr	r1, [pc, #36]	; (8007adc <Get_SerialNum+0x50>)
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 f814 	bl	8007ae4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007abc:	2204      	movs	r2, #4
 8007abe:	4908      	ldr	r1, [pc, #32]	; (8007ae0 <Get_SerialNum+0x54>)
 8007ac0:	68b8      	ldr	r0, [r7, #8]
 8007ac2:	f000 f80f 	bl	8007ae4 <IntToUnicode>
  }
}
 8007ac6:	bf00      	nop
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	1fff7a10 	.word	0x1fff7a10
 8007ad4:	1fff7a14 	.word	0x1fff7a14
 8007ad8:	1fff7a18 	.word	0x1fff7a18
 8007adc:	200000f2 	.word	0x200000f2
 8007ae0:	20000102 	.word	0x20000102

08007ae4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	4613      	mov	r3, r2
 8007af0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007af2:	2300      	movs	r3, #0
 8007af4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007af6:	2300      	movs	r3, #0
 8007af8:	75fb      	strb	r3, [r7, #23]
 8007afa:	e027      	b.n	8007b4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	0f1b      	lsrs	r3, r3, #28
 8007b00:	2b09      	cmp	r3, #9
 8007b02:	d80b      	bhi.n	8007b1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	0f1b      	lsrs	r3, r3, #28
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	7dfb      	ldrb	r3, [r7, #23]
 8007b0c:	005b      	lsls	r3, r3, #1
 8007b0e:	4619      	mov	r1, r3
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	440b      	add	r3, r1
 8007b14:	3230      	adds	r2, #48	; 0x30
 8007b16:	b2d2      	uxtb	r2, r2
 8007b18:	701a      	strb	r2, [r3, #0]
 8007b1a:	e00a      	b.n	8007b32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	0f1b      	lsrs	r3, r3, #28
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
 8007b24:	005b      	lsls	r3, r3, #1
 8007b26:	4619      	mov	r1, r3
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	440b      	add	r3, r1
 8007b2c:	3237      	adds	r2, #55	; 0x37
 8007b2e:	b2d2      	uxtb	r2, r2
 8007b30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	011b      	lsls	r3, r3, #4
 8007b36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007b38:	7dfb      	ldrb	r3, [r7, #23]
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	4413      	add	r3, r2
 8007b42:	2200      	movs	r2, #0
 8007b44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007b46:	7dfb      	ldrb	r3, [r7, #23]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	75fb      	strb	r3, [r7, #23]
 8007b4c:	7dfa      	ldrb	r2, [r7, #23]
 8007b4e:	79fb      	ldrb	r3, [r7, #7]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d3d3      	bcc.n	8007afc <IntToUnicode+0x18>
  }
}
 8007b54:	bf00      	nop
 8007b56:	bf00      	nop
 8007b58:	371c      	adds	r7, #28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
	...

08007b64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b08a      	sub	sp, #40	; 0x28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b6c:	f107 0314 	add.w	r3, r7, #20
 8007b70:	2200      	movs	r2, #0
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	605a      	str	r2, [r3, #4]
 8007b76:	609a      	str	r2, [r3, #8]
 8007b78:	60da      	str	r2, [r3, #12]
 8007b7a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b84:	d13a      	bne.n	8007bfc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b86:	2300      	movs	r3, #0
 8007b88:	613b      	str	r3, [r7, #16]
 8007b8a:	4b1e      	ldr	r3, [pc, #120]	; (8007c04 <HAL_PCD_MspInit+0xa0>)
 8007b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8e:	4a1d      	ldr	r2, [pc, #116]	; (8007c04 <HAL_PCD_MspInit+0xa0>)
 8007b90:	f043 0301 	orr.w	r3, r3, #1
 8007b94:	6313      	str	r3, [r2, #48]	; 0x30
 8007b96:	4b1b      	ldr	r3, [pc, #108]	; (8007c04 <HAL_PCD_MspInit+0xa0>)
 8007b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	613b      	str	r3, [r7, #16]
 8007ba0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ba2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ba8:	2302      	movs	r3, #2
 8007baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bac:	2300      	movs	r3, #0
 8007bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007bb4:	230a      	movs	r3, #10
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bb8:	f107 0314 	add.w	r3, r7, #20
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4812      	ldr	r0, [pc, #72]	; (8007c08 <HAL_PCD_MspInit+0xa4>)
 8007bc0:	f7f9 fc1c 	bl	80013fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007bc4:	4b0f      	ldr	r3, [pc, #60]	; (8007c04 <HAL_PCD_MspInit+0xa0>)
 8007bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc8:	4a0e      	ldr	r2, [pc, #56]	; (8007c04 <HAL_PCD_MspInit+0xa0>)
 8007bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bce:	6353      	str	r3, [r2, #52]	; 0x34
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	60fb      	str	r3, [r7, #12]
 8007bd4:	4b0b      	ldr	r3, [pc, #44]	; (8007c04 <HAL_PCD_MspInit+0xa0>)
 8007bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd8:	4a0a      	ldr	r2, [pc, #40]	; (8007c04 <HAL_PCD_MspInit+0xa0>)
 8007bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bde:	6453      	str	r3, [r2, #68]	; 0x44
 8007be0:	4b08      	ldr	r3, [pc, #32]	; (8007c04 <HAL_PCD_MspInit+0xa0>)
 8007be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007bec:	2200      	movs	r2, #0
 8007bee:	2100      	movs	r1, #0
 8007bf0:	2043      	movs	r0, #67	; 0x43
 8007bf2:	f7f9 f9e6 	bl	8000fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007bf6:	2043      	movs	r0, #67	; 0x43
 8007bf8:	f7f9 f9ff 	bl	8000ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007bfc:	bf00      	nop
 8007bfe:	3728      	adds	r7, #40	; 0x28
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	40023800 	.word	0x40023800
 8007c08:	40020000 	.word	0x40020000

08007c0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007c20:	4619      	mov	r1, r3
 8007c22:	4610      	mov	r0, r2
 8007c24:	f7fe fb59 	bl	80062da <USBD_LL_SetupStage>
}
 8007c28:	bf00      	nop
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007c42:	78fa      	ldrb	r2, [r7, #3]
 8007c44:	6879      	ldr	r1, [r7, #4]
 8007c46:	4613      	mov	r3, r2
 8007c48:	00db      	lsls	r3, r3, #3
 8007c4a:	4413      	add	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	440b      	add	r3, r1
 8007c50:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	78fb      	ldrb	r3, [r7, #3]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	f7fe fb93 	bl	8006384 <USBD_LL_DataOutStage>
}
 8007c5e:	bf00      	nop
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007c78:	78fa      	ldrb	r2, [r7, #3]
 8007c7a:	6879      	ldr	r1, [r7, #4]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	00db      	lsls	r3, r3, #3
 8007c80:	4413      	add	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	440b      	add	r3, r1
 8007c86:	334c      	adds	r3, #76	; 0x4c
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	78fb      	ldrb	r3, [r7, #3]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	f7fe fc2c 	bl	80064ea <USBD_LL_DataInStage>
}
 8007c92:	bf00      	nop
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b082      	sub	sp, #8
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fe fd60 	bl	800676e <USBD_LL_SOF>
}
 8007cae:	bf00      	nop
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d001      	beq.n	8007cce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007cca:	f7f8 fd1d 	bl	8000708 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cd4:	7bfa      	ldrb	r2, [r7, #15]
 8007cd6:	4611      	mov	r1, r2
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7fe fd0a 	bl	80066f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fe fcb2 	bl	800664e <USBD_LL_Reset>
}
 8007cea:	bf00      	nop
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
	...

08007cf4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fe fd05 	bl	8006712 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	6812      	ldr	r2, [r2, #0]
 8007d16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d1a:	f043 0301 	orr.w	r3, r3, #1
 8007d1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a1b      	ldr	r3, [r3, #32]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d005      	beq.n	8007d34 <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d28:	4b04      	ldr	r3, [pc, #16]	; (8007d3c <HAL_PCD_SuspendCallback+0x48>)
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	4a03      	ldr	r2, [pc, #12]	; (8007d3c <HAL_PCD_SuspendCallback+0x48>)
 8007d2e:	f043 0306 	orr.w	r3, r3, #6
 8007d32:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 8007d34:	bf00      	nop
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	e000ed00 	.word	0xe000ed00

08007d40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe fcf5 	bl	800673e <USBD_LL_Resume>
}
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d6e:	78fa      	ldrb	r2, [r7, #3]
 8007d70:	4611      	mov	r1, r2
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe fd4d 	bl	8006812 <USBD_LL_IsoOUTIncomplete>
}
 8007d78:	bf00      	nop
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d92:	78fa      	ldrb	r2, [r7, #3]
 8007d94:	4611      	mov	r1, r2
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fe fd09 	bl	80067ae <USBD_LL_IsoINIncomplete>
}
 8007d9c:	bf00      	nop
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fe fd5f 	bl	8006876 <USBD_LL_DevConnected>
}
 8007db8:	bf00      	nop
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe fd5c 	bl	800688c <USBD_LL_DevDisconnected>
}
 8007dd4:	bf00      	nop
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d13c      	bne.n	8007e66 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007dec:	4a20      	ldr	r2, [pc, #128]	; (8007e70 <USBD_LL_Init+0x94>)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a1e      	ldr	r2, [pc, #120]	; (8007e70 <USBD_LL_Init+0x94>)
 8007df8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007dfc:	4b1c      	ldr	r3, [pc, #112]	; (8007e70 <USBD_LL_Init+0x94>)
 8007dfe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007e02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007e04:	4b1a      	ldr	r3, [pc, #104]	; (8007e70 <USBD_LL_Init+0x94>)
 8007e06:	2204      	movs	r2, #4
 8007e08:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007e0a:	4b19      	ldr	r3, [pc, #100]	; (8007e70 <USBD_LL_Init+0x94>)
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007e10:	4b17      	ldr	r3, [pc, #92]	; (8007e70 <USBD_LL_Init+0x94>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007e16:	4b16      	ldr	r3, [pc, #88]	; (8007e70 <USBD_LL_Init+0x94>)
 8007e18:	2202      	movs	r2, #2
 8007e1a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007e1c:	4b14      	ldr	r3, [pc, #80]	; (8007e70 <USBD_LL_Init+0x94>)
 8007e1e:	2200      	movs	r2, #0
 8007e20:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007e22:	4b13      	ldr	r3, [pc, #76]	; (8007e70 <USBD_LL_Init+0x94>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007e28:	4b11      	ldr	r3, [pc, #68]	; (8007e70 <USBD_LL_Init+0x94>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007e2e:	4b10      	ldr	r3, [pc, #64]	; (8007e70 <USBD_LL_Init+0x94>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007e34:	4b0e      	ldr	r3, [pc, #56]	; (8007e70 <USBD_LL_Init+0x94>)
 8007e36:	2200      	movs	r2, #0
 8007e38:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007e3a:	480d      	ldr	r0, [pc, #52]	; (8007e70 <USBD_LL_Init+0x94>)
 8007e3c:	f7f9 fc62 	bl	8001704 <HAL_PCD_Init>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007e46:	f7f8 fc5f 	bl	8000708 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007e4a:	2180      	movs	r1, #128	; 0x80
 8007e4c:	4808      	ldr	r0, [pc, #32]	; (8007e70 <USBD_LL_Init+0x94>)
 8007e4e:	f7fa feba 	bl	8002bc6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007e52:	2240      	movs	r2, #64	; 0x40
 8007e54:	2100      	movs	r1, #0
 8007e56:	4806      	ldr	r0, [pc, #24]	; (8007e70 <USBD_LL_Init+0x94>)
 8007e58:	f7fa fe6e 	bl	8002b38 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007e5c:	2280      	movs	r2, #128	; 0x80
 8007e5e:	2101      	movs	r1, #1
 8007e60:	4803      	ldr	r0, [pc, #12]	; (8007e70 <USBD_LL_Init+0x94>)
 8007e62:	f7fa fe69 	bl	8002b38 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	20000f08 	.word	0x20000f08

08007e74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e80:	2300      	movs	r3, #0
 8007e82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7f9 fd57 	bl	800193e <HAL_PCD_Start>
 8007e90:	4603      	mov	r3, r0
 8007e92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 f942 	bl	8008120 <USBD_Get_USB_Status>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b084      	sub	sp, #16
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	4608      	mov	r0, r1
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	4603      	mov	r3, r0
 8007eba:	70fb      	strb	r3, [r7, #3]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	70bb      	strb	r3, [r7, #2]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ed2:	78bb      	ldrb	r3, [r7, #2]
 8007ed4:	883a      	ldrh	r2, [r7, #0]
 8007ed6:	78f9      	ldrb	r1, [r7, #3]
 8007ed8:	f7fa fa28 	bl	800232c <HAL_PCD_EP_Open>
 8007edc:	4603      	mov	r3, r0
 8007ede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 f91c 	bl	8008120 <USBD_Get_USB_Status>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	460b      	mov	r3, r1
 8007f00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f06:	2300      	movs	r3, #0
 8007f08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f10:	78fa      	ldrb	r2, [r7, #3]
 8007f12:	4611      	mov	r1, r2
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fa fa71 	bl	80023fc <HAL_PCD_EP_Close>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 f8fd 	bl	8008120 <USBD_Get_USB_Status>
 8007f26:	4603      	mov	r3, r0
 8007f28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f40:	2300      	movs	r3, #0
 8007f42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f4e:	78fa      	ldrb	r2, [r7, #3]
 8007f50:	4611      	mov	r1, r2
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fa fb49 	bl	80025ea <HAL_PCD_EP_SetStall>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 f8de 	bl	8008120 <USBD_Get_USB_Status>
 8007f64:	4603      	mov	r3, r0
 8007f66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f68:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b084      	sub	sp, #16
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f8c:	78fa      	ldrb	r2, [r7, #3]
 8007f8e:	4611      	mov	r1, r2
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7fa fb8e 	bl	80026b2 <HAL_PCD_EP_ClrStall>
 8007f96:	4603      	mov	r3, r0
 8007f98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 f8bf 	bl	8008120 <USBD_Get_USB_Status>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fa6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fc2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007fc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	da0b      	bge.n	8007fe4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007fcc:	78fb      	ldrb	r3, [r7, #3]
 8007fce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fd2:	68f9      	ldr	r1, [r7, #12]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	00db      	lsls	r3, r3, #3
 8007fd8:	4413      	add	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	440b      	add	r3, r1
 8007fde:	333e      	adds	r3, #62	; 0x3e
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	e00b      	b.n	8007ffc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007fe4:	78fb      	ldrb	r3, [r7, #3]
 8007fe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fea:	68f9      	ldr	r1, [r7, #12]
 8007fec:	4613      	mov	r3, r2
 8007fee:	00db      	lsls	r3, r3, #3
 8007ff0:	4413      	add	r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	440b      	add	r3, r1
 8007ff6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007ffa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	460b      	mov	r3, r1
 8008012:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008022:	78fa      	ldrb	r2, [r7, #3]
 8008024:	4611      	mov	r1, r2
 8008026:	4618      	mov	r0, r3
 8008028:	f7fa f95b 	bl	80022e2 <HAL_PCD_SetAddress>
 800802c:	4603      	mov	r3, r0
 800802e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	4618      	mov	r0, r3
 8008034:	f000 f874 	bl	8008120 <USBD_Get_USB_Status>
 8008038:	4603      	mov	r3, r0
 800803a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800803c:	7bbb      	ldrb	r3, [r7, #14]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b086      	sub	sp, #24
 800804a:	af00      	add	r7, sp, #0
 800804c:	60f8      	str	r0, [r7, #12]
 800804e:	607a      	str	r2, [r7, #4]
 8008050:	603b      	str	r3, [r7, #0]
 8008052:	460b      	mov	r3, r1
 8008054:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008064:	7af9      	ldrb	r1, [r7, #11]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	f7fa fa74 	bl	8002556 <HAL_PCD_EP_Transmit>
 800806e:	4603      	mov	r3, r0
 8008070:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008072:	7dfb      	ldrb	r3, [r7, #23]
 8008074:	4618      	mov	r0, r3
 8008076:	f000 f853 	bl	8008120 <USBD_Get_USB_Status>
 800807a:	4603      	mov	r3, r0
 800807c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800807e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3718      	adds	r7, #24
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	607a      	str	r2, [r7, #4]
 8008092:	603b      	str	r3, [r7, #0]
 8008094:	460b      	mov	r3, r1
 8008096:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80080a6:	7af9      	ldrb	r1, [r7, #11]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	f7fa f9f0 	bl	8002490 <HAL_PCD_EP_Receive>
 80080b0:	4603      	mov	r3, r0
 80080b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080b4:	7dfb      	ldrb	r3, [r7, #23]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 f832 	bl	8008120 <USBD_Get_USB_Status>
 80080bc:	4603      	mov	r3, r0
 80080be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3718      	adds	r7, #24
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b082      	sub	sp, #8
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	460b      	mov	r3, r1
 80080d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080dc:	78fa      	ldrb	r2, [r7, #3]
 80080de:	4611      	mov	r1, r2
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fa fa20 	bl	8002526 <HAL_PCD_EP_GetRxCount>
 80080e6:	4603      	mov	r3, r0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80080f8:	4b03      	ldr	r3, [pc, #12]	; (8008108 <USBD_static_malloc+0x18>)
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	20001414 	.word	0x20001414

0800810c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]

}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	4603      	mov	r3, r0
 8008128:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800812e:	79fb      	ldrb	r3, [r7, #7]
 8008130:	2b03      	cmp	r3, #3
 8008132:	d817      	bhi.n	8008164 <USBD_Get_USB_Status+0x44>
 8008134:	a201      	add	r2, pc, #4	; (adr r2, 800813c <USBD_Get_USB_Status+0x1c>)
 8008136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813a:	bf00      	nop
 800813c:	0800814d 	.word	0x0800814d
 8008140:	08008153 	.word	0x08008153
 8008144:	08008159 	.word	0x08008159
 8008148:	0800815f 	.word	0x0800815f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800814c:	2300      	movs	r3, #0
 800814e:	73fb      	strb	r3, [r7, #15]
    break;
 8008150:	e00b      	b.n	800816a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008152:	2303      	movs	r3, #3
 8008154:	73fb      	strb	r3, [r7, #15]
    break;
 8008156:	e008      	b.n	800816a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008158:	2301      	movs	r3, #1
 800815a:	73fb      	strb	r3, [r7, #15]
    break;
 800815c:	e005      	b.n	800816a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800815e:	2303      	movs	r3, #3
 8008160:	73fb      	strb	r3, [r7, #15]
    break;
 8008162:	e002      	b.n	800816a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008164:	2303      	movs	r3, #3
 8008166:	73fb      	strb	r3, [r7, #15]
    break;
 8008168:	bf00      	nop
  }
  return usb_status;
 800816a:	7bfb      	ldrb	r3, [r7, #15]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <malloc>:
 8008178:	4b02      	ldr	r3, [pc, #8]	; (8008184 <malloc+0xc>)
 800817a:	4601      	mov	r1, r0
 800817c:	6818      	ldr	r0, [r3, #0]
 800817e:	f000 b823 	b.w	80081c8 <_malloc_r>
 8008182:	bf00      	nop
 8008184:	20000158 	.word	0x20000158

08008188 <sbrk_aligned>:
 8008188:	b570      	push	{r4, r5, r6, lr}
 800818a:	4e0e      	ldr	r6, [pc, #56]	; (80081c4 <sbrk_aligned+0x3c>)
 800818c:	460c      	mov	r4, r1
 800818e:	6831      	ldr	r1, [r6, #0]
 8008190:	4605      	mov	r5, r0
 8008192:	b911      	cbnz	r1, 800819a <sbrk_aligned+0x12>
 8008194:	f000 f8cc 	bl	8008330 <_sbrk_r>
 8008198:	6030      	str	r0, [r6, #0]
 800819a:	4621      	mov	r1, r4
 800819c:	4628      	mov	r0, r5
 800819e:	f000 f8c7 	bl	8008330 <_sbrk_r>
 80081a2:	1c43      	adds	r3, r0, #1
 80081a4:	d00a      	beq.n	80081bc <sbrk_aligned+0x34>
 80081a6:	1cc4      	adds	r4, r0, #3
 80081a8:	f024 0403 	bic.w	r4, r4, #3
 80081ac:	42a0      	cmp	r0, r4
 80081ae:	d007      	beq.n	80081c0 <sbrk_aligned+0x38>
 80081b0:	1a21      	subs	r1, r4, r0
 80081b2:	4628      	mov	r0, r5
 80081b4:	f000 f8bc 	bl	8008330 <_sbrk_r>
 80081b8:	3001      	adds	r0, #1
 80081ba:	d101      	bne.n	80081c0 <sbrk_aligned+0x38>
 80081bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80081c0:	4620      	mov	r0, r4
 80081c2:	bd70      	pop	{r4, r5, r6, pc}
 80081c4:	20001638 	.word	0x20001638

080081c8 <_malloc_r>:
 80081c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081cc:	1ccd      	adds	r5, r1, #3
 80081ce:	f025 0503 	bic.w	r5, r5, #3
 80081d2:	3508      	adds	r5, #8
 80081d4:	2d0c      	cmp	r5, #12
 80081d6:	bf38      	it	cc
 80081d8:	250c      	movcc	r5, #12
 80081da:	2d00      	cmp	r5, #0
 80081dc:	4607      	mov	r7, r0
 80081de:	db01      	blt.n	80081e4 <_malloc_r+0x1c>
 80081e0:	42a9      	cmp	r1, r5
 80081e2:	d905      	bls.n	80081f0 <_malloc_r+0x28>
 80081e4:	230c      	movs	r3, #12
 80081e6:	603b      	str	r3, [r7, #0]
 80081e8:	2600      	movs	r6, #0
 80081ea:	4630      	mov	r0, r6
 80081ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80082c4 <_malloc_r+0xfc>
 80081f4:	f000 f868 	bl	80082c8 <__malloc_lock>
 80081f8:	f8d8 3000 	ldr.w	r3, [r8]
 80081fc:	461c      	mov	r4, r3
 80081fe:	bb5c      	cbnz	r4, 8008258 <_malloc_r+0x90>
 8008200:	4629      	mov	r1, r5
 8008202:	4638      	mov	r0, r7
 8008204:	f7ff ffc0 	bl	8008188 <sbrk_aligned>
 8008208:	1c43      	adds	r3, r0, #1
 800820a:	4604      	mov	r4, r0
 800820c:	d155      	bne.n	80082ba <_malloc_r+0xf2>
 800820e:	f8d8 4000 	ldr.w	r4, [r8]
 8008212:	4626      	mov	r6, r4
 8008214:	2e00      	cmp	r6, #0
 8008216:	d145      	bne.n	80082a4 <_malloc_r+0xdc>
 8008218:	2c00      	cmp	r4, #0
 800821a:	d048      	beq.n	80082ae <_malloc_r+0xe6>
 800821c:	6823      	ldr	r3, [r4, #0]
 800821e:	4631      	mov	r1, r6
 8008220:	4638      	mov	r0, r7
 8008222:	eb04 0903 	add.w	r9, r4, r3
 8008226:	f000 f883 	bl	8008330 <_sbrk_r>
 800822a:	4581      	cmp	r9, r0
 800822c:	d13f      	bne.n	80082ae <_malloc_r+0xe6>
 800822e:	6821      	ldr	r1, [r4, #0]
 8008230:	1a6d      	subs	r5, r5, r1
 8008232:	4629      	mov	r1, r5
 8008234:	4638      	mov	r0, r7
 8008236:	f7ff ffa7 	bl	8008188 <sbrk_aligned>
 800823a:	3001      	adds	r0, #1
 800823c:	d037      	beq.n	80082ae <_malloc_r+0xe6>
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	442b      	add	r3, r5
 8008242:	6023      	str	r3, [r4, #0]
 8008244:	f8d8 3000 	ldr.w	r3, [r8]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d038      	beq.n	80082be <_malloc_r+0xf6>
 800824c:	685a      	ldr	r2, [r3, #4]
 800824e:	42a2      	cmp	r2, r4
 8008250:	d12b      	bne.n	80082aa <_malloc_r+0xe2>
 8008252:	2200      	movs	r2, #0
 8008254:	605a      	str	r2, [r3, #4]
 8008256:	e00f      	b.n	8008278 <_malloc_r+0xb0>
 8008258:	6822      	ldr	r2, [r4, #0]
 800825a:	1b52      	subs	r2, r2, r5
 800825c:	d41f      	bmi.n	800829e <_malloc_r+0xd6>
 800825e:	2a0b      	cmp	r2, #11
 8008260:	d917      	bls.n	8008292 <_malloc_r+0xca>
 8008262:	1961      	adds	r1, r4, r5
 8008264:	42a3      	cmp	r3, r4
 8008266:	6025      	str	r5, [r4, #0]
 8008268:	bf18      	it	ne
 800826a:	6059      	strne	r1, [r3, #4]
 800826c:	6863      	ldr	r3, [r4, #4]
 800826e:	bf08      	it	eq
 8008270:	f8c8 1000 	streq.w	r1, [r8]
 8008274:	5162      	str	r2, [r4, r5]
 8008276:	604b      	str	r3, [r1, #4]
 8008278:	4638      	mov	r0, r7
 800827a:	f104 060b 	add.w	r6, r4, #11
 800827e:	f000 f829 	bl	80082d4 <__malloc_unlock>
 8008282:	f026 0607 	bic.w	r6, r6, #7
 8008286:	1d23      	adds	r3, r4, #4
 8008288:	1af2      	subs	r2, r6, r3
 800828a:	d0ae      	beq.n	80081ea <_malloc_r+0x22>
 800828c:	1b9b      	subs	r3, r3, r6
 800828e:	50a3      	str	r3, [r4, r2]
 8008290:	e7ab      	b.n	80081ea <_malloc_r+0x22>
 8008292:	42a3      	cmp	r3, r4
 8008294:	6862      	ldr	r2, [r4, #4]
 8008296:	d1dd      	bne.n	8008254 <_malloc_r+0x8c>
 8008298:	f8c8 2000 	str.w	r2, [r8]
 800829c:	e7ec      	b.n	8008278 <_malloc_r+0xb0>
 800829e:	4623      	mov	r3, r4
 80082a0:	6864      	ldr	r4, [r4, #4]
 80082a2:	e7ac      	b.n	80081fe <_malloc_r+0x36>
 80082a4:	4634      	mov	r4, r6
 80082a6:	6876      	ldr	r6, [r6, #4]
 80082a8:	e7b4      	b.n	8008214 <_malloc_r+0x4c>
 80082aa:	4613      	mov	r3, r2
 80082ac:	e7cc      	b.n	8008248 <_malloc_r+0x80>
 80082ae:	230c      	movs	r3, #12
 80082b0:	603b      	str	r3, [r7, #0]
 80082b2:	4638      	mov	r0, r7
 80082b4:	f000 f80e 	bl	80082d4 <__malloc_unlock>
 80082b8:	e797      	b.n	80081ea <_malloc_r+0x22>
 80082ba:	6025      	str	r5, [r4, #0]
 80082bc:	e7dc      	b.n	8008278 <_malloc_r+0xb0>
 80082be:	605b      	str	r3, [r3, #4]
 80082c0:	deff      	udf	#255	; 0xff
 80082c2:	bf00      	nop
 80082c4:	20001634 	.word	0x20001634

080082c8 <__malloc_lock>:
 80082c8:	4801      	ldr	r0, [pc, #4]	; (80082d0 <__malloc_lock+0x8>)
 80082ca:	f000 b86b 	b.w	80083a4 <__retarget_lock_acquire_recursive>
 80082ce:	bf00      	nop
 80082d0:	20001778 	.word	0x20001778

080082d4 <__malloc_unlock>:
 80082d4:	4801      	ldr	r0, [pc, #4]	; (80082dc <__malloc_unlock+0x8>)
 80082d6:	f000 b866 	b.w	80083a6 <__retarget_lock_release_recursive>
 80082da:	bf00      	nop
 80082dc:	20001778 	.word	0x20001778

080082e0 <siprintf>:
 80082e0:	b40e      	push	{r1, r2, r3}
 80082e2:	b500      	push	{lr}
 80082e4:	b09c      	sub	sp, #112	; 0x70
 80082e6:	ab1d      	add	r3, sp, #116	; 0x74
 80082e8:	9002      	str	r0, [sp, #8]
 80082ea:	9006      	str	r0, [sp, #24]
 80082ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082f0:	4809      	ldr	r0, [pc, #36]	; (8008318 <siprintf+0x38>)
 80082f2:	9107      	str	r1, [sp, #28]
 80082f4:	9104      	str	r1, [sp, #16]
 80082f6:	4909      	ldr	r1, [pc, #36]	; (800831c <siprintf+0x3c>)
 80082f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80082fc:	9105      	str	r1, [sp, #20]
 80082fe:	6800      	ldr	r0, [r0, #0]
 8008300:	9301      	str	r3, [sp, #4]
 8008302:	a902      	add	r1, sp, #8
 8008304:	f000 f8f6 	bl	80084f4 <_svfiprintf_r>
 8008308:	9b02      	ldr	r3, [sp, #8]
 800830a:	2200      	movs	r2, #0
 800830c:	701a      	strb	r2, [r3, #0]
 800830e:	b01c      	add	sp, #112	; 0x70
 8008310:	f85d eb04 	ldr.w	lr, [sp], #4
 8008314:	b003      	add	sp, #12
 8008316:	4770      	bx	lr
 8008318:	20000158 	.word	0x20000158
 800831c:	ffff0208 	.word	0xffff0208

08008320 <memset>:
 8008320:	4402      	add	r2, r0
 8008322:	4603      	mov	r3, r0
 8008324:	4293      	cmp	r3, r2
 8008326:	d100      	bne.n	800832a <memset+0xa>
 8008328:	4770      	bx	lr
 800832a:	f803 1b01 	strb.w	r1, [r3], #1
 800832e:	e7f9      	b.n	8008324 <memset+0x4>

08008330 <_sbrk_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	4d06      	ldr	r5, [pc, #24]	; (800834c <_sbrk_r+0x1c>)
 8008334:	2300      	movs	r3, #0
 8008336:	4604      	mov	r4, r0
 8008338:	4608      	mov	r0, r1
 800833a:	602b      	str	r3, [r5, #0]
 800833c:	f7f8 fac2 	bl	80008c4 <_sbrk>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d102      	bne.n	800834a <_sbrk_r+0x1a>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	b103      	cbz	r3, 800834a <_sbrk_r+0x1a>
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	20001774 	.word	0x20001774

08008350 <__errno>:
 8008350:	4b01      	ldr	r3, [pc, #4]	; (8008358 <__errno+0x8>)
 8008352:	6818      	ldr	r0, [r3, #0]
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	20000158 	.word	0x20000158

0800835c <__libc_init_array>:
 800835c:	b570      	push	{r4, r5, r6, lr}
 800835e:	4d0d      	ldr	r5, [pc, #52]	; (8008394 <__libc_init_array+0x38>)
 8008360:	4c0d      	ldr	r4, [pc, #52]	; (8008398 <__libc_init_array+0x3c>)
 8008362:	1b64      	subs	r4, r4, r5
 8008364:	10a4      	asrs	r4, r4, #2
 8008366:	2600      	movs	r6, #0
 8008368:	42a6      	cmp	r6, r4
 800836a:	d109      	bne.n	8008380 <__libc_init_array+0x24>
 800836c:	4d0b      	ldr	r5, [pc, #44]	; (800839c <__libc_init_array+0x40>)
 800836e:	4c0c      	ldr	r4, [pc, #48]	; (80083a0 <__libc_init_array+0x44>)
 8008370:	f000 fbae 	bl	8008ad0 <_init>
 8008374:	1b64      	subs	r4, r4, r5
 8008376:	10a4      	asrs	r4, r4, #2
 8008378:	2600      	movs	r6, #0
 800837a:	42a6      	cmp	r6, r4
 800837c:	d105      	bne.n	800838a <__libc_init_array+0x2e>
 800837e:	bd70      	pop	{r4, r5, r6, pc}
 8008380:	f855 3b04 	ldr.w	r3, [r5], #4
 8008384:	4798      	blx	r3
 8008386:	3601      	adds	r6, #1
 8008388:	e7ee      	b.n	8008368 <__libc_init_array+0xc>
 800838a:	f855 3b04 	ldr.w	r3, [r5], #4
 800838e:	4798      	blx	r3
 8008390:	3601      	adds	r6, #1
 8008392:	e7f2      	b.n	800837a <__libc_init_array+0x1e>
 8008394:	08008ba0 	.word	0x08008ba0
 8008398:	08008ba0 	.word	0x08008ba0
 800839c:	08008ba0 	.word	0x08008ba0
 80083a0:	08008ba4 	.word	0x08008ba4

080083a4 <__retarget_lock_acquire_recursive>:
 80083a4:	4770      	bx	lr

080083a6 <__retarget_lock_release_recursive>:
 80083a6:	4770      	bx	lr

080083a8 <_free_r>:
 80083a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083aa:	2900      	cmp	r1, #0
 80083ac:	d044      	beq.n	8008438 <_free_r+0x90>
 80083ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083b2:	9001      	str	r0, [sp, #4]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f1a1 0404 	sub.w	r4, r1, #4
 80083ba:	bfb8      	it	lt
 80083bc:	18e4      	addlt	r4, r4, r3
 80083be:	f7ff ff83 	bl	80082c8 <__malloc_lock>
 80083c2:	4a1e      	ldr	r2, [pc, #120]	; (800843c <_free_r+0x94>)
 80083c4:	9801      	ldr	r0, [sp, #4]
 80083c6:	6813      	ldr	r3, [r2, #0]
 80083c8:	b933      	cbnz	r3, 80083d8 <_free_r+0x30>
 80083ca:	6063      	str	r3, [r4, #4]
 80083cc:	6014      	str	r4, [r2, #0]
 80083ce:	b003      	add	sp, #12
 80083d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083d4:	f7ff bf7e 	b.w	80082d4 <__malloc_unlock>
 80083d8:	42a3      	cmp	r3, r4
 80083da:	d908      	bls.n	80083ee <_free_r+0x46>
 80083dc:	6825      	ldr	r5, [r4, #0]
 80083de:	1961      	adds	r1, r4, r5
 80083e0:	428b      	cmp	r3, r1
 80083e2:	bf01      	itttt	eq
 80083e4:	6819      	ldreq	r1, [r3, #0]
 80083e6:	685b      	ldreq	r3, [r3, #4]
 80083e8:	1949      	addeq	r1, r1, r5
 80083ea:	6021      	streq	r1, [r4, #0]
 80083ec:	e7ed      	b.n	80083ca <_free_r+0x22>
 80083ee:	461a      	mov	r2, r3
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	b10b      	cbz	r3, 80083f8 <_free_r+0x50>
 80083f4:	42a3      	cmp	r3, r4
 80083f6:	d9fa      	bls.n	80083ee <_free_r+0x46>
 80083f8:	6811      	ldr	r1, [r2, #0]
 80083fa:	1855      	adds	r5, r2, r1
 80083fc:	42a5      	cmp	r5, r4
 80083fe:	d10b      	bne.n	8008418 <_free_r+0x70>
 8008400:	6824      	ldr	r4, [r4, #0]
 8008402:	4421      	add	r1, r4
 8008404:	1854      	adds	r4, r2, r1
 8008406:	42a3      	cmp	r3, r4
 8008408:	6011      	str	r1, [r2, #0]
 800840a:	d1e0      	bne.n	80083ce <_free_r+0x26>
 800840c:	681c      	ldr	r4, [r3, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	6053      	str	r3, [r2, #4]
 8008412:	440c      	add	r4, r1
 8008414:	6014      	str	r4, [r2, #0]
 8008416:	e7da      	b.n	80083ce <_free_r+0x26>
 8008418:	d902      	bls.n	8008420 <_free_r+0x78>
 800841a:	230c      	movs	r3, #12
 800841c:	6003      	str	r3, [r0, #0]
 800841e:	e7d6      	b.n	80083ce <_free_r+0x26>
 8008420:	6825      	ldr	r5, [r4, #0]
 8008422:	1961      	adds	r1, r4, r5
 8008424:	428b      	cmp	r3, r1
 8008426:	bf04      	itt	eq
 8008428:	6819      	ldreq	r1, [r3, #0]
 800842a:	685b      	ldreq	r3, [r3, #4]
 800842c:	6063      	str	r3, [r4, #4]
 800842e:	bf04      	itt	eq
 8008430:	1949      	addeq	r1, r1, r5
 8008432:	6021      	streq	r1, [r4, #0]
 8008434:	6054      	str	r4, [r2, #4]
 8008436:	e7ca      	b.n	80083ce <_free_r+0x26>
 8008438:	b003      	add	sp, #12
 800843a:	bd30      	pop	{r4, r5, pc}
 800843c:	20001634 	.word	0x20001634

08008440 <__ssputs_r>:
 8008440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008444:	688e      	ldr	r6, [r1, #8]
 8008446:	461f      	mov	r7, r3
 8008448:	42be      	cmp	r6, r7
 800844a:	680b      	ldr	r3, [r1, #0]
 800844c:	4682      	mov	sl, r0
 800844e:	460c      	mov	r4, r1
 8008450:	4690      	mov	r8, r2
 8008452:	d82c      	bhi.n	80084ae <__ssputs_r+0x6e>
 8008454:	898a      	ldrh	r2, [r1, #12]
 8008456:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800845a:	d026      	beq.n	80084aa <__ssputs_r+0x6a>
 800845c:	6965      	ldr	r5, [r4, #20]
 800845e:	6909      	ldr	r1, [r1, #16]
 8008460:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008464:	eba3 0901 	sub.w	r9, r3, r1
 8008468:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800846c:	1c7b      	adds	r3, r7, #1
 800846e:	444b      	add	r3, r9
 8008470:	106d      	asrs	r5, r5, #1
 8008472:	429d      	cmp	r5, r3
 8008474:	bf38      	it	cc
 8008476:	461d      	movcc	r5, r3
 8008478:	0553      	lsls	r3, r2, #21
 800847a:	d527      	bpl.n	80084cc <__ssputs_r+0x8c>
 800847c:	4629      	mov	r1, r5
 800847e:	f7ff fea3 	bl	80081c8 <_malloc_r>
 8008482:	4606      	mov	r6, r0
 8008484:	b360      	cbz	r0, 80084e0 <__ssputs_r+0xa0>
 8008486:	6921      	ldr	r1, [r4, #16]
 8008488:	464a      	mov	r2, r9
 800848a:	f000 fadb 	bl	8008a44 <memcpy>
 800848e:	89a3      	ldrh	r3, [r4, #12]
 8008490:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008498:	81a3      	strh	r3, [r4, #12]
 800849a:	6126      	str	r6, [r4, #16]
 800849c:	6165      	str	r5, [r4, #20]
 800849e:	444e      	add	r6, r9
 80084a0:	eba5 0509 	sub.w	r5, r5, r9
 80084a4:	6026      	str	r6, [r4, #0]
 80084a6:	60a5      	str	r5, [r4, #8]
 80084a8:	463e      	mov	r6, r7
 80084aa:	42be      	cmp	r6, r7
 80084ac:	d900      	bls.n	80084b0 <__ssputs_r+0x70>
 80084ae:	463e      	mov	r6, r7
 80084b0:	6820      	ldr	r0, [r4, #0]
 80084b2:	4632      	mov	r2, r6
 80084b4:	4641      	mov	r1, r8
 80084b6:	f000 faab 	bl	8008a10 <memmove>
 80084ba:	68a3      	ldr	r3, [r4, #8]
 80084bc:	1b9b      	subs	r3, r3, r6
 80084be:	60a3      	str	r3, [r4, #8]
 80084c0:	6823      	ldr	r3, [r4, #0]
 80084c2:	4433      	add	r3, r6
 80084c4:	6023      	str	r3, [r4, #0]
 80084c6:	2000      	movs	r0, #0
 80084c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084cc:	462a      	mov	r2, r5
 80084ce:	f000 fac7 	bl	8008a60 <_realloc_r>
 80084d2:	4606      	mov	r6, r0
 80084d4:	2800      	cmp	r0, #0
 80084d6:	d1e0      	bne.n	800849a <__ssputs_r+0x5a>
 80084d8:	6921      	ldr	r1, [r4, #16]
 80084da:	4650      	mov	r0, sl
 80084dc:	f7ff ff64 	bl	80083a8 <_free_r>
 80084e0:	230c      	movs	r3, #12
 80084e2:	f8ca 3000 	str.w	r3, [sl]
 80084e6:	89a3      	ldrh	r3, [r4, #12]
 80084e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ec:	81a3      	strh	r3, [r4, #12]
 80084ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084f2:	e7e9      	b.n	80084c8 <__ssputs_r+0x88>

080084f4 <_svfiprintf_r>:
 80084f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f8:	4698      	mov	r8, r3
 80084fa:	898b      	ldrh	r3, [r1, #12]
 80084fc:	061b      	lsls	r3, r3, #24
 80084fe:	b09d      	sub	sp, #116	; 0x74
 8008500:	4607      	mov	r7, r0
 8008502:	460d      	mov	r5, r1
 8008504:	4614      	mov	r4, r2
 8008506:	d50e      	bpl.n	8008526 <_svfiprintf_r+0x32>
 8008508:	690b      	ldr	r3, [r1, #16]
 800850a:	b963      	cbnz	r3, 8008526 <_svfiprintf_r+0x32>
 800850c:	2140      	movs	r1, #64	; 0x40
 800850e:	f7ff fe5b 	bl	80081c8 <_malloc_r>
 8008512:	6028      	str	r0, [r5, #0]
 8008514:	6128      	str	r0, [r5, #16]
 8008516:	b920      	cbnz	r0, 8008522 <_svfiprintf_r+0x2e>
 8008518:	230c      	movs	r3, #12
 800851a:	603b      	str	r3, [r7, #0]
 800851c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008520:	e0d0      	b.n	80086c4 <_svfiprintf_r+0x1d0>
 8008522:	2340      	movs	r3, #64	; 0x40
 8008524:	616b      	str	r3, [r5, #20]
 8008526:	2300      	movs	r3, #0
 8008528:	9309      	str	r3, [sp, #36]	; 0x24
 800852a:	2320      	movs	r3, #32
 800852c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008530:	f8cd 800c 	str.w	r8, [sp, #12]
 8008534:	2330      	movs	r3, #48	; 0x30
 8008536:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80086dc <_svfiprintf_r+0x1e8>
 800853a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800853e:	f04f 0901 	mov.w	r9, #1
 8008542:	4623      	mov	r3, r4
 8008544:	469a      	mov	sl, r3
 8008546:	f813 2b01 	ldrb.w	r2, [r3], #1
 800854a:	b10a      	cbz	r2, 8008550 <_svfiprintf_r+0x5c>
 800854c:	2a25      	cmp	r2, #37	; 0x25
 800854e:	d1f9      	bne.n	8008544 <_svfiprintf_r+0x50>
 8008550:	ebba 0b04 	subs.w	fp, sl, r4
 8008554:	d00b      	beq.n	800856e <_svfiprintf_r+0x7a>
 8008556:	465b      	mov	r3, fp
 8008558:	4622      	mov	r2, r4
 800855a:	4629      	mov	r1, r5
 800855c:	4638      	mov	r0, r7
 800855e:	f7ff ff6f 	bl	8008440 <__ssputs_r>
 8008562:	3001      	adds	r0, #1
 8008564:	f000 80a9 	beq.w	80086ba <_svfiprintf_r+0x1c6>
 8008568:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800856a:	445a      	add	r2, fp
 800856c:	9209      	str	r2, [sp, #36]	; 0x24
 800856e:	f89a 3000 	ldrb.w	r3, [sl]
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 80a1 	beq.w	80086ba <_svfiprintf_r+0x1c6>
 8008578:	2300      	movs	r3, #0
 800857a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800857e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008582:	f10a 0a01 	add.w	sl, sl, #1
 8008586:	9304      	str	r3, [sp, #16]
 8008588:	9307      	str	r3, [sp, #28]
 800858a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800858e:	931a      	str	r3, [sp, #104]	; 0x68
 8008590:	4654      	mov	r4, sl
 8008592:	2205      	movs	r2, #5
 8008594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008598:	4850      	ldr	r0, [pc, #320]	; (80086dc <_svfiprintf_r+0x1e8>)
 800859a:	f7f7 fe21 	bl	80001e0 <memchr>
 800859e:	9a04      	ldr	r2, [sp, #16]
 80085a0:	b9d8      	cbnz	r0, 80085da <_svfiprintf_r+0xe6>
 80085a2:	06d0      	lsls	r0, r2, #27
 80085a4:	bf44      	itt	mi
 80085a6:	2320      	movmi	r3, #32
 80085a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085ac:	0711      	lsls	r1, r2, #28
 80085ae:	bf44      	itt	mi
 80085b0:	232b      	movmi	r3, #43	; 0x2b
 80085b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085b6:	f89a 3000 	ldrb.w	r3, [sl]
 80085ba:	2b2a      	cmp	r3, #42	; 0x2a
 80085bc:	d015      	beq.n	80085ea <_svfiprintf_r+0xf6>
 80085be:	9a07      	ldr	r2, [sp, #28]
 80085c0:	4654      	mov	r4, sl
 80085c2:	2000      	movs	r0, #0
 80085c4:	f04f 0c0a 	mov.w	ip, #10
 80085c8:	4621      	mov	r1, r4
 80085ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085ce:	3b30      	subs	r3, #48	; 0x30
 80085d0:	2b09      	cmp	r3, #9
 80085d2:	d94d      	bls.n	8008670 <_svfiprintf_r+0x17c>
 80085d4:	b1b0      	cbz	r0, 8008604 <_svfiprintf_r+0x110>
 80085d6:	9207      	str	r2, [sp, #28]
 80085d8:	e014      	b.n	8008604 <_svfiprintf_r+0x110>
 80085da:	eba0 0308 	sub.w	r3, r0, r8
 80085de:	fa09 f303 	lsl.w	r3, r9, r3
 80085e2:	4313      	orrs	r3, r2
 80085e4:	9304      	str	r3, [sp, #16]
 80085e6:	46a2      	mov	sl, r4
 80085e8:	e7d2      	b.n	8008590 <_svfiprintf_r+0x9c>
 80085ea:	9b03      	ldr	r3, [sp, #12]
 80085ec:	1d19      	adds	r1, r3, #4
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	9103      	str	r1, [sp, #12]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	bfbb      	ittet	lt
 80085f6:	425b      	neglt	r3, r3
 80085f8:	f042 0202 	orrlt.w	r2, r2, #2
 80085fc:	9307      	strge	r3, [sp, #28]
 80085fe:	9307      	strlt	r3, [sp, #28]
 8008600:	bfb8      	it	lt
 8008602:	9204      	strlt	r2, [sp, #16]
 8008604:	7823      	ldrb	r3, [r4, #0]
 8008606:	2b2e      	cmp	r3, #46	; 0x2e
 8008608:	d10c      	bne.n	8008624 <_svfiprintf_r+0x130>
 800860a:	7863      	ldrb	r3, [r4, #1]
 800860c:	2b2a      	cmp	r3, #42	; 0x2a
 800860e:	d134      	bne.n	800867a <_svfiprintf_r+0x186>
 8008610:	9b03      	ldr	r3, [sp, #12]
 8008612:	1d1a      	adds	r2, r3, #4
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	9203      	str	r2, [sp, #12]
 8008618:	2b00      	cmp	r3, #0
 800861a:	bfb8      	it	lt
 800861c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008620:	3402      	adds	r4, #2
 8008622:	9305      	str	r3, [sp, #20]
 8008624:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80086ec <_svfiprintf_r+0x1f8>
 8008628:	7821      	ldrb	r1, [r4, #0]
 800862a:	2203      	movs	r2, #3
 800862c:	4650      	mov	r0, sl
 800862e:	f7f7 fdd7 	bl	80001e0 <memchr>
 8008632:	b138      	cbz	r0, 8008644 <_svfiprintf_r+0x150>
 8008634:	9b04      	ldr	r3, [sp, #16]
 8008636:	eba0 000a 	sub.w	r0, r0, sl
 800863a:	2240      	movs	r2, #64	; 0x40
 800863c:	4082      	lsls	r2, r0
 800863e:	4313      	orrs	r3, r2
 8008640:	3401      	adds	r4, #1
 8008642:	9304      	str	r3, [sp, #16]
 8008644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008648:	4825      	ldr	r0, [pc, #148]	; (80086e0 <_svfiprintf_r+0x1ec>)
 800864a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800864e:	2206      	movs	r2, #6
 8008650:	f7f7 fdc6 	bl	80001e0 <memchr>
 8008654:	2800      	cmp	r0, #0
 8008656:	d038      	beq.n	80086ca <_svfiprintf_r+0x1d6>
 8008658:	4b22      	ldr	r3, [pc, #136]	; (80086e4 <_svfiprintf_r+0x1f0>)
 800865a:	bb1b      	cbnz	r3, 80086a4 <_svfiprintf_r+0x1b0>
 800865c:	9b03      	ldr	r3, [sp, #12]
 800865e:	3307      	adds	r3, #7
 8008660:	f023 0307 	bic.w	r3, r3, #7
 8008664:	3308      	adds	r3, #8
 8008666:	9303      	str	r3, [sp, #12]
 8008668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800866a:	4433      	add	r3, r6
 800866c:	9309      	str	r3, [sp, #36]	; 0x24
 800866e:	e768      	b.n	8008542 <_svfiprintf_r+0x4e>
 8008670:	fb0c 3202 	mla	r2, ip, r2, r3
 8008674:	460c      	mov	r4, r1
 8008676:	2001      	movs	r0, #1
 8008678:	e7a6      	b.n	80085c8 <_svfiprintf_r+0xd4>
 800867a:	2300      	movs	r3, #0
 800867c:	3401      	adds	r4, #1
 800867e:	9305      	str	r3, [sp, #20]
 8008680:	4619      	mov	r1, r3
 8008682:	f04f 0c0a 	mov.w	ip, #10
 8008686:	4620      	mov	r0, r4
 8008688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800868c:	3a30      	subs	r2, #48	; 0x30
 800868e:	2a09      	cmp	r2, #9
 8008690:	d903      	bls.n	800869a <_svfiprintf_r+0x1a6>
 8008692:	2b00      	cmp	r3, #0
 8008694:	d0c6      	beq.n	8008624 <_svfiprintf_r+0x130>
 8008696:	9105      	str	r1, [sp, #20]
 8008698:	e7c4      	b.n	8008624 <_svfiprintf_r+0x130>
 800869a:	fb0c 2101 	mla	r1, ip, r1, r2
 800869e:	4604      	mov	r4, r0
 80086a0:	2301      	movs	r3, #1
 80086a2:	e7f0      	b.n	8008686 <_svfiprintf_r+0x192>
 80086a4:	ab03      	add	r3, sp, #12
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	462a      	mov	r2, r5
 80086aa:	4b0f      	ldr	r3, [pc, #60]	; (80086e8 <_svfiprintf_r+0x1f4>)
 80086ac:	a904      	add	r1, sp, #16
 80086ae:	4638      	mov	r0, r7
 80086b0:	f3af 8000 	nop.w
 80086b4:	1c42      	adds	r2, r0, #1
 80086b6:	4606      	mov	r6, r0
 80086b8:	d1d6      	bne.n	8008668 <_svfiprintf_r+0x174>
 80086ba:	89ab      	ldrh	r3, [r5, #12]
 80086bc:	065b      	lsls	r3, r3, #25
 80086be:	f53f af2d 	bmi.w	800851c <_svfiprintf_r+0x28>
 80086c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086c4:	b01d      	add	sp, #116	; 0x74
 80086c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ca:	ab03      	add	r3, sp, #12
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	462a      	mov	r2, r5
 80086d0:	4b05      	ldr	r3, [pc, #20]	; (80086e8 <_svfiprintf_r+0x1f4>)
 80086d2:	a904      	add	r1, sp, #16
 80086d4:	4638      	mov	r0, r7
 80086d6:	f000 f879 	bl	80087cc <_printf_i>
 80086da:	e7eb      	b.n	80086b4 <_svfiprintf_r+0x1c0>
 80086dc:	08008b64 	.word	0x08008b64
 80086e0:	08008b6e 	.word	0x08008b6e
 80086e4:	00000000 	.word	0x00000000
 80086e8:	08008441 	.word	0x08008441
 80086ec:	08008b6a 	.word	0x08008b6a

080086f0 <_printf_common>:
 80086f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f4:	4616      	mov	r6, r2
 80086f6:	4699      	mov	r9, r3
 80086f8:	688a      	ldr	r2, [r1, #8]
 80086fa:	690b      	ldr	r3, [r1, #16]
 80086fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008700:	4293      	cmp	r3, r2
 8008702:	bfb8      	it	lt
 8008704:	4613      	movlt	r3, r2
 8008706:	6033      	str	r3, [r6, #0]
 8008708:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800870c:	4607      	mov	r7, r0
 800870e:	460c      	mov	r4, r1
 8008710:	b10a      	cbz	r2, 8008716 <_printf_common+0x26>
 8008712:	3301      	adds	r3, #1
 8008714:	6033      	str	r3, [r6, #0]
 8008716:	6823      	ldr	r3, [r4, #0]
 8008718:	0699      	lsls	r1, r3, #26
 800871a:	bf42      	ittt	mi
 800871c:	6833      	ldrmi	r3, [r6, #0]
 800871e:	3302      	addmi	r3, #2
 8008720:	6033      	strmi	r3, [r6, #0]
 8008722:	6825      	ldr	r5, [r4, #0]
 8008724:	f015 0506 	ands.w	r5, r5, #6
 8008728:	d106      	bne.n	8008738 <_printf_common+0x48>
 800872a:	f104 0a19 	add.w	sl, r4, #25
 800872e:	68e3      	ldr	r3, [r4, #12]
 8008730:	6832      	ldr	r2, [r6, #0]
 8008732:	1a9b      	subs	r3, r3, r2
 8008734:	42ab      	cmp	r3, r5
 8008736:	dc26      	bgt.n	8008786 <_printf_common+0x96>
 8008738:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800873c:	1e13      	subs	r3, r2, #0
 800873e:	6822      	ldr	r2, [r4, #0]
 8008740:	bf18      	it	ne
 8008742:	2301      	movne	r3, #1
 8008744:	0692      	lsls	r2, r2, #26
 8008746:	d42b      	bmi.n	80087a0 <_printf_common+0xb0>
 8008748:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800874c:	4649      	mov	r1, r9
 800874e:	4638      	mov	r0, r7
 8008750:	47c0      	blx	r8
 8008752:	3001      	adds	r0, #1
 8008754:	d01e      	beq.n	8008794 <_printf_common+0xa4>
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	6922      	ldr	r2, [r4, #16]
 800875a:	f003 0306 	and.w	r3, r3, #6
 800875e:	2b04      	cmp	r3, #4
 8008760:	bf02      	ittt	eq
 8008762:	68e5      	ldreq	r5, [r4, #12]
 8008764:	6833      	ldreq	r3, [r6, #0]
 8008766:	1aed      	subeq	r5, r5, r3
 8008768:	68a3      	ldr	r3, [r4, #8]
 800876a:	bf0c      	ite	eq
 800876c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008770:	2500      	movne	r5, #0
 8008772:	4293      	cmp	r3, r2
 8008774:	bfc4      	itt	gt
 8008776:	1a9b      	subgt	r3, r3, r2
 8008778:	18ed      	addgt	r5, r5, r3
 800877a:	2600      	movs	r6, #0
 800877c:	341a      	adds	r4, #26
 800877e:	42b5      	cmp	r5, r6
 8008780:	d11a      	bne.n	80087b8 <_printf_common+0xc8>
 8008782:	2000      	movs	r0, #0
 8008784:	e008      	b.n	8008798 <_printf_common+0xa8>
 8008786:	2301      	movs	r3, #1
 8008788:	4652      	mov	r2, sl
 800878a:	4649      	mov	r1, r9
 800878c:	4638      	mov	r0, r7
 800878e:	47c0      	blx	r8
 8008790:	3001      	adds	r0, #1
 8008792:	d103      	bne.n	800879c <_printf_common+0xac>
 8008794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800879c:	3501      	adds	r5, #1
 800879e:	e7c6      	b.n	800872e <_printf_common+0x3e>
 80087a0:	18e1      	adds	r1, r4, r3
 80087a2:	1c5a      	adds	r2, r3, #1
 80087a4:	2030      	movs	r0, #48	; 0x30
 80087a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087aa:	4422      	add	r2, r4
 80087ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087b4:	3302      	adds	r3, #2
 80087b6:	e7c7      	b.n	8008748 <_printf_common+0x58>
 80087b8:	2301      	movs	r3, #1
 80087ba:	4622      	mov	r2, r4
 80087bc:	4649      	mov	r1, r9
 80087be:	4638      	mov	r0, r7
 80087c0:	47c0      	blx	r8
 80087c2:	3001      	adds	r0, #1
 80087c4:	d0e6      	beq.n	8008794 <_printf_common+0xa4>
 80087c6:	3601      	adds	r6, #1
 80087c8:	e7d9      	b.n	800877e <_printf_common+0x8e>
	...

080087cc <_printf_i>:
 80087cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087d0:	7e0f      	ldrb	r7, [r1, #24]
 80087d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087d4:	2f78      	cmp	r7, #120	; 0x78
 80087d6:	4691      	mov	r9, r2
 80087d8:	4680      	mov	r8, r0
 80087da:	460c      	mov	r4, r1
 80087dc:	469a      	mov	sl, r3
 80087de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087e2:	d807      	bhi.n	80087f4 <_printf_i+0x28>
 80087e4:	2f62      	cmp	r7, #98	; 0x62
 80087e6:	d80a      	bhi.n	80087fe <_printf_i+0x32>
 80087e8:	2f00      	cmp	r7, #0
 80087ea:	f000 80d4 	beq.w	8008996 <_printf_i+0x1ca>
 80087ee:	2f58      	cmp	r7, #88	; 0x58
 80087f0:	f000 80c0 	beq.w	8008974 <_printf_i+0x1a8>
 80087f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087fc:	e03a      	b.n	8008874 <_printf_i+0xa8>
 80087fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008802:	2b15      	cmp	r3, #21
 8008804:	d8f6      	bhi.n	80087f4 <_printf_i+0x28>
 8008806:	a101      	add	r1, pc, #4	; (adr r1, 800880c <_printf_i+0x40>)
 8008808:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800880c:	08008865 	.word	0x08008865
 8008810:	08008879 	.word	0x08008879
 8008814:	080087f5 	.word	0x080087f5
 8008818:	080087f5 	.word	0x080087f5
 800881c:	080087f5 	.word	0x080087f5
 8008820:	080087f5 	.word	0x080087f5
 8008824:	08008879 	.word	0x08008879
 8008828:	080087f5 	.word	0x080087f5
 800882c:	080087f5 	.word	0x080087f5
 8008830:	080087f5 	.word	0x080087f5
 8008834:	080087f5 	.word	0x080087f5
 8008838:	0800897d 	.word	0x0800897d
 800883c:	080088a5 	.word	0x080088a5
 8008840:	08008937 	.word	0x08008937
 8008844:	080087f5 	.word	0x080087f5
 8008848:	080087f5 	.word	0x080087f5
 800884c:	0800899f 	.word	0x0800899f
 8008850:	080087f5 	.word	0x080087f5
 8008854:	080088a5 	.word	0x080088a5
 8008858:	080087f5 	.word	0x080087f5
 800885c:	080087f5 	.word	0x080087f5
 8008860:	0800893f 	.word	0x0800893f
 8008864:	682b      	ldr	r3, [r5, #0]
 8008866:	1d1a      	adds	r2, r3, #4
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	602a      	str	r2, [r5, #0]
 800886c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008870:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008874:	2301      	movs	r3, #1
 8008876:	e09f      	b.n	80089b8 <_printf_i+0x1ec>
 8008878:	6820      	ldr	r0, [r4, #0]
 800887a:	682b      	ldr	r3, [r5, #0]
 800887c:	0607      	lsls	r7, r0, #24
 800887e:	f103 0104 	add.w	r1, r3, #4
 8008882:	6029      	str	r1, [r5, #0]
 8008884:	d501      	bpl.n	800888a <_printf_i+0xbe>
 8008886:	681e      	ldr	r6, [r3, #0]
 8008888:	e003      	b.n	8008892 <_printf_i+0xc6>
 800888a:	0646      	lsls	r6, r0, #25
 800888c:	d5fb      	bpl.n	8008886 <_printf_i+0xba>
 800888e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008892:	2e00      	cmp	r6, #0
 8008894:	da03      	bge.n	800889e <_printf_i+0xd2>
 8008896:	232d      	movs	r3, #45	; 0x2d
 8008898:	4276      	negs	r6, r6
 800889a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800889e:	485a      	ldr	r0, [pc, #360]	; (8008a08 <_printf_i+0x23c>)
 80088a0:	230a      	movs	r3, #10
 80088a2:	e012      	b.n	80088ca <_printf_i+0xfe>
 80088a4:	682b      	ldr	r3, [r5, #0]
 80088a6:	6820      	ldr	r0, [r4, #0]
 80088a8:	1d19      	adds	r1, r3, #4
 80088aa:	6029      	str	r1, [r5, #0]
 80088ac:	0605      	lsls	r5, r0, #24
 80088ae:	d501      	bpl.n	80088b4 <_printf_i+0xe8>
 80088b0:	681e      	ldr	r6, [r3, #0]
 80088b2:	e002      	b.n	80088ba <_printf_i+0xee>
 80088b4:	0641      	lsls	r1, r0, #25
 80088b6:	d5fb      	bpl.n	80088b0 <_printf_i+0xe4>
 80088b8:	881e      	ldrh	r6, [r3, #0]
 80088ba:	4853      	ldr	r0, [pc, #332]	; (8008a08 <_printf_i+0x23c>)
 80088bc:	2f6f      	cmp	r7, #111	; 0x6f
 80088be:	bf0c      	ite	eq
 80088c0:	2308      	moveq	r3, #8
 80088c2:	230a      	movne	r3, #10
 80088c4:	2100      	movs	r1, #0
 80088c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088ca:	6865      	ldr	r5, [r4, #4]
 80088cc:	60a5      	str	r5, [r4, #8]
 80088ce:	2d00      	cmp	r5, #0
 80088d0:	bfa2      	ittt	ge
 80088d2:	6821      	ldrge	r1, [r4, #0]
 80088d4:	f021 0104 	bicge.w	r1, r1, #4
 80088d8:	6021      	strge	r1, [r4, #0]
 80088da:	b90e      	cbnz	r6, 80088e0 <_printf_i+0x114>
 80088dc:	2d00      	cmp	r5, #0
 80088de:	d04b      	beq.n	8008978 <_printf_i+0x1ac>
 80088e0:	4615      	mov	r5, r2
 80088e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80088e6:	fb03 6711 	mls	r7, r3, r1, r6
 80088ea:	5dc7      	ldrb	r7, [r0, r7]
 80088ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088f0:	4637      	mov	r7, r6
 80088f2:	42bb      	cmp	r3, r7
 80088f4:	460e      	mov	r6, r1
 80088f6:	d9f4      	bls.n	80088e2 <_printf_i+0x116>
 80088f8:	2b08      	cmp	r3, #8
 80088fa:	d10b      	bne.n	8008914 <_printf_i+0x148>
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	07de      	lsls	r6, r3, #31
 8008900:	d508      	bpl.n	8008914 <_printf_i+0x148>
 8008902:	6923      	ldr	r3, [r4, #16]
 8008904:	6861      	ldr	r1, [r4, #4]
 8008906:	4299      	cmp	r1, r3
 8008908:	bfde      	ittt	le
 800890a:	2330      	movle	r3, #48	; 0x30
 800890c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008910:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008914:	1b52      	subs	r2, r2, r5
 8008916:	6122      	str	r2, [r4, #16]
 8008918:	f8cd a000 	str.w	sl, [sp]
 800891c:	464b      	mov	r3, r9
 800891e:	aa03      	add	r2, sp, #12
 8008920:	4621      	mov	r1, r4
 8008922:	4640      	mov	r0, r8
 8008924:	f7ff fee4 	bl	80086f0 <_printf_common>
 8008928:	3001      	adds	r0, #1
 800892a:	d14a      	bne.n	80089c2 <_printf_i+0x1f6>
 800892c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008930:	b004      	add	sp, #16
 8008932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008936:	6823      	ldr	r3, [r4, #0]
 8008938:	f043 0320 	orr.w	r3, r3, #32
 800893c:	6023      	str	r3, [r4, #0]
 800893e:	4833      	ldr	r0, [pc, #204]	; (8008a0c <_printf_i+0x240>)
 8008940:	2778      	movs	r7, #120	; 0x78
 8008942:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008946:	6823      	ldr	r3, [r4, #0]
 8008948:	6829      	ldr	r1, [r5, #0]
 800894a:	061f      	lsls	r7, r3, #24
 800894c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008950:	d402      	bmi.n	8008958 <_printf_i+0x18c>
 8008952:	065f      	lsls	r7, r3, #25
 8008954:	bf48      	it	mi
 8008956:	b2b6      	uxthmi	r6, r6
 8008958:	07df      	lsls	r7, r3, #31
 800895a:	bf48      	it	mi
 800895c:	f043 0320 	orrmi.w	r3, r3, #32
 8008960:	6029      	str	r1, [r5, #0]
 8008962:	bf48      	it	mi
 8008964:	6023      	strmi	r3, [r4, #0]
 8008966:	b91e      	cbnz	r6, 8008970 <_printf_i+0x1a4>
 8008968:	6823      	ldr	r3, [r4, #0]
 800896a:	f023 0320 	bic.w	r3, r3, #32
 800896e:	6023      	str	r3, [r4, #0]
 8008970:	2310      	movs	r3, #16
 8008972:	e7a7      	b.n	80088c4 <_printf_i+0xf8>
 8008974:	4824      	ldr	r0, [pc, #144]	; (8008a08 <_printf_i+0x23c>)
 8008976:	e7e4      	b.n	8008942 <_printf_i+0x176>
 8008978:	4615      	mov	r5, r2
 800897a:	e7bd      	b.n	80088f8 <_printf_i+0x12c>
 800897c:	682b      	ldr	r3, [r5, #0]
 800897e:	6826      	ldr	r6, [r4, #0]
 8008980:	6961      	ldr	r1, [r4, #20]
 8008982:	1d18      	adds	r0, r3, #4
 8008984:	6028      	str	r0, [r5, #0]
 8008986:	0635      	lsls	r5, r6, #24
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	d501      	bpl.n	8008990 <_printf_i+0x1c4>
 800898c:	6019      	str	r1, [r3, #0]
 800898e:	e002      	b.n	8008996 <_printf_i+0x1ca>
 8008990:	0670      	lsls	r0, r6, #25
 8008992:	d5fb      	bpl.n	800898c <_printf_i+0x1c0>
 8008994:	8019      	strh	r1, [r3, #0]
 8008996:	2300      	movs	r3, #0
 8008998:	6123      	str	r3, [r4, #16]
 800899a:	4615      	mov	r5, r2
 800899c:	e7bc      	b.n	8008918 <_printf_i+0x14c>
 800899e:	682b      	ldr	r3, [r5, #0]
 80089a0:	1d1a      	adds	r2, r3, #4
 80089a2:	602a      	str	r2, [r5, #0]
 80089a4:	681d      	ldr	r5, [r3, #0]
 80089a6:	6862      	ldr	r2, [r4, #4]
 80089a8:	2100      	movs	r1, #0
 80089aa:	4628      	mov	r0, r5
 80089ac:	f7f7 fc18 	bl	80001e0 <memchr>
 80089b0:	b108      	cbz	r0, 80089b6 <_printf_i+0x1ea>
 80089b2:	1b40      	subs	r0, r0, r5
 80089b4:	6060      	str	r0, [r4, #4]
 80089b6:	6863      	ldr	r3, [r4, #4]
 80089b8:	6123      	str	r3, [r4, #16]
 80089ba:	2300      	movs	r3, #0
 80089bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089c0:	e7aa      	b.n	8008918 <_printf_i+0x14c>
 80089c2:	6923      	ldr	r3, [r4, #16]
 80089c4:	462a      	mov	r2, r5
 80089c6:	4649      	mov	r1, r9
 80089c8:	4640      	mov	r0, r8
 80089ca:	47d0      	blx	sl
 80089cc:	3001      	adds	r0, #1
 80089ce:	d0ad      	beq.n	800892c <_printf_i+0x160>
 80089d0:	6823      	ldr	r3, [r4, #0]
 80089d2:	079b      	lsls	r3, r3, #30
 80089d4:	d413      	bmi.n	80089fe <_printf_i+0x232>
 80089d6:	68e0      	ldr	r0, [r4, #12]
 80089d8:	9b03      	ldr	r3, [sp, #12]
 80089da:	4298      	cmp	r0, r3
 80089dc:	bfb8      	it	lt
 80089de:	4618      	movlt	r0, r3
 80089e0:	e7a6      	b.n	8008930 <_printf_i+0x164>
 80089e2:	2301      	movs	r3, #1
 80089e4:	4632      	mov	r2, r6
 80089e6:	4649      	mov	r1, r9
 80089e8:	4640      	mov	r0, r8
 80089ea:	47d0      	blx	sl
 80089ec:	3001      	adds	r0, #1
 80089ee:	d09d      	beq.n	800892c <_printf_i+0x160>
 80089f0:	3501      	adds	r5, #1
 80089f2:	68e3      	ldr	r3, [r4, #12]
 80089f4:	9903      	ldr	r1, [sp, #12]
 80089f6:	1a5b      	subs	r3, r3, r1
 80089f8:	42ab      	cmp	r3, r5
 80089fa:	dcf2      	bgt.n	80089e2 <_printf_i+0x216>
 80089fc:	e7eb      	b.n	80089d6 <_printf_i+0x20a>
 80089fe:	2500      	movs	r5, #0
 8008a00:	f104 0619 	add.w	r6, r4, #25
 8008a04:	e7f5      	b.n	80089f2 <_printf_i+0x226>
 8008a06:	bf00      	nop
 8008a08:	08008b75 	.word	0x08008b75
 8008a0c:	08008b86 	.word	0x08008b86

08008a10 <memmove>:
 8008a10:	4288      	cmp	r0, r1
 8008a12:	b510      	push	{r4, lr}
 8008a14:	eb01 0402 	add.w	r4, r1, r2
 8008a18:	d902      	bls.n	8008a20 <memmove+0x10>
 8008a1a:	4284      	cmp	r4, r0
 8008a1c:	4623      	mov	r3, r4
 8008a1e:	d807      	bhi.n	8008a30 <memmove+0x20>
 8008a20:	1e43      	subs	r3, r0, #1
 8008a22:	42a1      	cmp	r1, r4
 8008a24:	d008      	beq.n	8008a38 <memmove+0x28>
 8008a26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a2e:	e7f8      	b.n	8008a22 <memmove+0x12>
 8008a30:	4402      	add	r2, r0
 8008a32:	4601      	mov	r1, r0
 8008a34:	428a      	cmp	r2, r1
 8008a36:	d100      	bne.n	8008a3a <memmove+0x2a>
 8008a38:	bd10      	pop	{r4, pc}
 8008a3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a42:	e7f7      	b.n	8008a34 <memmove+0x24>

08008a44 <memcpy>:
 8008a44:	440a      	add	r2, r1
 8008a46:	4291      	cmp	r1, r2
 8008a48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008a4c:	d100      	bne.n	8008a50 <memcpy+0xc>
 8008a4e:	4770      	bx	lr
 8008a50:	b510      	push	{r4, lr}
 8008a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a5a:	4291      	cmp	r1, r2
 8008a5c:	d1f9      	bne.n	8008a52 <memcpy+0xe>
 8008a5e:	bd10      	pop	{r4, pc}

08008a60 <_realloc_r>:
 8008a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a64:	4680      	mov	r8, r0
 8008a66:	4614      	mov	r4, r2
 8008a68:	460e      	mov	r6, r1
 8008a6a:	b921      	cbnz	r1, 8008a76 <_realloc_r+0x16>
 8008a6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a70:	4611      	mov	r1, r2
 8008a72:	f7ff bba9 	b.w	80081c8 <_malloc_r>
 8008a76:	b92a      	cbnz	r2, 8008a84 <_realloc_r+0x24>
 8008a78:	f7ff fc96 	bl	80083a8 <_free_r>
 8008a7c:	4625      	mov	r5, r4
 8008a7e:	4628      	mov	r0, r5
 8008a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a84:	f000 f81b 	bl	8008abe <_malloc_usable_size_r>
 8008a88:	4284      	cmp	r4, r0
 8008a8a:	4607      	mov	r7, r0
 8008a8c:	d802      	bhi.n	8008a94 <_realloc_r+0x34>
 8008a8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a92:	d812      	bhi.n	8008aba <_realloc_r+0x5a>
 8008a94:	4621      	mov	r1, r4
 8008a96:	4640      	mov	r0, r8
 8008a98:	f7ff fb96 	bl	80081c8 <_malloc_r>
 8008a9c:	4605      	mov	r5, r0
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d0ed      	beq.n	8008a7e <_realloc_r+0x1e>
 8008aa2:	42bc      	cmp	r4, r7
 8008aa4:	4622      	mov	r2, r4
 8008aa6:	4631      	mov	r1, r6
 8008aa8:	bf28      	it	cs
 8008aaa:	463a      	movcs	r2, r7
 8008aac:	f7ff ffca 	bl	8008a44 <memcpy>
 8008ab0:	4631      	mov	r1, r6
 8008ab2:	4640      	mov	r0, r8
 8008ab4:	f7ff fc78 	bl	80083a8 <_free_r>
 8008ab8:	e7e1      	b.n	8008a7e <_realloc_r+0x1e>
 8008aba:	4635      	mov	r5, r6
 8008abc:	e7df      	b.n	8008a7e <_realloc_r+0x1e>

08008abe <_malloc_usable_size_r>:
 8008abe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ac2:	1f18      	subs	r0, r3, #4
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	bfbc      	itt	lt
 8008ac8:	580b      	ldrlt	r3, [r1, r0]
 8008aca:	18c0      	addlt	r0, r0, r3
 8008acc:	4770      	bx	lr
	...

08008ad0 <_init>:
 8008ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad2:	bf00      	nop
 8008ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ad6:	bc08      	pop	{r3}
 8008ad8:	469e      	mov	lr, r3
 8008ada:	4770      	bx	lr

08008adc <_fini>:
 8008adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ade:	bf00      	nop
 8008ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ae2:	bc08      	pop	{r3}
 8008ae4:	469e      	mov	lr, r3
 8008ae6:	4770      	bx	lr
