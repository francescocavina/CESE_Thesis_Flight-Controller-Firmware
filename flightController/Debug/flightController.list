
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08008a74  08008a74  00018a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b24  08008b24  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08008b24  08008b24  00018b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b2c  08008b2c  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b2c  08008b2c  00018b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b30  08008b30  00018b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08008b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014e4  20000160  08008c94  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001644  08008c94  00021644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013666  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033de  00000000  00000000  000337f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00036bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  00037a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001918e  00000000  00000000  00038750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143a3  00000000  00000000  000518de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000894dd  00000000  00000000  00065c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef15e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dfc  00000000  00000000  000ef1b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008a5c 	.word	0x08008a5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	08008a5c 	.word	0x08008a5c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800058a:	f000 fb73 	bl	8000c74 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800058e:	f000 f839 	bl	8000604 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000592:	f000 f8a3 	bl	80006dc <MX_GPIO_Init>
    // MX_DMA_Init();
    MX_USB_DEVICE_Init();
 8000596:	f007 f8a9 	bl	80076ec <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    uint8_t buffer[32];
    uint8_t str[32] = {0};
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]
 80005ae:	615a      	str	r2, [r3, #20]
 80005b0:	619a      	str	r2, [r3, #24]
    uint8_t channel = CHANNEL_3;
 80005b2:	2303      	movs	r3, #3
 80005b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    iBus_HandleTypeDef_t * rc_controller = FSA8S_RC_Init(&huart2, buffer);
 80005b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005bc:	4619      	mov	r1, r3
 80005be:	480f      	ldr	r0, [pc, #60]	; (80005fc <main+0x78>)
 80005c0:	f000 fb0e 	bl	8000be0 <FSA8S_RC_Init>
 80005c4:	64b8      	str	r0, [r7, #72]	; 0x48

    while (1) {
		uint16_t value = FSA8S_RC_ReadChannel(rc_controller, channel);
 80005c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80005ca:	4619      	mov	r1, r3
 80005cc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80005ce:	f000 fb35 	bl	8000c3c <FSA8S_RC_ReadChannel>
 80005d2:	4603      	mov	r3, r0
 80005d4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		sprintf(str, "Channel %d: %d\r\n", channel, value);
 80005d8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80005dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80005e0:	1d38      	adds	r0, r7, #4
 80005e2:	4907      	ldr	r1, [pc, #28]	; (8000600 <main+0x7c>)
 80005e4:	f007 febc 	bl	8008360 <siprintf>

		CDC_Transmit_FS(str, sizeof(str));
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2120      	movs	r1, #32
 80005ec:	4618      	mov	r0, r3
 80005ee:	f007 f93b 	bl	8007868 <CDC_Transmit_FS>

        HAL_Delay(1000);
 80005f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f6:	f000 fbaf 	bl	8000d58 <HAL_Delay>
    while (1) {
 80005fa:	e7e4      	b.n	80005c6 <main+0x42>
 80005fc:	2000017c 	.word	0x2000017c
 8000600:	08008a74 	.word	0x08008a74

08000604 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f007 fdac 	bl	8008170 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemClock_Config+0xd0>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a28      	ldr	r2, [pc, #160]	; (80006d4 <SystemClock_Config+0xd0>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemClock_Config+0xd0>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemClock_Config+0xd4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <SystemClock_Config+0xd4>)
 8000652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <SystemClock_Config+0xd4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 25;
 8000678:	2319      	movs	r3, #25
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 800067c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000680:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000682:	2304      	movs	r3, #4
 8000684:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8000686:	2307      	movs	r3, #7
 8000688:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fa80 	bl	8002b94 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x9a>
        Error_Handler();
 800069a:	f000 f847 	bl	800072c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType =
 800069e:	230f      	movs	r3, #15
 80006a0:	60fb      	str	r3, [r7, #12]
        RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2302      	movs	r3, #2
 80006a4:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ae:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2102      	movs	r1, #2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 fce2 	bl	8003084 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xc6>
        Error_Handler();
 80006c6:	f000 f831 	bl	800072c <Error_Handler>
    }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	; 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_GPIO_Init+0x4c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <MX_GPIO_Init+0x4c>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_GPIO_Init+0x4c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_GPIO_Init+0x4c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a08      	ldr	r2, [pc, #32]	; (8000728 <MX_GPIO_Init+0x4c>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_GPIO_Init+0x4c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* USER CODE END Error_Handler_Debug */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
	...

0800073c <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <HAL_MspInit+0x4c>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074a:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <HAL_MspInit+0x4c>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	6453      	str	r3, [r2, #68]	; 0x44
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <HAL_MspInit+0x4c>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <HAL_MspInit+0x4c>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	4a08      	ldr	r2, [pc, #32]	; (8000788 <HAL_MspInit+0x4c>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076c:	6413      	str	r3, [r2, #64]	; 0x40
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_MspInit+0x4c>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800

0800078c <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef * huart) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
    if (huart->Instance == USART2) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a31      	ldr	r2, [pc, #196]	; (8000870 <HAL_UART_MspInit+0xe4>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d15b      	bne.n	8000866 <HAL_UART_MspInit+0xda>
        /* USER CODE BEGIN USART2_MspInit 0 */

        /* USER CODE END USART2_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART2_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b30      	ldr	r3, [pc, #192]	; (8000874 <HAL_UART_MspInit+0xe8>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	4a2f      	ldr	r2, [pc, #188]	; (8000874 <HAL_UART_MspInit+0xe8>)
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007bc:	6413      	str	r3, [r2, #64]	; 0x40
 80007be:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <HAL_UART_MspInit+0xe8>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b29      	ldr	r3, [pc, #164]	; (8000874 <HAL_UART_MspInit+0xe8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a28      	ldr	r2, [pc, #160]	; (8000874 <HAL_UART_MspInit+0xe8>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b26      	ldr	r3, [pc, #152]	; (8000874 <HAL_UART_MspInit+0xe8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
        /**USART2 GPIO Configuration
        PA2     ------> USART2_TX
        PA3     ------> USART2_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80007e6:	230c      	movs	r3, #12
 80007e8:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007f6:	2307      	movs	r3, #7
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	481d      	ldr	r0, [pc, #116]	; (8000878 <HAL_UART_MspInit+0xec>)
 8000802:	f000 fdc5 	bl	8001390 <HAL_GPIO_Init>

        /* USART2 DMA Init */
        /* USART2_RX Init */
        hdma_usart2_rx.Instance = DMA1_Stream5;
 8000806:	4b1d      	ldr	r3, [pc, #116]	; (800087c <HAL_UART_MspInit+0xf0>)
 8000808:	4a1d      	ldr	r2, [pc, #116]	; (8000880 <HAL_UART_MspInit+0xf4>)
 800080a:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <HAL_UART_MspInit+0xf0>)
 800080e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000812:	605a      	str	r2, [r3, #4]
        hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <HAL_UART_MspInit+0xf0>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
        hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <HAL_UART_MspInit+0xf0>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
        hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <HAL_UART_MspInit+0xf0>)
 8000822:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000826:	611a      	str	r2, [r3, #16]
        hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <HAL_UART_MspInit+0xf0>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
        hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <HAL_UART_MspInit+0xf0>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
        hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <HAL_UART_MspInit+0xf0>)
 8000836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800083a:	61da      	str	r2, [r3, #28]
        hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_UART_MspInit+0xf0>)
 800083e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000842:	621a      	str	r2, [r3, #32]
        hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <HAL_UART_MspInit+0xf0>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
        if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 800084a:	480c      	ldr	r0, [pc, #48]	; (800087c <HAL_UART_MspInit+0xf0>)
 800084c:	f000 fbba 	bl	8000fc4 <HAL_DMA_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_UART_MspInit+0xce>
            Error_Handler();
 8000856:	f7ff ff69 	bl	800072c <Error_Handler>
        }

        __HAL_LINKDMA(huart, hdmarx, hdma_usart2_rx);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a07      	ldr	r2, [pc, #28]	; (800087c <HAL_UART_MspInit+0xf0>)
 800085e:	639a      	str	r2, [r3, #56]	; 0x38
 8000860:	4a06      	ldr	r2, [pc, #24]	; (800087c <HAL_UART_MspInit+0xf0>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6393      	str	r3, [r2, #56]	; 0x38

        /* USER CODE BEGIN USART2_MspInit 1 */

        /* USER CODE END USART2_MspInit 1 */
    }
}
 8000866:	bf00      	nop
 8000868:	3728      	adds	r7, #40	; 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40004400 	.word	0x40004400
 8000874:	40023800 	.word	0x40023800
 8000878:	40020000 	.word	0x40020000
 800087c:	200001c0 	.word	0x200001c0
 8000880:	40026088 	.word	0x40026088

08000884 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8000888:	e7fe      	b.n	8000888 <NMI_Handler+0x4>

0800088a <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1) {
 800088e:	e7fe      	b.n	800088e <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1) {
 8000894:	e7fe      	b.n	8000894 <MemManage_Handler+0x4>

08000896 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1) {
 800089a:	e7fe      	b.n	800089a <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1) {
 80008a0:	e7fe      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a2 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 80008d0:	f000 fa22 	bl	8000d18 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <OTG_FS_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN OTG_FS_IRQn 0 */

    /* USER CODE END OTG_FS_IRQn 0 */
    HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <OTG_FS_IRQHandler+0x10>)
 80008de:	f001 f82b 	bl	8001938 <HAL_PCD_IRQHandler>
    /* USER CODE BEGIN OTG_FS_IRQn 1 */

    /* USER CODE END OTG_FS_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000f08 	.word	0x20000f08

080008ec <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f4:	4a14      	ldr	r2, [pc, #80]	; (8000948 <_sbrk+0x5c>)
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <_sbrk+0x60>)
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <_sbrk+0x64>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d102      	bne.n	800090e <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <_sbrk+0x64>)
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <_sbrk+0x68>)
 800090c:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	429a      	cmp	r2, r3
 800091a:	d207      	bcs.n	800092c <_sbrk+0x40>
        errno = ENOMEM;
 800091c:	f007 fbf6 	bl	800810c <__errno>
 8000920:	4603      	mov	r3, r0
 8000922:	220c      	movs	r2, #12
 8000924:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800092a:	e009      	b.n	8000940 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <_sbrk+0x64>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8000932:	4b07      	ldr	r3, [pc, #28]	; (8000950 <_sbrk+0x64>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	4a05      	ldr	r2, [pc, #20]	; (8000950 <_sbrk+0x64>)
 800093c:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 800093e:	68fb      	ldr	r3, [r7, #12]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20010000 	.word	0x20010000
 800094c:	00000400 	.word	0x00000400
 8000950:	20000220 	.word	0x20000220
 8000954:	20001648 	.word	0x20001648

08000958 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <SystemInit+0x20>)
 800095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <SystemInit+0x20>)
 8000964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000982:	490e      	ldr	r1, [pc, #56]	; (80009bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000998:	4c0b      	ldr	r4, [pc, #44]	; (80009c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009a6:	f7ff ffd7 	bl	8000958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009aa:	f007 fbb5 	bl	8008118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ae:	f7ff fde9 	bl	8000584 <main>
  bx  lr
 80009b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 80009c0:	08008b34 	.word	0x08008b34
  ldr r2, =_sbss
 80009c4:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 80009c8:	20001644 	.word	0x20001644

080009cc <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC_IRQHandler>
	...

080009d0 <MX_UART_Init>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t MX_UART_Init(UART_HandleTypeDef * huart) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	/* BEGIN MODIFY 1*/
	huart->Instance = FSA8S_RC_UART_INSTANCE;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <MX_UART_Init+0x54>)
 80009dc:	601a      	str	r2, [r3, #0]
	huart->Init.BaudRate = 115200;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
	huart->Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
	huart->Init.StopBits = UART_STOPBITS_1;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
	huart->Init.Parity = UART_PARITY_NONE;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
	huart->Init.Mode = UART_MODE_RX;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2204      	movs	r2, #4
 80009fc:	615a      	str	r2, [r3, #20]
	huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
	huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
	/* END MODIFY 1 */

	/* BEGIN MODIFY 2 */
	if (HAL_OK != HAL_UART_Init(huart)) {
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f002 fd1a 	bl	8003444 <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_UART_Init+0x4a>
		/* END MODIFY 2 */
		return false;
 8000a16:	2300      	movs	r3, #0
 8000a18:	e000      	b.n	8000a1c <MX_UART_Init+0x4c>
	}

	return true;
 8000a1a:	2301      	movs	r3, #1
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40004400 	.word	0x40004400

08000a28 <MX_DMA_Init>:

static void MX_DMA_Init(void) {
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	/* BEGIN MODIFY 3 */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_DMA_Init+0x30>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <MX_DMA_Init+0x30>)
 8000a38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_DMA_Init+0x30>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
	/* END MODIFY 3 */
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800

08000a5c <iBus_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
bool_t iBus_Init(iBus_HandleTypeDef_t * hibus) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	MX_DMA_Init();
 8000a64:	f7ff ffe0 	bl	8000a28 <MX_DMA_Init>

	if(!MX_UART_Init(hibus->huart))
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ffaf 	bl	80009d0 <MX_UART_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	f083 0301 	eor.w	r3, r3, #1
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <iBus_Init+0x26>
	{
		return false;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e00f      	b.n	8000aa2 <iBus_Init+0x46>
	}

	/* BEGIN MODIFY 4 */
	if(HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6818      	ldr	r0, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6859      	ldr	r1, [r3, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	7a1b      	ldrb	r3, [r3, #8]
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	461a      	mov	r2, r3
 8000a92:	f002 fd24 	bl	80034de <HAL_UART_Receive_DMA>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <iBus_Init+0x44>
	{
		/* END MODIFY 4 */
		return false;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e000      	b.n	8000aa2 <iBus_Init+0x46>
	}

	return true;
 8000aa0:	2301      	movs	r3, #1
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <FSA8S_RC_CheckFirstByte>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t FSA8S_RC_CheckFirstByte(iBus_HandleTypeDef_t * hibus) {
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
    if (IBUS_BUFFER_LENGHT == hibus->buffer[0] && IBUS_COMMAND == hibus->buffer[1]) {
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b20      	cmp	r3, #32
 8000aba:	d107      	bne.n	8000acc <FSA8S_RC_CheckFirstByte+0x22>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b40      	cmp	r3, #64	; 0x40
 8000ac6:	d101      	bne.n	8000acc <FSA8S_RC_CheckFirstByte+0x22>
        return true;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e000      	b.n	8000ace <FSA8S_RC_CheckFirstByte+0x24>
    } else {
        return false;
 8000acc:	2300      	movs	r3, #0
    }
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <FSA8S_RC_Checksum>:

static bool_t FSA8S_RC_Checksum(iBus_HandleTypeDef_t * hibus) {
 8000ada:	b480      	push	{r7}
 8000adc:	b085      	sub	sp, #20
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
    uint16_t sentChecksum;
    uint16_t receivedChecksum = 0xFFFF;
 8000ae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ae6:	81fb      	strh	r3, [r7, #14]

    sentChecksum =
        (hibus->buffer[hibus->bufferSize - 1] << 8) | (hibus->buffer[hibus->bufferSize - 2]);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685a      	ldr	r2, [r3, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	7a1b      	ldrb	r3, [r3, #8]
 8000af0:	3b01      	subs	r3, #1
 8000af2:	4413      	add	r3, r2
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	021b      	lsls	r3, r3, #8
 8000af8:	b21a      	sxth	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6859      	ldr	r1, [r3, #4]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	7a1b      	ldrb	r3, [r3, #8]
 8000b02:	3b02      	subs	r3, #2
 8000b04:	440b      	add	r3, r1
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b21b      	sxth	r3, r3
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	b21b      	sxth	r3, r3
    sentChecksum =
 8000b0e:	817b      	strh	r3, [r7, #10]

    for (uint8_t i = 0; i < 30; i++) {
 8000b10:	2300      	movs	r3, #0
 8000b12:	737b      	strb	r3, [r7, #13]
 8000b14:	e00b      	b.n	8000b2e <FSA8S_RC_Checksum+0x54>
        receivedChecksum -= hibus->buffer[i];
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	685a      	ldr	r2, [r3, #4]
 8000b1a:	7b7b      	ldrb	r3, [r7, #13]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	89fa      	ldrh	r2, [r7, #14]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < 30; i++) {
 8000b28:	7b7b      	ldrb	r3, [r7, #13]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	737b      	strb	r3, [r7, #13]
 8000b2e:	7b7b      	ldrb	r3, [r7, #13]
 8000b30:	2b1d      	cmp	r3, #29
 8000b32:	d9f0      	bls.n	8000b16 <FSA8S_RC_Checksum+0x3c>
    }

    if (sentChecksum == receivedChecksum) {
 8000b34:	897a      	ldrh	r2, [r7, #10]
 8000b36:	89fb      	ldrh	r3, [r7, #14]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d101      	bne.n	8000b40 <FSA8S_RC_Checksum+0x66>
        return true;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e000      	b.n	8000b42 <FSA8S_RC_Checksum+0x68>
    } else {
        return false;
 8000b40:	2300      	movs	r3, #0
    }
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <FSA8S_RC_AmendData>:

static void FSA8S_RC_AmendData(iBus_HandleTypeDef_t * hibus) {
 8000b4e:	b480      	push	{r7}
 8000b50:	b085      	sub	sp, #20
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]

	uint16_t channelValue;

    for (uint8_t i = 2; i <= (hibus->bufferSize - 2); i += 2) {
 8000b56:	2302      	movs	r3, #2
 8000b58:	737b      	strb	r3, [r7, #13]
 8000b5a:	e034      	b.n	8000bc6 <FSA8S_RC_AmendData+0x78>

    	channelValue = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	81fb      	strh	r3, [r7, #14]

    	channelValue = ((hibus->buffer[i + 1] << 8) | (hibus->buffer[i]));
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	7b7b      	ldrb	r3, [r7, #13]
 8000b66:	3301      	adds	r3, #1
 8000b68:	4413      	add	r3, r2
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	021b      	lsls	r3, r3, #8
 8000b6e:	b21a      	sxth	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6859      	ldr	r1, [r3, #4]
 8000b74:	7b7b      	ldrb	r3, [r7, #13]
 8000b76:	440b      	add	r3, r1
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b21b      	sxth	r3, r3
 8000b80:	81fb      	strh	r3, [r7, #14]

    	if((1000 <= channelValue) && (2000 >= channelValue))
 8000b82:	89fb      	ldrh	r3, [r7, #14]
 8000b84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b88:	d308      	bcc.n	8000b9c <FSA8S_RC_AmendData+0x4e>
 8000b8a:	89fb      	ldrh	r3, [r7, #14]
 8000b8c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b90:	d804      	bhi.n	8000b9c <FSA8S_RC_AmendData+0x4e>
    	{
    		channelValue -= 1000;
 8000b92:	89fb      	ldrh	r3, [r7, #14]
 8000b94:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000b98:	81fb      	strh	r3, [r7, #14]
 8000b9a:	e001      	b.n	8000ba0 <FSA8S_RC_AmendData+0x52>
    	}
    	else
    	{
    		channelValue = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	81fb      	strh	r3, [r7, #14]
    	}

        hibus->data[(i - 2) / 2] = channelValue * (IBUS_CHANNEL_MAX_VALUE / 1000);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	68da      	ldr	r2, [r3, #12]
 8000ba4:	7b7b      	ldrb	r3, [r7, #13]
 8000ba6:	3b02      	subs	r3, #2
 8000ba8:	0fd9      	lsrs	r1, r3, #31
 8000baa:	440b      	add	r3, r1
 8000bac:	105b      	asrs	r3, r3, #1
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	441a      	add	r2, r3
 8000bb2:	89fb      	ldrh	r3, [r7, #14]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	0089      	lsls	r1, r1, #2
 8000bb8:	440b      	add	r3, r1
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	8013      	strh	r3, [r2, #0]
    for (uint8_t i = 2; i <= (hibus->bufferSize - 2); i += 2) {
 8000bc0:	7b7b      	ldrb	r3, [r7, #13]
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	737b      	strb	r3, [r7, #13]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	7a1b      	ldrb	r3, [r3, #8]
 8000bca:	1e5a      	subs	r2, r3, #1
 8000bcc:	7b7b      	ldrb	r3, [r7, #13]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	dcc4      	bgt.n	8000b5c <FSA8S_RC_AmendData+0xe>
    }
}
 8000bd2:	bf00      	nop
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <FSA8S_RC_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
iBus_HandleTypeDef_t * FSA8S_RC_Init(UART_HandleTypeDef * huart, uint8_t * buffer) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]

#ifdef USE_FREERTOS
    iBus_HandleTypeDef_t * hibus = pvPortmalloc(sizeof(iBus_HandleTypeDef_t));
    uint16_t * data = pvortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
#else
    iBus_HandleTypeDef_t * hibus = malloc(sizeof(iBus_HandleTypeDef_t));
 8000bea:	2014      	movs	r0, #20
 8000bec:	f007 fab8 	bl	8008160 <malloc>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	60fb      	str	r3, [r7, #12]
    uint16_t * data = malloc(sizeof(uint16_t));
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	f007 fab3 	bl	8008160 <malloc>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	60bb      	str	r3, [r7, #8]
#endif

    if (hibus) {
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d00e      	beq.n	8000c22 <FSA8S_RC_Init+0x42>
        hibus->huart = huart;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	601a      	str	r2, [r3, #0]
        hibus->buffer = buffer;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGHT;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2220      	movs	r2, #32
 8000c14:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	68ba      	ldr	r2, [r7, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	220e      	movs	r2, #14
 8000c20:	741a      	strb	r2, [r3, #16]
    }

    if (iBus_Init(hibus)) {
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	f7ff ff1a 	bl	8000a5c <iBus_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <FSA8S_RC_Init+0x52>
        return hibus;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	e000      	b.n	8000c34 <FSA8S_RC_Init+0x54>
    } else {
        return NULL;
 8000c32:	2300      	movs	r3, #0
    }
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <FSA8S_RC_ReadChannel>:

uint16_t FSA8S_RC_ReadChannel(iBus_HandleTypeDef_t * hibus, FSA8S_RC_CHANNEL_t channel) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	70fb      	strb	r3, [r7, #3]

    FSA8S_RC_CheckFirstByte(hibus);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ff2e 	bl	8000aaa <FSA8S_RC_CheckFirstByte>
    FSA8S_RC_Checksum(hibus);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ff43 	bl	8000ada <FSA8S_RC_Checksum>
    FSA8S_RC_AmendData(hibus);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ff7a 	bl	8000b4e <FSA8S_RC_AmendData>

    return hibus->data[channel - 1];
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	68da      	ldr	r2, [r3, #12]
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000c64:	3b01      	subs	r3, #1
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4413      	add	r3, r2
 8000c6a:	881b      	ldrh	r3, [r3, #0]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
    /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <HAL_Init+0x40>)
 8000c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <HAL_Init+0x40>)
 8000c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_Init+0x40>)
 8000c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

    /* Set Interrupt Group Priority */
    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 f94f 	bl	8000f40 <HAL_NVIC_SetPriorityGrouping>

    /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
    HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	200f      	movs	r0, #15
 8000ca4:	f000 f808 	bl	8000cb8 <HAL_InitTick>

    /* Init the low level hardware */
    HAL_MspInit();
 8000ca8:	f7ff fd48 	bl	800073c <HAL_MspInit>

    /* Return function status */
    return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023c00 	.word	0x40023c00

08000cb8 <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x54>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0x58>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f967 	bl	8000faa <HAL_SYSTICK_Config>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_InitTick+0x2e>
        return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00e      	b.n	8000d04 <HAL_InitTick+0x4c>
    }

    /* Configure the SysTick IRQ priority */
    if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d80a      	bhi.n	8000d02 <HAL_InitTick+0x4a>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cf4:	f000 f92f 	bl	8000f56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cf8:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <HAL_InitTick+0x5c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
    } else {
        return HAL_ERROR;
    }

    /* Return function status */
    return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x4c>
        return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000004 	.word	0x20000004

08000d18 <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
    uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	20000224 	.word	0x20000224

08000d40 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
    return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000224 	.word	0x20000224

08000d58 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff ffee 	bl	8000d40 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]

    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY) {
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
        wait += (uint32_t)(uwTickFreq);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_Delay+0x44>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
    }

    while ((HAL_GetTick() - tickstart) < wait) {
 8000d7e:	bf00      	nop
 8000d80:	f7ff ffde 	bl	8000d40 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
    }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008

08000da0 <__NVIC_SetPriorityGrouping>:
           Only values from 0..7 are used.
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
    uint32_t reg_value;
    uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL); /* only values 0..7 are used */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

    reg_value = SCB->AIRCR; /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
    reg_value &=
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
        ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change */
    reg_value =
        (reg_value | ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
         (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
        (reg_value | ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
    reg_value =
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
    SCB->AIRCR = reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
/**
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void) {
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
    return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \brief   Enable Interrupt
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn) {
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
    if ((int32_t)(IRQn) >= 0) {
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
        NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4907      	ldr	r1, [pc, #28]	; (8000e3c <__NVIC_EnableIRQ+0x38>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
           or negative to specify a processor exception.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
    if ((int32_t)(IRQn) >= 0) {
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
        NVIC->IP[((uint32_t)IRQn)] =
            (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
        NVIC->IP[((uint32_t)IRQn)] =
 8000e58:	490c      	ldr	r1, [pc, #48]	; (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
            (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
        NVIC->IP[((uint32_t)IRQn)] =
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    } else {
        SCB->SHP[(((uint32_t)IRQn) & 0xFUL) - 4UL] =
            (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
            (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
        SCB->SHP[(((uint32_t)IRQn) & 0xFUL) - 4UL] =
 8000e6e:	4908      	ldr	r1, [pc, #32]	; (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
            (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
        SCB->SHP[(((uint32_t)IRQn) & 0xFUL) - 4UL] =
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref
  NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority(uint32_t PriorityGroup, uint32_t PreemptPriority,
                                             uint32_t SubPriority) {
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
    uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL); /* only values 0..7 are used */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
    uint32_t PreemptPriorityBits;
    uint32_t SubPriorityBits;

    PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS))
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
                              ? (uint32_t)(__NVIC_PRIO_BITS)
                              : (uint32_t)(7UL - PriorityGroupTmp);
    SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL)
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
                          ? (uint32_t)0UL
                          : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
    SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL)
 8000ec6:	617b      	str	r3, [r7, #20]

    return (
        ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
        ((SubPriority & (uint32_t)((1UL << (SubPriorityBits)) - 1UL))));
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
        ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	; 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <SysTick_Config>:
  \return          1  Function failed.
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file
  <b><i>device</i>.h</b> must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
    if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) {
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f0c:	d301      	bcc.n	8000f12 <SysTick_Config+0x16>
        return (1UL); /* Reload value impossible */
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00f      	b.n	8000f32 <SysTick_Config+0x36>
    }

    SysTick->LOAD = (uint32_t)(ticks - 1UL); /* set reload register */
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <SysTick_Config+0x40>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	6053      	str	r3, [r2, #4]
    NVIC_SetPriority(SysTick_IRQn,
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f20:	f7ff ff8e 	bl	8000e40 <__NVIC_SetPriority>
                     (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
    SysTick->VAL = 0UL;                                /* Load the SysTick Counter Value */
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <SysTick_Config+0x40>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk |
 8000f2a:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <SysTick_Config+0x40>)
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	601a      	str	r2, [r3, #0]
                    SysTick_CTRL_ENABLE_Msk; /* Enable SysTick IRQ and SysTick Timer */
    return (0UL);                            /* Function successful */
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	e000e010 	.word	0xe000e010

08000f40 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
 *         The pending IRQ priority will be managed only by the subpriority.
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
    /* Check the parameters */
    assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

    /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
    NVIC_SetPriorityGrouping(PriorityGroup);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff29 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_SetPriority>:
 * @param  SubPriority the subpriority level for the IRQ channel.
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority) {
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	73fb      	strb	r3, [r7, #15]
    uint32_t prioritygroup = 0x00U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
    assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

    prioritygroup = NVIC_GetPriorityGrouping();
 8000f68:	f7ff ff3e 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f6c:	6178      	str	r0, [r7, #20]

    NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	6978      	ldr	r0, [r7, #20]
 8000f74:	f7ff ff8e 	bl	8000e94 <NVIC_EncodePriority>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff5d 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f86:	bf00      	nop
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_EnableIRQ>:
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS
 * device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	71fb      	strb	r3, [r7, #7]
    /* Check the parameters */
    assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

    /* Enable interrupt */
    NVIC_EnableIRQ(IRQn);
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff31 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
    return SysTick_Config(TicksNumb);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ffa2 	bl	8000efc <SysTick_Config>
 8000fb8:	4603      	mov	r3, r0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_DMA_Init>:
 *         parameters in the DMA_InitTypeDef and create the associated handle.
 * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA Stream.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef * hdma) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
    uint32_t tmp = 0U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
    uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff feb6 	bl	8000d40 <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]
    DMA_Base_Registers * regs;

    /* Check the DMA peripheral state */
    if (hdma == NULL) {
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d101      	bne.n	8000fe0 <HAL_DMA_Init+0x1c>
        return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e099      	b.n	8001114 <HAL_DMA_Init+0x150>
        assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
        assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0201 	bic.w	r2, r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET) {
 8001000:	e00f      	b.n	8001022 <HAL_DMA_Init+0x5e>
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT) {
 8001002:	f7ff fe9d 	bl	8000d40 <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b05      	cmp	r3, #5
 800100e:	d908      	bls.n	8001022 <HAL_DMA_Init+0x5e>
            /* Update error code */
            hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2220      	movs	r2, #32
 8001014:	655a      	str	r2, [r3, #84]	; 0x54

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2203      	movs	r2, #3
 800101a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e078      	b.n	8001114 <HAL_DMA_Init+0x150>
    while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET) {
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1e8      	bne.n	8001002 <HAL_DMA_Init+0x3e>
        }
    }

    /* Get the CR register value */
    tmp = hdma->Instance->CR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    tmp &= ((uint32_t) ~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | DMA_SxCR_PL |
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <HAL_DMA_Init+0x158>)
 800103c:	4013      	ands	r3, r2
 800103e:	617b      	str	r3, [r7, #20]
                         DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC | DMA_SxCR_PINC |
                         DMA_SxCR_CIRC | DMA_SxCR_DIR | DMA_SxCR_CT | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    tmp |= hdma->Init.Channel | hdma->Init.Direction | hdma->Init.PeriphInc | hdma->Init.MemInc |
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	431a      	orrs	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	431a      	orrs	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	431a      	orrs	r2, r3
           hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment | hdma->Init.Mode |
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
    tmp |= hdma->Init.Channel | hdma->Init.Direction | hdma->Init.PeriphInc | hdma->Init.MemInc |
 800105a:	431a      	orrs	r2, r3
           hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment | hdma->Init.Mode |
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	431a      	orrs	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	431a      	orrs	r2, r3
           hdma->Init.Priority;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a1b      	ldr	r3, [r3, #32]
           hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment | hdma->Init.Mode |
 800106c:	4313      	orrs	r3, r2
    tmp |= hdma->Init.Channel | hdma->Init.Direction | hdma->Init.PeriphInc | hdma->Init.MemInc |
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4313      	orrs	r3, r2
 8001072:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001078:	2b04      	cmp	r3, #4
 800107a:	d107      	bne.n	800108c <HAL_DMA_Init+0xc8>
        /* Get memory burst and peripheral burst */
        tmp |= hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	4313      	orrs	r3, r2
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	4313      	orrs	r3, r2
 800108a:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    hdma->Instance->CR = tmp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    tmp = hdma->Instance->FCR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    tmp &= (uint32_t) ~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	f023 0307 	bic.w	r3, r3, #7
 80010a2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    tmp |= hdma->Init.FIFOMode;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	617b      	str	r3, [r7, #20]

    /* The FIFO threshold is not used when the FIFO mode is disabled */
    if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d117      	bne.n	80010e6 <HAL_DMA_Init+0x122>
        /* Get the FIFO threshold */
        tmp |= hdma->Init.FIFOThreshold;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	4313      	orrs	r3, r2
 80010be:	617b      	str	r3, [r7, #20]

        /* Check compatibility between FIFO threshold level and size of the memory burst */
        /* for INCR4, INCR8, INCR16 bursts */
        if (hdma->Init.MemBurst != DMA_MBURST_SINGLE) {
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00e      	beq.n	80010e6 <HAL_DMA_Init+0x122>
            if (DMA_CheckFifoParam(hdma) != HAL_OK) {
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f8e5 	bl	8001298 <DMA_CheckFifoParam>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d008      	beq.n	80010e6 <HAL_DMA_Init+0x122>
                /* Update error code */
                hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2240      	movs	r2, #64	; 0x40
 80010d8:	655a      	str	r2, [r3, #84]	; 0x54

                /* Change the DMA state */
                hdma->State = HAL_DMA_STATE_READY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

                return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e016      	b.n	8001114 <HAL_DMA_Init+0x150>
            }
        }
    }

    /* Write to DMA Stream FCR */
    hdma->Instance->FCR = tmp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 f89c 	bl	800122c <DMA_CalcBaseAndBitshift>
 80010f4:	4603      	mov	r3, r0
 80010f6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fc:	223f      	movs	r2, #63	; 0x3f
 80010fe:	409a      	lsls	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	655a      	str	r2, [r3, #84]	; 0x54

    /* Initialize the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_OK;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	f010803f 	.word	0xf010803f

08001120 <HAL_DMA_Start_IT>:
 * @param  DstAddress The destination memory Buffer address
 * @param  DataLength The length of data to be transferred from source to destination
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef * hdma, uint32_t SrcAddress,
                                   uint32_t DstAddress, uint32_t DataLength) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	603b      	str	r3, [r7, #0]
    HAL_StatusTypeDef status = HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	75fb      	strb	r3, [r7, #23]

    /* calculate DMA base and stream number */
    DMA_Base_Registers * regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001136:	613b      	str	r3, [r7, #16]

    /* Check the parameters */
    assert_param(IS_DMA_BUFFER_SIZE(DataLength));

    /* Process locked */
    __HAL_LOCK(hdma);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800113e:	2b01      	cmp	r3, #1
 8001140:	d101      	bne.n	8001146 <HAL_DMA_Start_IT+0x26>
 8001142:	2302      	movs	r3, #2
 8001144:	e040      	b.n	80011c8 <HAL_DMA_Start_IT+0xa8>
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    if (HAL_DMA_STATE_READY == hdma->State) {
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b01      	cmp	r3, #1
 8001158:	d12f      	bne.n	80011ba <HAL_DMA_Start_IT+0x9a>
        /* Change DMA peripheral state */
        hdma->State = HAL_DMA_STATE_BUSY;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2202      	movs	r2, #2
 800115e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Initialize the error code */
        hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2200      	movs	r2, #0
 8001166:	655a      	str	r2, [r3, #84]	; 0x54

        /* Configure the source, destination address and the data length */
        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f000 f82e 	bl	80011d0 <DMA_SetConfig>

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001178:	223f      	movs	r2, #63	; 0x3f
 800117a:	409a      	lsls	r2, r3
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	609a      	str	r2, [r3, #8]

        /* Enable Common interrupts*/
        hdma->Instance->CR |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0216 	orr.w	r2, r2, #22
 800118e:	601a      	str	r2, [r3, #0]

        if (hdma->XferHalfCpltCallback != NULL) {
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	2b00      	cmp	r3, #0
 8001196:	d007      	beq.n	80011a8 <HAL_DMA_Start_IT+0x88>
            hdma->Instance->CR |= DMA_IT_HT;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 0208 	orr.w	r2, r2, #8
 80011a6:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral */
        __HAL_DMA_ENABLE(hdma);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f042 0201 	orr.w	r2, r2, #1
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	e005      	b.n	80011c6 <HAL_DMA_Start_IT+0xa6>
    } else {
        /* Process unlocked */
        __HAL_UNLOCK(hdma);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Return error status */
        status = HAL_BUSY;
 80011c2:	2302      	movs	r3, #2
 80011c4:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 80011c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <DMA_SetConfig>:
 * @param  DstAddress The destination memory Buffer address
 * @param  DataLength The length of data to be transferred from source to destination
 * @retval HAL status
 */
static void DMA_SetConfig(DMA_HandleTypeDef * hdma, uint32_t SrcAddress, uint32_t DstAddress,
                          uint32_t DataLength) {
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	603b      	str	r3, [r7, #0]
    /* Clear DBM bit */
    hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011ec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    hdma->Instance->NDTR = DataLength;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	605a      	str	r2, [r3, #4]

    /* Memory to Peripheral */
    if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH) {
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2b40      	cmp	r3, #64	; 0x40
 80011fc:	d108      	bne.n	8001210 <DMA_SetConfig+0x40>
        /* Configure DMA Stream destination address */
        hdma->Instance->PAR = DstAddress;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	609a      	str	r2, [r3, #8]

        /* Configure DMA Stream source address */
        hdma->Instance->M0AR = SrcAddress;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	60da      	str	r2, [r3, #12]
        hdma->Instance->PAR = SrcAddress;

        /* Configure DMA Stream destination address */
        hdma->Instance->M0AR = DstAddress;
    }
}
 800120e:	e007      	b.n	8001220 <DMA_SetConfig+0x50>
        hdma->Instance->PAR = SrcAddress;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	609a      	str	r2, [r3, #8]
        hdma->Instance->M0AR = DstAddress;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	60da      	str	r2, [r3, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <DMA_CalcBaseAndBitshift>:
 * @brief  Returns the DMA Stream base address depending on stream number
 * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
 *                     the configuration information for the specified DMA Stream.
 * @retval Stream base address
 */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef * hdma) {
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
    uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	3b10      	subs	r3, #16
 800123c:	4a14      	ldr	r2, [pc, #80]	; (8001290 <DMA_CalcBaseAndBitshift+0x64>)
 800123e:	fba2 2303 	umull	r2, r3, r2, r3
 8001242:	091b      	lsrs	r3, r3, #4
 8001244:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001246:	4a13      	ldr	r2, [pc, #76]	; (8001294 <DMA_CalcBaseAndBitshift+0x68>)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U) {
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2b03      	cmp	r3, #3
 8001258:	d909      	bls.n	800126e <DMA_CalcBaseAndBitshift+0x42>
        /* return pointer to HISR and HIFCR */
        hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001262:	f023 0303 	bic.w	r3, r3, #3
 8001266:	1d1a      	adds	r2, r3, #4
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	659a      	str	r2, [r3, #88]	; 0x58
 800126c:	e007      	b.n	800127e <DMA_CalcBaseAndBitshift+0x52>
    } else {
        /* return pointer to LISR and LIFCR */
        hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001276:	f023 0303 	bic.w	r3, r3, #3
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	6593      	str	r3, [r2, #88]	; 0x58
    }

    return hdma->StreamBaseAddress;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001282:	4618      	mov	r0, r3
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	aaaaaaab 	.word	0xaaaaaaab
 8001294:	08008ae8 	.word	0x08008ae8

08001298 <DMA_CheckFifoParam>:
 * @brief  Check compatibility between FIFO threshold level and size of the memory burst
 * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
 *                     the configuration information for the specified DMA Stream.
 * @retval HAL status
 */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef * hdma) {
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	73fb      	strb	r3, [r7, #15]
    uint32_t tmp = hdma->Init.FIFOThreshold;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a8:	60bb      	str	r3, [r7, #8]

    /* Memory Data size equal to Byte */
    if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE) {
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d11f      	bne.n	80012f2 <DMA_CheckFifoParam+0x5a>
        switch (tmp) {
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d856      	bhi.n	8001366 <DMA_CheckFifoParam+0xce>
 80012b8:	a201      	add	r2, pc, #4	; (adr r2, 80012c0 <DMA_CheckFifoParam+0x28>)
 80012ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012be:	bf00      	nop
 80012c0:	080012d1 	.word	0x080012d1
 80012c4:	080012e3 	.word	0x080012e3
 80012c8:	080012d1 	.word	0x080012d1
 80012cc:	08001367 	.word	0x08001367
        case DMA_FIFO_THRESHOLD_1QUARTERFULL:
        case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
            if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d046      	beq.n	800136a <DMA_CheckFifoParam+0xd2>
                status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80012e0:	e043      	b.n	800136a <DMA_CheckFifoParam+0xd2>
        case DMA_FIFO_THRESHOLD_HALFFULL:
            if (hdma->Init.MemBurst == DMA_MBURST_INC16) {
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80012ea:	d140      	bne.n	800136e <DMA_CheckFifoParam+0xd6>
                status = HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80012f0:	e03d      	b.n	800136e <DMA_CheckFifoParam+0xd6>
            break;
        }
    }

    /* Memory Data size equal to Half-Word */
    else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD) {
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012fa:	d121      	bne.n	8001340 <DMA_CheckFifoParam+0xa8>
        switch (tmp) {
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d837      	bhi.n	8001372 <DMA_CheckFifoParam+0xda>
 8001302:	a201      	add	r2, pc, #4	; (adr r2, 8001308 <DMA_CheckFifoParam+0x70>)
 8001304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001308:	08001319 	.word	0x08001319
 800130c:	0800131f 	.word	0x0800131f
 8001310:	08001319 	.word	0x08001319
 8001314:	08001331 	.word	0x08001331
        case DMA_FIFO_THRESHOLD_1QUARTERFULL:
        case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
            status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	73fb      	strb	r3, [r7, #15]
            break;
 800131c:	e030      	b.n	8001380 <DMA_CheckFifoParam+0xe8>
        case DMA_FIFO_THRESHOLD_HALFFULL:
            if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001322:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d025      	beq.n	8001376 <DMA_CheckFifoParam+0xde>
                status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800132e:	e022      	b.n	8001376 <DMA_CheckFifoParam+0xde>
        case DMA_FIFO_THRESHOLD_FULL:
            if (hdma->Init.MemBurst == DMA_MBURST_INC16) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001334:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001338:	d11f      	bne.n	800137a <DMA_CheckFifoParam+0xe2>
                status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800133e:	e01c      	b.n	800137a <DMA_CheckFifoParam+0xe2>
        }
    }

    /* Memory Data size equal to Word */
    else {
        switch (tmp) {
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	2b02      	cmp	r3, #2
 8001344:	d903      	bls.n	800134e <DMA_CheckFifoParam+0xb6>
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	2b03      	cmp	r3, #3
 800134a:	d003      	beq.n	8001354 <DMA_CheckFifoParam+0xbc>
            if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
                status = HAL_ERROR;
            }
            break;
        default:
            break;
 800134c:	e018      	b.n	8001380 <DMA_CheckFifoParam+0xe8>
            status = HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	73fb      	strb	r3, [r7, #15]
            break;
 8001352:	e015      	b.n	8001380 <DMA_CheckFifoParam+0xe8>
            if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00e      	beq.n	800137e <DMA_CheckFifoParam+0xe6>
                status = HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
            break;
 8001364:	e00b      	b.n	800137e <DMA_CheckFifoParam+0xe6>
            break;
 8001366:	bf00      	nop
 8001368:	e00a      	b.n	8001380 <DMA_CheckFifoParam+0xe8>
            break;
 800136a:	bf00      	nop
 800136c:	e008      	b.n	8001380 <DMA_CheckFifoParam+0xe8>
            break;
 800136e:	bf00      	nop
 8001370:	e006      	b.n	8001380 <DMA_CheckFifoParam+0xe8>
            break;
 8001372:	bf00      	nop
 8001374:	e004      	b.n	8001380 <DMA_CheckFifoParam+0xe8>
            break;
 8001376:	bf00      	nop
 8001378:	e002      	b.n	8001380 <DMA_CheckFifoParam+0xe8>
            break;
 800137a:	bf00      	nop
 800137c:	e000      	b.n	8001380 <DMA_CheckFifoParam+0xe8>
            break;
 800137e:	bf00      	nop
        }
    }

    return status;
 8001380:	7bfb      	ldrb	r3, [r7, #15]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop

08001390 <HAL_GPIO_Init>:
 * devices.
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef * GPIOx, GPIO_InitTypeDef * GPIO_Init) {
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	; 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
    uint32_t position;
    uint32_t ioposition = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
    uint32_t iocurrent = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
    uint32_t temp = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
    assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
    assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
    assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

    /* Configure the port pins */
    for (position = 0U; position < GPIO_NUMBER; position++) {
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	e159      	b.n	8001660 <HAL_GPIO_Init+0x2d0>
        /* Get the IO position */
        ioposition = 0x01U << position;
 80013ac:	2201      	movs	r2, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	617b      	str	r3, [r7, #20]
        /* Get the current IO position */
        iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]

        if (iocurrent == ioposition) {
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	f040 8148 	bne.w	800165a <HAL_GPIO_Init+0x2ca>
            /*--------------------- GPIO Mode Configuration ------------------------*/
            /* In case of Output or Alternate function mode selection */
            if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d005      	beq.n	80013e2 <HAL_GPIO_Init+0x52>
                (GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0303 	and.w	r3, r3, #3
            if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d130      	bne.n	8001444 <HAL_GPIO_Init+0xb4>
                /* Check the Speed parameter */
                assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
                /* Configure the IO Speed */
                temp = GPIOx->OSPEEDR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	2203      	movs	r2, #3
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
                temp |= (GPIO_Init->Speed << (position * 2U));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
                GPIOx->OSPEEDR = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	609a      	str	r2, [r3, #8]

                /* Configure the IO Output Type */
                temp = GPIOx->OTYPER;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_OTYPER_OT_0 << position);
 8001418:	2201      	movs	r2, #1
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
                temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	f003 0201 	and.w	r2, r3, #1
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
                GPIOx->OTYPER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	605a      	str	r2, [r3, #4]
            }

            if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b03      	cmp	r3, #3
 800144e:	d017      	beq.n	8001480 <HAL_GPIO_Init+0xf0>
                /* Check the parameters */
                assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

                /* Activate the Pull-up or Pull down resistor for the current IO */
                temp = GPIOx->PUPDR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
                temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
                GPIOx->PUPDR = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	60da      	str	r2, [r3, #12]
            }

            /* In case of Alternate function mode selection */
            if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d123      	bne.n	80014d4 <HAL_GPIO_Init+0x144>
                /* Check the Alternate function parameter */
                assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
                /* Configure Alternate function mapped with the current IO */
                temp = GPIOx->AFR[position >> 3U];
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3208      	adds	r2, #8
 8001494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001498:	61bb      	str	r3, [r7, #24]
                temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	220f      	movs	r2, #15
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
                temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
                GPIOx->AFR[position >> 3U] = temp;
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	08da      	lsrs	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3208      	adds	r2, #8
 80014ce:	69b9      	ldr	r1, [r7, #24]
 80014d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            }

            /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
            temp = GPIOx->MODER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	61bb      	str	r3, [r7, #24]
            temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	2203      	movs	r2, #3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
            temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0203 	and.w	r2, r3, #3
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
            GPIOx->MODER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	601a      	str	r2, [r3, #0]

            /*--------------------- EXTI Mode Configuration ------------------------*/
            /* Configure the External Interrupt or event for the current IO */
            if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U) {
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80a2 	beq.w	800165a <HAL_GPIO_Init+0x2ca>
                /* Enable SYSCFG Clock */
                __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b57      	ldr	r3, [pc, #348]	; (8001678 <HAL_GPIO_Init+0x2e8>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	4a56      	ldr	r2, [pc, #344]	; (8001678 <HAL_GPIO_Init+0x2e8>)
 8001520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001524:	6453      	str	r3, [r2, #68]	; 0x44
 8001526:	4b54      	ldr	r3, [pc, #336]	; (8001678 <HAL_GPIO_Init+0x2e8>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]

                temp = SYSCFG->EXTICR[position >> 2U];
 8001532:	4a52      	ldr	r2, [pc, #328]	; (800167c <HAL_GPIO_Init+0x2ec>)
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	3302      	adds	r3, #2
 800153a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153e:	61bb      	str	r3, [r7, #24]
                temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	220f      	movs	r2, #15
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
                temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a49      	ldr	r2, [pc, #292]	; (8001680 <HAL_GPIO_Init+0x2f0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d019      	beq.n	8001592 <HAL_GPIO_Init+0x202>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a48      	ldr	r2, [pc, #288]	; (8001684 <HAL_GPIO_Init+0x2f4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d013      	beq.n	800158e <HAL_GPIO_Init+0x1fe>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a47      	ldr	r2, [pc, #284]	; (8001688 <HAL_GPIO_Init+0x2f8>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d00d      	beq.n	800158a <HAL_GPIO_Init+0x1fa>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a46      	ldr	r2, [pc, #280]	; (800168c <HAL_GPIO_Init+0x2fc>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d007      	beq.n	8001586 <HAL_GPIO_Init+0x1f6>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a45      	ldr	r2, [pc, #276]	; (8001690 <HAL_GPIO_Init+0x300>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d101      	bne.n	8001582 <HAL_GPIO_Init+0x1f2>
 800157e:	2304      	movs	r3, #4
 8001580:	e008      	b.n	8001594 <HAL_GPIO_Init+0x204>
 8001582:	2307      	movs	r3, #7
 8001584:	e006      	b.n	8001594 <HAL_GPIO_Init+0x204>
 8001586:	2303      	movs	r3, #3
 8001588:	e004      	b.n	8001594 <HAL_GPIO_Init+0x204>
 800158a:	2302      	movs	r3, #2
 800158c:	e002      	b.n	8001594 <HAL_GPIO_Init+0x204>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <HAL_GPIO_Init+0x204>
 8001592:	2300      	movs	r3, #0
 8001594:	69fa      	ldr	r2, [r7, #28]
 8001596:	f002 0203 	and.w	r2, r2, #3
 800159a:	0092      	lsls	r2, r2, #2
 800159c:	4093      	lsls	r3, r2
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
                SYSCFG->EXTICR[position >> 2U] = temp;
 80015a4:	4935      	ldr	r1, [pc, #212]	; (800167c <HAL_GPIO_Init+0x2ec>)
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                /* Clear Rising Falling edge configuration */
                temp = EXTI->RTSR;
 80015b2:	4b38      	ldr	r3, [pc, #224]	; (8001694 <HAL_GPIO_Init+0x304>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t)iocurrent);
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U) {
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x246>
                    temp |= iocurrent;
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
                }
                EXTI->RTSR = temp;
 80015d6:	4a2f      	ldr	r2, [pc, #188]	; (8001694 <HAL_GPIO_Init+0x304>)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	6093      	str	r3, [r2, #8]

                temp = EXTI->FTSR;
 80015dc:	4b2d      	ldr	r3, [pc, #180]	; (8001694 <HAL_GPIO_Init+0x304>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t)iocurrent);
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U) {
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x270>
                    temp |= iocurrent;
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
                }
                EXTI->FTSR = temp;
 8001600:	4a24      	ldr	r2, [pc, #144]	; (8001694 <HAL_GPIO_Init+0x304>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	60d3      	str	r3, [r2, #12]

                temp = EXTI->EMR;
 8001606:	4b23      	ldr	r3, [pc, #140]	; (8001694 <HAL_GPIO_Init+0x304>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t)iocurrent);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U) {
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x29a>
                    temp |= iocurrent;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
                }
                EXTI->EMR = temp;
 800162a:	4a1a      	ldr	r2, [pc, #104]	; (8001694 <HAL_GPIO_Init+0x304>)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	6053      	str	r3, [r2, #4]

                /* Clear EXTI line configuration */
                temp = EXTI->IMR;
 8001630:	4b18      	ldr	r3, [pc, #96]	; (8001694 <HAL_GPIO_Init+0x304>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t)iocurrent);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & EXTI_IT) != 0x00U) {
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x2c4>
                    temp |= iocurrent;
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
                }
                EXTI->IMR = temp;
 8001654:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <HAL_GPIO_Init+0x304>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	6013      	str	r3, [r2, #0]
    for (position = 0U; position < GPIO_NUMBER; position++) {
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3301      	adds	r3, #1
 800165e:	61fb      	str	r3, [r7, #28]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	2b0f      	cmp	r3, #15
 8001664:	f67f aea2 	bls.w	80013ac <HAL_GPIO_Init+0x1c>
            }
        }
    }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	40013800 	.word	0x40013800
 8001680:	40020000 	.word	0x40020000
 8001684:	40020400 	.word	0x40020400
 8001688:	40020800 	.word	0x40020800
 800168c:	40020c00 	.word	0x40020c00
 8001690:	40021000 	.word	0x40021000
 8001694:	40013c00 	.word	0x40013c00

08001698 <HAL_PCD_Init>:
 * @brief  Initializes the PCD according to the specified
 *         parameters in the PCD_InitTypeDef and initialize the associated handle.
 * @param  hpcd PCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef * hpcd) {
 8001698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800169a:	b08f      	sub	sp, #60	; 0x3c
 800169c:	af0a      	add	r7, sp, #40	; 0x28
 800169e:	6078      	str	r0, [r7, #4]
    USB_OTG_GlobalTypeDef * USBx;
    uint8_t i;

    /* Check the PCD handle allocation */
    if (hpcd == NULL) {
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_PCD_Init+0x12>
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e10f      	b.n	80018ca <HAL_PCD_Init+0x232>
    }

    /* Check the parameters */
    assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

    USBx = hpcd->Instance;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	60bb      	str	r3, [r7, #8]

    if (hpcd->State == HAL_PCD_STATE_RESET) {
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d106      	bne.n	80016ca <HAL_PCD_Init+0x32>
        /* Allocate lock resource and initialize it */
        hpcd->Lock = HAL_UNLOCKED;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

        /* Init the low level hardware */
        hpcd->MspInitCallback(hpcd);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC... */
        HAL_PCD_MspInit(hpcd);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f006 fa17 	bl	8007af8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
    }

    hpcd->State = HAL_PCD_STATE_BUSY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2203      	movs	r2, #3
 80016ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

    /* Disable DMA mode for FS instance */
    if ((USBx->CID & (0x1U << 8)) == 0U) {
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d102      	bne.n	80016e4 <HAL_PCD_Init+0x4c>
        hpcd->Init.dma_enable = 0U;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
    }

    /* Disable the Interrupts */
    __HAL_PCD_DISABLE(hpcd);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f002 fcfe 	bl	80040ea <USB_DisableGlobalInt>

    /*Init the Core (common init.) */
    if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK) {
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	687e      	ldr	r6, [r7, #4]
 80016f6:	466d      	mov	r5, sp
 80016f8:	f106 0410 	add.w	r4, r6, #16
 80016fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001704:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001708:	e885 0003 	stmia.w	r5, {r0, r1}
 800170c:	1d33      	adds	r3, r6, #4
 800170e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001710:	6838      	ldr	r0, [r7, #0]
 8001712:	f002 fbd5 	bl	8003ec0 <USB_CoreInit>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_PCD_Init+0x90>
        hpcd->State = HAL_PCD_STATE_ERROR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2202      	movs	r2, #2
 8001720:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0d0      	b.n	80018ca <HAL_PCD_Init+0x232>
    }

    /* Force Device Mode*/
    (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f002 fcec 	bl	800410c <USB_SetCurrentMode>

    /* Init endpoints structures */
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8001734:	2300      	movs	r3, #0
 8001736:	73fb      	strb	r3, [r7, #15]
 8001738:	e04a      	b.n	80017d0 <HAL_PCD_Init+0x138>
        /* Init ep structure */
        hpcd->IN_ep[i].is_in = 1U;
 800173a:	7bfa      	ldrb	r2, [r7, #15]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	4413      	add	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	440b      	add	r3, r1
 8001748:	333d      	adds	r3, #61	; 0x3d
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]
        hpcd->IN_ep[i].num = i;
 800174e:	7bfa      	ldrb	r2, [r7, #15]
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	4613      	mov	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	4413      	add	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	440b      	add	r3, r1
 800175c:	333c      	adds	r3, #60	; 0x3c
 800175e:	7bfa      	ldrb	r2, [r7, #15]
 8001760:	701a      	strb	r2, [r3, #0]
        hpcd->IN_ep[i].tx_fifo_num = i;
 8001762:	7bfa      	ldrb	r2, [r7, #15]
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	b298      	uxth	r0, r3
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	4413      	add	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	440b      	add	r3, r1
 8001774:	3344      	adds	r3, #68	; 0x44
 8001776:	4602      	mov	r2, r0
 8001778:	801a      	strh	r2, [r3, #0]
        /* Control until ep is activated */
        hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800177a:	7bfa      	ldrb	r2, [r7, #15]
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4413      	add	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	3340      	adds	r3, #64	; 0x40
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
        hpcd->IN_ep[i].maxpacket = 0U;
 800178e:	7bfa      	ldrb	r2, [r7, #15]
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	3348      	adds	r3, #72	; 0x48
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
        hpcd->IN_ep[i].xfer_buff = 0U;
 80017a2:	7bfa      	ldrb	r2, [r7, #15]
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4413      	add	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	334c      	adds	r3, #76	; 0x4c
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
        hpcd->IN_ep[i].xfer_len = 0U;
 80017b6:	7bfa      	ldrb	r2, [r7, #15]
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	3354      	adds	r3, #84	; 0x54
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	3301      	adds	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
 80017d0:	7bfa      	ldrb	r2, [r7, #15]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d3af      	bcc.n	800173a <HAL_PCD_Init+0xa2>
    }

    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 80017da:	2300      	movs	r3, #0
 80017dc:	73fb      	strb	r3, [r7, #15]
 80017de:	e044      	b.n	800186a <HAL_PCD_Init+0x1d2>
        hpcd->OUT_ep[i].is_in = 0U;
 80017e0:	7bfa      	ldrb	r2, [r7, #15]
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
        hpcd->OUT_ep[i].num = i;
 80017f6:	7bfa      	ldrb	r2, [r7, #15]
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4413      	add	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001808:	7bfa      	ldrb	r2, [r7, #15]
 800180a:	701a      	strb	r2, [r3, #0]
        /* Control until ep is activated */
        hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800180c:	7bfa      	ldrb	r2, [r7, #15]
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
        hpcd->OUT_ep[i].maxpacket = 0U;
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
        hpcd->OUT_ep[i].xfer_buff = 0U;
 8001838:	7bfa      	ldrb	r2, [r7, #15]
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4413      	add	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
        hpcd->OUT_ep[i].xfer_len = 0U;
 800184e:	7bfa      	ldrb	r2, [r7, #15]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4413      	add	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	3301      	adds	r3, #1
 8001868:	73fb      	strb	r3, [r7, #15]
 800186a:	7bfa      	ldrb	r2, [r7, #15]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	429a      	cmp	r2, r3
 8001872:	d3b5      	bcc.n	80017e0 <HAL_PCD_Init+0x148>
    }

    /* Init Device */
    if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK) {
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	687e      	ldr	r6, [r7, #4]
 800187c:	466d      	mov	r5, sp
 800187e:	f106 0410 	add.w	r4, r6, #16
 8001882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800188a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800188e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001892:	1d33      	adds	r3, r6, #4
 8001894:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001896:	6838      	ldr	r0, [r7, #0]
 8001898:	f002 fc84 	bl	80041a4 <USB_DevInit>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d005      	beq.n	80018ae <HAL_PCD_Init+0x216>
        hpcd->State = HAL_PCD_STATE_ERROR;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2202      	movs	r2, #2
 80018a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00d      	b.n	80018ca <HAL_PCD_Init+0x232>
    }

    hpcd->USB_Address = 0U;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    hpcd->State = HAL_PCD_STATE_READY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
        (void)HAL_PCDEx_ActivateLPM(hpcd);
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) ||                  \
          defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||                  \
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    (void)USB_DevDisconnect(hpcd->Instance);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 fdd3 	bl	800546e <USB_DevDisconnect>

    return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018d2 <HAL_PCD_Start>:
/**
 * @brief  Start the USB device
 * @param  hpcd PCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef * hpcd) {
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b084      	sub	sp, #16
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	60fb      	str	r3, [r7, #12]

    __HAL_LOCK(hpcd);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d101      	bne.n	80018ee <HAL_PCD_Start+0x1c>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e020      	b.n	8001930 <HAL_PCD_Start+0x5e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    if ((hpcd->Init.battery_charging_enable == 1U) && (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY)) {
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d109      	bne.n	8001912 <HAL_PCD_Start+0x40>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d005      	beq.n	8001912 <HAL_PCD_Start+0x40>
        /* Enable USB Transceiver */
        USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	639a      	str	r2, [r3, #56]	; 0x38
    }

    __HAL_PCD_ENABLE(hpcd);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f002 fbd6 	bl	80040c8 <USB_EnableGlobalInt>
    (void)USB_DevConnect(hpcd->Instance);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f003 fd83 	bl	800542c <USB_DevConnect>
    __HAL_UNLOCK(hpcd);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_PCD_IRQHandler>:
/**
 * @brief  Handles PCD interrupt request.
 * @param  hpcd PCD handle
 * @retval HAL status
 */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef * hpcd) {
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b08d      	sub	sp, #52	; 0x34
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	623b      	str	r3, [r7, #32]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	61fb      	str	r3, [r7, #28]
    uint32_t epnum;
    uint32_t fifoemptymsk;
    uint32_t RegVal;

    /* ensure that we are in device mode */
    if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE) {
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f003 fe41 	bl	80055d6 <USB_GetMode>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	f040 848a 	bne.w	8002270 <HAL_PCD_IRQHandler+0x938>
        /* avoid spurious interrupt */
        if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) {
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f003 fda5 	bl	80054b0 <USB_ReadInterrupts>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 8480 	beq.w	800226e <HAL_PCD_IRQHandler+0x936>
            return;
        }

        /* store current frame number */
        hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	0a1b      	lsrs	r3, r3, #8
 8001978:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS)) {
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f003 fd92 	bl	80054b0 <USB_ReadInterrupts>
 800198c:	4603      	mov	r3, r0
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b02      	cmp	r3, #2
 8001994:	d107      	bne.n	80019a6 <HAL_PCD_IRQHandler+0x6e>
            /* incorrect mode, acknowledge the interrupt */
            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	695a      	ldr	r2, [r3, #20]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f002 0202 	and.w	r2, r2, #2
 80019a4:	615a      	str	r2, [r3, #20]
        }

        /* Handle RxQLevel Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL)) {
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f003 fd80 	bl	80054b0 <USB_ReadInterrupts>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f003 0310 	and.w	r3, r3, #16
 80019b6:	2b10      	cmp	r3, #16
 80019b8:	d161      	bne.n	8001a7e <HAL_PCD_IRQHandler+0x146>
            USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	699a      	ldr	r2, [r3, #24]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0210 	bic.w	r2, r2, #16
 80019c8:	619a      	str	r2, [r3, #24]

            RegVal = USBx->GRXSTSP;
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	61bb      	str	r3, [r7, #24]

            ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	f003 020f 	and.w	r2, r3, #15
 80019d6:	4613      	mov	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4413      	add	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	3304      	adds	r3, #4
 80019e8:	617b      	str	r3, [r7, #20]

            if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_DATA_UPDT) {
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	0c5b      	lsrs	r3, r3, #17
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d124      	bne.n	8001a40 <HAL_PCD_IRQHandler+0x108>
                if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U) {
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d035      	beq.n	8001a6e <HAL_PCD_IRQHandler+0x136>
                    (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	6919      	ldr	r1, [r3, #16]
                                         (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	091b      	lsrs	r3, r3, #4
 8001a0a:	b29b      	uxth	r3, r3
                    (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	6a38      	ldr	r0, [r7, #32]
 8001a16:	f003 fbb7 	bl	8005188 <USB_ReadPacket>

                    ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	691a      	ldr	r2, [r3, #16]
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	091b      	lsrs	r3, r3, #4
 8001a22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a26:	441a      	add	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	611a      	str	r2, [r3, #16]
                    ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	6a1a      	ldr	r2, [r3, #32]
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	091b      	lsrs	r3, r3, #4
 8001a34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a38:	441a      	add	r2, r3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	621a      	str	r2, [r3, #32]
 8001a3e:	e016      	b.n	8001a6e <HAL_PCD_IRQHandler+0x136>
                }
            } else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT) {
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	0c5b      	lsrs	r3, r3, #17
 8001a44:	f003 030f 	and.w	r3, r3, #15
 8001a48:	2b06      	cmp	r3, #6
 8001a4a:	d110      	bne.n	8001a6e <HAL_PCD_IRQHandler+0x136>
                (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001a52:	2208      	movs	r2, #8
 8001a54:	4619      	mov	r1, r3
 8001a56:	6a38      	ldr	r0, [r7, #32]
 8001a58:	f003 fb96 	bl	8005188 <USB_ReadPacket>
                ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	6a1a      	ldr	r2, [r3, #32]
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	091b      	lsrs	r3, r3, #4
 8001a64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a68:	441a      	add	r2, r3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	621a      	str	r2, [r3, #32]
            } else {
                /* ... */
            }

            USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699a      	ldr	r2, [r3, #24]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0210 	orr.w	r2, r2, #16
 8001a7c:	619a      	str	r2, [r3, #24]
        }

        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT)) {
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 fd14 	bl	80054b0 <USB_ReadInterrupts>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001a92:	f040 80a7 	bne.w	8001be4 <HAL_PCD_IRQHandler+0x2ac>
            epnum = 0U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24

            /* Read in the device interrupt bits */
            ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f003 fd19 	bl	80054d6 <USB_ReadDevAllOutEpInterrupt>
 8001aa4:	62b8      	str	r0, [r7, #40]	; 0x28

            while (ep_intr != 0U) {
 8001aa6:	e099      	b.n	8001bdc <HAL_PCD_IRQHandler+0x2a4>
                if ((ep_intr & 0x1U) != 0U) {
 8001aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 808e 	beq.w	8001bd0 <HAL_PCD_IRQHandler+0x298>
                    epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	4611      	mov	r1, r2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 fd3d 	bl	800553e <USB_ReadDevOutEPInterrupt>
 8001ac4:	6138      	str	r0, [r7, #16]

                    if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC) {
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00c      	beq.n	8001aea <HAL_PCD_IRQHandler+0x1b2>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	015a      	lsls	r2, r3, #5
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001adc:	461a      	mov	r2, r3
 8001ade:	2301      	movs	r3, #1
 8001ae0:	6093      	str	r3, [r2, #8]
                        (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ae2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 fec3 	bl	8002870 <PCD_EP_OutXfrComplete_int>
                    }

                    if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) {
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00c      	beq.n	8001b0e <HAL_PCD_IRQHandler+0x1d6>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	015a      	lsls	r2, r3, #5
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	4413      	add	r3, r2
 8001afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b00:	461a      	mov	r2, r3
 8001b02:	2308      	movs	r3, #8
 8001b04:	6093      	str	r3, [r2, #8]
                        /* Class B setup phase done for previous decoded setup */
                        (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 ff99 	bl	8002a40 <PCD_EP_OutSetupPacket_int>
                    }

                    if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS) {
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d008      	beq.n	8001b2a <HAL_PCD_IRQHandler+0x1f2>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	015a      	lsls	r2, r3, #5
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	4413      	add	r3, r2
 8001b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b24:	461a      	mov	r2, r3
 8001b26:	2310      	movs	r3, #16
 8001b28:	6093      	str	r3, [r2, #8]
                    }

                    /* Clear OUT Endpoint disable interrupt */
                    if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD) {
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d030      	beq.n	8001b96 <HAL_PCD_IRQHandler+0x25e>
                        if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) ==
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3c:	2b80      	cmp	r3, #128	; 0x80
 8001b3e:	d109      	bne.n	8001b54 <HAL_PCD_IRQHandler+0x21c>
                            USB_OTG_GINTSTS_BOUTNAKEFF) {
                            USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b52:	6053      	str	r3, [r2, #4]
                        }

                        ep = &hpcd->OUT_ep[epnum];
 8001b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b56:	4613      	mov	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	3304      	adds	r3, #4
 8001b68:	617b      	str	r3, [r7, #20]

                        if (ep->is_iso_incomplete == 1U) {
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	78db      	ldrb	r3, [r3, #3]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d108      	bne.n	8001b84 <HAL_PCD_IRQHandler+0x24c>
                            ep->is_iso_incomplete = 0U;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2200      	movs	r2, #0
 8001b76:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                            hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
                            HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f006 f8b6 	bl	8007cf0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
                        }

                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	015a      	lsls	r2, r3, #5
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b90:	461a      	mov	r2, r3
 8001b92:	2302      	movs	r3, #2
 8001b94:	6093      	str	r3, [r2, #8]
                    }

                    /* Clear Status Phase Received interrupt */
                    if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) {
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	f003 0320 	and.w	r3, r3, #32
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d008      	beq.n	8001bb2 <HAL_PCD_IRQHandler+0x27a>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	015a      	lsls	r2, r3, #5
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bac:	461a      	mov	r2, r3
 8001bae:	2320      	movs	r3, #32
 8001bb0:	6093      	str	r3, [r2, #8]
                    }

                    /* Clear OUT NAK interrupt */
                    if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK) {
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d009      	beq.n	8001bd0 <HAL_PCD_IRQHandler+0x298>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	015a      	lsls	r2, r3, #5
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bce:	6093      	str	r3, [r2, #8]
                    }
                }
                epnum++;
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
                ep_intr >>= 1U;
 8001bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd8:	085b      	lsrs	r3, r3, #1
 8001bda:	62bb      	str	r3, [r7, #40]	; 0x28
            while (ep_intr != 0U) {
 8001bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f47f af62 	bne.w	8001aa8 <HAL_PCD_IRQHandler+0x170>
            }
        }

        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT)) {
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 fc61 	bl	80054b0 <USB_ReadInterrupts>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001bf8:	f040 80db 	bne.w	8001db2 <HAL_PCD_IRQHandler+0x47a>
            /* Read in the device interrupt bits */
            ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f003 fc82 	bl	800550a <USB_ReadDevAllInEpInterrupt>
 8001c06:	62b8      	str	r0, [r7, #40]	; 0x28

            epnum = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24

            while (ep_intr != 0U) {
 8001c0c:	e0cd      	b.n	8001daa <HAL_PCD_IRQHandler+0x472>
                if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80c2 	beq.w	8001d9e <HAL_PCD_IRQHandler+0x466>
                {
                    epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f003 fca8 	bl	800557a <USB_ReadDevInEPInterrupt>
 8001c2a:	6138      	str	r0, [r7, #16]

                    if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC) {
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d057      	beq.n	8001ce6 <HAL_PCD_IRQHandler+0x3ae>
                        fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	60fb      	str	r3, [r7, #12]
                        USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69f9      	ldr	r1, [r7, #28]
 8001c52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c56:	4013      	ands	r3, r2
 8001c58:	634b      	str	r3, [r1, #52]	; 0x34

                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	015a      	lsls	r2, r3, #5
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c66:	461a      	mov	r2, r3
 8001c68:	2301      	movs	r3, #1
 8001c6a:	6093      	str	r3, [r2, #8]

                        if (hpcd->Init.dma_enable == 1U) {
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d132      	bne.n	8001cda <HAL_PCD_IRQHandler+0x3a2>
                            hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c78:	4613      	mov	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	334c      	adds	r3, #76	; 0x4c
 8001c84:	6819      	ldr	r1, [r3, #0]
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4413      	add	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4403      	add	r3, r0
 8001c94:	3348      	adds	r3, #72	; 0x48
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4419      	add	r1, r3
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4403      	add	r3, r0
 8001ca8:	334c      	adds	r3, #76	; 0x4c
 8001caa:	6019      	str	r1, [r3, #0]

                            /* this is ZLP, so prepare EP0 for next setup */
                            if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U)) {
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d113      	bne.n	8001cda <HAL_PCD_IRQHandler+0x3a2>
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	3354      	adds	r3, #84	; 0x54
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d108      	bne.n	8001cda <HAL_PCD_IRQHandler+0x3a2>
                                /* prepare to rx more setup packets */
                                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	f003 fcaf 	bl	8005638 <USB_EP0_OutStart>
                        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                        hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
                        HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	4619      	mov	r1, r3
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f005 ff8a 	bl	8007bfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
                    }
                    if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC) {
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_PCD_IRQHandler+0x3ca>
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	015a      	lsls	r2, r3, #5
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	2308      	movs	r3, #8
 8001d00:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE) {
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	f003 0310 	and.w	r3, r3, #16
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d008      	beq.n	8001d1e <HAL_PCD_IRQHandler+0x3e6>
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	015a      	lsls	r2, r3, #5
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	4413      	add	r3, r2
 8001d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d18:	461a      	mov	r2, r3
 8001d1a:	2310      	movs	r3, #16
 8001d1c:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE) {
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d008      	beq.n	8001d3a <HAL_PCD_IRQHandler+0x402>
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	015a      	lsls	r2, r3, #5
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	4413      	add	r3, r2
 8001d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d34:	461a      	mov	r2, r3
 8001d36:	2340      	movs	r3, #64	; 0x40
 8001d38:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD) {
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d023      	beq.n	8001d8c <HAL_PCD_IRQHandler+0x454>
                        (void)USB_FlushTxFifo(USBx, epnum);
 8001d44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d46:	6a38      	ldr	r0, [r7, #32]
 8001d48:	f002 fb90 	bl	800446c <USB_FlushTxFifo>

                        ep = &hpcd->IN_ep[epnum];
 8001d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4e:	4613      	mov	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4413      	add	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	3338      	adds	r3, #56	; 0x38
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	617b      	str	r3, [r7, #20]

                        if (ep->is_iso_incomplete == 1U) {
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	78db      	ldrb	r3, [r3, #3]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d108      	bne.n	8001d7a <HAL_PCD_IRQHandler+0x442>
                            ep->is_iso_incomplete = 0U;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                            hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
                            HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	4619      	mov	r1, r3
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f005 ffcd 	bl	8007d14 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
                        }

                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	015a      	lsls	r2, r3, #5
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	4413      	add	r3, r2
 8001d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d86:	461a      	mov	r2, r3
 8001d88:	2302      	movs	r3, #2
 8001d8a:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE) {
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_PCD_IRQHandler+0x466>
                        (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001d96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 fcdb 	bl	8002754 <PCD_WriteEmptyTxFifo>
                    }
                }
                epnum++;
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	3301      	adds	r3, #1
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
                ep_intr >>= 1U;
 8001da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da6:	085b      	lsrs	r3, r3, #1
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
            while (ep_intr != 0U) {
 8001daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f47f af2e 	bne.w	8001c0e <HAL_PCD_IRQHandler+0x2d6>
            }
        }

        /* Handle Resume Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT)) {
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f003 fb7a 	bl	80054b0 <USB_ReadInterrupts>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001dc6:	d122      	bne.n	8001e0e <HAL_PCD_IRQHandler+0x4d6>
            /* Clear the Remote Wake-up Signaling */
            USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	69fa      	ldr	r2, [r7, #28]
 8001dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dd6:	f023 0301 	bic.w	r3, r3, #1
 8001dda:	6053      	str	r3, [r2, #4]

            if (hpcd->LPM_State == LPM_L1) {
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d108      	bne.n	8001df8 <HAL_PCD_IRQHandler+0x4c0>
                hpcd->LPM_State = LPM_L0;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
                HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001dee:	2100      	movs	r1, #0
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 fec3 	bl	8002b7c <HAL_PCDEx_LPM_Callback>
 8001df6:	e002      	b.n	8001dfe <HAL_PCD_IRQHandler+0x4c6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            } else {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->ResumeCallback(hpcd);
#else
                HAL_PCD_ResumeCallback(hpcd);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f005 ff6b 	bl	8007cd4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695a      	ldr	r2, [r3, #20]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e0c:	615a      	str	r2, [r3, #20]
        }

        /* Handle Suspend Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP)) {
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 fb4c 	bl	80054b0 <USB_ReadInterrupts>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e22:	d112      	bne.n	8001e4a <HAL_PCD_IRQHandler+0x512>
            if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS) {
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d102      	bne.n	8001e3a <HAL_PCD_IRQHandler+0x502>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->SuspendCallback(hpcd);
#else
                HAL_PCD_SuspendCallback(hpcd);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f005 ff27 	bl	8007c88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	695a      	ldr	r2, [r3, #20]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e48:	615a      	str	r2, [r3, #20]
        }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) ||                  \
          defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||                  \
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
        /* Handle Reset Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST)) {
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f003 fb2e 	bl	80054b0 <USB_ReadInterrupts>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e5e:	f040 80b7 	bne.w	8001fd0 <HAL_PCD_IRQHandler+0x698>
            USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	6053      	str	r3, [r2, #4]
            (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2110      	movs	r1, #16
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f002 faf5 	bl	800446c <USB_FlushTxFifo>

            for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8001e82:	2300      	movs	r3, #0
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e86:	e046      	b.n	8001f16 <HAL_PCD_IRQHandler+0x5de>
                USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8a:	015a      	lsls	r2, r3, #5
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	4413      	add	r3, r2
 8001e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e94:	461a      	mov	r2, r3
 8001e96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e9a:	6093      	str	r3, [r2, #8]
                USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eac:	0151      	lsls	r1, r2, #5
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	440a      	add	r2, r1
 8001eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001eb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001eba:	6013      	str	r3, [r2, #0]
                USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebe:	015a      	lsls	r2, r3, #5
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ec8:	461a      	mov	r2, r3
 8001eca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ece:	6093      	str	r3, [r2, #8]
                USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed2:	015a      	lsls	r2, r3, #5
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ee0:	0151      	lsls	r1, r2, #5
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	440a      	add	r2, r1
 8001ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001eea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001eee:	6013      	str	r3, [r2, #0]
                USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef2:	015a      	lsls	r2, r3, #5
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f00:	0151      	lsls	r1, r2, #5
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	440a      	add	r2, r1
 8001f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f0e:	6013      	str	r3, [r2, #0]
            for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8001f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f12:	3301      	adds	r3, #1
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d3b3      	bcc.n	8001e88 <HAL_PCD_IRQHandler+0x550>
            }
            USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	69fa      	ldr	r2, [r7, #28]
 8001f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f2e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001f32:	61d3      	str	r3, [r2, #28]

            if (hpcd->Init.use_dedicated_ep1 != 0U) {
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d016      	beq.n	8001f6a <HAL_PCD_IRQHandler+0x632>
                USBx_DEVICE->DOUTEP1MSK |=
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f46:	69fa      	ldr	r2, [r7, #28]
 8001f48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f4c:	f043 030b 	orr.w	r3, r3, #11
 8001f50:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                    USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM;

                USBx_DEVICE->DINEP1MSK |=
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5c:	69fa      	ldr	r2, [r7, #28]
 8001f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f62:	f043 030b 	orr.w	r3, r3, #11
 8001f66:	6453      	str	r3, [r2, #68]	; 0x44
 8001f68:	e015      	b.n	8001f96 <HAL_PCD_IRQHandler+0x65e>
                    USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM;
            } else {
                USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM |
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f7c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001f80:	6153      	str	r3, [r2, #20]
                                        USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM |
                                        USB_OTG_DOEPMSK_NAKM;

                USBx_DEVICE->DIEPMSK |=
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	69fa      	ldr	r2, [r7, #28]
 8001f8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f90:	f043 030b 	orr.w	r3, r3, #11
 8001f94:	6113      	str	r3, [r2, #16]
                    USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM;
            }

            /* Set Default Address to 0 */
            USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fa4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001fa8:	6013      	str	r3, [r2, #0]

            /* setup EP0 to receive SETUP packets */
            (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	b2d9      	uxtb	r1, r3
                                   (uint8_t *)hpcd->Setup);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
            (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f003 fb3c 	bl	8005638 <USB_EP0_OutStart>

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001fce:	615a      	str	r2, [r3, #20]
        }

        /* Handle Enumeration done Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE)) {
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f003 fa6b 	bl	80054b0 <USB_ReadInterrupts>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fe4:	d124      	bne.n	8002030 <HAL_PCD_IRQHandler+0x6f8>
            (void)USB_ActivateSetup(hpcd->Instance);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f003 fb01 	bl	80055f2 <USB_ActivateSetup>
            hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f002 fab6 	bl	8004566 <USB_GetDevSpeed>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	60da      	str	r2, [r3, #12]

            /* Set USB Turnaround time */
            (void)USB_SetTurnaroundTime(hpcd->Instance, HAL_RCC_GetHCLKFreq(),
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681c      	ldr	r4, [r3, #0]
 8002006:	f001 f9e9 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 800200a:	4601      	mov	r1, r0
                                        (uint8_t)hpcd->Init.speed);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
            (void)USB_SetTurnaroundTime(hpcd->Instance, HAL_RCC_GetHCLKFreq(),
 8002010:	b2db      	uxtb	r3, r3
 8002012:	461a      	mov	r2, r3
 8002014:	4620      	mov	r0, r4
 8002016:	f001 ffb5 	bl	8003f84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->ResetCallback(hpcd);
#else
            HAL_PCD_ResetCallback(hpcd);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f005 fe15 	bl	8007c4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800202e:	615a      	str	r2, [r3, #20]
        }

        /* Handle SOF Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF)) {
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f003 fa3b 	bl	80054b0 <USB_ReadInterrupts>
 800203a:	4603      	mov	r3, r0
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b08      	cmp	r3, #8
 8002042:	d10a      	bne.n	800205a <HAL_PCD_IRQHandler+0x722>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->SOFCallback(hpcd);
#else
            HAL_PCD_SOFCallback(hpcd);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f005 fdf2 	bl	8007c2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695a      	ldr	r2, [r3, #20]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f002 0208 	and.w	r2, r2, #8
 8002058:	615a      	str	r2, [r3, #20]
        }

        /* Handle Global OUT NAK effective Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF)) {
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f003 fa26 	bl	80054b0 <USB_ReadInterrupts>
 8002064:	4603      	mov	r3, r0
 8002066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206a:	2b80      	cmp	r3, #128	; 0x80
 800206c:	d122      	bne.n	80020b4 <HAL_PCD_IRQHandler+0x77c>
            USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	619a      	str	r2, [r3, #24]

            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 800207a:	2301      	movs	r3, #1
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
 800207e:	e014      	b.n	80020aa <HAL_PCD_IRQHandler+0x772>
                if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U) {
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002084:	4613      	mov	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4413      	add	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d105      	bne.n	80020a4 <HAL_PCD_IRQHandler+0x76c>
                    /* Abort current transaction and disable the EP */
                    (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	b2db      	uxtb	r3, r3
 800209c:	4619      	mov	r1, r3
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fb27 	bl	80026f2 <HAL_PCD_EP_Abort>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	3301      	adds	r3, #1
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d3e5      	bcc.n	8002080 <HAL_PCD_IRQHandler+0x748>
                }
            }
        }

        /* Handle Incomplete ISO IN Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR)) {
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f003 f9f9 	bl	80054b0 <USB_ReadInterrupts>
 80020be:	4603      	mov	r3, r0
 80020c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020c8:	d13b      	bne.n	8002142 <HAL_PCD_IRQHandler+0x80a>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 80020ca:	2301      	movs	r3, #1
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
 80020ce:	e02b      	b.n	8002128 <HAL_PCD_IRQHandler+0x7f0>
                RegVal = USBx_INEP(epnum)->DIEPCTL;
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	015a      	lsls	r2, r3, #5
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	61bb      	str	r3, [r7, #24]

                if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	3340      	adds	r3, #64	; 0x40
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d115      	bne.n	8002122 <HAL_PCD_IRQHandler+0x7ea>
                    ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)) {
 80020f6:	69bb      	ldr	r3, [r7, #24]
                if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	da12      	bge.n	8002122 <HAL_PCD_IRQHandler+0x7ea>
                    hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002100:	4613      	mov	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	333f      	adds	r3, #63	; 0x3f
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]

                    /* Abort current transaction and disable the EP */
                    (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	b2db      	uxtb	r3, r3
 8002114:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002118:	b2db      	uxtb	r3, r3
 800211a:	4619      	mov	r1, r3
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fae8 	bl	80026f2 <HAL_PCD_EP_Abort>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	3301      	adds	r3, #1
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212e:	429a      	cmp	r2, r3
 8002130:	d3ce      	bcc.n	80020d0 <HAL_PCD_IRQHandler+0x798>
                }
            }

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	695a      	ldr	r2, [r3, #20]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002140:	615a      	str	r2, [r3, #20]
        }

        /* Handle Incomplete ISO OUT Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT)) {
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f003 f9b2 	bl	80054b0 <USB_ReadInterrupts>
 800214c:	4603      	mov	r3, r0
 800214e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002152:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002156:	d155      	bne.n	8002204 <HAL_PCD_IRQHandler+0x8cc>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8002158:	2301      	movs	r3, #1
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
 800215c:	e045      	b.n	80021ea <HAL_PCD_IRQHandler+0x8b2>
                RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	4413      	add	r3, r2
 8002166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	61bb      	str	r3, [r7, #24]

                if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d12e      	bne.n	80021e4 <HAL_PCD_IRQHandler+0x8ac>
                    ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002186:	69bb      	ldr	r3, [r7, #24]
                if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002188:	2b00      	cmp	r3, #0
 800218a:	da2b      	bge.n	80021e4 <HAL_PCD_IRQHandler+0x8ac>
                    ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U))) {
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002198:	f003 0301 	and.w	r3, r3, #1
                    ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800219c:	429a      	cmp	r2, r3
 800219e:	d121      	bne.n	80021e4 <HAL_PCD_IRQHandler+0x8ac>
                    hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]

                    USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	619a      	str	r2, [r3, #24]

                    if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U) {
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10a      	bne.n	80021e4 <HAL_PCD_IRQHandler+0x8ac>
                        USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	69fa      	ldr	r2, [r7, #28]
 80021d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021e0:	6053      	str	r3, [r2, #4]
                        break;
 80021e2:	e007      	b.n	80021f4 <HAL_PCD_IRQHandler+0x8bc>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	3301      	adds	r3, #1
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d3b4      	bcc.n	800215e <HAL_PCD_IRQHandler+0x826>
                    }
                }
            }

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695a      	ldr	r2, [r3, #20]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002202:	615a      	str	r2, [r3, #20]
        }

        /* Handle Connection event Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT)) {
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f003 f951 	bl	80054b0 <USB_ReadInterrupts>
 800220e:	4603      	mov	r3, r0
 8002210:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002218:	d10a      	bne.n	8002230 <HAL_PCD_IRQHandler+0x8f8>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->ConnectCallback(hpcd);
#else
            HAL_PCD_ConnectCallback(hpcd);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f005 fd8c 	bl	8007d38 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800222e:	615a      	str	r2, [r3, #20]
        }

        /* Handle Disconnection event Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT)) {
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f003 f93b 	bl	80054b0 <USB_ReadInterrupts>
 800223a:	4603      	mov	r3, r0
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b04      	cmp	r3, #4
 8002242:	d115      	bne.n	8002270 <HAL_PCD_IRQHandler+0x938>
            RegVal = hpcd->Instance->GOTGINT;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	61bb      	str	r3, [r7, #24]

            if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET) {
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <HAL_PCD_IRQHandler+0x924>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->DisconnectCallback(hpcd);
#else
                HAL_PCD_DisconnectCallback(hpcd);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f005 fd7c 	bl	8007d54 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            hpcd->Instance->GOTGINT |= RegVal;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6859      	ldr	r1, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	430a      	orrs	r2, r1
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	e000      	b.n	8002270 <HAL_PCD_IRQHandler+0x938>
            return;
 800226e:	bf00      	nop
        }
    }
}
 8002270:	3734      	adds	r7, #52	; 0x34
 8002272:	46bd      	mov	sp, r7
 8002274:	bd90      	pop	{r4, r7, pc}

08002276 <HAL_PCD_SetAddress>:
 * @brief  Set the USB Device address.
 * @param  hpcd PCD handle
 * @param  address new device address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef * hpcd, uint8_t address) {
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	460b      	mov	r3, r1
 8002280:	70fb      	strb	r3, [r7, #3]
    __HAL_LOCK(hpcd);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_PCD_SetAddress+0x1a>
 800228c:	2302      	movs	r3, #2
 800228e:	e013      	b.n	80022b8 <HAL_PCD_SetAddress+0x42>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
    hpcd->USB_Address = address;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    (void)USB_SetDevAddress(hpcd->Instance, address);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f003 f899 	bl	80053e0 <USB_SetDevAddress>
    __HAL_UNLOCK(hpcd);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_PCD_EP_Open>:
 * @param  ep_mps endpoint max packet size
 * @param  ep_type endpoint type
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef * hpcd, uint8_t ep_addr, uint16_t ep_mps,
                                  uint8_t ep_type) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	4608      	mov	r0, r1
 80022ca:	4611      	mov	r1, r2
 80022cc:	461a      	mov	r2, r3
 80022ce:	4603      	mov	r3, r0
 80022d0:	70fb      	strb	r3, [r7, #3]
 80022d2:	460b      	mov	r3, r1
 80022d4:	803b      	strh	r3, [r7, #0]
 80022d6:	4613      	mov	r3, r2
 80022d8:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef ret = HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	72fb      	strb	r3, [r7, #11]
    PCD_EPTypeDef * ep;

    if ((ep_addr & 0x80U) == 0x80U) {
 80022de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	da0f      	bge.n	8002306 <HAL_PCD_EP_Open+0x46>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	f003 020f 	and.w	r2, r3, #15
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	3338      	adds	r3, #56	; 0x38
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	3304      	adds	r3, #4
 80022fc:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2201      	movs	r2, #1
 8002302:	705a      	strb	r2, [r3, #1]
 8002304:	e00f      	b.n	8002326 <HAL_PCD_EP_Open+0x66>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	f003 020f 	and.w	r2, r3, #15
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	4413      	add	r3, r2
 800231c:	3304      	adds	r3, #4
 800231e:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	705a      	strb	r2, [r3, #1]
    }

    ep->num = ep_addr & EP_ADDR_MSK;
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	f003 030f 	and.w	r3, r3, #15
 800232c:	b2da      	uxtb	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	701a      	strb	r2, [r3, #0]
    ep->maxpacket = ep_mps;
 8002332:	883a      	ldrh	r2, [r7, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	60da      	str	r2, [r3, #12]
    ep->type = ep_type;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	78ba      	ldrb	r2, [r7, #2]
 800233c:	711a      	strb	r2, [r3, #4]

    if (ep->is_in != 0U) {
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	785b      	ldrb	r3, [r3, #1]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d004      	beq.n	8002350 <HAL_PCD_EP_Open+0x90>
        /* Assign a Tx FIFO */
        ep->tx_fifo_num = ep->num;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	811a      	strh	r2, [r3, #8]
    }
    /* Set initial data PID. */
    if (ep_type == EP_TYPE_BULK) {
 8002350:	78bb      	ldrb	r3, [r7, #2]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d102      	bne.n	800235c <HAL_PCD_EP_Open+0x9c>
        ep->data_pid_start = 0U;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	715a      	strb	r2, [r3, #5]
    }

    __HAL_LOCK(hpcd);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_PCD_EP_Open+0xaa>
 8002366:	2302      	movs	r3, #2
 8002368:	e00e      	b.n	8002388 <HAL_PCD_EP_Open+0xc8>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
    (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68f9      	ldr	r1, [r7, #12]
 8002378:	4618      	mov	r0, r3
 800237a:	f002 f919 	bl	80045b0 <USB_ActivateEndpoint>
    __HAL_UNLOCK(hpcd);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    return ret;
 8002386:	7afb      	ldrb	r3, [r7, #11]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_PCD_EP_Close>:
 * @brief  Deactivate an endpoint.
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	70fb      	strb	r3, [r7, #3]
    PCD_EPTypeDef * ep;

    if ((ep_addr & 0x80U) == 0x80U) {
 800239c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	da0f      	bge.n	80023c4 <HAL_PCD_EP_Close+0x34>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	f003 020f 	and.w	r2, r3, #15
 80023aa:	4613      	mov	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4413      	add	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	3338      	adds	r3, #56	; 0x38
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	4413      	add	r3, r2
 80023b8:	3304      	adds	r3, #4
 80023ba:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2201      	movs	r2, #1
 80023c0:	705a      	strb	r2, [r3, #1]
 80023c2:	e00f      	b.n	80023e4 <HAL_PCD_EP_Close+0x54>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	f003 020f 	and.w	r2, r3, #15
 80023ca:	4613      	mov	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4413      	add	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	3304      	adds	r3, #4
 80023dc:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	705a      	strb	r2, [r3, #1]
    }
    ep->num = ep_addr & EP_ADDR_MSK;
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	701a      	strb	r2, [r3, #0]

    __HAL_LOCK(hpcd);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_PCD_EP_Close+0x6e>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e00e      	b.n	800241c <HAL_PCD_EP_Close+0x8c>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
    (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68f9      	ldr	r1, [r7, #12]
 800240c:	4618      	mov	r0, r3
 800240e:	f002 f957 	bl	80046c0 <USB_DeactivateEndpoint>
    __HAL_UNLOCK(hpcd);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
    return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_PCD_EP_Receive>:
 * @param  pBuf pointer to the reception buffer
 * @param  len amount of data to be received
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef * hpcd, uint8_t ep_addr, uint8_t * pBuf,
                                     uint32_t len) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	460b      	mov	r3, r1
 8002432:	72fb      	strb	r3, [r7, #11]
    PCD_EPTypeDef * ep;

    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002434:	7afb      	ldrb	r3, [r7, #11]
 8002436:	f003 020f 	and.w	r2, r3, #15
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4413      	add	r3, r2
 800244a:	3304      	adds	r3, #4
 800244c:	617b      	str	r3, [r7, #20]

    /*setup and start the Xfer */
    ep->xfer_buff = pBuf;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	611a      	str	r2, [r3, #16]
    ep->xfer_len = len;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	619a      	str	r2, [r3, #24]
    ep->xfer_count = 0U;
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2200      	movs	r2, #0
 800245e:	621a      	str	r2, [r3, #32]
    ep->is_in = 0U;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2200      	movs	r2, #0
 8002464:	705a      	strb	r2, [r3, #1]
    ep->num = ep_addr & EP_ADDR_MSK;
 8002466:	7afb      	ldrb	r3, [r7, #11]
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	b2da      	uxtb	r2, r3
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	701a      	strb	r2, [r3, #0]

    if (hpcd->Init.dma_enable == 1U) {
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d102      	bne.n	8002480 <HAL_PCD_EP_Receive+0x5c>
        ep->dma_addr = (uint32_t)pBuf;
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	615a      	str	r2, [r3, #20]
    }

    if ((ep_addr & EP_ADDR_MSK) == 0U) {
 8002480:	7afb      	ldrb	r3, [r7, #11]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_PCD_EP_Receive+0x7a>
        (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	6979      	ldr	r1, [r7, #20]
 8002498:	f002 fc36 	bl	8004d08 <USB_EP0StartXfer>
 800249c:	e008      	b.n	80024b0 <HAL_PCD_EP_Receive+0x8c>
    } else {
        (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	6979      	ldr	r1, [r7, #20]
 80024ac:	f002 f9e4 	bl	8004878 <USB_EPStartXfer>
    }

    return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_PCD_EP_GetRxCount>:
 * @brief  Get Received Data Size
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval Data Size
 */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	460b      	mov	r3, r1
 80024c4:	70fb      	strb	r3, [r7, #3]
    return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	f003 020f 	and.w	r2, r3, #15
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80024dc:	681b      	ldr	r3, [r3, #0]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <HAL_PCD_EP_Transmit>:
 * @param  pBuf pointer to the transmission buffer
 * @param  len amount of data to be sent
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef * hpcd, uint8_t ep_addr, uint8_t * pBuf,
                                      uint32_t len) {
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b086      	sub	sp, #24
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	603b      	str	r3, [r7, #0]
 80024f6:	460b      	mov	r3, r1
 80024f8:	72fb      	strb	r3, [r7, #11]
    PCD_EPTypeDef * ep;

    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024fa:	7afb      	ldrb	r3, [r7, #11]
 80024fc:	f003 020f 	and.w	r2, r3, #15
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	3338      	adds	r3, #56	; 0x38
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4413      	add	r3, r2
 800250e:	3304      	adds	r3, #4
 8002510:	617b      	str	r3, [r7, #20]

    /*setup and start the Xfer */
    ep->xfer_buff = pBuf;
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	611a      	str	r2, [r3, #16]
    ep->xfer_len = len;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	619a      	str	r2, [r3, #24]
    ep->xfer_count = 0U;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2200      	movs	r2, #0
 8002522:	621a      	str	r2, [r3, #32]
    ep->is_in = 1U;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	2201      	movs	r2, #1
 8002528:	705a      	strb	r2, [r3, #1]
    ep->num = ep_addr & EP_ADDR_MSK;
 800252a:	7afb      	ldrb	r3, [r7, #11]
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	b2da      	uxtb	r2, r3
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	701a      	strb	r2, [r3, #0]

    if (hpcd->Init.dma_enable == 1U) {
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d102      	bne.n	8002544 <HAL_PCD_EP_Transmit+0x5a>
        ep->dma_addr = (uint32_t)pBuf;
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	615a      	str	r2, [r3, #20]
    }

    if ((ep_addr & EP_ADDR_MSK) == 0U) {
 8002544:	7afb      	ldrb	r3, [r7, #11]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <HAL_PCD_EP_Transmit+0x78>
        (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	461a      	mov	r2, r3
 800255a:	6979      	ldr	r1, [r7, #20]
 800255c:	f002 fbd4 	bl	8004d08 <USB_EP0StartXfer>
 8002560:	e008      	b.n	8002574 <HAL_PCD_EP_Transmit+0x8a>
    } else {
        (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	461a      	mov	r2, r3
 800256e:	6979      	ldr	r1, [r7, #20]
 8002570:	f002 f982 	bl	8004878 <USB_EPStartXfer>
    }

    return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_PCD_EP_SetStall>:
 * @brief  Set a STALL condition over an endpoint
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	460b      	mov	r3, r1
 8002588:	70fb      	strb	r3, [r7, #3]
    PCD_EPTypeDef * ep;

    if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints) {
 800258a:	78fb      	ldrb	r3, [r7, #3]
 800258c:	f003 020f 	and.w	r2, r3, #15
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	429a      	cmp	r2, r3
 8002596:	d901      	bls.n	800259c <HAL_PCD_EP_SetStall+0x1e>
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e050      	b.n	800263e <HAL_PCD_EP_SetStall+0xc0>
    }

    if ((0x80U & ep_addr) == 0x80U) {
 800259c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	da0f      	bge.n	80025c4 <HAL_PCD_EP_SetStall+0x46>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	f003 020f 	and.w	r2, r3, #15
 80025aa:	4613      	mov	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	3338      	adds	r3, #56	; 0x38
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	4413      	add	r3, r2
 80025b8:	3304      	adds	r3, #4
 80025ba:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2201      	movs	r2, #1
 80025c0:	705a      	strb	r2, [r3, #1]
 80025c2:	e00d      	b.n	80025e0 <HAL_PCD_EP_SetStall+0x62>
    } else {
        ep = &hpcd->OUT_ep[ep_addr];
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	3304      	adds	r3, #4
 80025d8:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	705a      	strb	r2, [r3, #1]
    }

    ep->is_stall = 1U;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2201      	movs	r2, #1
 80025e4:	709a      	strb	r2, [r3, #2]
    ep->num = ep_addr & EP_ADDR_MSK;
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	701a      	strb	r2, [r3, #0]

    __HAL_LOCK(hpcd);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_PCD_EP_SetStall+0x82>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e01e      	b.n	800263e <HAL_PCD_EP_SetStall+0xc0>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    (void)USB_EPSetStall(hpcd->Instance, ep);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68f9      	ldr	r1, [r7, #12]
 800260e:	4618      	mov	r0, r3
 8002610:	f002 fe12 	bl	8005238 <USB_EPSetStall>

    if ((ep_addr & EP_ADDR_MSK) == 0U) {
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10a      	bne.n	8002634 <HAL_PCD_EP_SetStall+0xb6>
        (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	b2d9      	uxtb	r1, r3
                               (uint8_t *)hpcd->Setup);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
        (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800262e:	461a      	mov	r2, r3
 8002630:	f003 f802 	bl	8005638 <USB_EP0_OutStart>
    }

    __HAL_UNLOCK(hpcd);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_PCD_EP_ClrStall>:
 * @brief  Clear a STALL condition over in an endpoint
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 8002646:	b580      	push	{r7, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	460b      	mov	r3, r1
 8002650:	70fb      	strb	r3, [r7, #3]
    PCD_EPTypeDef * ep;

    if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints) {
 8002652:	78fb      	ldrb	r3, [r7, #3]
 8002654:	f003 020f 	and.w	r2, r3, #15
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	429a      	cmp	r2, r3
 800265e:	d901      	bls.n	8002664 <HAL_PCD_EP_ClrStall+0x1e>
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e042      	b.n	80026ea <HAL_PCD_EP_ClrStall+0xa4>
    }

    if ((0x80U & ep_addr) == 0x80U) {
 8002664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002668:	2b00      	cmp	r3, #0
 800266a:	da0f      	bge.n	800268c <HAL_PCD_EP_ClrStall+0x46>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	f003 020f 	and.w	r2, r3, #15
 8002672:	4613      	mov	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4413      	add	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	3338      	adds	r3, #56	; 0x38
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	4413      	add	r3, r2
 8002680:	3304      	adds	r3, #4
 8002682:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2201      	movs	r2, #1
 8002688:	705a      	strb	r2, [r3, #1]
 800268a:	e00f      	b.n	80026ac <HAL_PCD_EP_ClrStall+0x66>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	f003 020f 	and.w	r2, r3, #15
 8002692:	4613      	mov	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	3304      	adds	r3, #4
 80026a4:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	705a      	strb	r2, [r3, #1]
    }

    ep->is_stall = 0U;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	709a      	strb	r2, [r3, #2]
    ep->num = ep_addr & EP_ADDR_MSK;
 80026b2:	78fb      	ldrb	r3, [r7, #3]
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	701a      	strb	r2, [r3, #0]

    __HAL_LOCK(hpcd);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_PCD_EP_ClrStall+0x86>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e00e      	b.n	80026ea <HAL_PCD_EP_ClrStall+0xa4>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
    (void)USB_EPClearStall(hpcd->Instance, ep);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68f9      	ldr	r1, [r7, #12]
 80026da:	4618      	mov	r0, r3
 80026dc:	f002 fe1a 	bl	8005314 <USB_EPClearStall>
    __HAL_UNLOCK(hpcd);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_PCD_EP_Abort>:
 * @brief  Abort an USB EP transaction.
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	460b      	mov	r3, r1
 80026fc:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef ret;
    PCD_EPTypeDef * ep;

    if ((0x80U & ep_addr) == 0x80U) {
 80026fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002702:	2b00      	cmp	r3, #0
 8002704:	da0c      	bge.n	8002720 <HAL_PCD_EP_Abort+0x2e>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002706:	78fb      	ldrb	r3, [r7, #3]
 8002708:	f003 020f 	and.w	r2, r3, #15
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	3338      	adds	r3, #56	; 0x38
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	3304      	adds	r3, #4
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	e00c      	b.n	800273a <HAL_PCD_EP_Abort+0x48>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	f003 020f 	and.w	r2, r3, #15
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	3304      	adds	r3, #4
 8002738:	60fb      	str	r3, [r7, #12]
    }

    /* Stop Xfer */
    ret = USB_EPStopXfer(hpcd->Instance, ep);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68f9      	ldr	r1, [r7, #12]
 8002740:	4618      	mov	r0, r3
 8002742:	f002 fc39 	bl	8004fb8 <USB_EPStopXfer>
 8002746:	4603      	mov	r3, r0
 8002748:	72fb      	strb	r3, [r7, #11]

    return ret;
 800274a:	7afb      	ldrb	r3, [r7, #11]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <PCD_WriteEmptyTxFifo>:
 * @brief  Check FIFO for the next packet to be loaded.
 * @param  hpcd PCD handle
 * @param  epnum endpoint number
 * @retval HAL status
 */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef * hpcd, uint32_t epnum) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b08a      	sub	sp, #40	; 0x28
 8002758:	af02      	add	r7, sp, #8
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	617b      	str	r3, [r7, #20]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	613b      	str	r3, [r7, #16]
    USB_OTG_EPTypeDef * ep;
    uint32_t len;
    uint32_t len32b;
    uint32_t fifoemptymsk;

    ep = &hpcd->IN_ep[epnum];
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	4613      	mov	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	3338      	adds	r3, #56	; 0x38
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	4413      	add	r3, r2
 8002778:	3304      	adds	r3, #4
 800277a:	60fb      	str	r3, [r7, #12]

    if (ep->xfer_count > ep->xfer_len) {
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a1a      	ldr	r2, [r3, #32]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	429a      	cmp	r2, r3
 8002786:	d901      	bls.n	800278c <PCD_WriteEmptyTxFifo+0x38>
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e06c      	b.n	8002866 <PCD_WriteEmptyTxFifo+0x112>
    }

    len = ep->xfer_len - ep->xfer_count;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	699a      	ldr	r2, [r3, #24]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket) {
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d902      	bls.n	80027a8 <PCD_WriteEmptyTxFifo+0x54>
        len = ep->maxpacket;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	61fb      	str	r3, [r7, #28]
    }

    len32b = (len + 3U) / 4U;
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	3303      	adds	r3, #3
 80027ac:	089b      	lsrs	r3, r3, #2
 80027ae:	61bb      	str	r3, [r7, #24]

    while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027b0:	e02b      	b.n	800280a <PCD_WriteEmptyTxFifo+0xb6>
           (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U)) {
        /* Write the FIFO */
        len = ep->xfer_len - ep->xfer_count;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	61fb      	str	r3, [r7, #28]

        if (len > ep->maxpacket) {
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d902      	bls.n	80027ce <PCD_WriteEmptyTxFifo+0x7a>
            len = ep->maxpacket;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	61fb      	str	r3, [r7, #28]
        }
        len32b = (len + 3U) / 4U;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3303      	adds	r3, #3
 80027d2:	089b      	lsrs	r3, r3, #2
 80027d4:	61bb      	str	r3, [r7, #24]

        (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6919      	ldr	r1, [r3, #16]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	b298      	uxth	r0, r3
                              (uint8_t)hpcd->Init.dma_enable);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
        (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	4603      	mov	r3, r0
 80027ec:	6978      	ldr	r0, [r7, #20]
 80027ee:	f002 fc8d 	bl	800510c <USB_WritePacket>

        ep->xfer_buff += len;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	691a      	ldr	r2, [r3, #16]
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	441a      	add	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	611a      	str	r2, [r3, #16]
        ep->xfer_count += len;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a1a      	ldr	r2, [r3, #32]
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	441a      	add	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	621a      	str	r2, [r3, #32]
    while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4413      	add	r3, r2
 8002812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	b29b      	uxth	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	429a      	cmp	r2, r3
 800281e:	d809      	bhi.n	8002834 <PCD_WriteEmptyTxFifo+0xe0>
           (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U)) {
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a1a      	ldr	r2, [r3, #32]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	699b      	ldr	r3, [r3, #24]
    while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002828:	429a      	cmp	r2, r3
 800282a:	d203      	bcs.n	8002834 <PCD_WriteEmptyTxFifo+0xe0>
           (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U)) {
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1be      	bne.n	80027b2 <PCD_WriteEmptyTxFifo+0x5e>
    }

    if (ep->xfer_len <= ep->xfer_count) {
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	699a      	ldr	r2, [r3, #24]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	429a      	cmp	r2, r3
 800283e:	d811      	bhi.n	8002864 <PCD_WriteEmptyTxFifo+0x110>
        fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	2201      	movs	r2, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	60bb      	str	r3, [r7, #8]
        USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	43db      	mvns	r3, r3
 800285a:	6939      	ldr	r1, [r7, #16]
 800285c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002860:	4013      	ands	r3, r2
 8002862:	634b      	str	r3, [r1, #52]	; 0x34
    }

    return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3720      	adds	r7, #32
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <PCD_EP_OutXfrComplete_int>:
 * @brief  process EP OUT transfer complete interrupt.
 * @param  hpcd PCD handle
 * @param  epnum endpoint number
 * @retval HAL status
 */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef * hpcd, uint32_t epnum) {
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
    USB_OTG_EPTypeDef * ep;
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	61fb      	str	r3, [r7, #28]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	61bb      	str	r3, [r7, #24]
    uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	333c      	adds	r3, #60	; 0x3c
 8002888:	3304      	adds	r3, #4
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	617b      	str	r3, [r7, #20]
    uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	015a      	lsls	r2, r3, #5
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	4413      	add	r3, r2
 8002896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	613b      	str	r3, [r7, #16]

    if (hpcd->Init.dma_enable == 1U) {
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d17b      	bne.n	800299e <PCD_EP_OutXfrComplete_int+0x12e>
        if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d015      	beq.n	80028dc <PCD_EP_OutXfrComplete_int+0x6c>
        {
            /* StupPktRcvd = 1 this is a setup packet */
            if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	4a61      	ldr	r2, [pc, #388]	; (8002a38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	f240 80b9 	bls.w	8002a2c <PCD_EP_OutXfrComplete_int+0x1bc>
                ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)) {
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
            if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 80b3 	beq.w	8002a2c <PCD_EP_OutXfrComplete_int+0x1bc>
                CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028d2:	461a      	mov	r2, r3
 80028d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028d8:	6093      	str	r3, [r2, #8]
 80028da:	e0a7      	b.n	8002a2c <PCD_EP_OutXfrComplete_int+0x1bc>
            }
        } else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f003 0320 	and.w	r3, r3, #32
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d009      	beq.n	80028fa <PCD_EP_OutXfrComplete_int+0x8a>
        {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f2:	461a      	mov	r2, r3
 80028f4:	2320      	movs	r3, #32
 80028f6:	6093      	str	r3, [r2, #8]
 80028f8:	e098      	b.n	8002a2c <PCD_EP_OutXfrComplete_int+0x1bc>
        } else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U) {
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002900:	2b00      	cmp	r3, #0
 8002902:	f040 8093 	bne.w	8002a2c <PCD_EP_OutXfrComplete_int+0x1bc>
            /* StupPktRcvd = 1 this is a setup packet */
            if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	4a4b      	ldr	r2, [pc, #300]	; (8002a38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d90f      	bls.n	800292e <PCD_EP_OutXfrComplete_int+0xbe>
                ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)) {
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
            if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00a      	beq.n	800292e <PCD_EP_OutXfrComplete_int+0xbe>
                CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	4413      	add	r3, r2
 8002920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002924:	461a      	mov	r2, r3
 8002926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800292a:	6093      	str	r3, [r2, #8]
 800292c:	e07e      	b.n	8002a2c <PCD_EP_OutXfrComplete_int+0x1bc>
            } else {
                ep = &hpcd->OUT_ep[epnum];
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	4413      	add	r3, r2
 8002940:	3304      	adds	r3, #4
 8002942:	60fb      	str	r3, [r7, #12]

                /* out data packet received over EP */
                ep->xfer_count =
                    ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	69da      	ldr	r2, [r3, #28]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	0159      	lsls	r1, r3, #5
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	440b      	add	r3, r1
 8002950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295a:	1ad2      	subs	r2, r2, r3
                ep->xfer_count =
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	621a      	str	r2, [r3, #32]

                if (epnum == 0U) {
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d114      	bne.n	8002990 <PCD_EP_OutXfrComplete_int+0x120>
                    if (ep->xfer_len == 0U) {
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d109      	bne.n	8002982 <PCD_EP_OutXfrComplete_int+0x112>
                        /* this is ZLP, so prepare EP0 for next setup */
                        (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002978:	461a      	mov	r2, r3
 800297a:	2101      	movs	r1, #1
 800297c:	f002 fe5c 	bl	8005638 <USB_EP0_OutStart>
 8002980:	e006      	b.n	8002990 <PCD_EP_OutXfrComplete_int+0x120>
                    } else {
                        ep->xfer_buff += ep->xfer_count;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	691a      	ldr	r2, [r3, #16]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	441a      	add	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	611a      	str	r2, [r3, #16]
                }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
                HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	4619      	mov	r1, r3
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f005 f914 	bl	8007bc4 <HAL_PCD_DataOutStageCallback>
 800299c:	e046      	b.n	8002a2c <PCD_EP_OutXfrComplete_int+0x1bc>
            }
        } else {
            /* ... */
        }
    } else {
        if (gSNPSiD == USB_OTG_CORE_ID_310A) {
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	4a26      	ldr	r2, [pc, #152]	; (8002a3c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d124      	bne.n	80029f0 <PCD_EP_OutXfrComplete_int+0x180>
            /* StupPktRcvd = 1 this is a setup packet */
            if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX) {
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00a      	beq.n	80029c6 <PCD_EP_OutXfrComplete_int+0x156>
                CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029bc:	461a      	mov	r2, r3
 80029be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029c2:	6093      	str	r3, [r2, #8]
 80029c4:	e032      	b.n	8002a2c <PCD_EP_OutXfrComplete_int+0x1bc>
            } else {
                if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) {
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <PCD_EP_OutXfrComplete_int+0x172>
                    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029dc:	461a      	mov	r2, r3
 80029de:	2320      	movs	r3, #32
 80029e0:	6093      	str	r3, [r2, #8]
                }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
                HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	4619      	mov	r1, r3
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f005 f8eb 	bl	8007bc4 <HAL_PCD_DataOutStageCallback>
 80029ee:	e01d      	b.n	8002a2c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
        } else {
            if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U)) {
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d114      	bne.n	8002a20 <PCD_EP_OutXfrComplete_int+0x1b0>
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	4613      	mov	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d108      	bne.n	8002a20 <PCD_EP_OutXfrComplete_int+0x1b0>
                /* this is ZLP, so prepare EP0 for next setup */
                (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	f002 fe0c 	bl	8005638 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	4619      	mov	r1, r3
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f005 f8cc 	bl	8007bc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
    }

    return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3720      	adds	r7, #32
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	4f54300a 	.word	0x4f54300a
 8002a3c:	4f54310a 	.word	0x4f54310a

08002a40 <PCD_EP_OutSetupPacket_int>:
 * @brief  process EP OUT setup packet received interrupt.
 * @param  hpcd PCD handle
 * @param  epnum endpoint number
 * @retval HAL status
 */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef * hpcd, uint32_t epnum) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	617b      	str	r3, [r7, #20]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	613b      	str	r3, [r7, #16]
    uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	333c      	adds	r3, #60	; 0x3c
 8002a58:	3304      	adds	r3, #4
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60fb      	str	r3, [r7, #12]
    uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	60bb      	str	r3, [r7, #8]

    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4a15      	ldr	r2, [pc, #84]	; (8002ac8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d90e      	bls.n	8002a94 <PCD_EP_OutSetupPacket_int+0x54>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)) {
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d009      	beq.n	8002a94 <PCD_EP_OutSetupPacket_int+0x54>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a92:	6093      	str	r3, [r2, #8]

    /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SetupStageCallback(hpcd);
#else
    HAL_PCD_SetupStageCallback(hpcd);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f005 f883 	bl	8007ba0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U)) {
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d90c      	bls.n	8002abc <PCD_EP_OutSetupPacket_int+0x7c>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d108      	bne.n	8002abc <PCD_EP_OutSetupPacket_int+0x7c>
        (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	f002 fdbe 	bl	8005638 <USB_EP0_OutStart>
    }

    return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	4f54300a 	.word	0x4f54300a

08002acc <HAL_PCDEx_SetTxFiFo>:
 * @param  hpcd PCD handle
 * @param  fifo The number of Tx fifo
 * @param  size Fifo size
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef * hpcd, uint8_t fifo, uint16_t size) {
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	70fb      	strb	r3, [r7, #3]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	803b      	strh	r3, [r7, #0]
           --> Txn should be configured with the minimum space of 16 words
       The FIFO is used optimally when used TxFIFOs are allocated in the top
           of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
       When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

    Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	60bb      	str	r3, [r7, #8]

    if (fifo == 0U) {
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d107      	bne.n	8002afa <HAL_PCDEx_SetTxFiFo+0x2e>
        hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002aea:	883b      	ldrh	r3, [r7, #0]
 8002aec:	0419      	lsls	r1, r3, #16
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28
 8002af8:	e028      	b.n	8002b4c <HAL_PCDEx_SetTxFiFo+0x80>
    } else {
        Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	0c1b      	lsrs	r3, r3, #16
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	4413      	add	r3, r2
 8002b06:	60bb      	str	r3, [r7, #8]
        for (i = 0U; i < (fifo - 1U); i++) {
 8002b08:	2300      	movs	r3, #0
 8002b0a:	73fb      	strb	r3, [r7, #15]
 8002b0c:	e00d      	b.n	8002b2a <HAL_PCDEx_SetTxFiFo+0x5e>
            Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	3340      	adds	r3, #64	; 0x40
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	0c1b      	lsrs	r3, r3, #16
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	4413      	add	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
        for (i = 0U; i < (fifo - 1U); i++) {
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	3301      	adds	r3, #1
 8002b28:	73fb      	strb	r3, [r7, #15]
 8002b2a:	7bfa      	ldrb	r2, [r7, #15]
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d3ec      	bcc.n	8002b0e <HAL_PCDEx_SetTxFiFo+0x42>
        }

        /* Multiply Tx_Size by 2 to get higher performance */
        hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b34:	883b      	ldrh	r3, [r7, #0]
 8002b36:	0418      	lsls	r0, r3, #16
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6819      	ldr	r1, [r3, #0]
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	4302      	orrs	r2, r0
 8002b44:	3340      	adds	r3, #64	; 0x40
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <HAL_PCDEx_SetRxFiFo>:
 * @brief  Set Rx FIFO
 * @param  hpcd PCD handle
 * @param  size Size of Rx fifo
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef * hpcd, uint16_t size) {
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	460b      	mov	r3, r1
 8002b64:	807b      	strh	r3, [r7, #2]
    hpcd->Instance->GRXFSIZ = size;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	887a      	ldrh	r2, [r7, #2]
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_PCDEx_LPM_Callback>:
 * @brief  Send LPM message to user layer callback.
 * @param  hpcd PCD handle
 * @param  msg LPM message
 * @retval HAL status
 */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef * hpcd, PCD_LPM_MsgTypeDef msg) {
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	70fb      	strb	r3, [r7, #3]
    UNUSED(msg);

    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_PCDEx_LPM_Callback could be implemented in the user file
     */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_RCC_OscConfig>:
 * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 *         supported by this API. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef * RCC_OscInitStruct) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart, pll_config;

    /* Check Null pointer */
    if (RCC_OscInitStruct == NULL) {
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x12>
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e267      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
    }

    /* Check the parameters */
    assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
    /*------------------------------- HSE Configuration ------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE) {
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d075      	beq.n	8002c9e <HAL_RCC_OscConfig+0x10a>
        /* Check the parameters */
        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not
         * disabled */
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8002bb2:	4b88      	ldr	r3, [pc, #544]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d00c      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x44>
            ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) &&
 8002bbe:	4b85      	ldr	r3, [pc, #532]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d112      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x5c>
             ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE))) {
 8002bca:	4b82      	ldr	r3, [pc, #520]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
            ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) &&
 8002bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd6:	d10b      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x5c>
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) &&
 8002bd8:	4b7e      	ldr	r3, [pc, #504]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d05b      	beq.n	8002c9c <HAL_RCC_OscConfig+0x108>
                (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) &&
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d157      	bne.n	8002c9c <HAL_RCC_OscConfig+0x108>
                return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e242      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
            }
        } else {
            /* Set the new HSE configuration ---------------------------------------*/
            __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf8:	d106      	bne.n	8002c08 <HAL_RCC_OscConfig+0x74>
 8002bfa:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a75      	ldr	r2, [pc, #468]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	e01d      	b.n	8002c44 <HAL_RCC_OscConfig+0xb0>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x98>
 8002c12:	4b70      	ldr	r3, [pc, #448]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a6f      	ldr	r2, [pc, #444]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	4b6d      	ldr	r3, [pc, #436]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a6c      	ldr	r2, [pc, #432]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	e00b      	b.n	8002c44 <HAL_RCC_OscConfig+0xb0>
 8002c2c:	4b69      	ldr	r3, [pc, #420]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a68      	ldr	r2, [pc, #416]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	4b66      	ldr	r3, [pc, #408]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a65      	ldr	r2, [pc, #404]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c42:	6013      	str	r3, [r2, #0]

            /* Check the HSE State */
            if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d013      	beq.n	8002c74 <HAL_RCC_OscConfig+0xe0>
                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8002c4c:	f7fe f878 	bl	8000d40 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

                /* Wait till HSE is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0xd2>
                    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8002c54:	f7fe f874 	bl	8000d40 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	; 0x64
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0xd2>
                        return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e207      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8002c66:	4b5b      	ldr	r3, [pc, #364]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0xc0>
 8002c72:	e014      	b.n	8002c9e <HAL_RCC_OscConfig+0x10a>
                    }
                }
            } else {
                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8002c74:	f7fe f864 	bl	8000d40 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

                /* Wait till HSE is bypassed or disabled */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0xfa>
                    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8002c7c:	f7fe f860 	bl	8000d40 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0xfa>
                        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e1f3      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8002c8e:	4b51      	ldr	r3, [pc, #324]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0xe8>
 8002c9a:	e000      	b.n	8002c9e <HAL_RCC_OscConfig+0x10a>
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) &&
 8002c9c:	bf00      	nop
                }
            }
        }
    }
    /*----------------------------- HSI Configuration --------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI) {
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d063      	beq.n	8002d72 <HAL_RCC_OscConfig+0x1de>
        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system
         * clock */
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8002caa:	4b4a      	ldr	r3, [pc, #296]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00b      	beq.n	8002cce <HAL_RCC_OscConfig+0x13a>
            ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) &&
 8002cb6:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d11c      	bne.n	8002cfc <HAL_RCC_OscConfig+0x168>
             ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI))) {
 8002cc2:	4b44      	ldr	r3, [pc, #272]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
            ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) &&
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d116      	bne.n	8002cfc <HAL_RCC_OscConfig+0x168>
            /* When HSI is used as system clock it will not disabled */
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) &&
 8002cce:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d005      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x152>
                (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) &&
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d001      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x152>
                return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e1c7      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
            }
            /* Otherwise, just the calibration is allowed */
            else {
                /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
                __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce6:	4b3b      	ldr	r3, [pc, #236]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4937      	ldr	r1, [pc, #220]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) &&
 8002cfa:	e03a      	b.n	8002d72 <HAL_RCC_OscConfig+0x1de>
            }
        } else {
            /* Check the HSI State */
            if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d020      	beq.n	8002d46 <HAL_RCC_OscConfig+0x1b2>
                /* Enable the Internal High Speed oscillator (HSI). */
                __HAL_RCC_HSI_ENABLE();
 8002d04:	4b34      	ldr	r3, [pc, #208]	; (8002dd8 <HAL_RCC_OscConfig+0x244>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	601a      	str	r2, [r3, #0]

                /* Get Start Tick*/
                tickstart = HAL_GetTick();
 8002d0a:	f7fe f819 	bl	8000d40 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

                /* Wait till HSI is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x190>
                    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8002d12:	f7fe f815 	bl	8000d40 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x190>
                        return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e1a8      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8002d24:	4b2b      	ldr	r3, [pc, #172]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_OscConfig+0x17e>
                    }
                }

                /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
                __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d30:	4b28      	ldr	r3, [pc, #160]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4925      	ldr	r1, [pc, #148]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	600b      	str	r3, [r1, #0]
 8002d44:	e015      	b.n	8002d72 <HAL_RCC_OscConfig+0x1de>
            } else {
                /* Disable the Internal High Speed oscillator (HSI). */
                __HAL_RCC_HSI_DISABLE();
 8002d46:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <HAL_RCC_OscConfig+0x244>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]

                /* Get Start Tick*/
                tickstart = HAL_GetTick();
 8002d4c:	f7fd fff8 	bl	8000d40 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

                /* Wait till HSI is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x1d2>
                    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8002d54:	f7fd fff4 	bl	8000d40 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x1d2>
                        return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e187      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8002d66:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x1c0>
                }
            }
        }
    }
    /*------------------------------ LSI Configuration -------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI) {
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d036      	beq.n	8002dec <HAL_RCC_OscConfig+0x258>
        /* Check the parameters */
        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

        /* Check the LSI State */
        if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d016      	beq.n	8002db4 <HAL_RCC_OscConfig+0x220>
            /* Enable the Internal Low Speed oscillator (LSI). */
            __HAL_RCC_LSI_ENABLE();
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <HAL_RCC_OscConfig+0x248>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d8c:	f7fd ffd8 	bl	8000d40 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

            /* Wait till LSI is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x212>
                if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8002d94:	f7fd ffd4 	bl	8000d40 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x212>
                    return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e167      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8002da6:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0x200>
 8002db2:	e01b      	b.n	8002dec <HAL_RCC_OscConfig+0x258>
                }
            }
        } else {
            /* Disable the Internal Low Speed oscillator (LSI). */
            __HAL_RCC_LSI_DISABLE();
 8002db4:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <HAL_RCC_OscConfig+0x248>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]

            /* Get Start Tick */
            tickstart = HAL_GetTick();
 8002dba:	f7fd ffc1 	bl	8000d40 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

            /* Wait till LSI is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8002dc0:	e00e      	b.n	8002de0 <HAL_RCC_OscConfig+0x24c>
                if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8002dc2:	f7fd ffbd 	bl	8000d40 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d907      	bls.n	8002de0 <HAL_RCC_OscConfig+0x24c>
                    return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e150      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	42470000 	.word	0x42470000
 8002ddc:	42470e80 	.word	0x42470e80
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8002de0:	4b88      	ldr	r3, [pc, #544]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1ea      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x22e>
                }
            }
        }
    }
    /*------------------------------ LSE Configuration -------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE) {
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8097 	beq.w	8002f28 <HAL_RCC_OscConfig+0x394>
        FlagStatus pwrclkchanged = RESET;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	75fb      	strb	r3, [r7, #23]
        /* Check the parameters */
        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

        /* Update LSE configuration in Backup Domain control register    */
        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 8002dfe:	4b81      	ldr	r3, [pc, #516]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10f      	bne.n	8002e2a <HAL_RCC_OscConfig+0x296>
            __HAL_RCC_PWR_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	4b7d      	ldr	r3, [pc, #500]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	4a7c      	ldr	r2, [pc, #496]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e18:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1a:	4b7a      	ldr	r3, [pc, #488]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
            pwrclkchanged = SET;
 8002e26:	2301      	movs	r3, #1
 8002e28:	75fb      	strb	r3, [r7, #23]
        }

        if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8002e2a:	4b77      	ldr	r3, [pc, #476]	; (8003008 <HAL_RCC_OscConfig+0x474>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d118      	bne.n	8002e68 <HAL_RCC_OscConfig+0x2d4>
            /* Enable write access to Backup domain */
            SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e36:	4b74      	ldr	r3, [pc, #464]	; (8003008 <HAL_RCC_OscConfig+0x474>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a73      	ldr	r2, [pc, #460]	; (8003008 <HAL_RCC_OscConfig+0x474>)
 8002e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e40:	6013      	str	r3, [r2, #0]

            /* Wait for Backup domain Write protection disable */
            tickstart = HAL_GetTick();
 8002e42:	f7fd ff7d 	bl	8000d40 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

            while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x2c8>
                if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8002e4a:	f7fd ff79 	bl	8000d40 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x2c8>
                    return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e10c      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
            while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8002e5c:	4b6a      	ldr	r3, [pc, #424]	; (8003008 <HAL_RCC_OscConfig+0x474>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x2b6>
                }
            }
        }

        /* Set the new LSE configuration -----------------------------------------*/
        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d106      	bne.n	8002e7e <HAL_RCC_OscConfig+0x2ea>
 8002e70:	4b64      	ldr	r3, [pc, #400]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e74:	4a63      	ldr	r2, [pc, #396]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7c:	e01c      	b.n	8002eb8 <HAL_RCC_OscConfig+0x324>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b05      	cmp	r3, #5
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x30c>
 8002e86:	4b5f      	ldr	r3, [pc, #380]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	4a5e      	ldr	r2, [pc, #376]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	f043 0304 	orr.w	r3, r3, #4
 8002e90:	6713      	str	r3, [r2, #112]	; 0x70
 8002e92:	4b5c      	ldr	r3, [pc, #368]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e96:	4a5b      	ldr	r2, [pc, #364]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9e:	e00b      	b.n	8002eb8 <HAL_RCC_OscConfig+0x324>
 8002ea0:	4b58      	ldr	r3, [pc, #352]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	4a57      	ldr	r2, [pc, #348]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002eac:	4b55      	ldr	r3, [pc, #340]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	4a54      	ldr	r2, [pc, #336]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002eb2:	f023 0304 	bic.w	r3, r3, #4
 8002eb6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Check the LSE State */
        if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d015      	beq.n	8002eec <HAL_RCC_OscConfig+0x358>
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ec0:	f7fd ff3e 	bl	8000d40 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

            /* Wait till LSE is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_OscConfig+0x34a>
                if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8002ec8:	f7fd ff3a 	bl	8000d40 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x34a>
                    return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e0cb      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8002ede:	4b49      	ldr	r3, [pc, #292]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0ee      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x334>
 8002eea:	e014      	b.n	8002f16 <HAL_RCC_OscConfig+0x382>
                }
            }
        } else {
            /* Get Start Tick */
            tickstart = HAL_GetTick();
 8002eec:	f7fd ff28 	bl	8000d40 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

            /* Wait till LSE is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8002ef2:	e00a      	b.n	8002f0a <HAL_RCC_OscConfig+0x376>
                if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8002ef4:	f7fd ff24 	bl	8000d40 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x376>
                    return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e0b5      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8002f0a:	4b3e      	ldr	r3, [pc, #248]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1ee      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x360>
                }
            }
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET) {
 8002f16:	7dfb      	ldrb	r3, [r7, #23]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d105      	bne.n	8002f28 <HAL_RCC_OscConfig+0x394>
            __HAL_RCC_PWR_CLK_DISABLE();
 8002f1c:	4b39      	ldr	r3, [pc, #228]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	4a38      	ldr	r2, [pc, #224]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f26:	6413      	str	r3, [r2, #64]	; 0x40
        }
    }
    /*-------------------------------- PLL Configuration -----------------------*/
    /* Check the parameters */
    assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
    if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 80a1 	beq.w	8003074 <HAL_RCC_OscConfig+0x4e0>
        /* Check if the PLL is used as system clock or not */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 8002f32:	4b34      	ldr	r3, [pc, #208]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d05c      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x464>
            if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d141      	bne.n	8002fca <HAL_RCC_OscConfig+0x436>
                assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
                assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
                assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

                /* Disable the main PLL. */
                __HAL_RCC_PLL_DISABLE();
 8002f46:	4b31      	ldr	r3, [pc, #196]	; (800300c <HAL_RCC_OscConfig+0x478>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]

                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8002f4c:	f7fd fef8 	bl	8000d40 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

                /* Wait till PLL is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x3d2>
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8002f54:	f7fd fef4 	bl	8000d40 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x3d2>
                        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e087      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002f66:	4b27      	ldr	r3, [pc, #156]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x3c0>
                    }
                }

                /* Configure the main PLL clock source, multiplication and division factors. */
                WRITE_REG(RCC->PLLCFGR,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69da      	ldr	r2, [r3, #28]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	019b      	lsls	r3, r3, #6
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	085b      	lsrs	r3, r3, #1
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	041b      	lsls	r3, r3, #16
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	061b      	lsls	r3, r3, #24
 8002f96:	491b      	ldr	r1, [pc, #108]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]
                          (RCC_OscInitStruct->PLL.PLLSource | RCC_OscInitStruct->PLL.PLLM |
                           (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos) |
                           (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
                           (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
                /* Enable the main PLL. */
                __HAL_RCC_PLL_ENABLE();
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	; (800300c <HAL_RCC_OscConfig+0x478>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8002fa2:	f7fd fecd 	bl	8000d40 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

                /* Wait till PLL is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x428>
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8002faa:	f7fd fec9 	bl	8000d40 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x428>
                        return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e05c      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8002fbc:	4b11      	ldr	r3, [pc, #68]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x416>
 8002fc8:	e054      	b.n	8003074 <HAL_RCC_OscConfig+0x4e0>
                    }
                }
            } else {
                /* Disable the main PLL. */
                __HAL_RCC_PLL_DISABLE();
 8002fca:	4b10      	ldr	r3, [pc, #64]	; (800300c <HAL_RCC_OscConfig+0x478>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]

                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8002fd0:	f7fd feb6 	bl	8000d40 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

                /* Wait till PLL is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x456>
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8002fd8:	f7fd feb2 	bl	8000d40 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x456>
                        return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e045      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x444>
 8002ff6:	e03d      	b.n	8003074 <HAL_RCC_OscConfig+0x4e0>
                    }
                }
            }
        } else {
            /* Check if there is a request to disable the PLL used as System clock source */
            if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d107      	bne.n	8003010 <HAL_RCC_OscConfig+0x47c>
                return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e038      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
 8003004:	40023800 	.word	0x40023800
 8003008:	40007000 	.word	0x40007000
 800300c:	42470060 	.word	0x42470060
            } else {
                /* Do not return HAL_ERROR if request repeats the current configuration */
                pll_config = RCC->PLLCFGR;
 8003010:	4b1b      	ldr	r3, [pc, #108]	; (8003080 <HAL_RCC_OscConfig+0x4ec>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	60fb      	str	r3, [r7, #12]
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) !=
                     (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) !=
                     (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
                if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d028      	beq.n	8003070 <HAL_RCC_OscConfig+0x4dc>
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) !=
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
                     RCC_OscInitStruct->PLL.PLLSource) ||
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69db      	ldr	r3, [r3, #28]
                if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d121      	bne.n	8003070 <HAL_RCC_OscConfig+0x4dc>
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
                                                                   << RCC_PLLCFGR_PLLM_Pos) ||
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
                     RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	429a      	cmp	r2, r3
 8003038:	d11a      	bne.n	8003070 <HAL_RCC_OscConfig+0x4dc>
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN)
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003040:	4013      	ands	r3, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6a52      	ldr	r2, [r2, #36]	; 0x24
                                                                   << RCC_PLLCFGR_PLLN_Pos) ||
 8003046:	0192      	lsls	r2, r2, #6
                                                                   << RCC_PLLCFGR_PLLM_Pos) ||
 8003048:	4293      	cmp	r3, r2
 800304a:	d111      	bne.n	8003070 <HAL_RCC_OscConfig+0x4dc>
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) !=
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
                     (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	085b      	lsrs	r3, r3, #1
 8003058:	3b01      	subs	r3, #1
 800305a:	041b      	lsls	r3, r3, #16
                                                                   << RCC_PLLCFGR_PLLN_Pos) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d107      	bne.n	8003070 <HAL_RCC_OscConfig+0x4dc>
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) !=
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
                     (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	061b      	lsls	r3, r3, #24
                     (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_OscConfig+0x4e0>
#endif
                {
                    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
                }
            }
        }
    }
    return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800

08003084 <HAL_RCC_ClockConfig>:
 * @note   Depending on the device voltage range, the software has to set correctly
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef * RCC_ClkInitStruct, uint32_t FLatency) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
    uint32_t tickstart;

    /* Check Null pointer */
    if (RCC_ClkInitStruct == NULL) {
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0x14>
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0cc      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
      must be correctly programmed according to the frequency of the CPU clock
      (HCLK) and the supply voltage of the device. */

    /* Increasing the number of wait states because of higher CPU frequency */
    if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8003098:	4b68      	ldr	r3, [pc, #416]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d90c      	bls.n	80030c0 <HAL_RCC_ClockConfig+0x3c>
        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
        __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b65      	ldr	r3, [pc, #404]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	701a      	strb	r2, [r3, #0]

        /* Check that the new number of wait states is taken into account to access the Flash
        memory by reading the FLASH_ACR register */
        if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 80030ae:	4b63      	ldr	r3, [pc, #396]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x3c>
            return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0b8      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
        }
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d020      	beq.n	800310e <HAL_RCC_ClockConfig+0x8a>
        /* Set the highest APBx dividers in order to ensure that we do not go through
           a non-spec phase whatever we decrease or increase HCLK. */
        if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x60>
            MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d8:	4b59      	ldr	r3, [pc, #356]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4a58      	ldr	r2, [pc, #352]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030e2:	6093      	str	r3, [r2, #8]
        }

        if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_ClockConfig+0x78>
            MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f0:	4b53      	ldr	r3, [pc, #332]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4a52      	ldr	r2, [pc, #328]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030fa:	6093      	str	r3, [r2, #8]
        }

        assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030fc:	4b50      	ldr	r3, [pc, #320]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	494d      	ldr	r1, [pc, #308]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) {
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d044      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x120>
        assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

        /* HSE is selected as System Clock Source */
        if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d107      	bne.n	8003132 <HAL_RCC_ClockConfig+0xae>
            /* Check the HSE ready flag */
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8003122:	4b47      	ldr	r3, [pc, #284]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d119      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
                return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e07f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
            }
        }
        /* PLL is selected as System Clock Source */
        else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) ||
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d003      	beq.n	8003142 <HAL_RCC_ClockConfig+0xbe>
                 (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)) {
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
        else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) ||
 800313e:	2b03      	cmp	r3, #3
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xce>
            /* Check the PLL ready flag */
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8003142:	4b3f      	ldr	r3, [pc, #252]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
                return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e06f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
            }
        }
        /* HSI is selected as System Clock Source */
        else {
            /* Check the HSI ready flag */
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8003152:	4b3b      	ldr	r3, [pc, #236]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
                return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e067      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
            }
        }

        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003162:	4b37      	ldr	r3, [pc, #220]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f023 0203 	bic.w	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4934      	ldr	r1, [pc, #208]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	4313      	orrs	r3, r2
 8003172:	608b      	str	r3, [r1, #8]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003174:	f7fd fde4 	bl	8000d40 <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=
 800317a:	e00a      	b.n	8003192 <HAL_RCC_ClockConfig+0x10e>
               (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
            if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 800317c:	f7fd fde0 	bl	8000d40 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_ClockConfig+0x10e>
                return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e04f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=
 8003192:	4b2b      	ldr	r3, [pc, #172]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 020c 	and.w	r2, r3, #12
               (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	009b      	lsls	r3, r3, #2
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d1eb      	bne.n	800317c <HAL_RCC_ClockConfig+0xf8>
            }
        }
    }

    /* Decreasing the number of wait states because of lower CPU frequency */
    if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 80031a4:	4b25      	ldr	r3, [pc, #148]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d20c      	bcs.n	80031cc <HAL_RCC_ClockConfig+0x148>
        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
        __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b22      	ldr	r3, [pc, #136]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]

        /* Check that the new number of wait states is taken into account to access the Flash
        memory by reading the FLASH_ACR register */
        if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 80031ba:	4b20      	ldr	r3, [pc, #128]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_ClockConfig+0x148>
            return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e032      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
        }
    }

    /*-------------------------- PCLK1 Configuration ---------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_RCC_ClockConfig+0x166>
        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d8:	4b19      	ldr	r3, [pc, #100]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4916      	ldr	r1, [pc, #88]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
    }

    /*-------------------------- PCLK2 Configuration ---------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <HAL_RCC_ClockConfig+0x186>
        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	490e      	ldr	r1, [pc, #56]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
    }

    /* Update the SystemCoreClock global variable */
    SystemCoreClock = HAL_RCC_GetSysClockFreq() >>
 800320a:	f000 f821 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 800320e:	4602      	mov	r2, r0
                      AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	490a      	ldr	r1, [pc, #40]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 800321c:	5ccb      	ldrb	r3, [r1, r3]
    SystemCoreClock = HAL_RCC_GetSysClockFreq() >>
 800321e:	fa22 f303 	lsr.w	r3, r2, r3
 8003222:	4a09      	ldr	r2, [pc, #36]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	6013      	str	r3, [r2, #0]

    /* Configure the source of time base considering new system clocks settings */
    HAL_InitTick(uwTickPrio);
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd fd44 	bl	8000cb8 <HAL_InitTick>

    return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40023c00 	.word	0x40023c00
 8003240:	40023800 	.word	0x40023800
 8003244:	08008ad0 	.word	0x08008ad0
 8003248:	20000000 	.word	0x20000000
 800324c:	20000004 	.word	0x20000004

08003250 <HAL_RCC_GetSysClockFreq>:
 * incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void) {
 8003250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003254:	b090      	sub	sp, #64	; 0x40
 8003256:	af00      	add	r7, sp, #0
    uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	637b      	str	r3, [r7, #52]	; 0x34
 800325c:	2300      	movs	r3, #0
 800325e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003260:	2300      	movs	r3, #0
 8003262:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t sysclockfreq = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Get SYSCLK source -------------------------------------------------------*/
    switch (RCC->CFGR & RCC_CFGR_SWS) {
 8003268:	4b59      	ldr	r3, [pc, #356]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 030c 	and.w	r3, r3, #12
 8003270:	2b08      	cmp	r3, #8
 8003272:	d00d      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x40>
 8003274:	2b08      	cmp	r3, #8
 8003276:	f200 80a1 	bhi.w	80033bc <HAL_RCC_GetSysClockFreq+0x16c>
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x34>
 800327e:	2b04      	cmp	r3, #4
 8003280:	d003      	beq.n	800328a <HAL_RCC_GetSysClockFreq+0x3a>
 8003282:	e09b      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x16c>
    case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
    {
        sysclockfreq = HSI_VALUE;
 8003284:	4b53      	ldr	r3, [pc, #332]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003286:	63bb      	str	r3, [r7, #56]	; 0x38
        break;
 8003288:	e09b      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
    {
        sysclockfreq = HSE_VALUE;
 800328a:	4b53      	ldr	r3, [pc, #332]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800328c:	63bb      	str	r3, [r7, #56]	; 0x38
        break;
 800328e:	e098      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
    {
        /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
        SYSCLK = PLL_VCO / PLLP */
        pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003290:	4b4f      	ldr	r3, [pc, #316]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003298:	637b      	str	r3, [r7, #52]	; 0x34
        if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 800329a:	4b4d      	ldr	r3, [pc, #308]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d028      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0xa8>
            /* HSE used as PLL clock source */
            pllvco =
                (uint32_t)((((uint64_t)HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >>
 80032a6:	4b4a      	ldr	r3, [pc, #296]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	099b      	lsrs	r3, r3, #6
 80032ac:	2200      	movs	r2, #0
 80032ae:	623b      	str	r3, [r7, #32]
 80032b0:	627a      	str	r2, [r7, #36]	; 0x24
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032b8:	2100      	movs	r1, #0
 80032ba:	4b47      	ldr	r3, [pc, #284]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80032bc:	fb03 f201 	mul.w	r2, r3, r1
 80032c0:	2300      	movs	r3, #0
 80032c2:	fb00 f303 	mul.w	r3, r0, r3
 80032c6:	4413      	add	r3, r2
 80032c8:	4a43      	ldr	r2, [pc, #268]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80032ca:	fba0 1202 	umull	r1, r2, r0, r2
 80032ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032d0:	460a      	mov	r2, r1
 80032d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80032d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032d6:	4413      	add	r3, r2
 80032d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                                                               RCC_PLLCFGR_PLLN_Pos)))) /
                           (uint64_t)pllm);
 80032da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032dc:	2200      	movs	r2, #0
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	61fa      	str	r2, [r7, #28]
                                                               RCC_PLLCFGR_PLLN_Pos)))) /
 80032e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032ea:	f7fc ffc9 	bl	8000280 <__aeabi_uldivmod>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
            pllvco =
 80032f2:	4613      	mov	r3, r2
 80032f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032f6:	e053      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x150>
        } else {
            /* HSI used as PLL clock source */
            pllvco =
                (uint32_t)((((uint64_t)HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >>
 80032f8:	4b35      	ldr	r3, [pc, #212]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	099b      	lsrs	r3, r3, #6
 80032fe:	2200      	movs	r2, #0
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	617a      	str	r2, [r7, #20]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800330a:	f04f 0b00 	mov.w	fp, #0
 800330e:	4652      	mov	r2, sl
 8003310:	465b      	mov	r3, fp
 8003312:	f04f 0000 	mov.w	r0, #0
 8003316:	f04f 0100 	mov.w	r1, #0
 800331a:	0159      	lsls	r1, r3, #5
 800331c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003320:	0150      	lsls	r0, r2, #5
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	ebb2 080a 	subs.w	r8, r2, sl
 800332a:	eb63 090b 	sbc.w	r9, r3, fp
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800333a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800333e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003342:	ebb2 0408 	subs.w	r4, r2, r8
 8003346:	eb63 0509 	sbc.w	r5, r3, r9
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	00eb      	lsls	r3, r5, #3
 8003354:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003358:	00e2      	lsls	r2, r4, #3
 800335a:	4614      	mov	r4, r2
 800335c:	461d      	mov	r5, r3
 800335e:	eb14 030a 	adds.w	r3, r4, sl
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	eb45 030b 	adc.w	r3, r5, fp
 8003368:	607b      	str	r3, [r7, #4]
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003376:	4629      	mov	r1, r5
 8003378:	028b      	lsls	r3, r1, #10
 800337a:	4621      	mov	r1, r4
 800337c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003380:	4621      	mov	r1, r4
 8003382:	028a      	lsls	r2, r1, #10
 8003384:	4610      	mov	r0, r2
 8003386:	4619      	mov	r1, r3
                                                               RCC_PLLCFGR_PLLN_Pos)))) /
                           (uint64_t)pllm);
 8003388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338a:	2200      	movs	r2, #0
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	60fa      	str	r2, [r7, #12]
                                                               RCC_PLLCFGR_PLLN_Pos)))) /
 8003390:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003394:	f7fc ff74 	bl	8000280 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
            pllvco =
 800339c:	4613      	mov	r3, r2
 800339e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	3301      	adds	r3, #1
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	633b      	str	r3, [r7, #48]	; 0x30

        sysclockfreq = pllvco / pllp;
 80033b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b8:	63bb      	str	r3, [r7, #56]	; 0x38
        break;
 80033ba:	e002      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default: {
        sysclockfreq = HSI_VALUE;
 80033bc:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80033be:	63bb      	str	r3, [r7, #56]	; 0x38
        break;
 80033c0:	bf00      	nop
    }
    }
    return sysclockfreq;
 80033c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3740      	adds	r7, #64	; 0x40
 80033c8:	46bd      	mov	sp, r7
 80033ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800
 80033d4:	00f42400 	.word	0x00f42400
 80033d8:	017d7840 	.word	0x017d7840

080033dc <HAL_RCC_GetHCLKFreq>:
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
    return SystemCoreClock;
 80033e0:	4b03      	ldr	r3, [pc, #12]	; (80033f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033e2:	681b      	ldr	r3, [r3, #0]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	20000000 	.word	0x20000000

080033f4 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (HAL_RCC_GetHCLKFreq() >>
 80033f8:	f7ff fff0 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 80033fc:	4602      	mov	r2, r0
            APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033fe:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	0a9b      	lsrs	r3, r3, #10
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	4903      	ldr	r1, [pc, #12]	; (8003418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800340a:	5ccb      	ldrb	r3, [r1, r3]
    return (HAL_RCC_GetHCLKFreq() >>
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003410:	4618      	mov	r0, r3
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40023800 	.word	0x40023800
 8003418:	08008ae0 	.word	0x08008ae0

0800341c <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
    return (HAL_RCC_GetHCLKFreq() >>
 8003420:	f7ff ffdc 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 8003424:	4602      	mov	r2, r0
            APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003426:	4b05      	ldr	r3, [pc, #20]	; (800343c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	0b5b      	lsrs	r3, r3, #13
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	4903      	ldr	r1, [pc, #12]	; (8003440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003432:	5ccb      	ldrb	r3, [r1, r3]
    return (HAL_RCC_GetHCLKFreq() >>
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003438:	4618      	mov	r0, r3
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40023800 	.word	0x40023800
 8003440:	08008ae0 	.word	0x08008ae0

08003444 <HAL_UART_Init>:
 *         the UART_InitTypeDef and create the associated handle.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef * huart) {
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
    /* Check the UART handle allocation */
    if (huart == NULL) {
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_UART_Init+0x12>
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e03f      	b.n	80034d6 <HAL_UART_Init+0x92>
        assert_param(IS_UART_INSTANCE(huart->Instance));
    }
    assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
    assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

    if (huart->gState == HAL_UART_STATE_RESET) {
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <HAL_UART_Init+0x2c>
        /* Allocate lock resource and initialize it */
        huart->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Init the low level hardware */
        huart->MspInitCallback(huart);
#else
        /* Init the low level hardware : GPIO, CLOCK */
        HAL_UART_MspInit(huart);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fd f98e 	bl	800078c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
    }

    huart->gState = HAL_UART_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2224      	movs	r2, #36	; 0x24
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the peripheral */
    __HAL_UART_DISABLE(huart);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003486:	60da      	str	r2, [r3, #12]

    /* Set the UART Communication parameters */
    UART_SetConfig(huart);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 faa5 	bl	80039d8 <UART_SetConfig>

    /* In asynchronous mode, the following bits must be kept cleared:
       - LINEN and CLKEN bits in the USART_CR2 register,
       - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
    CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800349c:	611a      	str	r2, [r3, #16]
    CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034ac:	615a      	str	r2, [r3, #20]

    /* Enable the peripheral */
    __HAL_UART_ENABLE(huart);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034bc:	60da      	str	r2, [r3, #12]

    /* Initialize the UART state */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_UART_Receive_DMA>:
 * @param  pData Pointer to data buffer (u8 or u16 data elements).
 * @param  Size  Amount of data elements (u8 or u16) to be received.
 * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef * huart, uint8_t * pData, uint16_t Size) {
 80034de:	b580      	push	{r7, lr}
 80034e0:	b084      	sub	sp, #16
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	4613      	mov	r3, r2
 80034ea:	80fb      	strh	r3, [r7, #6]
    /* Check that a Rx process is not already ongoing */
    if (huart->RxState == HAL_UART_STATE_READY) {
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d11d      	bne.n	8003534 <HAL_UART_Receive_DMA+0x56>
        if ((pData == NULL) || (Size == 0U)) {
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <HAL_UART_Receive_DMA+0x26>
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_UART_Receive_DMA+0x2a>
            return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e016      	b.n	8003536 <HAL_UART_Receive_DMA+0x58>
        }

        /* Process Locked */
        __HAL_LOCK(huart);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_UART_Receive_DMA+0x38>
 8003512:	2302      	movs	r3, #2
 8003514:	e00f      	b.n	8003536 <HAL_UART_Receive_DMA+0x58>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Set Reception type to Standard reception */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	631a      	str	r2, [r3, #48]	; 0x30

        return (UART_Start_Receive_DMA(huart, pData, Size));
 8003524:	88fb      	ldrh	r3, [r7, #6]
 8003526:	461a      	mov	r2, r3
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f92a 	bl	8003784 <UART_Start_Receive_DMA>
 8003530:	4603      	mov	r3, r0
 8003532:	e000      	b.n	8003536 <HAL_UART_Receive_DMA+0x58>
    } else {
        return HAL_BUSY;
 8003534:	2302      	movs	r3, #2
    }
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_UART_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) {
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    /* NOTE: This function should not be modified, when the callback is needed,
             the HAL_UART_RxCpltCallback could be implemented in the user file
     */
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <HAL_UART_RxHalfCpltCallback>:
 * @brief  Rx Half Transfer completed callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef * huart) {
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    /* NOTE: This function should not be modified, when the callback is needed,
             the HAL_UART_RxHalfCpltCallback could be implemented in the user file
     */
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_UART_ErrorCallback>:
 * @brief  UART error callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef * huart) {
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    /* NOTE: This function should not be modified, when the callback is needed,
             the HAL_UART_ErrorCallback could be implemented in the user file
     */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <HAL_UARTEx_RxEventCallback>:
 * @param  huart UART handle
 * @param  Size  Number of data available in application reception buffer (indicates a position in
 *               reception buffer until which, data are available)
 * @retval None
 */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef * huart, uint16_t Size) {
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	460b      	mov	r3, r1
 8003584:	807b      	strh	r3, [r7, #2]
    UNUSED(Size);

    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_UARTEx_RxEventCallback can be implemented in the user file.
     */
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <UART_DMAReceiveCplt>:
 * @brief  DMA UART receive process complete callback.
 * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef * hdma) {
 8003592:	b580      	push	{r7, lr}
 8003594:	b09c      	sub	sp, #112	; 0x70
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	66fb      	str	r3, [r7, #108]	; 0x6c
    /* DMA Normal mode*/
    if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U) {
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d172      	bne.n	8003694 <UART_DMAReceiveCplt+0x102>
        huart->RxXferCount = 0U;
 80035ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b0:	2200      	movs	r2, #0
 80035b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	330c      	adds	r3, #12
 80035ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  \return        value of type uint32_t at (*ptr)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t * addr) {
    uint32_t result;

    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 80035bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035be:	e853 3f00 	ldrex	r3, [r3]
 80035c2:	64bb      	str	r3, [r7, #72]	; 0x48
    return (result);
 80035c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80035cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	330c      	adds	r3, #12
 80035d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80035d6:	657b      	str	r3, [r7, #84]	; 0x54
  \return          1  Function failed
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t * addr) {
    uint32_t result;

    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 80035d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035dc:	e841 2300 	strex	r3, r2, [r1]
 80035e0:	653b      	str	r3, [r7, #80]	; 0x50
    return (result);
 80035e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e5      	bne.n	80035b4 <UART_DMAReceiveCplt+0x22>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3314      	adds	r3, #20
 80035ee:	63bb      	str	r3, [r7, #56]	; 0x38
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 80035f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	637b      	str	r3, [r7, #52]	; 0x34
    return (result);
 80035f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035fa:	f023 0301 	bic.w	r3, r3, #1
 80035fe:	667b      	str	r3, [r7, #100]	; 0x64
 8003600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3314      	adds	r3, #20
 8003606:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003608:	647a      	str	r2, [r7, #68]	; 0x44
 800360a:	643b      	str	r3, [r7, #64]	; 0x40
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 800360c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800360e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003610:	e841 2300 	strex	r3, r2, [r1]
 8003614:	63fb      	str	r3, [r7, #60]	; 0x3c
    return (result);
 8003616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e5      	bne.n	80035e8 <UART_DMAReceiveCplt+0x56>

        /* Disable the DMA transfer for the receiver request by setting the DMAR bit
           in the UART CR3 register */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800361c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3314      	adds	r3, #20
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	e853 3f00 	ldrex	r3, [r3]
 800362a:	623b      	str	r3, [r7, #32]
    return (result);
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003632:	663b      	str	r3, [r7, #96]	; 0x60
 8003634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3314      	adds	r3, #20
 800363a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800363c:	633a      	str	r2, [r7, #48]	; 0x30
 800363e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8003640:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003644:	e841 2300 	strex	r3, r2, [r1]
 8003648:	62bb      	str	r3, [r7, #40]	; 0x28
    return (result);
 800364a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e5      	bne.n	800361c <UART_DMAReceiveCplt+0x8a>

        /* At end of Rx process, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003652:	2220      	movs	r2, #32
 8003654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8003658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	2b01      	cmp	r3, #1
 800365e:	d119      	bne.n	8003694 <UART_DMAReceiveCplt+0x102>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	330c      	adds	r3, #12
 8003666:	613b      	str	r3, [r7, #16]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	e853 3f00 	ldrex	r3, [r3]
 800366e:	60fb      	str	r3, [r7, #12]
    return (result);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0310 	bic.w	r3, r3, #16
 8003676:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	330c      	adds	r3, #12
 800367e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003680:	61fa      	str	r2, [r7, #28]
 8003682:	61bb      	str	r3, [r7, #24]
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8003684:	69b9      	ldr	r1, [r7, #24]
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	e841 2300 	strex	r3, r2, [r1]
 800368c:	617b      	str	r3, [r7, #20]
    return (result);
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e5      	bne.n	8003660 <UART_DMAReceiveCplt+0xce>
        }
    }

    /* Check current reception Mode :
       If Reception till IDLE event has been selected : use Rx Event callback */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8003694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	2b01      	cmp	r3, #1
 800369a:	d106      	bne.n	80036aa <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800369c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800369e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036a0:	4619      	mov	r1, r3
 80036a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80036a4:	f7ff ff69 	bl	800357a <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    }
}
 80036a8:	e002      	b.n	80036b0 <UART_DMAReceiveCplt+0x11e>
        HAL_UART_RxCpltCallback(huart);
 80036aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80036ac:	f7ff ff47 	bl	800353e <HAL_UART_RxCpltCallback>
}
 80036b0:	bf00      	nop
 80036b2:	3770      	adds	r7, #112	; 0x70
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <UART_DMARxHalfCplt>:
 * @brief DMA UART receive process half complete callback
 * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef * hdma) {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	60fb      	str	r3, [r7, #12]

    /* Check current reception Mode :
       If Reception till IDLE event has been selected : use Rx Event callback */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d108      	bne.n	80036e0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036d2:	085b      	lsrs	r3, r3, #1
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	4619      	mov	r1, r3
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f7ff ff4e 	bl	800357a <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx Half complete callback*/
        HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    }
}
 80036de:	e002      	b.n	80036e6 <UART_DMARxHalfCplt+0x2e>
        HAL_UART_RxHalfCpltCallback(huart);
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f7ff ff36 	bl	8003552 <HAL_UART_RxHalfCpltCallback>
}
 80036e6:	bf00      	nop
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <UART_DMAError>:
 * @brief  DMA UART communication error callback.
 * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void UART_DMAError(DMA_HandleTypeDef * hdma) {
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
    uint32_t dmarequest = 0x00U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]
    UART_HandleTypeDef * huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	60bb      	str	r3, [r7, #8]

    /* Stop UART DMA Tx request if ongoing */
    dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370a:	2b80      	cmp	r3, #128	; 0x80
 800370c:	bf0c      	ite	eq
 800370e:	2301      	moveq	r3, #1
 8003710:	2300      	movne	r3, #0
 8003712:	b2db      	uxtb	r3, r3
 8003714:	60fb      	str	r3, [r7, #12]
    if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest) {
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b21      	cmp	r3, #33	; 0x21
 8003720:	d108      	bne.n	8003734 <UART_DMAError+0x46>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <UART_DMAError+0x46>
        huart->TxXferCount = 0x00U;
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2200      	movs	r2, #0
 800372c:	84da      	strh	r2, [r3, #38]	; 0x26
        UART_EndTxTransfer(huart);
 800372e:	68b8      	ldr	r0, [r7, #8]
 8003730:	f000 f8c6 	bl	80038c0 <UART_EndTxTransfer>
    }

    /* Stop UART DMA Rx request if ongoing */
    dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	bf0c      	ite	eq
 8003742:	2301      	moveq	r3, #1
 8003744:	2300      	movne	r3, #0
 8003746:	b2db      	uxtb	r3, r3
 8003748:	60fb      	str	r3, [r7, #12]
    if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest) {
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b22      	cmp	r3, #34	; 0x22
 8003754:	d108      	bne.n	8003768 <UART_DMAError+0x7a>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <UART_DMAError+0x7a>
        huart->RxXferCount = 0x00U;
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2200      	movs	r2, #0
 8003760:	85da      	strh	r2, [r3, #46]	; 0x2e
        UART_EndRxTransfer(huart);
 8003762:	68b8      	ldr	r0, [r7, #8]
 8003764:	f000 f8d4 	bl	8003910 <UART_EndRxTransfer>
    }

    huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	f043 0210 	orr.w	r2, r3, #16
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    huart->ErrorCallback(huart);
#else
    /*Call legacy weak error callback*/
    HAL_UART_ErrorCallback(huart);
 8003774:	68b8      	ldr	r0, [r7, #8]
 8003776:	f7ff fef6 	bl	8003566 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800377a:	bf00      	nop
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <UART_Start_Receive_DMA>:
 * @param  pData Pointer to data buffer (u8 or u16 data elements).
 * @param  Size  Amount of data elements (u8 or u16) to be received.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef * huart, uint8_t * pData,
                                         uint16_t Size) {
 8003784:	b580      	push	{r7, lr}
 8003786:	b098      	sub	sp, #96	; 0x60
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	4613      	mov	r3, r2
 8003790:	80fb      	strh	r3, [r7, #6]
    uint32_t * tmp;

    huart->pRxBuffPtr = pData;
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	88fa      	ldrh	r2, [r7, #6]
 800379c:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2222      	movs	r2, #34	; 0x22
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b0:	4a40      	ldr	r2, [pc, #256]	; (80038b4 <UART_Start_Receive_DMA+0x130>)
 80037b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	4a3f      	ldr	r2, [pc, #252]	; (80038b8 <UART_Start_Receive_DMA+0x134>)
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c0:	4a3e      	ldr	r2, [pc, #248]	; (80038bc <UART_Start_Receive_DMA+0x138>)
 80037c2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c8:	2200      	movs	r2, #0
 80037ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80037cc:	f107 0308 	add.w	r3, r7, #8
 80037d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3304      	adds	r3, #4
 80037dc:	4619      	mov	r1, r3
 80037de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	88fb      	ldrh	r3, [r7, #6]
 80037e4:	f7fd fc9c 	bl	8001120 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the
     * second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80037e8:	2300      	movs	r3, #0
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (huart->Init.Parity != UART_PARITY_NONE) {
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d019      	beq.n	8003842 <UART_Start_Receive_DMA+0xbe>
        /* Enable the UART Parity Error Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	330c      	adds	r3, #12
 8003814:	643b      	str	r3, [r7, #64]	; 0x40
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8003816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003818:	e853 3f00 	ldrex	r3, [r3]
 800381c:	63fb      	str	r3, [r7, #60]	; 0x3c
    return (result);
 800381e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003824:	65bb      	str	r3, [r7, #88]	; 0x58
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	330c      	adds	r3, #12
 800382c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800382e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003830:	64bb      	str	r3, [r7, #72]	; 0x48
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8003832:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003834:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003836:	e841 2300 	strex	r3, r2, [r1]
 800383a:	647b      	str	r3, [r7, #68]	; 0x44
    return (result);
 800383c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1e5      	bne.n	800380e <UART_Start_Receive_DMA+0x8a>
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	3314      	adds	r3, #20
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 800384a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384c:	e853 3f00 	ldrex	r3, [r3]
 8003850:	62bb      	str	r3, [r7, #40]	; 0x28
    return (result);
 8003852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	657b      	str	r3, [r7, #84]	; 0x54
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	3314      	adds	r3, #20
 8003860:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003862:	63ba      	str	r2, [r7, #56]	; 0x38
 8003864:	637b      	str	r3, [r7, #52]	; 0x34
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8003866:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800386a:	e841 2300 	strex	r3, r2, [r1]
 800386e:	633b      	str	r3, [r7, #48]	; 0x30
    return (result);
 8003870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1e5      	bne.n	8003842 <UART_Start_Receive_DMA+0xbe>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3314      	adds	r3, #20
 800387c:	61bb      	str	r3, [r7, #24]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	e853 3f00 	ldrex	r3, [r3]
 8003884:	617b      	str	r3, [r7, #20]
    return (result);
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800388c:	653b      	str	r3, [r7, #80]	; 0x50
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3314      	adds	r3, #20
 8003894:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003896:	627a      	str	r2, [r7, #36]	; 0x24
 8003898:	623b      	str	r3, [r7, #32]
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 800389a:	6a39      	ldr	r1, [r7, #32]
 800389c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389e:	e841 2300 	strex	r3, r2, [r1]
 80038a2:	61fb      	str	r3, [r7, #28]
    return (result);
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1e5      	bne.n	8003876 <UART_Start_Receive_DMA+0xf2>

    return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3760      	adds	r7, #96	; 0x60
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	08003593 	.word	0x08003593
 80038b8:	080036b9 	.word	0x080036b9
 80038bc:	080036ef 	.word	0x080036ef

080038c0 <UART_EndTxTransfer>:
 * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit
 * completion).
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndTxTransfer(UART_HandleTypeDef * huart) {
 80038c0:	b480      	push	{r7}
 80038c2:	b089      	sub	sp, #36	; 0x24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
    /* Disable TXEIE and TCIE interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	330c      	adds	r3, #12
 80038ce:	60fb      	str	r3, [r7, #12]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	e853 3f00 	ldrex	r3, [r3]
 80038d6:	60bb      	str	r3, [r7, #8]
    return (result);
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80038de:	61fb      	str	r3, [r7, #28]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	330c      	adds	r3, #12
 80038e6:	69fa      	ldr	r2, [r7, #28]
 80038e8:	61ba      	str	r2, [r7, #24]
 80038ea:	617b      	str	r3, [r7, #20]
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 80038ec:	6979      	ldr	r1, [r7, #20]
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	e841 2300 	strex	r3, r2, [r1]
 80038f4:	613b      	str	r3, [r7, #16]
    return (result);
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1e5      	bne.n	80038c8 <UART_EndTxTransfer+0x8>

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003904:	bf00      	nop
 8003906:	3724      	adds	r7, #36	; 0x24
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <UART_EndRxTransfer>:
 * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception
 * completion).
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef * huart) {
 8003910:	b480      	push	{r7}
 8003912:	b095      	sub	sp, #84	; 0x54
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	330c      	adds	r3, #12
 800391e:	637b      	str	r3, [r7, #52]	; 0x34
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8003920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003922:	e853 3f00 	ldrex	r3, [r3]
 8003926:	633b      	str	r3, [r7, #48]	; 0x30
    return (result);
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800392e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	330c      	adds	r3, #12
 8003936:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003938:	643a      	str	r2, [r7, #64]	; 0x40
 800393a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 800393c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800393e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003940:	e841 2300 	strex	r3, r2, [r1]
 8003944:	63bb      	str	r3, [r7, #56]	; 0x38
    return (result);
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e5      	bne.n	8003918 <UART_EndRxTransfer+0x8>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3314      	adds	r3, #20
 8003952:	623b      	str	r3, [r7, #32]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	e853 3f00 	ldrex	r3, [r3]
 800395a:	61fb      	str	r3, [r7, #28]
    return (result);
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f023 0301 	bic.w	r3, r3, #1
 8003962:	64bb      	str	r3, [r7, #72]	; 0x48
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3314      	adds	r3, #20
 800396a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800396c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8003970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003974:	e841 2300 	strex	r3, r2, [r1]
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
    return (result);
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e5      	bne.n	800394c <UART_EndRxTransfer+0x3c>

    /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	2b01      	cmp	r3, #1
 8003986:	d119      	bne.n	80039bc <UART_EndRxTransfer+0xac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	330c      	adds	r3, #12
 800398e:	60fb      	str	r3, [r7, #12]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	e853 3f00 	ldrex	r3, [r3]
 8003996:	60bb      	str	r3, [r7, #8]
    return (result);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f023 0310 	bic.w	r3, r3, #16
 800399e:	647b      	str	r3, [r7, #68]	; 0x44
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	330c      	adds	r3, #12
 80039a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039a8:	61ba      	str	r2, [r7, #24]
 80039aa:	617b      	str	r3, [r7, #20]
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 80039ac:	6979      	ldr	r1, [r7, #20]
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	e841 2300 	strex	r3, r2, [r1]
 80039b4:	613b      	str	r3, [r7, #16]
    return (result);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e5      	bne.n	8003988 <UART_EndRxTransfer+0x78>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80039ca:	bf00      	nop
 80039cc:	3754      	adds	r7, #84	; 0x54
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
	...

080039d8 <UART_SetConfig>:
 * @brief  Configures the UART peripheral.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_SetConfig(UART_HandleTypeDef * huart) {
 80039d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039dc:	b0c0      	sub	sp, #256	; 0x100
 80039de:	af00      	add	r7, sp, #0
 80039e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    assert_param(IS_UART_MODE(huart->Init.Mode));

    /*-------------------------- USART CR2 Configuration -----------------------*/
    /* Configure the UART Stop Bits: Set STOP[13:12] bits
       according to huart->Init.StopBits value */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f4:	68d9      	ldr	r1, [r3, #12]
 80039f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	ea40 0301 	orr.w	r3, r0, r1
 8003a00:	6113      	str	r3, [r2, #16]
       Set the M bits according to huart->Init.WordLength value
       Set PCE and PS bits according to huart->Init.Parity value
       Set TE and RE bits according to huart->Init.Mode value
       Set OVER8 bit according to huart->Init.OverSampling value */

    tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode |
 8003a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	431a      	orrs	r2, r3
             huart->Init.OverSampling;
 8003a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1c:	69db      	ldr	r3, [r3, #28]
    tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode |
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    MODIFY_REG(huart->Instance->CR1,
 8003a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a30:	f021 010c 	bic.w	r1, r1, #12
 8003a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a3e:	430b      	orrs	r3, r1
 8003a40:	60d3      	str	r3, [r2, #12]
                          USART_CR1_OVER8),
               tmpreg);

    /*-------------------------- USART CR3 Configuration -----------------------*/
    /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
    MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a52:	6999      	ldr	r1, [r3, #24]
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	ea40 0301 	orr.w	r3, r0, r1
 8003a5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) ||
        (huart->Instance == UART10)) {
        pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6)) {
 8003a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	4b8f      	ldr	r3, [pc, #572]	; (8003ca4 <UART_SetConfig+0x2cc>)
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d005      	beq.n	8003a78 <UART_SetConfig+0xa0>
 8003a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4b8d      	ldr	r3, [pc, #564]	; (8003ca8 <UART_SetConfig+0x2d0>)
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d104      	bne.n	8003a82 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a78:	f7ff fcd0 	bl	800341c <HAL_RCC_GetPCLK2Freq>
 8003a7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a80:	e003      	b.n	8003a8a <UART_SetConfig+0xb2>
    if (huart->Instance == USART1) {
        pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else {
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a82:	f7ff fcb7 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 8003a86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
    /*-------------------------- USART BRR Configuration ---------------------*/
    if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8003a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a94:	f040 810c 	bne.w	8003cb0 <UART_SetConfig+0x2d8>
        huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003aa2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003aa6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003aaa:	4622      	mov	r2, r4
 8003aac:	462b      	mov	r3, r5
 8003aae:	1891      	adds	r1, r2, r2
 8003ab0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ab2:	415b      	adcs	r3, r3
 8003ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ab6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003aba:	4621      	mov	r1, r4
 8003abc:	eb12 0801 	adds.w	r8, r2, r1
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	eb43 0901 	adc.w	r9, r3, r1
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ad2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ad6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ada:	4690      	mov	r8, r2
 8003adc:	4699      	mov	r9, r3
 8003ade:	4623      	mov	r3, r4
 8003ae0:	eb18 0303 	adds.w	r3, r8, r3
 8003ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ae8:	462b      	mov	r3, r5
 8003aea:	eb49 0303 	adc.w	r3, r9, r3
 8003aee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003afe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b06:	460b      	mov	r3, r1
 8003b08:	18db      	adds	r3, r3, r3
 8003b0a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	eb42 0303 	adc.w	r3, r2, r3
 8003b12:	657b      	str	r3, [r7, #84]	; 0x54
 8003b14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b1c:	f7fc fbb0 	bl	8000280 <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4b61      	ldr	r3, [pc, #388]	; (8003cac <UART_SetConfig+0x2d4>)
 8003b26:	fba3 2302 	umull	r2, r3, r3, r2
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	011c      	lsls	r4, r3, #4
 8003b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b40:	4642      	mov	r2, r8
 8003b42:	464b      	mov	r3, r9
 8003b44:	1891      	adds	r1, r2, r2
 8003b46:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b48:	415b      	adcs	r3, r3
 8003b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b50:	4641      	mov	r1, r8
 8003b52:	eb12 0a01 	adds.w	sl, r2, r1
 8003b56:	4649      	mov	r1, r9
 8003b58:	eb43 0b01 	adc.w	fp, r3, r1
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b70:	4692      	mov	sl, r2
 8003b72:	469b      	mov	fp, r3
 8003b74:	4643      	mov	r3, r8
 8003b76:	eb1a 0303 	adds.w	r3, sl, r3
 8003b7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b7e:	464b      	mov	r3, r9
 8003b80:	eb4b 0303 	adc.w	r3, fp, r3
 8003b84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	18db      	adds	r3, r3, r3
 8003ba0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	eb42 0303 	adc.w	r3, r2, r3
 8003ba8:	647b      	str	r3, [r7, #68]	; 0x44
 8003baa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003bae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003bb2:	f7fc fb65 	bl	8000280 <__aeabi_uldivmod>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4611      	mov	r1, r2
 8003bbc:	4b3b      	ldr	r3, [pc, #236]	; (8003cac <UART_SetConfig+0x2d4>)
 8003bbe:	fba3 2301 	umull	r2, r3, r3, r1
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	2264      	movs	r2, #100	; 0x64
 8003bc6:	fb02 f303 	mul.w	r3, r2, r3
 8003bca:	1acb      	subs	r3, r1, r3
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003bd2:	4b36      	ldr	r3, [pc, #216]	; (8003cac <UART_SetConfig+0x2d4>)
 8003bd4:	fba3 2302 	umull	r2, r3, r3, r2
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003be0:	441c      	add	r4, r3
 8003be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003be6:	2200      	movs	r2, #0
 8003be8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003bf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003bf4:	4642      	mov	r2, r8
 8003bf6:	464b      	mov	r3, r9
 8003bf8:	1891      	adds	r1, r2, r2
 8003bfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bfc:	415b      	adcs	r3, r3
 8003bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c04:	4641      	mov	r1, r8
 8003c06:	1851      	adds	r1, r2, r1
 8003c08:	6339      	str	r1, [r7, #48]	; 0x30
 8003c0a:	4649      	mov	r1, r9
 8003c0c:	414b      	adcs	r3, r1
 8003c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c1c:	4659      	mov	r1, fp
 8003c1e:	00cb      	lsls	r3, r1, #3
 8003c20:	4651      	mov	r1, sl
 8003c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c26:	4651      	mov	r1, sl
 8003c28:	00ca      	lsls	r2, r1, #3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4603      	mov	r3, r0
 8003c30:	4642      	mov	r2, r8
 8003c32:	189b      	adds	r3, r3, r2
 8003c34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c38:	464b      	mov	r3, r9
 8003c3a:	460a      	mov	r2, r1
 8003c3c:	eb42 0303 	adc.w	r3, r2, r3
 8003c40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c58:	460b      	mov	r3, r1
 8003c5a:	18db      	adds	r3, r3, r3
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c5e:	4613      	mov	r3, r2
 8003c60:	eb42 0303 	adc.w	r3, r2, r3
 8003c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c6e:	f7fc fb07 	bl	8000280 <__aeabi_uldivmod>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4b0d      	ldr	r3, [pc, #52]	; (8003cac <UART_SetConfig+0x2d4>)
 8003c78:	fba3 1302 	umull	r1, r3, r3, r2
 8003c7c:	095b      	lsrs	r3, r3, #5
 8003c7e:	2164      	movs	r1, #100	; 0x64
 8003c80:	fb01 f303 	mul.w	r3, r1, r3
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	3332      	adds	r3, #50	; 0x32
 8003c8a:	4a08      	ldr	r2, [pc, #32]	; (8003cac <UART_SetConfig+0x2d4>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	095b      	lsrs	r3, r3, #5
 8003c92:	f003 0207 	and.w	r2, r3, #7
 8003c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4422      	add	r2, r4
 8003c9e:	609a      	str	r2, [r3, #8]
    } else {
        huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
}
 8003ca0:	e105      	b.n	8003eae <UART_SetConfig+0x4d6>
 8003ca2:	bf00      	nop
 8003ca4:	40011000 	.word	0x40011000
 8003ca8:	40011400 	.word	0x40011400
 8003cac:	51eb851f 	.word	0x51eb851f
        huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003cba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003cbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003cc2:	4642      	mov	r2, r8
 8003cc4:	464b      	mov	r3, r9
 8003cc6:	1891      	adds	r1, r2, r2
 8003cc8:	6239      	str	r1, [r7, #32]
 8003cca:	415b      	adcs	r3, r3
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cd2:	4641      	mov	r1, r8
 8003cd4:	1854      	adds	r4, r2, r1
 8003cd6:	4649      	mov	r1, r9
 8003cd8:	eb43 0501 	adc.w	r5, r3, r1
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	00eb      	lsls	r3, r5, #3
 8003ce6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cea:	00e2      	lsls	r2, r4, #3
 8003cec:	4614      	mov	r4, r2
 8003cee:	461d      	mov	r5, r3
 8003cf0:	4643      	mov	r3, r8
 8003cf2:	18e3      	adds	r3, r4, r3
 8003cf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cf8:	464b      	mov	r3, r9
 8003cfa:	eb45 0303 	adc.w	r3, r5, r3
 8003cfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d1e:	4629      	mov	r1, r5
 8003d20:	008b      	lsls	r3, r1, #2
 8003d22:	4621      	mov	r1, r4
 8003d24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d28:	4621      	mov	r1, r4
 8003d2a:	008a      	lsls	r2, r1, #2
 8003d2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d30:	f7fc faa6 	bl	8000280 <__aeabi_uldivmod>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4b60      	ldr	r3, [pc, #384]	; (8003ebc <UART_SetConfig+0x4e4>)
 8003d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	011c      	lsls	r4, r3, #4
 8003d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d46:	2200      	movs	r2, #0
 8003d48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d54:	4642      	mov	r2, r8
 8003d56:	464b      	mov	r3, r9
 8003d58:	1891      	adds	r1, r2, r2
 8003d5a:	61b9      	str	r1, [r7, #24]
 8003d5c:	415b      	adcs	r3, r3
 8003d5e:	61fb      	str	r3, [r7, #28]
 8003d60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d64:	4641      	mov	r1, r8
 8003d66:	1851      	adds	r1, r2, r1
 8003d68:	6139      	str	r1, [r7, #16]
 8003d6a:	4649      	mov	r1, r9
 8003d6c:	414b      	adcs	r3, r1
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d7c:	4659      	mov	r1, fp
 8003d7e:	00cb      	lsls	r3, r1, #3
 8003d80:	4651      	mov	r1, sl
 8003d82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d86:	4651      	mov	r1, sl
 8003d88:	00ca      	lsls	r2, r1, #3
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4603      	mov	r3, r0
 8003d90:	4642      	mov	r2, r8
 8003d92:	189b      	adds	r3, r3, r2
 8003d94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d98:	464b      	mov	r3, r9
 8003d9a:	460a      	mov	r2, r1
 8003d9c:	eb42 0303 	adc.w	r3, r2, r3
 8003da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003dbc:	4649      	mov	r1, r9
 8003dbe:	008b      	lsls	r3, r1, #2
 8003dc0:	4641      	mov	r1, r8
 8003dc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dc6:	4641      	mov	r1, r8
 8003dc8:	008a      	lsls	r2, r1, #2
 8003dca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003dce:	f7fc fa57 	bl	8000280 <__aeabi_uldivmod>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4b39      	ldr	r3, [pc, #228]	; (8003ebc <UART_SetConfig+0x4e4>)
 8003dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ddc:	095b      	lsrs	r3, r3, #5
 8003dde:	2164      	movs	r1, #100	; 0x64
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	3332      	adds	r3, #50	; 0x32
 8003dea:	4a34      	ldr	r2, [pc, #208]	; (8003ebc <UART_SetConfig+0x4e4>)
 8003dec:	fba2 2303 	umull	r2, r3, r2, r3
 8003df0:	095b      	lsrs	r3, r3, #5
 8003df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003df6:	441c      	add	r4, r3
 8003df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	673b      	str	r3, [r7, #112]	; 0x70
 8003e00:	677a      	str	r2, [r7, #116]	; 0x74
 8003e02:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e06:	4642      	mov	r2, r8
 8003e08:	464b      	mov	r3, r9
 8003e0a:	1891      	adds	r1, r2, r2
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	415b      	adcs	r3, r3
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e16:	4641      	mov	r1, r8
 8003e18:	1851      	adds	r1, r2, r1
 8003e1a:	6039      	str	r1, [r7, #0]
 8003e1c:	4649      	mov	r1, r9
 8003e1e:	414b      	adcs	r3, r1
 8003e20:	607b      	str	r3, [r7, #4]
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e2e:	4659      	mov	r1, fp
 8003e30:	00cb      	lsls	r3, r1, #3
 8003e32:	4651      	mov	r1, sl
 8003e34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e38:	4651      	mov	r1, sl
 8003e3a:	00ca      	lsls	r2, r1, #3
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4603      	mov	r3, r0
 8003e42:	4642      	mov	r2, r8
 8003e44:	189b      	adds	r3, r3, r2
 8003e46:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e48:	464b      	mov	r3, r9
 8003e4a:	460a      	mov	r2, r1
 8003e4c:	eb42 0303 	adc.w	r3, r2, r3
 8003e50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e5c:	667a      	str	r2, [r7, #100]	; 0x64
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e6a:	4649      	mov	r1, r9
 8003e6c:	008b      	lsls	r3, r1, #2
 8003e6e:	4641      	mov	r1, r8
 8003e70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e74:	4641      	mov	r1, r8
 8003e76:	008a      	lsls	r2, r1, #2
 8003e78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e7c:	f7fc fa00 	bl	8000280 <__aeabi_uldivmod>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <UART_SetConfig+0x4e4>)
 8003e86:	fba3 1302 	umull	r1, r3, r3, r2
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	2164      	movs	r1, #100	; 0x64
 8003e8e:	fb01 f303 	mul.w	r3, r1, r3
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	3332      	adds	r3, #50	; 0x32
 8003e98:	4a08      	ldr	r2, [pc, #32]	; (8003ebc <UART_SetConfig+0x4e4>)
 8003e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9e:	095b      	lsrs	r3, r3, #5
 8003ea0:	f003 020f 	and.w	r2, r3, #15
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4422      	add	r2, r4
 8003eac:	609a      	str	r2, [r3, #8]
}
 8003eae:	bf00      	nop
 8003eb0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eba:	bf00      	nop
 8003ebc:	51eb851f 	.word	0x51eb851f

08003ec0 <USB_CoreInit>:
 * @param  USBx USB Instance
 * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef * USBx, USB_OTG_CfgTypeDef cfg) {
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	f107 001c 	add.w	r0, r7, #28
 8003ece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    HAL_StatusTypeDef ret;
    if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d122      	bne.n	8003f1e <USB_CoreInit+0x5e>
        USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003edc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Init The ULPI Interface */
        USBx->GUSBCFG &=
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	60d3      	str	r3, [r2, #12]
            ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

        /* Select vbus source */
        USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	60da      	str	r2, [r3, #12]
        if (cfg.use_external_vbus == 1U) {
 8003f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d105      	bne.n	8003f12 <USB_CoreInit+0x52>
            USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	60da      	str	r2, [r3, #12]
        }

        /* Reset after a PHY select */
        ret = USB_CoreReset(USBx);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f001 fbee 	bl	80056f4 <USB_CoreReset>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	73fb      	strb	r3, [r7, #15]
 8003f1c:	e01a      	b.n	8003f54 <USB_CoreInit+0x94>
    } else /* FS interface (embedded Phy) */
    {
        /* Select FS Embedded PHY */
        USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	60da      	str	r2, [r3, #12]

        /* Reset after a PHY select */
        ret = USB_CoreReset(USBx);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f001 fbe2 	bl	80056f4 <USB_CoreReset>
 8003f30:	4603      	mov	r3, r0
 8003f32:	73fb      	strb	r3, [r7, #15]

        if (cfg.battery_charging_enable == 0U) {
 8003f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <USB_CoreInit+0x88>
            /* Activate the USB Transceiver */
            USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	639a      	str	r2, [r3, #56]	; 0x38
 8003f46:	e005      	b.n	8003f54 <USB_CoreInit+0x94>
        } else {
            /* Deactivate the USB Transceiver */
            USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	639a      	str	r2, [r3, #56]	; 0x38
        }
    }

    if (cfg.dma_enable == 1U) {
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d10b      	bne.n	8003f72 <USB_CoreInit+0xb2>
        USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f043 0206 	orr.w	r2, r3, #6
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	609a      	str	r2, [r3, #8]
        USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f043 0220 	orr.w	r2, r3, #32
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	609a      	str	r2, [r3, #8]
    }

    return ret;
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f7e:	b004      	add	sp, #16
 8003f80:	4770      	bx	lr
	...

08003f84 <USB_SetTurnaroundTime>:
 * @param  USBx USB Instance
 * @param  hclk: AHB clock frequency
 * @retval USB turnaround time In PHY Clocks number
 */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef * USBx, uint32_t hclk,
                                        uint8_t speed) {
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	71fb      	strb	r3, [r7, #7]

    /* The USBTRD is configured according to the tables below, depending on AHB frequency
    used by application. In the low AHB frequency range it is used to stretch enough the USB
    response time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read
    access latency to the Data FIFO */
    if (speed == USBD_FS_SPEED) {
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d165      	bne.n	8004064 <USB_SetTurnaroundTime+0xe0>
        if ((hclk >= 14200000U) && (hclk < 15000000U)) {
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4a41      	ldr	r2, [pc, #260]	; (80040a0 <USB_SetTurnaroundTime+0x11c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d906      	bls.n	8003fae <USB_SetTurnaroundTime+0x2a>
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4a40      	ldr	r2, [pc, #256]	; (80040a4 <USB_SetTurnaroundTime+0x120>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d202      	bcs.n	8003fae <USB_SetTurnaroundTime+0x2a>
            /* hclk Clock Range between 14.2-15 MHz */
            UsbTrd = 0xFU;
 8003fa8:	230f      	movs	r3, #15
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	e062      	b.n	8004074 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 15000000U) && (hclk < 16000000U)) {
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	4a3c      	ldr	r2, [pc, #240]	; (80040a4 <USB_SetTurnaroundTime+0x120>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d306      	bcc.n	8003fc4 <USB_SetTurnaroundTime+0x40>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	4a3b      	ldr	r2, [pc, #236]	; (80040a8 <USB_SetTurnaroundTime+0x124>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d202      	bcs.n	8003fc4 <USB_SetTurnaroundTime+0x40>
            /* hclk Clock Range between 15-16 MHz */
            UsbTrd = 0xEU;
 8003fbe:	230e      	movs	r3, #14
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	e057      	b.n	8004074 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 16000000U) && (hclk < 17200000U)) {
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4a38      	ldr	r2, [pc, #224]	; (80040a8 <USB_SetTurnaroundTime+0x124>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d306      	bcc.n	8003fda <USB_SetTurnaroundTime+0x56>
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4a37      	ldr	r2, [pc, #220]	; (80040ac <USB_SetTurnaroundTime+0x128>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d202      	bcs.n	8003fda <USB_SetTurnaroundTime+0x56>
            /* hclk Clock Range between 16-17.2 MHz */
            UsbTrd = 0xDU;
 8003fd4:	230d      	movs	r3, #13
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	e04c      	b.n	8004074 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 17200000U) && (hclk < 18500000U)) {
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	4a33      	ldr	r2, [pc, #204]	; (80040ac <USB_SetTurnaroundTime+0x128>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d306      	bcc.n	8003ff0 <USB_SetTurnaroundTime+0x6c>
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	4a32      	ldr	r2, [pc, #200]	; (80040b0 <USB_SetTurnaroundTime+0x12c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d802      	bhi.n	8003ff0 <USB_SetTurnaroundTime+0x6c>
            /* hclk Clock Range between 17.2-18.5 MHz */
            UsbTrd = 0xCU;
 8003fea:	230c      	movs	r3, #12
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	e041      	b.n	8004074 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 18500000U) && (hclk < 20000000U)) {
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4a2f      	ldr	r2, [pc, #188]	; (80040b0 <USB_SetTurnaroundTime+0x12c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d906      	bls.n	8004006 <USB_SetTurnaroundTime+0x82>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	4a2e      	ldr	r2, [pc, #184]	; (80040b4 <USB_SetTurnaroundTime+0x130>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d802      	bhi.n	8004006 <USB_SetTurnaroundTime+0x82>
            /* hclk Clock Range between 18.5-20 MHz */
            UsbTrd = 0xBU;
 8004000:	230b      	movs	r3, #11
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	e036      	b.n	8004074 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 20000000U) && (hclk < 21800000U)) {
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4a2a      	ldr	r2, [pc, #168]	; (80040b4 <USB_SetTurnaroundTime+0x130>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d906      	bls.n	800401c <USB_SetTurnaroundTime+0x98>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4a29      	ldr	r2, [pc, #164]	; (80040b8 <USB_SetTurnaroundTime+0x134>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d802      	bhi.n	800401c <USB_SetTurnaroundTime+0x98>
            /* hclk Clock Range between 20-21.8 MHz */
            UsbTrd = 0xAU;
 8004016:	230a      	movs	r3, #10
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	e02b      	b.n	8004074 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 21800000U) && (hclk < 24000000U)) {
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4a26      	ldr	r2, [pc, #152]	; (80040b8 <USB_SetTurnaroundTime+0x134>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d906      	bls.n	8004032 <USB_SetTurnaroundTime+0xae>
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4a25      	ldr	r2, [pc, #148]	; (80040bc <USB_SetTurnaroundTime+0x138>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d202      	bcs.n	8004032 <USB_SetTurnaroundTime+0xae>
            /* hclk Clock Range between 21.8-24 MHz */
            UsbTrd = 0x9U;
 800402c:	2309      	movs	r3, #9
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	e020      	b.n	8004074 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 24000000U) && (hclk < 27700000U)) {
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	4a21      	ldr	r2, [pc, #132]	; (80040bc <USB_SetTurnaroundTime+0x138>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d306      	bcc.n	8004048 <USB_SetTurnaroundTime+0xc4>
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	4a20      	ldr	r2, [pc, #128]	; (80040c0 <USB_SetTurnaroundTime+0x13c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d802      	bhi.n	8004048 <USB_SetTurnaroundTime+0xc4>
            /* hclk Clock Range between 24-27.7 MHz */
            UsbTrd = 0x8U;
 8004042:	2308      	movs	r3, #8
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	e015      	b.n	8004074 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 27700000U) && (hclk < 32000000U)) {
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4a1d      	ldr	r2, [pc, #116]	; (80040c0 <USB_SetTurnaroundTime+0x13c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d906      	bls.n	800405e <USB_SetTurnaroundTime+0xda>
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4a1c      	ldr	r2, [pc, #112]	; (80040c4 <USB_SetTurnaroundTime+0x140>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d202      	bcs.n	800405e <USB_SetTurnaroundTime+0xda>
            /* hclk Clock Range between 27.7-32 MHz */
            UsbTrd = 0x7U;
 8004058:	2307      	movs	r3, #7
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	e00a      	b.n	8004074 <USB_SetTurnaroundTime+0xf0>
        } else /* if(hclk >= 32000000) */
        {
            /* hclk Clock Range between 32-200 MHz */
            UsbTrd = 0x6U;
 800405e:	2306      	movs	r3, #6
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	e007      	b.n	8004074 <USB_SetTurnaroundTime+0xf0>
        }
    } else if (speed == USBD_HS_SPEED) {
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d102      	bne.n	8004070 <USB_SetTurnaroundTime+0xec>
        UsbTrd = USBD_HS_TRDT_VALUE;
 800406a:	2309      	movs	r3, #9
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	e001      	b.n	8004074 <USB_SetTurnaroundTime+0xf0>
    } else {
        UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004070:	2309      	movs	r3, #9
 8004072:	617b      	str	r3, [r7, #20]
    }

    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	60da      	str	r2, [r3, #12]
    USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	029b      	lsls	r3, r3, #10
 8004088:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800408c:	431a      	orrs	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	371c      	adds	r7, #28
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	00d8acbf 	.word	0x00d8acbf
 80040a4:	00e4e1c0 	.word	0x00e4e1c0
 80040a8:	00f42400 	.word	0x00f42400
 80040ac:	01067380 	.word	0x01067380
 80040b0:	011a499f 	.word	0x011a499f
 80040b4:	01312cff 	.word	0x01312cff
 80040b8:	014ca43f 	.word	0x014ca43f
 80040bc:	016e3600 	.word	0x016e3600
 80040c0:	01a6ab1f 	.word	0x01a6ab1f
 80040c4:	01e84800 	.word	0x01e84800

080040c8 <USB_EnableGlobalInt>:
 * @brief  USB_EnableGlobalInt
 *         Enables the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef * USBx) {
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f043 0201 	orr.w	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <USB_DisableGlobalInt>:
 * @brief  USB_DisableGlobalInt
 *         Disable the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef * USBx) {
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
    USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f023 0201 	bic.w	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <USB_SetCurrentMode>:
 *          This parameter can be one of these values:
 *            @arg USB_DEVICE_MODE Peripheral mode
 *            @arg USB_HOST_MODE Host mode
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef * USBx, USB_OTG_ModeTypeDef mode) {
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	70fb      	strb	r3, [r7, #3]
    uint32_t ms = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	60fb      	str	r3, [r7, #12]

    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	60da      	str	r2, [r3, #12]

    if (mode == USB_HOST_MODE) {
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d115      	bne.n	800415a <USB_SetCurrentMode+0x4e>
        USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	60da      	str	r2, [r3, #12]

        do {
            HAL_Delay(1U);
 800413a:	2001      	movs	r0, #1
 800413c:	f7fc fe0c 	bl	8000d58 <HAL_Delay>
            ms++;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3301      	adds	r3, #1
 8004144:	60fb      	str	r3, [r7, #12]
        } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f001 fa45 	bl	80055d6 <USB_GetMode>
 800414c:	4603      	mov	r3, r0
 800414e:	2b01      	cmp	r3, #1
 8004150:	d01e      	beq.n	8004190 <USB_SetCurrentMode+0x84>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b31      	cmp	r3, #49	; 0x31
 8004156:	d9f0      	bls.n	800413a <USB_SetCurrentMode+0x2e>
 8004158:	e01a      	b.n	8004190 <USB_SetCurrentMode+0x84>
    } else if (mode == USB_DEVICE_MODE) {
 800415a:	78fb      	ldrb	r3, [r7, #3]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d115      	bne.n	800418c <USB_SetCurrentMode+0x80>
        USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	60da      	str	r2, [r3, #12]

        do {
            HAL_Delay(1U);
 800416c:	2001      	movs	r0, #1
 800416e:	f7fc fdf3 	bl	8000d58 <HAL_Delay>
            ms++;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	3301      	adds	r3, #1
 8004176:	60fb      	str	r3, [r7, #12]
        } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f001 fa2c 	bl	80055d6 <USB_GetMode>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <USB_SetCurrentMode+0x84>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b31      	cmp	r3, #49	; 0x31
 8004188:	d9f0      	bls.n	800416c <USB_SetCurrentMode+0x60>
 800418a:	e001      	b.n	8004190 <USB_SetCurrentMode+0x84>
    } else {
        return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e005      	b.n	800419c <USB_SetCurrentMode+0x90>
    }

    if (ms == 50U) {
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b32      	cmp	r3, #50	; 0x32
 8004194:	d101      	bne.n	800419a <USB_SetCurrentMode+0x8e>
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <USB_SetCurrentMode+0x90>
    }

    return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <USB_DevInit>:
 * @param  USBx  Selected device
 * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef * USBx, USB_OTG_CfgTypeDef cfg) {
 80041a4:	b084      	sub	sp, #16
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b086      	sub	sp, #24
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    HAL_StatusTypeDef ret = HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	75fb      	strb	r3, [r7, #23]
    uint32_t USBx_BASE = (uint32_t)USBx;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	60fb      	str	r3, [r7, #12]
    uint32_t i;

    for (i = 0U; i < 15U; i++) {
 80041be:	2300      	movs	r3, #0
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	e009      	b.n	80041d8 <USB_DevInit+0x34>
        USBx->DIEPTXF[i] = 0U;
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	3340      	adds	r3, #64	; 0x40
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	2200      	movs	r2, #0
 80041d0:	605a      	str	r2, [r3, #4]
    for (i = 0U; i < 15U; i++) {
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	3301      	adds	r3, #1
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b0e      	cmp	r3, #14
 80041dc:	d9f2      	bls.n	80041c4 <USB_DevInit+0x20>
        /* Enable HW VBUS sensing */
        USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
    }
#else
    /* VBUS Sensing setup */
    if (cfg.vbus_sensing_enable == 0U) {
 80041de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d11c      	bne.n	800421e <USB_DevInit+0x7a>
        /*
         * Disable HW VBUS sensing. VBUS is internally considered to be always
         * at VBUS-Valid level (5V).
         */
        USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041f2:	f043 0302 	orr.w	r3, r3, #2
 80041f6:	6053      	str	r3, [r2, #4]
        USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	639a      	str	r2, [r3, #56]	; 0x38
        USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	639a      	str	r2, [r3, #56]	; 0x38
        USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	639a      	str	r2, [r3, #56]	; 0x38
 800421c:	e00b      	b.n	8004236 <USB_DevInit+0x92>
    } else {
        /* Enable HW VBUS sensing */
        USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004222:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	639a      	str	r2, [r3, #56]	; 0x38
        USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) ||                  \
          defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||                  \
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

    /* Restart the Phy Clock */
    USBx_PCGCCTL = 0U;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800423c:	461a      	mov	r2, r3
 800423e:	2300      	movs	r3, #0
 8004240:	6013      	str	r3, [r2, #0]

    /* Device mode configuration */
    USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004248:	4619      	mov	r1, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004250:	461a      	mov	r2, r3
 8004252:	680b      	ldr	r3, [r1, #0]
 8004254:	6013      	str	r3, [r2, #0]

    if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 8004256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004258:	2b01      	cmp	r3, #1
 800425a:	d10c      	bne.n	8004276 <USB_DevInit+0xd2>
        if (cfg.speed == USBD_HS_SPEED) {
 800425c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425e:	2b00      	cmp	r3, #0
 8004260:	d104      	bne.n	800426c <USB_DevInit+0xc8>
            /* Set Core speed to High speed mode */
            (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004262:	2100      	movs	r1, #0
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f965 	bl	8004534 <USB_SetDevSpeed>
 800426a:	e008      	b.n	800427e <USB_DevInit+0xda>
        } else {
            /* Set Core speed to Full speed mode */
            (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800426c:	2101      	movs	r1, #1
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f960 	bl	8004534 <USB_SetDevSpeed>
 8004274:	e003      	b.n	800427e <USB_DevInit+0xda>
        }
    } else {
        /* Set Core speed to Full speed mode */
        (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004276:	2103      	movs	r1, #3
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f95b 	bl	8004534 <USB_SetDevSpeed>
    }

    /* Flush the FIFOs */
    if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800427e:	2110      	movs	r1, #16
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f8f3 	bl	800446c <USB_FlushTxFifo>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <USB_DevInit+0xec>
    {
        ret = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	75fb      	strb	r3, [r7, #23]
    }

    if (USB_FlushRxFifo(USBx) != HAL_OK) {
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f91f 	bl	80044d4 <USB_FlushRxFifo>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <USB_DevInit+0xfc>
        ret = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	75fb      	strb	r3, [r7, #23]
    }

    /* Clear all pending Device Interrupts */
    USBx_DEVICE->DIEPMSK = 0U;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a6:	461a      	mov	r2, r3
 80042a8:	2300      	movs	r3, #0
 80042aa:	6113      	str	r3, [r2, #16]
    USBx_DEVICE->DOEPMSK = 0U;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b2:	461a      	mov	r2, r3
 80042b4:	2300      	movs	r3, #0
 80042b6:	6153      	str	r3, [r2, #20]
    USBx_DEVICE->DAINTMSK = 0U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042be:	461a      	mov	r2, r3
 80042c0:	2300      	movs	r3, #0
 80042c2:	61d3      	str	r3, [r2, #28]

    for (i = 0U; i < cfg.dev_endpoints; i++) {
 80042c4:	2300      	movs	r3, #0
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	e043      	b.n	8004352 <USB_DevInit+0x1ae>
        if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA) {
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042e0:	d118      	bne.n	8004314 <USB_DevInit+0x170>
            if (i == 0U) {
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10a      	bne.n	80042fe <USB_DevInit+0x15a>
                USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f4:	461a      	mov	r2, r3
 80042f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	e013      	b.n	8004326 <USB_DevInit+0x182>
            } else {
                USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4413      	add	r3, r2
 8004306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430a:	461a      	mov	r2, r3
 800430c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	e008      	b.n	8004326 <USB_DevInit+0x182>
            }
        } else {
            USBx_INEP(i)->DIEPCTL = 0U;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004320:	461a      	mov	r2, r3
 8004322:	2300      	movs	r3, #0
 8004324:	6013      	str	r3, [r2, #0]
        }

        USBx_INEP(i)->DIEPTSIZ = 0U;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004332:	461a      	mov	r2, r3
 8004334:	2300      	movs	r3, #0
 8004336:	6113      	str	r3, [r2, #16]
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004344:	461a      	mov	r2, r3
 8004346:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800434a:	6093      	str	r3, [r2, #8]
    for (i = 0U; i < cfg.dev_endpoints; i++) {
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	3301      	adds	r3, #1
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	429a      	cmp	r2, r3
 8004358:	d3b7      	bcc.n	80042ca <USB_DevInit+0x126>
    }

    for (i = 0U; i < cfg.dev_endpoints; i++) {
 800435a:	2300      	movs	r3, #0
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	e043      	b.n	80043e8 <USB_DevInit+0x244>
        if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004372:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004376:	d118      	bne.n	80043aa <USB_DevInit+0x206>
            if (i == 0U) {
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10a      	bne.n	8004394 <USB_DevInit+0x1f0>
                USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438a:	461a      	mov	r2, r3
 800438c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e013      	b.n	80043bc <USB_DevInit+0x218>
            } else {
                USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a0:	461a      	mov	r2, r3
 80043a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	e008      	b.n	80043bc <USB_DevInit+0x218>
            }
        } else {
            USBx_OUTEP(i)->DOEPCTL = 0U;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b6:	461a      	mov	r2, r3
 80043b8:	2300      	movs	r3, #0
 80043ba:	6013      	str	r3, [r2, #0]
        }

        USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c8:	461a      	mov	r2, r3
 80043ca:	2300      	movs	r3, #0
 80043cc:	6113      	str	r3, [r2, #16]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043da:	461a      	mov	r2, r3
 80043dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043e0:	6093      	str	r3, [r2, #8]
    for (i = 0U; i < cfg.dev_endpoints; i++) {
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	3301      	adds	r3, #1
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d3b7      	bcc.n	8004360 <USB_DevInit+0x1bc>
    }

    USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004402:	6113      	str	r3, [r2, #16]

    /* Disable all interrupts. */
    USBx->GINTMSK = 0U;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	619a      	str	r2, [r3, #24]

    /* Clear any pending interrupts */
    USBx->GINTSTS = 0xBFFFFFFFU;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004410:	615a      	str	r2, [r3, #20]

    /* Enable the common interrupts */
    if (cfg.dma_enable == 0U) {
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	2b00      	cmp	r3, #0
 8004416:	d105      	bne.n	8004424 <USB_DevInit+0x280>
        USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	f043 0210 	orr.w	r2, r3, #16
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	619a      	str	r2, [r3, #24]
    }

    /* Enable interrupts matching to the Device mode ONLY */
    USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST | USB_OTG_GINTMSK_ENUMDNEM |
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699a      	ldr	r2, [r3, #24]
 8004428:	4b0f      	ldr	r3, [pc, #60]	; (8004468 <USB_DevInit+0x2c4>)
 800442a:	4313      	orrs	r3, r2
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6193      	str	r3, [r2, #24]
                     USB_OTG_GINTMSK_IEPINT | USB_OTG_GINTMSK_OEPINT | USB_OTG_GINTMSK_IISOIXFRM |
                     USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

    if (cfg.Sof_enable != 0U) {
 8004430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <USB_DevInit+0x29e>
        USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f043 0208 	orr.w	r2, r3, #8
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	619a      	str	r2, [r3, #24]
    }

    if (cfg.vbus_sensing_enable == 1U) {
 8004442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004444:	2b01      	cmp	r3, #1
 8004446:	d107      	bne.n	8004458 <USB_DevInit+0x2b4>
        USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004450:	f043 0304 	orr.w	r3, r3, #4
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6193      	str	r3, [r2, #24]
    }

    return ret;
 8004458:	7dfb      	ldrb	r3, [r7, #23]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004464:	b004      	add	sp, #16
 8004466:	4770      	bx	lr
 8004468:	803c3800 	.word	0x803c3800

0800446c <USB_FlushTxFifo>:
  * @param  num  FIFO number
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef * USBx, uint32_t num) {
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
    __IO uint32_t count = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	60fb      	str	r3, [r7, #12]

    /* Wait for AHB master IDLE state. */
    do {
        count++;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3301      	adds	r3, #1
 800447e:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4a13      	ldr	r2, [pc, #76]	; (80044d0 <USB_FlushTxFifo+0x64>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d901      	bls.n	800448c <USB_FlushTxFifo+0x20>
            return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e01b      	b.n	80044c4 <USB_FlushTxFifo+0x58>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	daf2      	bge.n	800447a <USB_FlushTxFifo+0xe>

    /* Flush TX Fifo */
    count = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]
    USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	019b      	lsls	r3, r3, #6
 800449c:	f043 0220 	orr.w	r2, r3, #32
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	611a      	str	r2, [r3, #16]

    do {
        count++;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	3301      	adds	r3, #1
 80044a8:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4a08      	ldr	r2, [pc, #32]	; (80044d0 <USB_FlushTxFifo+0x64>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <USB_FlushTxFifo+0x4a>
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e006      	b.n	80044c4 <USB_FlushTxFifo+0x58>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b20      	cmp	r3, #32
 80044c0:	d0f0      	beq.n	80044a4 <USB_FlushTxFifo+0x38>

    return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	00030d40 	.word	0x00030d40

080044d4 <USB_FlushRxFifo>:
/**
 * @brief  USB_FlushRxFifo  Flush Rx FIFO
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef * USBx) {
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
    __IO uint32_t count = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]

    /* Wait for AHB master IDLE state. */
    do {
        count++;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	3301      	adds	r3, #1
 80044e4:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4a11      	ldr	r2, [pc, #68]	; (8004530 <USB_FlushRxFifo+0x5c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d901      	bls.n	80044f2 <USB_FlushRxFifo+0x1e>
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e018      	b.n	8004524 <USB_FlushRxFifo+0x50>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	daf2      	bge.n	80044e0 <USB_FlushRxFifo+0xc>

    /* Flush RX Fifo */
    count = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
    USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2210      	movs	r2, #16
 8004502:	611a      	str	r2, [r3, #16]

    do {
        count++;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3301      	adds	r3, #1
 8004508:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4a08      	ldr	r2, [pc, #32]	; (8004530 <USB_FlushRxFifo+0x5c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <USB_FlushRxFifo+0x42>
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e006      	b.n	8004524 <USB_FlushRxFifo+0x50>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2b10      	cmp	r3, #16
 8004520:	d0f0      	beq.n	8004504 <USB_FlushRxFifo+0x30>

    return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	00030d40 	.word	0x00030d40

08004534 <USB_SetDevSpeed>:
 *            @arg USB_OTG_SPEED_HIGH: High speed mode
 *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
 *            @arg USB_OTG_SPEED_FULL: Full speed mode
 * @retval  Hal status
 */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef * USBx, uint8_t speed) {
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	60fb      	str	r3, [r7, #12]

    USBx_DEVICE->DCFG |= speed;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	68f9      	ldr	r1, [r7, #12]
 8004550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]
    return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <USB_GetDevSpeed>:
 * @retval speed  device speed
 *          This parameter can be one of these values:
 *            @arg USBD_HS_SPEED: High speed mode
 *            @arg USBD_FS_SPEED: Full speed mode
 */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef * USBx) {
 8004566:	b480      	push	{r7}
 8004568:	b087      	sub	sp, #28
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	613b      	str	r3, [r7, #16]
    uint8_t speed;
    uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 0306 	and.w	r3, r3, #6
 800457e:	60fb      	str	r3, [r7, #12]

    if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ) {
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d102      	bne.n	800458c <USB_GetDevSpeed+0x26>
        speed = USBD_HS_SPEED;
 8004586:	2300      	movs	r3, #0
 8004588:	75fb      	strb	r3, [r7, #23]
 800458a:	e00a      	b.n	80045a2 <USB_GetDevSpeed+0x3c>
    } else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d002      	beq.n	8004598 <USB_GetDevSpeed+0x32>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2b06      	cmp	r3, #6
 8004596:	d102      	bne.n	800459e <USB_GetDevSpeed+0x38>
               (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ)) {
        speed = USBD_FS_SPEED;
 8004598:	2302      	movs	r3, #2
 800459a:	75fb      	strb	r3, [r7, #23]
 800459c:	e001      	b.n	80045a2 <USB_GetDevSpeed+0x3c>
    } else {
        speed = 0xFU;
 800459e:	230f      	movs	r3, #15
 80045a0:	75fb      	strb	r3, [r7, #23]
    }

    return speed;
 80045a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	371c      	adds	r7, #28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <USB_ActivateEndpoint>:
 * @brief  Activate and configure an endpoint
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t)USBx;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t)ep->num;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	60bb      	str	r3, [r7, #8]

    if (ep->is_in == 1U) {
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	785b      	ldrb	r3, [r3, #1]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d13a      	bne.n	8004642 <USB_ActivateEndpoint+0x92>
        USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d2:	69da      	ldr	r2, [r3, #28]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	f003 030f 	and.w	r3, r3, #15
 80045dc:	2101      	movs	r1, #1
 80045de:	fa01 f303 	lsl.w	r3, r1, r3
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	68f9      	ldr	r1, [r7, #12]
 80045e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045ea:	4313      	orrs	r3, r2
 80045ec:	61cb      	str	r3, [r1, #28]

        if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U) {
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d155      	bne.n	80046b0 <USB_ActivateEndpoint+0x100>
            USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                         ((uint32_t)ep->type << 18) | (epnum << 22) |
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	791b      	ldrb	r3, [r3, #4]
 800461e:	049b      	lsls	r3, r3, #18
            USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004620:	4319      	orrs	r1, r3
                                         ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	059b      	lsls	r3, r3, #22
 8004626:	430b      	orrs	r3, r1
            USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004628:	4313      	orrs	r3, r2
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	0151      	lsls	r1, r2, #5
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	440a      	add	r2, r1
 8004632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	e036      	b.n	80046b0 <USB_ActivateEndpoint+0x100>
                                         USB_OTG_DIEPCTL_SD0PID_SEVNFRM | USB_OTG_DIEPCTL_USBAEP;
        }
    } else {
        USBx_DEVICE->DAINTMSK |=
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004648:	69da      	ldr	r2, [r3, #28]
            USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	2101      	movs	r1, #1
 8004654:	fa01 f303 	lsl.w	r3, r1, r3
 8004658:	041b      	lsls	r3, r3, #16
        USBx_DEVICE->DAINTMSK |=
 800465a:	68f9      	ldr	r1, [r7, #12]
 800465c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004660:	4313      	orrs	r3, r2
 8004662:	61cb      	str	r3, [r1, #28]

        if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U) {
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d11a      	bne.n	80046b0 <USB_ActivateEndpoint+0x100>
            USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                          ((uint32_t)ep->type << 18) |
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	791b      	ldrb	r3, [r3, #4]
 8004694:	049b      	lsls	r3, r3, #18
            USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004696:	430b      	orrs	r3, r1
 8004698:	4313      	orrs	r3, r2
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	0151      	lsls	r1, r2, #5
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	440a      	add	r2, r1
 80046a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ae:	6013      	str	r3, [r2, #0]
                                          USB_OTG_DIEPCTL_SD0PID_SEVNFRM | USB_OTG_DOEPCTL_USBAEP;
        }
    }
    return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
	...

080046c0 <USB_DeactivateEndpoint>:
 * @brief  De-activate and de-initialize an endpoint
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t)USBx;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t)ep->num;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	60bb      	str	r3, [r7, #8]

    /* Read DEPCTLn register */
    if (ep->is_in == 1U) {
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	785b      	ldrb	r3, [r3, #1]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d161      	bne.n	80047a0 <USB_DeactivateEndpoint+0xe0>
        if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA) {
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046f2:	d11f      	bne.n	8004734 <USB_DeactivateEndpoint+0x74>
            USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	0151      	lsls	r1, r2, #5
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	440a      	add	r2, r1
 800470a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800470e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004712:	6013      	str	r3, [r2, #0]
            USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	0151      	lsls	r1, r2, #5
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	440a      	add	r2, r1
 800472a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800472e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004732:	6013      	str	r3, [r2, #0]
        }

        USBx_DEVICE->DEACHMSK &=
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800473a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
            ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	2101      	movs	r1, #1
 8004746:	fa01 f303 	lsl.w	r3, r1, r3
 800474a:	b29b      	uxth	r3, r3
 800474c:	43db      	mvns	r3, r3
        USBx_DEVICE->DEACHMSK &=
 800474e:	68f9      	ldr	r1, [r7, #12]
 8004750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004754:	4013      	ands	r3, r2
 8004756:	63cb      	str	r3, [r1, #60]	; 0x3c
        USBx_DEVICE->DAINTMSK &=
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475e:	69da      	ldr	r2, [r3, #28]
            ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	2101      	movs	r1, #1
 800476a:	fa01 f303 	lsl.w	r3, r1, r3
 800476e:	b29b      	uxth	r3, r3
 8004770:	43db      	mvns	r3, r3
        USBx_DEVICE->DAINTMSK &=
 8004772:	68f9      	ldr	r1, [r7, #12]
 8004774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004778:	4013      	ands	r3, r2
 800477a:	61cb      	str	r3, [r1, #28]
        USBx_INEP(epnum)->DIEPCTL &=
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	0159      	lsls	r1, r3, #5
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	440b      	add	r3, r1
 8004792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004796:	4619      	mov	r1, r3
 8004798:	4b35      	ldr	r3, [pc, #212]	; (8004870 <USB_DeactivateEndpoint+0x1b0>)
 800479a:	4013      	ands	r3, r2
 800479c:	600b      	str	r3, [r1, #0]
 800479e:	e060      	b.n	8004862 <USB_DeactivateEndpoint+0x1a2>
            ~(USB_OTG_DIEPCTL_USBAEP | USB_OTG_DIEPCTL_MPSIZ | USB_OTG_DIEPCTL_TXFNUM |
              USB_OTG_DIEPCTL_SD0PID_SEVNFRM | USB_OTG_DIEPCTL_EPTYP);
    } else {
        if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047b6:	d11f      	bne.n	80047f8 <USB_DeactivateEndpoint+0x138>
            USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	0151      	lsls	r1, r2, #5
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	440a      	add	r2, r1
 80047ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047d6:	6013      	str	r3, [r2, #0]
            USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	0151      	lsls	r1, r2, #5
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	440a      	add	r2, r1
 80047ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047f6:	6013      	str	r3, [r2, #0]
        }

        USBx_DEVICE->DEACHMSK &=
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
            ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	2101      	movs	r1, #1
 800480a:	fa01 f303 	lsl.w	r3, r1, r3
 800480e:	041b      	lsls	r3, r3, #16
 8004810:	43db      	mvns	r3, r3
        USBx_DEVICE->DEACHMSK &=
 8004812:	68f9      	ldr	r1, [r7, #12]
 8004814:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004818:	4013      	ands	r3, r2
 800481a:	63cb      	str	r3, [r1, #60]	; 0x3c
        USBx_DEVICE->DAINTMSK &=
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004822:	69da      	ldr	r2, [r3, #28]
            ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	f003 030f 	and.w	r3, r3, #15
 800482c:	2101      	movs	r1, #1
 800482e:	fa01 f303 	lsl.w	r3, r1, r3
 8004832:	041b      	lsls	r3, r3, #16
 8004834:	43db      	mvns	r3, r3
        USBx_DEVICE->DAINTMSK &=
 8004836:	68f9      	ldr	r1, [r7, #12]
 8004838:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800483c:	4013      	ands	r3, r2
 800483e:	61cb      	str	r3, [r1, #28]
        USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP | USB_OTG_DOEPCTL_MPSIZ |
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	0159      	lsls	r1, r3, #5
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	440b      	add	r3, r1
 8004856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485a:	4619      	mov	r1, r3
 800485c:	4b05      	ldr	r3, [pc, #20]	; (8004874 <USB_DeactivateEndpoint+0x1b4>)
 800485e:	4013      	ands	r3, r2
 8004860:	600b      	str	r3, [r1, #0]
                                        USB_OTG_DOEPCTL_SD0PID_SEVNFRM | USB_OTG_DOEPCTL_EPTYP);
    }

    return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	ec337800 	.word	0xec337800
 8004874:	eff37800 	.word	0xeff37800

08004878 <USB_EPStartXfer>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep,
                                  uint8_t dma) {
 8004878:	b580      	push	{r7, lr}
 800487a:	b08a      	sub	sp, #40	; 0x28
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	4613      	mov	r3, r2
 8004884:	71fb      	strb	r3, [r7, #7]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	61fb      	str	r3, [r7, #28]
    uint32_t epnum = (uint32_t)ep->num;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	61bb      	str	r3, [r7, #24]
    uint16_t pktcnt;

    /* IN endpoint */
    if (ep->is_in == 1U) {
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	785b      	ldrb	r3, [r3, #1]
 8004894:	2b01      	cmp	r3, #1
 8004896:	f040 815c 	bne.w	8004b52 <USB_EPStartXfer+0x2da>
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U) {
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d132      	bne.n	8004908 <USB_EPStartXfer+0x90>
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	015a      	lsls	r2, r3, #5
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	0151      	lsls	r1, r2, #5
 80048b4:	69fa      	ldr	r2, [r7, #28]
 80048b6:	440a      	add	r2, r1
 80048b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048c4:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	0151      	lsls	r1, r2, #5
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	440a      	add	r2, r1
 80048dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048e4:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	0151      	lsls	r1, r2, #5
 80048f8:	69fa      	ldr	r2, [r7, #28]
 80048fa:	440a      	add	r2, r1
 80048fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004900:	0cdb      	lsrs	r3, r3, #19
 8004902:	04db      	lsls	r3, r3, #19
 8004904:	6113      	str	r3, [r2, #16]
 8004906:	e074      	b.n	80049f2 <USB_EPStartXfer+0x17a>
            /* Program the transfer size and packet count
             * as follows: xfersize = N * maxpacket +
             * short_packet pktcnt = N + (short_packet
             * exist ? 1 : 0)
             */
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	0151      	lsls	r1, r2, #5
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	440a      	add	r2, r1
 800491e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004922:	0cdb      	lsrs	r3, r3, #19
 8004924:	04db      	lsls	r3, r3, #19
 8004926:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	0151      	lsls	r1, r2, #5
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	440a      	add	r2, r1
 800493e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004942:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004946:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800494a:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ |=
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004958:	691a      	ldr	r2, [r3, #16]
                (USB_OTG_DIEPTSIZ_PKTCNT &
                 (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	6999      	ldr	r1, [r3, #24]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	440b      	add	r3, r1
 8004964:	1e59      	subs	r1, r3, #1
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	fbb1 f3f3 	udiv	r3, r1, r3
 800496e:	04d9      	lsls	r1, r3, #19
                (USB_OTG_DIEPTSIZ_PKTCNT &
 8004970:	4b9d      	ldr	r3, [pc, #628]	; (8004be8 <USB_EPStartXfer+0x370>)
 8004972:	400b      	ands	r3, r1
            USBx_INEP(epnum)->DIEPTSIZ |=
 8004974:	69b9      	ldr	r1, [r7, #24]
 8004976:	0148      	lsls	r0, r1, #5
 8004978:	69f9      	ldr	r1, [r7, #28]
 800497a:	4401      	add	r1, r0
 800497c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004980:	4313      	orrs	r3, r2
 8004982:	610b      	str	r3, [r1, #16]

            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004990:	691a      	ldr	r2, [r3, #16]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800499a:	69b9      	ldr	r1, [r7, #24]
 800499c:	0148      	lsls	r0, r1, #5
 800499e:	69f9      	ldr	r1, [r7, #28]
 80049a0:	4401      	add	r1, r0
 80049a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049a6:	4313      	orrs	r3, r2
 80049a8:	610b      	str	r3, [r1, #16]

            if (ep->type == EP_TYPE_ISOC) {
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	791b      	ldrb	r3, [r3, #4]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d11f      	bne.n	80049f2 <USB_EPStartXfer+0x17a>
                USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	0151      	lsls	r1, r2, #5
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	440a      	add	r2, r1
 80049c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80049d0:	6113      	str	r3, [r2, #16]
                USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	0151      	lsls	r1, r2, #5
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	440a      	add	r2, r1
 80049e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049f0:	6113      	str	r3, [r2, #16]
            }
        }

        if (dma == 1U) {
 80049f2:	79fb      	ldrb	r3, [r7, #7]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d14b      	bne.n	8004a90 <USB_EPStartXfer+0x218>
            if ((uint32_t)ep->dma_addr != 0U) {
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d009      	beq.n	8004a14 <USB_EPStartXfer+0x19c>
                USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	6153      	str	r3, [r2, #20]
            }

            if (ep->type == EP_TYPE_ISOC) {
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	791b      	ldrb	r3, [r3, #4]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d128      	bne.n	8004a6e <USB_EPStartXfer+0x1f6>
                if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d110      	bne.n	8004a4e <USB_EPStartXfer+0x1d6>
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	0151      	lsls	r1, r2, #5
 8004a3e:	69fa      	ldr	r2, [r7, #28]
 8004a40:	440a      	add	r2, r1
 8004a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a4a:	6013      	str	r3, [r2, #0]
 8004a4c:	e00f      	b.n	8004a6e <USB_EPStartXfer+0x1f6>
                } else {
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	0151      	lsls	r1, r2, #5
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	440a      	add	r2, r1
 8004a64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	6013      	str	r3, [r2, #0]
                }
            }

            /* EP enable, IN data in FIFO */
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	0151      	lsls	r1, r2, #5
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	440a      	add	r2, r1
 8004a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e133      	b.n	8004cf8 <USB_EPStartXfer+0x480>
        } else {
            /* EP enable, IN data in FIFO */
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	0151      	lsls	r1, r2, #5
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	440a      	add	r2, r1
 8004aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004aae:	6013      	str	r3, [r2, #0]

            if (ep->type != EP_TYPE_ISOC) {
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	791b      	ldrb	r3, [r3, #4]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d015      	beq.n	8004ae4 <USB_EPStartXfer+0x26c>
                /* Enable the Tx FIFO Empty Interrupt for this EP */
                if (ep->xfer_len > 0U) {
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 811b 	beq.w	8004cf8 <USB_EPStartXfer+0x480>
                    USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad8:	69f9      	ldr	r1, [r7, #28]
 8004ada:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	634b      	str	r3, [r1, #52]	; 0x34
 8004ae2:	e109      	b.n	8004cf8 <USB_EPStartXfer+0x480>
                }
            } else {
                if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d110      	bne.n	8004b16 <USB_EPStartXfer+0x29e>
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	0151      	lsls	r1, r2, #5
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	440a      	add	r2, r1
 8004b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	e00f      	b.n	8004b36 <USB_EPStartXfer+0x2be>
                } else {
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	0151      	lsls	r1, r2, #5
 8004b28:	69fa      	ldr	r2, [r7, #28]
 8004b2a:	440a      	add	r2, r1
 8004b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b34:	6013      	str	r3, [r2, #0]
                }

                (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	6919      	ldr	r1, [r3, #16]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	781a      	ldrb	r2, [r3, #0]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	b298      	uxth	r0, r3
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	4603      	mov	r3, r0
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 fade 	bl	800510c <USB_WritePacket>
 8004b50:	e0d2      	b.n	8004cf8 <USB_EPStartXfer+0x480>
    {
        /* Program the transfer size and packet count as follows:
         * pktcnt = N
         * xfersize = N * maxpacket
         */
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	0151      	lsls	r1, r2, #5
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	440a      	add	r2, r1
 8004b68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b6c:	0cdb      	lsrs	r3, r3, #19
 8004b6e:	04db      	lsls	r3, r3, #19
 8004b70:	6113      	str	r3, [r2, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	0151      	lsls	r1, r2, #5
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	440a      	add	r2, r1
 8004b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b94:	6113      	str	r3, [r2, #16]

        if (ep->xfer_len == 0U) {
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d126      	bne.n	8004bec <USB_EPStartXfer+0x374>
            USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004baa:	691a      	ldr	r2, [r3, #16]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb4:	69b9      	ldr	r1, [r7, #24]
 8004bb6:	0148      	lsls	r0, r1, #5
 8004bb8:	69f9      	ldr	r1, [r7, #28]
 8004bba:	4401      	add	r1, r0
 8004bbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	610b      	str	r3, [r1, #16]
            USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	0151      	lsls	r1, r2, #5
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	440a      	add	r2, r1
 8004bda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004be2:	6113      	str	r3, [r2, #16]
 8004be4:	e03a      	b.n	8004c5c <USB_EPStartXfer+0x3e4>
 8004be6:	bf00      	nop
 8004be8:	1ff80000 	.word	0x1ff80000
        } else {
            pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	699a      	ldr	r2, [r3, #24]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	1e5a      	subs	r2, r3, #1
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c00:	82fb      	strh	r3, [r7, #22]
            ep->xfer_size = ep->maxpacket * pktcnt;
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	8afa      	ldrh	r2, [r7, #22]
 8004c08:	fb03 f202 	mul.w	r2, r3, r2
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	61da      	str	r2, [r3, #28]

            USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	8afb      	ldrh	r3, [r7, #22]
 8004c20:	04d9      	lsls	r1, r3, #19
 8004c22:	4b38      	ldr	r3, [pc, #224]	; (8004d04 <USB_EPStartXfer+0x48c>)
 8004c24:	400b      	ands	r3, r1
 8004c26:	69b9      	ldr	r1, [r7, #24]
 8004c28:	0148      	lsls	r0, r1, #5
 8004c2a:	69f9      	ldr	r1, [r7, #28]
 8004c2c:	4401      	add	r1, r0
 8004c2e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c32:	4313      	orrs	r3, r2
 8004c34:	610b      	str	r3, [r1, #16]
            USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c4c:	69b9      	ldr	r1, [r7, #24]
 8004c4e:	0148      	lsls	r0, r1, #5
 8004c50:	69f9      	ldr	r1, [r7, #28]
 8004c52:	4401      	add	r1, r0
 8004c54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	610b      	str	r3, [r1, #16]
        }

        if (dma == 1U) {
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d10d      	bne.n	8004c7e <USB_EPStartXfer+0x406>
            if ((uint32_t)ep->xfer_buff != 0U) {
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d009      	beq.n	8004c7e <USB_EPStartXfer+0x406>
                USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	6919      	ldr	r1, [r3, #16]
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7a:	460a      	mov	r2, r1
 8004c7c:	615a      	str	r2, [r3, #20]
            }
        }

        if (ep->type == EP_TYPE_ISOC) {
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	791b      	ldrb	r3, [r3, #4]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d128      	bne.n	8004cd8 <USB_EPStartXfer+0x460>
            if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d110      	bne.n	8004cb8 <USB_EPStartXfer+0x440>
                USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	0151      	lsls	r1, r2, #5
 8004ca8:	69fa      	ldr	r2, [r7, #28]
 8004caa:	440a      	add	r2, r1
 8004cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	e00f      	b.n	8004cd8 <USB_EPStartXfer+0x460>
            } else {
                USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	0151      	lsls	r1, r2, #5
 8004cca:	69fa      	ldr	r2, [r7, #28]
 8004ccc:	440a      	add	r2, r1
 8004cce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd6:	6013      	str	r3, [r2, #0]
            }
        }
        /* EP enable */
        USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	0151      	lsls	r1, r2, #5
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	440a      	add	r2, r1
 8004cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cf6:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3720      	adds	r7, #32
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	1ff80000 	.word	0x1ff80000

08004d08 <USB_EP0StartXfer>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep,
                                   uint8_t dma) {
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	4613      	mov	r3, r2
 8004d14:	71fb      	strb	r3, [r7, #7]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	617b      	str	r3, [r7, #20]
    uint32_t epnum = (uint32_t)ep->num;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	613b      	str	r3, [r7, #16]

    /* IN endpoint */
    if (ep->is_in == 1U) {
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	785b      	ldrb	r3, [r3, #1]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	f040 80ce 	bne.w	8004ec6 <USB_EP0StartXfer+0x1be>
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U) {
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d132      	bne.n	8004d98 <USB_EP0StartXfer+0x90>
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	0151      	lsls	r1, r2, #5
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	440a      	add	r2, r1
 8004d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d54:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	0151      	lsls	r1, r2, #5
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	440a      	add	r2, r1
 8004d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d74:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	0151      	lsls	r1, r2, #5
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	440a      	add	r2, r1
 8004d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d90:	0cdb      	lsrs	r3, r3, #19
 8004d92:	04db      	lsls	r3, r3, #19
 8004d94:	6113      	str	r3, [r2, #16]
 8004d96:	e04e      	b.n	8004e36 <USB_EP0StartXfer+0x12e>
            /* Program the transfer size and packet count
             * as follows: xfersize = N * maxpacket +
             * short_packet pktcnt = N + (short_packet
             * exist ? 1 : 0)
             */
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	0151      	lsls	r1, r2, #5
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	440a      	add	r2, r1
 8004dae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004db2:	0cdb      	lsrs	r3, r3, #19
 8004db4:	04db      	lsls	r3, r3, #19
 8004db6:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	0151      	lsls	r1, r2, #5
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	440a      	add	r2, r1
 8004dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dd6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dda:	6113      	str	r3, [r2, #16]

            if (ep->xfer_len > ep->maxpacket) {
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	699a      	ldr	r2, [r3, #24]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d903      	bls.n	8004df0 <USB_EP0StartXfer+0xe8>
                ep->xfer_len = ep->maxpacket;
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	619a      	str	r2, [r3, #24]
            }
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	0151      	lsls	r1, r2, #5
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	440a      	add	r2, r1
 8004e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e0e:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e26:	6939      	ldr	r1, [r7, #16]
 8004e28:	0148      	lsls	r0, r1, #5
 8004e2a:	6979      	ldr	r1, [r7, #20]
 8004e2c:	4401      	add	r1, r0
 8004e2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e32:	4313      	orrs	r3, r2
 8004e34:	610b      	str	r3, [r1, #16]
        }

        if (dma == 1U) {
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d11e      	bne.n	8004e7a <USB_EP0StartXfer+0x172>
            if ((uint32_t)ep->dma_addr != 0U) {
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d009      	beq.n	8004e58 <USB_EP0StartXfer+0x150>
                USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e50:	461a      	mov	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	6153      	str	r3, [r2, #20]
            }

            /* EP enable, IN data in FIFO */
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	0151      	lsls	r1, r2, #5
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	440a      	add	r2, r1
 8004e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e76:	6013      	str	r3, [r2, #0]
 8004e78:	e097      	b.n	8004faa <USB_EP0StartXfer+0x2a2>
        } else {
            /* EP enable, IN data in FIFO */
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	0151      	lsls	r1, r2, #5
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	440a      	add	r2, r1
 8004e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e98:	6013      	str	r3, [r2, #0]

            /* Enable the Tx FIFO Empty Interrupt for this EP */
            if (ep->xfer_len > 0U) {
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f000 8083 	beq.w	8004faa <USB_EP0StartXfer+0x2a2>
                USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eba:	6979      	ldr	r1, [r7, #20]
 8004ebc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	634b      	str	r3, [r1, #52]	; 0x34
 8004ec4:	e071      	b.n	8004faa <USB_EP0StartXfer+0x2a2>
    {
        /* Program the transfer size and packet count as follows:
         * pktcnt = N
         * xfersize = N * maxpacket
         */
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	0151      	lsls	r1, r2, #5
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	440a      	add	r2, r1
 8004edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ee0:	0cdb      	lsrs	r3, r3, #19
 8004ee2:	04db      	lsls	r3, r3, #19
 8004ee4:	6113      	str	r3, [r2, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	0151      	lsls	r1, r2, #5
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	440a      	add	r2, r1
 8004efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f08:	6113      	str	r3, [r2, #16]

        if (ep->xfer_len > 0U) {
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <USB_EP0StartXfer+0x212>
            ep->xfer_len = ep->maxpacket;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	619a      	str	r2, [r3, #24]
        }

        /* Store transfer size, for EP0 this is equal to endpoint max packet size */
        ep->xfer_size = ep->maxpacket;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	61da      	str	r2, [r3, #28]

        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	0151      	lsls	r1, r2, #5
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	440a      	add	r2, r1
 8004f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f40:	6113      	str	r3, [r2, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f58:	6939      	ldr	r1, [r7, #16]
 8004f5a:	0148      	lsls	r0, r1, #5
 8004f5c:	6979      	ldr	r1, [r7, #20]
 8004f5e:	4401      	add	r1, r0
 8004f60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f64:	4313      	orrs	r3, r2
 8004f66:	610b      	str	r3, [r1, #16]

        if (dma == 1U) {
 8004f68:	79fb      	ldrb	r3, [r7, #7]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d10d      	bne.n	8004f8a <USB_EP0StartXfer+0x282>
            if ((uint32_t)ep->xfer_buff != 0U) {
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d009      	beq.n	8004f8a <USB_EP0StartXfer+0x282>
                USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	6919      	ldr	r1, [r3, #16]
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f86:	460a      	mov	r2, r1
 8004f88:	615a      	str	r2, [r3, #20]
            }
        }

        /* EP enable */
        USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	0151      	lsls	r1, r2, #5
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	440a      	add	r2, r1
 8004fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fa8:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	371c      	adds	r7, #28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <USB_EPStopXfer>:
 * @brief  USB_EPStoptXfer  Stop transfer on an EP
 * @param  USBx  usb device instance
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
    __IO uint32_t count = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60fb      	str	r3, [r7, #12]
    HAL_StatusTypeDef ret = HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	75fb      	strb	r3, [r7, #23]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	613b      	str	r3, [r7, #16]

    /* IN endpoint */
    if (ep->is_in == 1U) {
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	785b      	ldrb	r3, [r3, #1]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d14a      	bne.n	800506c <USB_EPStopXfer+0xb4>
        /* EP enable, IN data in FIFO */
        if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA) {
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fee:	f040 8086 	bne.w	80050fe <USB_EPStopXfer+0x146>
            USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	7812      	ldrb	r2, [r2, #0]
 8005006:	0151      	lsls	r1, r2, #5
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	440a      	add	r2, r1
 800500c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005010:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005014:	6013      	str	r3, [r2, #0]
            USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	7812      	ldrb	r2, [r2, #0]
 800502a:	0151      	lsls	r1, r2, #5
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	440a      	add	r2, r1
 8005030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005034:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005038:	6013      	str	r3, [r2, #0]

            do {
                count++;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3301      	adds	r3, #1
 800503e:	60fb      	str	r3, [r7, #12]

                if (count > 10000U) {
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f242 7210 	movw	r2, #10000	; 0x2710
 8005046:	4293      	cmp	r3, r2
 8005048:	d902      	bls.n	8005050 <USB_EPStopXfer+0x98>
                    ret = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	75fb      	strb	r3, [r7, #23]
                    break;
 800504e:	e056      	b.n	80050fe <USB_EPStopXfer+0x146>
                }
            } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
                     USB_OTG_DIEPCTL_EPENA);
 8005064:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005068:	d0e7      	beq.n	800503a <USB_EPStopXfer+0x82>
 800506a:	e048      	b.n	80050fe <USB_EPStopXfer+0x146>
        }
    } else /* OUT endpoint */
    {
        if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005080:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005084:	d13b      	bne.n	80050fe <USB_EPStopXfer+0x146>
            USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	7812      	ldrb	r2, [r2, #0]
 800509a:	0151      	lsls	r1, r2, #5
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	440a      	add	r2, r1
 80050a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050a8:	6013      	str	r3, [r2, #0]
            USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	7812      	ldrb	r2, [r2, #0]
 80050be:	0151      	lsls	r1, r2, #5
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	440a      	add	r2, r1
 80050c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050cc:	6013      	str	r3, [r2, #0]

            do {
                count++;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3301      	adds	r3, #1
 80050d2:	60fb      	str	r3, [r7, #12]

                if (count > 10000U) {
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80050da:	4293      	cmp	r3, r2
 80050dc:	d902      	bls.n	80050e4 <USB_EPStopXfer+0x12c>
                    ret = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	75fb      	strb	r3, [r7, #23]
                    break;
 80050e2:	e00c      	b.n	80050fe <USB_EPStopXfer+0x146>
                }
            } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
                     USB_OTG_DOEPCTL_EPENA);
 80050f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050fc:	d0e7      	beq.n	80050ce <USB_EPStopXfer+0x116>
        }
    }

    return ret;
 80050fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005100:	4618      	mov	r0, r3
 8005102:	371c      	adds	r7, #28
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <USB_WritePacket>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef * USBx, uint8_t * src, uint8_t ch_ep_num,
                                  uint16_t len, uint8_t dma) {
 800510c:	b480      	push	{r7}
 800510e:	b089      	sub	sp, #36	; 0x24
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	4611      	mov	r1, r2
 8005118:	461a      	mov	r2, r3
 800511a:	460b      	mov	r3, r1
 800511c:	71fb      	strb	r3, [r7, #7]
 800511e:	4613      	mov	r3, r2
 8005120:	80bb      	strh	r3, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	617b      	str	r3, [r7, #20]
    uint8_t * pSrc = src;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	61fb      	str	r3, [r7, #28]
    uint32_t count32b;
    uint32_t i;

    if (dma == 0U) {
 800512a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800512e:	2b00      	cmp	r3, #0
 8005130:	d123      	bne.n	800517a <USB_WritePacket+0x6e>
        count32b = ((uint32_t)len + 3U) / 4U;
 8005132:	88bb      	ldrh	r3, [r7, #4]
 8005134:	3303      	adds	r3, #3
 8005136:	089b      	lsrs	r3, r3, #2
 8005138:	613b      	str	r3, [r7, #16]
        for (i = 0U; i < count32b; i++) {
 800513a:	2300      	movs	r3, #0
 800513c:	61bb      	str	r3, [r7, #24]
 800513e:	e018      	b.n	8005172 <USB_WritePacket+0x66>
            USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005140:	79fb      	ldrb	r3, [r7, #7]
 8005142:	031a      	lsls	r2, r3, #12
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	4413      	add	r3, r2
 8005148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800514c:	461a      	mov	r2, r3
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6013      	str	r3, [r2, #0]
            pSrc++;
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	3301      	adds	r3, #1
 8005158:	61fb      	str	r3, [r7, #28]
            pSrc++;
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	3301      	adds	r3, #1
 800515e:	61fb      	str	r3, [r7, #28]
            pSrc++;
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	3301      	adds	r3, #1
 8005164:	61fb      	str	r3, [r7, #28]
            pSrc++;
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	3301      	adds	r3, #1
 800516a:	61fb      	str	r3, [r7, #28]
        for (i = 0U; i < count32b; i++) {
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	3301      	adds	r3, #1
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	429a      	cmp	r2, r3
 8005178:	d3e2      	bcc.n	8005140 <USB_WritePacket+0x34>
        }
    }

    return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3724      	adds	r7, #36	; 0x24
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <USB_ReadPacket>:
 * @param  USBx  Selected device
 * @param  dest  source pointer
 * @param  len  Number of bytes to read
 * @retval pointer to destination buffer
 */
void * USB_ReadPacket(USB_OTG_GlobalTypeDef * USBx, uint8_t * dest, uint16_t len) {
 8005188:	b480      	push	{r7}
 800518a:	b08b      	sub	sp, #44	; 0x2c
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	4613      	mov	r3, r2
 8005194:	80fb      	strh	r3, [r7, #6]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	61bb      	str	r3, [r7, #24]
    uint8_t * pDest = dest;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t pData;
    uint32_t i;
    uint32_t count32b = (uint32_t)len >> 2U;
 800519e:	88fb      	ldrh	r3, [r7, #6]
 80051a0:	089b      	lsrs	r3, r3, #2
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	617b      	str	r3, [r7, #20]
    uint16_t remaining_bytes = len % 4U;
 80051a6:	88fb      	ldrh	r3, [r7, #6]
 80051a8:	f003 0303 	and.w	r3, r3, #3
 80051ac:	83fb      	strh	r3, [r7, #30]

    for (i = 0U; i < count32b; i++) {
 80051ae:	2300      	movs	r3, #0
 80051b0:	623b      	str	r3, [r7, #32]
 80051b2:	e014      	b.n	80051de <USB_ReadPacket+0x56>
        __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	601a      	str	r2, [r3, #0]
        pDest++;
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	3301      	adds	r3, #1
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24
        pDest++;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	3301      	adds	r3, #1
 80051ca:	627b      	str	r3, [r7, #36]	; 0x24
        pDest++;
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	3301      	adds	r3, #1
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
        pDest++;
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	3301      	adds	r3, #1
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0U; i < count32b; i++) {
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	3301      	adds	r3, #1
 80051dc:	623b      	str	r3, [r7, #32]
 80051de:	6a3a      	ldr	r2, [r7, #32]
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d3e6      	bcc.n	80051b4 <USB_ReadPacket+0x2c>
    }

    /* When Number of data is not word aligned, read the remaining byte */
    if (remaining_bytes != 0U) {
 80051e6:	8bfb      	ldrh	r3, [r7, #30]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01e      	beq.n	800522a <USB_ReadPacket+0xa2>
        i = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	623b      	str	r3, [r7, #32]
        __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051f6:	461a      	mov	r2, r3
 80051f8:	f107 0310 	add.w	r3, r7, #16
 80051fc:	6812      	ldr	r2, [r2, #0]
 80051fe:	601a      	str	r2, [r3, #0]

        do {
            *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	b2db      	uxtb	r3, r3
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	fa22 f303 	lsr.w	r3, r2, r3
 800520c:	b2da      	uxtb	r2, r3
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	701a      	strb	r2, [r3, #0]
            i++;
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	3301      	adds	r3, #1
 8005216:	623b      	str	r3, [r7, #32]
            pDest++;
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	3301      	adds	r3, #1
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
            remaining_bytes--;
 800521e:	8bfb      	ldrh	r3, [r7, #30]
 8005220:	3b01      	subs	r3, #1
 8005222:	83fb      	strh	r3, [r7, #30]
        } while (remaining_bytes != 0U);
 8005224:	8bfb      	ldrh	r3, [r7, #30]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1ea      	bne.n	8005200 <USB_ReadPacket+0x78>
    }

    return ((void *)pDest);
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800522c:	4618      	mov	r0, r3
 800522e:	372c      	adds	r7, #44	; 0x2c
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <USB_EPSetStall>:
 * @brief  USB_EPSetStall : set a stall condition over an EP
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t)ep->num;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	60bb      	str	r3, [r7, #8]

    if (ep->is_in == 1U) {
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	785b      	ldrb	r3, [r3, #1]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d12c      	bne.n	80052ae <USB_EPSetStall+0x76>
        if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U)) {
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	db12      	blt.n	800528c <USB_EPSetStall+0x54>
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00f      	beq.n	800528c <USB_EPSetStall+0x54>
            USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	0151      	lsls	r1, r2, #5
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	440a      	add	r2, r1
 8005282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005286:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800528a:	6013      	str	r3, [r2, #0]
        }
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	0151      	lsls	r1, r2, #5
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	440a      	add	r2, r1
 80052a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	e02b      	b.n	8005306 <USB_EPSetStall+0xce>
    } else {
        if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U)) {
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	db12      	blt.n	80052e6 <USB_EPSetStall+0xae>
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00f      	beq.n	80052e6 <USB_EPSetStall+0xae>
            USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	0151      	lsls	r1, r2, #5
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	440a      	add	r2, r1
 80052dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052e4:	6013      	str	r3, [r2, #0]
        }
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	0151      	lsls	r1, r2, #5
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	440a      	add	r2, r1
 80052fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005300:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005304:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <USB_EPClearStall>:
 * @brief  USB_EPClearStall : Clear a stall condition over an EP
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t)ep->num;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	60bb      	str	r3, [r7, #8]

    if (ep->is_in == 1U) {
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	785b      	ldrb	r3, [r3, #1]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d128      	bne.n	8005382 <USB_EPClearStall+0x6e>
        USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	0151      	lsls	r1, r2, #5
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	440a      	add	r2, r1
 8005346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800534a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800534e:	6013      	str	r3, [r2, #0]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK)) {
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	791b      	ldrb	r3, [r3, #4]
 8005354:	2b03      	cmp	r3, #3
 8005356:	d003      	beq.n	8005360 <USB_EPClearStall+0x4c>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	791b      	ldrb	r3, [r3, #4]
 800535c:	2b02      	cmp	r3, #2
 800535e:	d138      	bne.n	80053d2 <USB_EPClearStall+0xbe>
            USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	0151      	lsls	r1, r2, #5
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	440a      	add	r2, r1
 8005376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	e027      	b.n	80053d2 <USB_EPClearStall+0xbe>
        }
    } else {
        USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	0151      	lsls	r1, r2, #5
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	440a      	add	r2, r1
 8005398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800539c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053a0:	6013      	str	r3, [r2, #0]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK)) {
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	791b      	ldrb	r3, [r3, #4]
 80053a6:	2b03      	cmp	r3, #3
 80053a8:	d003      	beq.n	80053b2 <USB_EPClearStall+0x9e>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	791b      	ldrb	r3, [r3, #4]
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d10f      	bne.n	80053d2 <USB_EPClearStall+0xbe>
            USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	0151      	lsls	r1, r2, #5
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	440a      	add	r2, r1
 80053c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053d0:	6013      	str	r3, [r2, #0]
        }
    }
    return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <USB_SetDevAddress>:
 * @param  USBx  Selected device
 * @param  address  new device address to be assigned
 *          This parameter can be a value from 0 to 255
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef * USBx, uint8_t address) {
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	460b      	mov	r3, r1
 80053ea:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t)USBx;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	60fb      	str	r3, [r7, #12]

    USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005402:	6013      	str	r3, [r2, #0]
    USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005414:	68f9      	ldr	r1, [r7, #12]
 8005416:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800541a:	4313      	orrs	r3, r2
 800541c:	600b      	str	r3, [r1, #0]

    return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <USB_DevConnect>:
/**
 * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef * USBx) {
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	60fb      	str	r3, [r7, #12]

    /* In case phy is stopped, ensure to ungate and restore the phy CLK */
    USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005446:	f023 0303 	bic.w	r3, r3, #3
 800544a:	6013      	str	r3, [r2, #0]

    USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800545a:	f023 0302 	bic.w	r3, r3, #2
 800545e:	6053      	str	r3, [r2, #4]

    return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <USB_DevDisconnect>:
/**
 * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef * USBx) {
 800546e:	b480      	push	{r7}
 8005470:	b085      	sub	sp, #20
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	60fb      	str	r3, [r7, #12]

    /* In case phy is stopped, ensure to ungate and restore the phy CLK */
    USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005488:	f023 0303 	bic.w	r3, r3, #3
 800548c:	6013      	str	r3, [r2, #0]

    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800549c:	f043 0302 	orr.w	r3, r3, #2
 80054a0:	6053      	str	r3, [r2, #4]

    return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <USB_ReadInterrupts>:
/**
 * @brief  USB_ReadInterrupts: return the global USB interrupt status
 * @param  USBx  Selected device
 * @retval HAL status
 */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef * USBx) {
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
    uint32_t tmpreg;

    tmpreg = USBx->GINTSTS;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	60fb      	str	r3, [r7, #12]
    tmpreg &= USBx->GINTMSK;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4013      	ands	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]

    return tmpreg;
 80054c8:	68fb      	ldr	r3, [r7, #12]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <USB_ReadDevAllOutEpInterrupt>:
/**
 * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
 * @param  USBx  Selected device
 * @retval HAL status
 */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef * USBx) {
 80054d6:	b480      	push	{r7}
 80054d8:	b085      	sub	sp, #20
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	60fb      	str	r3, [r7, #12]
    uint32_t tmpreg;

    tmpreg = USBx_DEVICE->DAINT;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	60bb      	str	r3, [r7, #8]
    tmpreg &= USBx_DEVICE->DAINTMSK;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	4013      	ands	r3, r2
 80054f8:	60bb      	str	r3, [r7, #8]

    return ((tmpreg & 0xffff0000U) >> 16);
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	0c1b      	lsrs	r3, r3, #16
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <USB_ReadDevAllInEpInterrupt>:
/**
 * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
 * @param  USBx  Selected device
 * @retval HAL status
 */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef * USBx) {
 800550a:	b480      	push	{r7}
 800550c:	b085      	sub	sp, #20
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	60fb      	str	r3, [r7, #12]
    uint32_t tmpreg;

    tmpreg = USBx_DEVICE->DAINT;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	60bb      	str	r3, [r7, #8]
    tmpreg &= USBx_DEVICE->DAINTMSK;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	4013      	ands	r3, r2
 800552c:	60bb      	str	r3, [r7, #8]

    return ((tmpreg & 0xFFFFU));
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	b29b      	uxth	r3, r3
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <USB_ReadDevOutEPInterrupt>:
 * @param  USBx  Selected device
 * @param  epnum  endpoint number
 *          This parameter can be a value from 0 to 15
 * @retval Device OUT EP Interrupt register
 */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef * USBx, uint8_t epnum) {
 800553e:	b480      	push	{r7}
 8005540:	b085      	sub	sp, #20
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	460b      	mov	r3, r1
 8005548:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	60fb      	str	r3, [r7, #12]
    uint32_t tmpreg;

    tmpreg = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800554e:	78fb      	ldrb	r3, [r7, #3]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	60bb      	str	r3, [r7, #8]
    tmpreg &= USBx_DEVICE->DOEPMSK;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	4013      	ands	r3, r2
 800556a:	60bb      	str	r3, [r7, #8]

    return tmpreg;
 800556c:	68bb      	ldr	r3, [r7, #8]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <USB_ReadDevInEPInterrupt>:
 * @param  USBx  Selected device
 * @param  epnum  endpoint number
 *          This parameter can be a value from 0 to 15
 * @retval Device IN EP Interrupt register
 */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef * USBx, uint8_t epnum) {
 800557a:	b480      	push	{r7}
 800557c:	b087      	sub	sp, #28
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	460b      	mov	r3, r1
 8005584:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	617b      	str	r3, [r7, #20]
    uint32_t tmpreg;
    uint32_t msk;
    uint32_t emp;

    msk = USBx_DEVICE->DIEPMSK;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	613b      	str	r3, [r7, #16]
    emp = USBx_DEVICE->DIEPEMPMSK;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559c:	60fb      	str	r3, [r7, #12]
    msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800559e:	78fb      	ldrb	r3, [r7, #3]
 80055a0:	f003 030f 	and.w	r3, r3, #15
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	fa22 f303 	lsr.w	r3, r2, r3
 80055aa:	01db      	lsls	r3, r3, #7
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]
    tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	4013      	ands	r3, r2
 80055c6:	60bb      	str	r3, [r7, #8]

    return tmpreg;
 80055c8:	68bb      	ldr	r3, [r7, #8]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <USB_GetMode>:
 * @retval return core mode : Host or Device
 *          This parameter can be one of these values:
 *           0 : Host
 *           1 : Device
 */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef * USBx) {
 80055d6:	b480      	push	{r7}
 80055d8:	b083      	sub	sp, #12
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
    return ((USBx->GINTSTS) & 0x1U);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f003 0301 	and.w	r3, r3, #1
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <USB_ActivateSetup>:
/**
 * @brief  Activate EP0 for Setup transactions
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef * USBx) {
 80055f2:	b480      	push	{r7}
 80055f4:	b085      	sub	sp, #20
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	60fb      	str	r3, [r7, #12]

    /* Set the MPS of the IN EP0 to 64 bytes */
    USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800560c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005610:	f023 0307 	bic.w	r3, r3, #7
 8005614:	6013      	str	r3, [r2, #0]

    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005628:	6053      	str	r3, [r2, #4]

    return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <USB_EP0_OutStart>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @param  psetup  pointer to setup packet
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef * USBx, uint8_t dma, uint8_t * psetup) {
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	460b      	mov	r3, r1
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	72fb      	strb	r3, [r7, #11]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	617b      	str	r3, [r7, #20]
    uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	333c      	adds	r3, #60	; 0x3c
 800564e:	3304      	adds	r3, #4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	613b      	str	r3, [r7, #16]

    if (gSNPSiD > USB_OTG_CORE_ID_300A) {
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	4a26      	ldr	r2, [pc, #152]	; (80056f0 <USB_EP0_OutStart+0xb8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d90a      	bls.n	8005672 <USB_EP0_OutStart+0x3a>
        if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005668:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800566c:	d101      	bne.n	8005672 <USB_EP0_OutStart+0x3a>
            return HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	e037      	b.n	80056e2 <USB_EP0_OutStart+0xaa>
        }
    }

    USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005678:	461a      	mov	r2, r3
 800567a:	2300      	movs	r3, #0
 800567c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800568c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005690:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056a0:	f043 0318 	orr.w	r3, r3, #24
 80056a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(0U)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_STUPCNT;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80056b8:	6113      	str	r3, [r2, #16]

    if (dma == 1U) {
 80056ba:	7afb      	ldrb	r3, [r7, #11]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d10f      	bne.n	80056e0 <USB_EP0_OutStart+0xa8>
        USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c6:	461a      	mov	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6153      	str	r3, [r2, #20]
        /* EP enable */
        USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80056de:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	371c      	adds	r7, #28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	4f54300a 	.word	0x4f54300a

080056f4 <USB_CoreReset>:
/**
 * @brief  Reset the USB Core (needed after USB clock settings change)
 * @param  USBx  Selected device
 * @retval HAL status
 */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef * USBx) {
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
    __IO uint32_t count = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	60fb      	str	r3, [r7, #12]

    /* Wait for AHB master IDLE state. */
    do {
        count++;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	3301      	adds	r3, #1
 8005704:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4a13      	ldr	r2, [pc, #76]	; (8005758 <USB_CoreReset+0x64>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d901      	bls.n	8005712 <USB_CoreReset+0x1e>
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e01b      	b.n	800574a <USB_CoreReset+0x56>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	daf2      	bge.n	8005700 <USB_CoreReset+0xc>

    /* Core Soft Reset */
    count = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]
    USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	f043 0201 	orr.w	r2, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	611a      	str	r2, [r3, #16]

    do {
        count++;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	3301      	adds	r3, #1
 800572e:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4a09      	ldr	r2, [pc, #36]	; (8005758 <USB_CoreReset+0x64>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d901      	bls.n	800573c <USB_CoreReset+0x48>
            return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e006      	b.n	800574a <USB_CoreReset+0x56>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b01      	cmp	r3, #1
 8005746:	d0f0      	beq.n	800572a <USB_CoreReset+0x36>

    return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	00030d40 	.word	0x00030d40

0800575c <USBD_CDC_Init>:
 *         Initialize the CDC interface
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef * pdev, uint8_t cfgidx) {
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	460b      	mov	r3, r1
 8005766:	70fb      	strb	r3, [r7, #3]
    UNUSED(cfgidx);
    USBD_CDC_HandleTypeDef * hcdc;

    hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005768:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800576c:	f002 fc8a 	bl	8008084 <USBD_static_malloc>
 8005770:	60f8      	str	r0, [r7, #12]

    if (hcdc == NULL) {
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d109      	bne.n	800578c <USBD_CDC_Init+0x30>
        pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	32b0      	adds	r2, #176	; 0xb0
 8005782:	2100      	movs	r1, #0
 8005784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        return (uint8_t)USBD_EMEM;
 8005788:	2302      	movs	r3, #2
 800578a:	e0d4      	b.n	8005936 <USBD_CDC_Init+0x1da>
    }

    (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800578c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005790:	2100      	movs	r1, #0
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f002 fcec 	bl	8008170 <memset>

    pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	32b0      	adds	r2, #176	; 0xb0
 80057a2:	68f9      	ldr	r1, [r7, #12]
 80057a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	32b0      	adds	r2, #176	; 0xb0
 80057b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    CDCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
    CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
    CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

    if (pdev->dev_speed == USBD_SPEED_HIGH) {
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	7c1b      	ldrb	r3, [r3, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d138      	bne.n	8005836 <USBD_CDC_Init+0xda>
        /* Open EP IN */
        (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK, CDC_DATA_HS_IN_PACKET_SIZE);
 80057c4:	4b5e      	ldr	r3, [pc, #376]	; (8005940 <USBD_CDC_Init+0x1e4>)
 80057c6:	7819      	ldrb	r1, [r3, #0]
 80057c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057cc:	2202      	movs	r2, #2
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f002 fb35 	bl	8007e3e <USBD_LL_OpenEP>

        pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80057d4:	4b5a      	ldr	r3, [pc, #360]	; (8005940 <USBD_CDC_Init+0x1e4>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	f003 020f 	and.w	r2, r3, #15
 80057dc:	6879      	ldr	r1, [r7, #4]
 80057de:	4613      	mov	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	440b      	add	r3, r1
 80057e8:	3324      	adds	r3, #36	; 0x24
 80057ea:	2201      	movs	r2, #1
 80057ec:	801a      	strh	r2, [r3, #0]

        /* Open EP OUT */
        (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK, CDC_DATA_HS_OUT_PACKET_SIZE);
 80057ee:	4b55      	ldr	r3, [pc, #340]	; (8005944 <USBD_CDC_Init+0x1e8>)
 80057f0:	7819      	ldrb	r1, [r3, #0]
 80057f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057f6:	2202      	movs	r2, #2
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f002 fb20 	bl	8007e3e <USBD_LL_OpenEP>

        pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80057fe:	4b51      	ldr	r3, [pc, #324]	; (8005944 <USBD_CDC_Init+0x1e8>)
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	f003 020f 	and.w	r2, r3, #15
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	4613      	mov	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	440b      	add	r3, r1
 8005812:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005816:	2201      	movs	r2, #1
 8005818:	801a      	strh	r2, [r3, #0]

        /* Set bInterval for CDC CMD Endpoint */
        pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800581a:	4b4b      	ldr	r3, [pc, #300]	; (8005948 <USBD_CDC_Init+0x1ec>)
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	f003 020f 	and.w	r2, r3, #15
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	440b      	add	r3, r1
 800582e:	3326      	adds	r3, #38	; 0x26
 8005830:	2210      	movs	r2, #16
 8005832:	801a      	strh	r2, [r3, #0]
 8005834:	e035      	b.n	80058a2 <USBD_CDC_Init+0x146>
    } else {
        /* Open EP IN */
        (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK, CDC_DATA_FS_IN_PACKET_SIZE);
 8005836:	4b42      	ldr	r3, [pc, #264]	; (8005940 <USBD_CDC_Init+0x1e4>)
 8005838:	7819      	ldrb	r1, [r3, #0]
 800583a:	2340      	movs	r3, #64	; 0x40
 800583c:	2202      	movs	r2, #2
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f002 fafd 	bl	8007e3e <USBD_LL_OpenEP>

        pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005844:	4b3e      	ldr	r3, [pc, #248]	; (8005940 <USBD_CDC_Init+0x1e4>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	f003 020f 	and.w	r2, r3, #15
 800584c:	6879      	ldr	r1, [r7, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	440b      	add	r3, r1
 8005858:	3324      	adds	r3, #36	; 0x24
 800585a:	2201      	movs	r2, #1
 800585c:	801a      	strh	r2, [r3, #0]

        /* Open EP OUT */
        (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK, CDC_DATA_FS_OUT_PACKET_SIZE);
 800585e:	4b39      	ldr	r3, [pc, #228]	; (8005944 <USBD_CDC_Init+0x1e8>)
 8005860:	7819      	ldrb	r1, [r3, #0]
 8005862:	2340      	movs	r3, #64	; 0x40
 8005864:	2202      	movs	r2, #2
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f002 fae9 	bl	8007e3e <USBD_LL_OpenEP>

        pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800586c:	4b35      	ldr	r3, [pc, #212]	; (8005944 <USBD_CDC_Init+0x1e8>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	f003 020f 	and.w	r2, r3, #15
 8005874:	6879      	ldr	r1, [r7, #4]
 8005876:	4613      	mov	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	440b      	add	r3, r1
 8005880:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005884:	2201      	movs	r2, #1
 8005886:	801a      	strh	r2, [r3, #0]

        /* Set bInterval for CMD Endpoint */
        pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005888:	4b2f      	ldr	r3, [pc, #188]	; (8005948 <USBD_CDC_Init+0x1ec>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	f003 020f 	and.w	r2, r3, #15
 8005890:	6879      	ldr	r1, [r7, #4]
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	3326      	adds	r3, #38	; 0x26
 800589e:	2210      	movs	r2, #16
 80058a0:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80058a2:	4b29      	ldr	r3, [pc, #164]	; (8005948 <USBD_CDC_Init+0x1ec>)
 80058a4:	7819      	ldrb	r1, [r3, #0]
 80058a6:	2308      	movs	r3, #8
 80058a8:	2203      	movs	r2, #3
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f002 fac7 	bl	8007e3e <USBD_LL_OpenEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80058b0:	4b25      	ldr	r3, [pc, #148]	; (8005948 <USBD_CDC_Init+0x1ec>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	f003 020f 	and.w	r2, r3, #15
 80058b8:	6879      	ldr	r1, [r7, #4]
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	440b      	add	r3, r1
 80058c4:	3324      	adds	r3, #36	; 0x24
 80058c6:	2201      	movs	r2, #1
 80058c8:	801a      	strh	r2, [r3, #0]

    hcdc->RxBuffer = NULL;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	33b0      	adds	r3, #176	; 0xb0
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (hcdc->RxBuffer == NULL) {
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <USBD_CDC_Init+0x1a8>
        return (uint8_t)USBD_EMEM;
 8005900:	2302      	movs	r3, #2
 8005902:	e018      	b.n	8005936 <USBD_CDC_Init+0x1da>
    }

    if (pdev->dev_speed == USBD_SPEED_HIGH) {
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	7c1b      	ldrb	r3, [r3, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10a      	bne.n	8005922 <USBD_CDC_Init+0x1c6>
        /* Prepare Out endpoint to receive next packet */
        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800590c:	4b0d      	ldr	r3, [pc, #52]	; (8005944 <USBD_CDC_Init+0x1e8>)
 800590e:	7819      	ldrb	r1, [r3, #0]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f002 fb7e 	bl	800801c <USBD_LL_PrepareReceive>
 8005920:	e008      	b.n	8005934 <USBD_CDC_Init+0x1d8>
                                     CDC_DATA_HS_OUT_PACKET_SIZE);
    } else {
        /* Prepare Out endpoint to receive next packet */
        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005922:	4b08      	ldr	r3, [pc, #32]	; (8005944 <USBD_CDC_Init+0x1e8>)
 8005924:	7819      	ldrb	r1, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800592c:	2340      	movs	r3, #64	; 0x40
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f002 fb74 	bl	800801c <USBD_LL_PrepareReceive>
                                     CDC_DATA_FS_OUT_PACKET_SIZE);
    }

    return (uint8_t)USBD_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20000093 	.word	0x20000093
 8005944:	20000094 	.word	0x20000094
 8005948:	20000095 	.word	0x20000095

0800594c <USBD_CDC_DeInit>:
 *         DeInitialize the CDC layer
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef * pdev, uint8_t cfgidx) {
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	460b      	mov	r3, r1
 8005956:	70fb      	strb	r3, [r7, #3]
    CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
    CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005958:	4b3a      	ldr	r3, [pc, #232]	; (8005a44 <USBD_CDC_DeInit+0xf8>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	4619      	mov	r1, r3
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f002 fa93 	bl	8007e8a <USBD_LL_CloseEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005964:	4b37      	ldr	r3, [pc, #220]	; (8005a44 <USBD_CDC_DeInit+0xf8>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	f003 020f 	and.w	r2, r3, #15
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	440b      	add	r3, r1
 8005978:	3324      	adds	r3, #36	; 0x24
 800597a:	2200      	movs	r2, #0
 800597c:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800597e:	4b32      	ldr	r3, [pc, #200]	; (8005a48 <USBD_CDC_DeInit+0xfc>)
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	4619      	mov	r1, r3
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f002 fa80 	bl	8007e8a <USBD_LL_CloseEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800598a:	4b2f      	ldr	r3, [pc, #188]	; (8005a48 <USBD_CDC_DeInit+0xfc>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	f003 020f 	and.w	r2, r3, #15
 8005992:	6879      	ldr	r1, [r7, #4]
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	440b      	add	r3, r1
 800599e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80059a2:	2200      	movs	r2, #0
 80059a4:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80059a6:	4b29      	ldr	r3, [pc, #164]	; (8005a4c <USBD_CDC_DeInit+0x100>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	4619      	mov	r1, r3
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f002 fa6c 	bl	8007e8a <USBD_LL_CloseEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80059b2:	4b26      	ldr	r3, [pc, #152]	; (8005a4c <USBD_CDC_DeInit+0x100>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	f003 020f 	and.w	r2, r3, #15
 80059ba:	6879      	ldr	r1, [r7, #4]
 80059bc:	4613      	mov	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	440b      	add	r3, r1
 80059c6:	3324      	adds	r3, #36	; 0x24
 80059c8:	2200      	movs	r2, #0
 80059ca:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80059cc:	4b1f      	ldr	r3, [pc, #124]	; (8005a4c <USBD_CDC_DeInit+0x100>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	f003 020f 	and.w	r2, r3, #15
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	4613      	mov	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	440b      	add	r3, r1
 80059e0:	3326      	adds	r3, #38	; 0x26
 80059e2:	2200      	movs	r2, #0
 80059e4:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    if (pdev->pClassDataCmsit[pdev->classId] != NULL) {
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	32b0      	adds	r2, #176	; 0xb0
 80059f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d01f      	beq.n	8005a38 <USBD_CDC_DeInit+0xec>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	33b0      	adds	r3, #176	; 0xb0
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	4798      	blx	r3
        (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	32b0      	adds	r2, #176	; 0xb0
 8005a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f002 fb40 	bl	80080a0 <USBD_static_free>
        pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	32b0      	adds	r2, #176	; 0xb0
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pdev->pClassData = NULL;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    }

    return (uint8_t)USBD_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20000093 	.word	0x20000093
 8005a48:	20000094 	.word	0x20000094
 8005a4c:	20000095 	.word	0x20000095

08005a50 <USBD_CDC_Setup>:
 *         Handle the CDC specific requests
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	32b0      	adds	r2, #176	; 0xb0
 8005a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a68:	613b      	str	r3, [r7, #16]
    uint16_t len;
    uint8_t ifalt = 0U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	737b      	strb	r3, [r7, #13]
    uint16_t status_info = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	817b      	strh	r3, [r7, #10]
    USBD_StatusTypeDef ret = USBD_OK;
 8005a72:	2300      	movs	r3, #0
 8005a74:	75fb      	strb	r3, [r7, #23]

    if (hcdc == NULL) {
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <USBD_CDC_Setup+0x30>
        return (uint8_t)USBD_FAIL;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e0bf      	b.n	8005c00 <USBD_CDC_Setup+0x1b0>
    }

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d050      	beq.n	8005b2e <USBD_CDC_Setup+0xde>
 8005a8c:	2b20      	cmp	r3, #32
 8005a8e:	f040 80af 	bne.w	8005bf0 <USBD_CDC_Setup+0x1a0>
    case USB_REQ_TYPE_CLASS:
        if (req->wLength != 0U) {
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	88db      	ldrh	r3, [r3, #6]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d03a      	beq.n	8005b10 <USBD_CDC_Setup+0xc0>
            if ((req->bmRequest & 0x80U) != 0U) {
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	b25b      	sxtb	r3, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	da1b      	bge.n	8005adc <USBD_CDC_Setup+0x8c>
                ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	33b0      	adds	r3, #176	; 0xb0
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	685b      	ldr	r3, [r3, #4]
                    ->Control(req->bRequest, (uint8_t *)hcdc->data, req->wLength);
 8005ab4:	689b      	ldr	r3, [r3, #8]
                ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	7850      	ldrb	r0, [r2, #1]
                    ->Control(req->bRequest, (uint8_t *)hcdc->data, req->wLength);
 8005aba:	6939      	ldr	r1, [r7, #16]
                ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	88d2      	ldrh	r2, [r2, #6]
 8005ac0:	4798      	blx	r3

                len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	88db      	ldrh	r3, [r3, #6]
 8005ac6:	2b07      	cmp	r3, #7
 8005ac8:	bf28      	it	cs
 8005aca:	2307      	movcs	r3, #7
 8005acc:	81fb      	strh	r3, [r7, #14]
                (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	89fa      	ldrh	r2, [r7, #14]
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f001 fd89 	bl	80075ec <USBD_CtlSendData>
            }
        } else {
            ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
                ->Control(req->bRequest, (uint8_t *)req, 0U);
        }
        break;
 8005ada:	e090      	b.n	8005bfe <USBD_CDC_Setup+0x1ae>
                hcdc->CmdOpCode = req->bRequest;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	785a      	ldrb	r2, [r3, #1]
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
                hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	88db      	ldrh	r3, [r3, #6]
 8005aea:	2b3f      	cmp	r3, #63	; 0x3f
 8005aec:	d803      	bhi.n	8005af6 <USBD_CDC_Setup+0xa6>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	88db      	ldrh	r3, [r3, #6]
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	e000      	b.n	8005af8 <USBD_CDC_Setup+0xa8>
 8005af6:	2240      	movs	r2, #64	; 0x40
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005afe:	6939      	ldr	r1, [r7, #16]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005b06:	461a      	mov	r2, r3
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f001 fd9b 	bl	8007644 <USBD_CtlPrepareRx>
        break;
 8005b0e:	e076      	b.n	8005bfe <USBD_CDC_Setup+0x1ae>
            ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	33b0      	adds	r3, #176	; 0xb0
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	685b      	ldr	r3, [r3, #4]
                ->Control(req->bRequest, (uint8_t *)req, 0U);
 8005b20:	689b      	ldr	r3, [r3, #8]
            ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	7850      	ldrb	r0, [r2, #1]
 8005b26:	2200      	movs	r2, #0
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	4798      	blx	r3
        break;
 8005b2c:	e067      	b.n	8005bfe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
        switch (req->bRequest) {
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	785b      	ldrb	r3, [r3, #1]
 8005b32:	2b0b      	cmp	r3, #11
 8005b34:	d851      	bhi.n	8005bda <USBD_CDC_Setup+0x18a>
 8005b36:	a201      	add	r2, pc, #4	; (adr r2, 8005b3c <USBD_CDC_Setup+0xec>)
 8005b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3c:	08005b6d 	.word	0x08005b6d
 8005b40:	08005be9 	.word	0x08005be9
 8005b44:	08005bdb 	.word	0x08005bdb
 8005b48:	08005bdb 	.word	0x08005bdb
 8005b4c:	08005bdb 	.word	0x08005bdb
 8005b50:	08005bdb 	.word	0x08005bdb
 8005b54:	08005bdb 	.word	0x08005bdb
 8005b58:	08005bdb 	.word	0x08005bdb
 8005b5c:	08005bdb 	.word	0x08005bdb
 8005b60:	08005bdb 	.word	0x08005bdb
 8005b64:	08005b97 	.word	0x08005b97
 8005b68:	08005bc1 	.word	0x08005bc1
        case USB_REQ_GET_STATUS:
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d107      	bne.n	8005b88 <USBD_CDC_Setup+0x138>
                (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005b78:	f107 030a 	add.w	r3, r7, #10
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	4619      	mov	r1, r3
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f001 fd33 	bl	80075ec <USBD_CtlSendData>
            } else {
                USBD_CtlError(pdev, req);
                ret = USBD_FAIL;
            }
            break;
 8005b86:	e032      	b.n	8005bee <USBD_CDC_Setup+0x19e>
                USBD_CtlError(pdev, req);
 8005b88:	6839      	ldr	r1, [r7, #0]
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f001 fcbd 	bl	800750a <USBD_CtlError>
                ret = USBD_FAIL;
 8005b90:	2303      	movs	r3, #3
 8005b92:	75fb      	strb	r3, [r7, #23]
            break;
 8005b94:	e02b      	b.n	8005bee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d107      	bne.n	8005bb2 <USBD_CDC_Setup+0x162>
                (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005ba2:	f107 030d 	add.w	r3, r7, #13
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	4619      	mov	r1, r3
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f001 fd1e 	bl	80075ec <USBD_CtlSendData>
            } else {
                USBD_CtlError(pdev, req);
                ret = USBD_FAIL;
            }
            break;
 8005bb0:	e01d      	b.n	8005bee <USBD_CDC_Setup+0x19e>
                USBD_CtlError(pdev, req);
 8005bb2:	6839      	ldr	r1, [r7, #0]
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f001 fca8 	bl	800750a <USBD_CtlError>
                ret = USBD_FAIL;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	75fb      	strb	r3, [r7, #23]
            break;
 8005bbe:	e016      	b.n	8005bee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
            if (pdev->dev_state != USBD_STATE_CONFIGURED) {
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b03      	cmp	r3, #3
 8005bca:	d00f      	beq.n	8005bec <USBD_CDC_Setup+0x19c>
                USBD_CtlError(pdev, req);
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f001 fc9b 	bl	800750a <USBD_CtlError>
                ret = USBD_FAIL;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8005bd8:	e008      	b.n	8005bec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
            break;

        default:
            USBD_CtlError(pdev, req);
 8005bda:	6839      	ldr	r1, [r7, #0]
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f001 fc94 	bl	800750a <USBD_CtlError>
            ret = USBD_FAIL;
 8005be2:	2303      	movs	r3, #3
 8005be4:	75fb      	strb	r3, [r7, #23]
            break;
 8005be6:	e002      	b.n	8005bee <USBD_CDC_Setup+0x19e>
            break;
 8005be8:	bf00      	nop
 8005bea:	e008      	b.n	8005bfe <USBD_CDC_Setup+0x1ae>
            break;
 8005bec:	bf00      	nop
        }
        break;
 8005bee:	e006      	b.n	8005bfe <USBD_CDC_Setup+0x1ae>

    default:
        USBD_CtlError(pdev, req);
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f001 fc89 	bl	800750a <USBD_CtlError>
        ret = USBD_FAIL;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	75fb      	strb	r3, [r7, #23]
        break;
 8005bfc:	bf00      	nop
    }

    return (uint8_t)ret;
 8005bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <USBD_CDC_DataIn>:
 *         Data sent on non-control IN endpoint
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef * pdev, uint8_t epnum) {
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	70fb      	strb	r3, [r7, #3]
    USBD_CDC_HandleTypeDef * hcdc;
    PCD_HandleTypeDef * hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005c1a:	60fb      	str	r3, [r7, #12]

    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	32b0      	adds	r2, #176	; 0xb0
 8005c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <USBD_CDC_DataIn+0x2a>
        return (uint8_t)USBD_FAIL;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e065      	b.n	8005cfe <USBD_CDC_DataIn+0xf6>
    }

    hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	32b0      	adds	r2, #176	; 0xb0
 8005c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c40:	60bb      	str	r3, [r7, #8]

    if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005c42:	78fb      	ldrb	r3, [r7, #3]
 8005c44:	f003 020f 	and.w	r2, r3, #15
 8005c48:	6879      	ldr	r1, [r7, #4]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	440b      	add	r3, r1
 8005c54:	3318      	adds	r3, #24
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d02f      	beq.n	8005cbc <USBD_CDC_DataIn+0xb4>
        ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U)) {
 8005c5c:	78fb      	ldrb	r3, [r7, #3]
 8005c5e:	f003 020f 	and.w	r2, r3, #15
 8005c62:	6879      	ldr	r1, [r7, #4]
 8005c64:	4613      	mov	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	440b      	add	r3, r1
 8005c6e:	3318      	adds	r3, #24
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	78fb      	ldrb	r3, [r7, #3]
 8005c74:	f003 010f 	and.w	r1, r3, #15
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	440b      	add	r3, r1
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4403      	add	r3, r0
 8005c84:	3348      	adds	r3, #72	; 0x48
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	fbb2 f1f3 	udiv	r1, r2, r3
 8005c8c:	fb01 f303 	mul.w	r3, r1, r3
 8005c90:	1ad3      	subs	r3, r2, r3
    if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d112      	bne.n	8005cbc <USBD_CDC_DataIn+0xb4>
        /* Update the packet total length */
        pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005c96:	78fb      	ldrb	r3, [r7, #3]
 8005c98:	f003 020f 	and.w	r2, r3, #15
 8005c9c:	6879      	ldr	r1, [r7, #4]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	440b      	add	r3, r1
 8005ca8:	3318      	adds	r3, #24
 8005caa:	2200      	movs	r2, #0
 8005cac:	601a      	str	r2, [r3, #0]

        /* Send ZLP */
        (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005cae:	78f9      	ldrb	r1, [r7, #3]
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f002 f990 	bl	8007fda <USBD_LL_Transmit>
 8005cba:	e01f      	b.n	8005cfc <USBD_CDC_DataIn+0xf4>
    } else {
        hcdc->TxState = 0U;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

        if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL) {
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	33b0      	adds	r3, #176	; 0xb0
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d010      	beq.n	8005cfc <USBD_CDC_DataIn+0xf4>
            ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	33b0      	adds	r3, #176	; 0xb0
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	685b      	ldr	r3, [r3, #4]
                ->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005cea:	691b      	ldr	r3, [r3, #16]
            ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005cf8:	78fa      	ldrb	r2, [r7, #3]
 8005cfa:	4798      	blx	r3
        }
    }

    return (uint8_t)USBD_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <USBD_CDC_DataOut>:
 *         Data received on non-control Out endpoint
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef * pdev, uint8_t epnum) {
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b084      	sub	sp, #16
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	70fb      	strb	r3, [r7, #3]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	32b0      	adds	r2, #176	; 0xb0
 8005d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d20:	60fb      	str	r3, [r7, #12]

    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	32b0      	adds	r2, #176	; 0xb0
 8005d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <USBD_CDC_DataOut+0x32>
        return (uint8_t)USBD_FAIL;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e01a      	b.n	8005d6e <USBD_CDC_DataOut+0x68>
    }

    /* Get the received data length */
    hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f002 f98e 	bl	800805e <USBD_LL_GetRxDataSize>
 8005d42:	4602      	mov	r2, r0
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* USB data will be immediately processed, this allow next USB traffic being
    NAKed till the end of the application Xfer */

    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	33b0      	adds	r3, #176	; 0xb0
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	685b      	ldr	r3, [r3, #4]
        ->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d5a:	68db      	ldr	r3, [r3, #12]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d68:	4611      	mov	r1, r2
 8005d6a:	4798      	blx	r3

    return (uint8_t)USBD_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <USBD_CDC_EP0_RxReady>:
 * @brief  USBD_CDC_EP0_RxReady
 *         Handle EP0 Rx Ready event
 * @param  pdev: device instance
 * @retval status
 */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef * pdev) {
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	32b0      	adds	r2, #176	; 0xb0
 8005d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d8c:	60fb      	str	r3, [r7, #12]

    if (hcdc == NULL) {
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <USBD_CDC_EP0_RxReady+0x22>
        return (uint8_t)USBD_FAIL;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e025      	b.n	8005de4 <USBD_CDC_EP0_RxReady+0x6e>
    }

    if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU)) {
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	33b0      	adds	r3, #176	; 0xb0
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d01a      	beq.n	8005de2 <USBD_CDC_EP0_RxReady+0x6c>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005db2:	2bff      	cmp	r3, #255	; 0xff
 8005db4:	d015      	beq.n	8005de2 <USBD_CDC_EP0_RxReady+0x6c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	33b0      	adds	r3, #176	; 0xb0
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	685b      	ldr	r3, [r3, #4]
            ->Control(hcdc->CmdOpCode, (uint8_t *)hcdc->data, (uint16_t)hcdc->CmdLength);
 8005dc6:	689b      	ldr	r3, [r3, #8]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
            ->Control(hcdc->CmdOpCode, (uint8_t *)hcdc->data, (uint16_t)hcdc->CmdLength);
 8005dce:	68f9      	ldr	r1, [r7, #12]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])
 8005dd6:	b292      	uxth	r2, r2
 8005dd8:	4798      	blx	r3
        hcdc->CmdOpCode = 0xFFU;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	22ff      	movs	r2, #255	; 0xff
 8005dde:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
    }

    return (uint8_t)USBD_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <USBD_CDC_GetFSCfgDesc>:
 * @brief  USBD_CDC_GetFSCfgDesc
 *         Return configuration descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t * USBD_CDC_GetFSCfgDesc(uint16_t * length) {
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
    USBD_EpDescTypeDef * pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005df4:	2182      	movs	r1, #130	; 0x82
 8005df6:	4818      	ldr	r0, [pc, #96]	; (8005e58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005df8:	f000 fd4f 	bl	800689a <USBD_GetEpDesc>
 8005dfc:	6178      	str	r0, [r7, #20]
    USBD_EpDescTypeDef * pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005dfe:	2101      	movs	r1, #1
 8005e00:	4815      	ldr	r0, [pc, #84]	; (8005e58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e02:	f000 fd4a 	bl	800689a <USBD_GetEpDesc>
 8005e06:	6138      	str	r0, [r7, #16]
    USBD_EpDescTypeDef * pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e08:	2181      	movs	r1, #129	; 0x81
 8005e0a:	4813      	ldr	r0, [pc, #76]	; (8005e58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e0c:	f000 fd45 	bl	800689a <USBD_GetEpDesc>
 8005e10:	60f8      	str	r0, [r7, #12]

    if (pEpCmdDesc != NULL) {
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <USBD_CDC_GetFSCfgDesc+0x32>
        pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2210      	movs	r2, #16
 8005e1c:	719a      	strb	r2, [r3, #6]
    }

    if (pEpOutDesc != NULL) {
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d006      	beq.n	8005e32 <USBD_CDC_GetFSCfgDesc+0x46>
        pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e2c:	711a      	strb	r2, [r3, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	715a      	strb	r2, [r3, #5]
    }

    if (pEpInDesc != NULL) {
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d006      	beq.n	8005e46 <USBD_CDC_GetFSCfgDesc+0x5a>
        pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e40:	711a      	strb	r2, [r3, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	715a      	strb	r2, [r3, #5]
    }

    *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2243      	movs	r2, #67	; 0x43
 8005e4a:	801a      	strh	r2, [r3, #0]
    return USBD_CDC_CfgDesc;
 8005e4c:	4b02      	ldr	r3, [pc, #8]	; (8005e58 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20000050 	.word	0x20000050

08005e5c <USBD_CDC_GetHSCfgDesc>:
 * @brief  USBD_CDC_GetHSCfgDesc
 *         Return configuration descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t * USBD_CDC_GetHSCfgDesc(uint16_t * length) {
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
    USBD_EpDescTypeDef * pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e64:	2182      	movs	r1, #130	; 0x82
 8005e66:	4818      	ldr	r0, [pc, #96]	; (8005ec8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005e68:	f000 fd17 	bl	800689a <USBD_GetEpDesc>
 8005e6c:	6178      	str	r0, [r7, #20]
    USBD_EpDescTypeDef * pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e6e:	2101      	movs	r1, #1
 8005e70:	4815      	ldr	r0, [pc, #84]	; (8005ec8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005e72:	f000 fd12 	bl	800689a <USBD_GetEpDesc>
 8005e76:	6138      	str	r0, [r7, #16]
    USBD_EpDescTypeDef * pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e78:	2181      	movs	r1, #129	; 0x81
 8005e7a:	4813      	ldr	r0, [pc, #76]	; (8005ec8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005e7c:	f000 fd0d 	bl	800689a <USBD_GetEpDesc>
 8005e80:	60f8      	str	r0, [r7, #12]

    if (pEpCmdDesc != NULL) {
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <USBD_CDC_GetHSCfgDesc+0x32>
        pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2210      	movs	r2, #16
 8005e8c:	719a      	strb	r2, [r3, #6]
    }

    if (pEpOutDesc != NULL) {
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d006      	beq.n	8005ea2 <USBD_CDC_GetHSCfgDesc+0x46>
        pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	2200      	movs	r2, #0
 8005e98:	711a      	strb	r2, [r3, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f042 0202 	orr.w	r2, r2, #2
 8005ea0:	715a      	strb	r2, [r3, #5]
    }

    if (pEpInDesc != NULL) {
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d006      	beq.n	8005eb6 <USBD_CDC_GetHSCfgDesc+0x5a>
        pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	711a      	strb	r2, [r3, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f042 0202 	orr.w	r2, r2, #2
 8005eb4:	715a      	strb	r2, [r3, #5]
    }

    *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2243      	movs	r2, #67	; 0x43
 8005eba:	801a      	strh	r2, [r3, #0]
    return USBD_CDC_CfgDesc;
 8005ebc:	4b02      	ldr	r3, [pc, #8]	; (8005ec8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20000050 	.word	0x20000050

08005ecc <USBD_CDC_GetOtherSpeedCfgDesc>:
 * @brief  USBD_CDC_GetOtherSpeedCfgDesc
 *         Return configuration descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t * USBD_CDC_GetOtherSpeedCfgDesc(uint16_t * length) {
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
    USBD_EpDescTypeDef * pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ed4:	2182      	movs	r1, #130	; 0x82
 8005ed6:	4818      	ldr	r0, [pc, #96]	; (8005f38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005ed8:	f000 fcdf 	bl	800689a <USBD_GetEpDesc>
 8005edc:	6178      	str	r0, [r7, #20]
    USBD_EpDescTypeDef * pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005ede:	2101      	movs	r1, #1
 8005ee0:	4815      	ldr	r0, [pc, #84]	; (8005f38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005ee2:	f000 fcda 	bl	800689a <USBD_GetEpDesc>
 8005ee6:	6138      	str	r0, [r7, #16]
    USBD_EpDescTypeDef * pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ee8:	2181      	movs	r1, #129	; 0x81
 8005eea:	4813      	ldr	r0, [pc, #76]	; (8005f38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005eec:	f000 fcd5 	bl	800689a <USBD_GetEpDesc>
 8005ef0:	60f8      	str	r0, [r7, #12]

    if (pEpCmdDesc != NULL) {
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d002      	beq.n	8005efe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
        pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2210      	movs	r2, #16
 8005efc:	719a      	strb	r2, [r3, #6]
    }

    if (pEpOutDesc != NULL) {
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d006      	beq.n	8005f12 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
        pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f0c:	711a      	strb	r2, [r3, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	715a      	strb	r2, [r3, #5]
    }

    if (pEpInDesc != NULL) {
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d006      	beq.n	8005f26 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
        pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f20:	711a      	strb	r2, [r3, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	715a      	strb	r2, [r3, #5]
    }

    *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2243      	movs	r2, #67	; 0x43
 8005f2a:	801a      	strh	r2, [r3, #0]
    return USBD_CDC_CfgDesc;
 8005f2c:	4b02      	ldr	r3, [pc, #8]	; (8005f38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20000050 	.word	0x20000050

08005f3c <USBD_CDC_GetDeviceQualifierDescriptor>:
 * @brief  USBD_CDC_GetDeviceQualifierDescriptor
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
uint8_t * USBD_CDC_GetDeviceQualifierDescriptor(uint16_t * length) {
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
    *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	220a      	movs	r2, #10
 8005f48:	801a      	strh	r2, [r3, #0]

    return USBD_CDC_DeviceQualifierDesc;
 8005f4a:	4b03      	ldr	r3, [pc, #12]	; (8005f58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	2000000c 	.word	0x2000000c

08005f5c <USBD_CDC_RegisterInterface>:
 * @brief  USBD_CDC_RegisterInterface
 * @param  pdev: device instance
 * @param  fops: CD  Interface callback
 * @retval status
 */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef * pdev, USBD_CDC_ItfTypeDef * fops) {
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
    if (fops == NULL) {
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <USBD_CDC_RegisterInterface+0x14>
        return (uint8_t)USBD_FAIL;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e009      	b.n	8005f84 <USBD_CDC_RegisterInterface+0x28>
    }

    pdev->pUserData[pdev->classId] = fops;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	33b0      	adds	r3, #176	; 0xb0
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	605a      	str	r2, [r3, #4]

    return (uint8_t)USBD_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <USBD_CDC_SetTxBuffer>:
 * @param  pdev: device instance
 * @param  pbuff: Tx Buffer
 * @param  length: Tx Buffer length
 * @retval status
 */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef * pdev, uint8_t * pbuff, uint32_t length) {
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	32b0      	adds	r2, #176	; 0xb0
 8005fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005faa:	617b      	str	r3, [r7, #20]

    if (hcdc == NULL) {
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <USBD_CDC_SetTxBuffer+0x26>
        return (uint8_t)USBD_FAIL;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e008      	b.n	8005fc8 <USBD_CDC_SetTxBuffer+0x38>
    }

    hcdc->TxBuffer = pbuff;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    hcdc->TxLength = length;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

    return (uint8_t)USBD_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <USBD_CDC_SetRxBuffer>:
 * @brief  USBD_CDC_SetRxBuffer
 * @param  pdev: device instance
 * @param  pbuff: Rx Buffer
 * @retval status
 */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef * pdev, uint8_t * pbuff) {
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	32b0      	adds	r2, #176	; 0xb0
 8005fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fec:	60fb      	str	r3, [r7, #12]

    if (hcdc == NULL) {
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <USBD_CDC_SetRxBuffer+0x24>
        return (uint8_t)USBD_FAIL;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e004      	b.n	8006002 <USBD_CDC_SetRxBuffer+0x2e>
    }

    hcdc->RxBuffer = pbuff;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

    return (uint8_t)USBD_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
	...

08006010 <USBD_CDC_TransmitPacket>:
 * @brief  USBD_CDC_TransmitPacket
 *         Transmit packet on IN endpoint
 * @param  pdev: device instance
 * @retval status
 */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef * pdev) {
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	32b0      	adds	r2, #176	; 0xb0
 8006022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006026:	60bb      	str	r3, [r7, #8]
    USBD_StatusTypeDef ret = USBD_BUSY;
 8006028:	2301      	movs	r3, #1
 800602a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
    /* Get the Endpoints addresses allocated for this class instance */
    CDCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	32b0      	adds	r2, #176	; 0xb0
 8006036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <USBD_CDC_TransmitPacket+0x32>
        return (uint8_t)USBD_FAIL;
 800603e:	2303      	movs	r3, #3
 8006040:	e025      	b.n	800608e <USBD_CDC_TransmitPacket+0x7e>
    }

    if (hcdc->TxState == 0U) {
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006048:	2b00      	cmp	r3, #0
 800604a:	d11f      	bne.n	800608c <USBD_CDC_TransmitPacket+0x7c>
        /* Tx Transfer in progress */
        hcdc->TxState = 1U;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2201      	movs	r2, #1
 8006050:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

        /* Update the packet total length */
        pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006054:	4b10      	ldr	r3, [pc, #64]	; (8006098 <USBD_CDC_TransmitPacket+0x88>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	f003 020f 	and.w	r2, r3, #15
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4403      	add	r3, r0
 800606e:	3318      	adds	r3, #24
 8006070:	6019      	str	r1, [r3, #0]

        /* Transmit next packet */
        (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006072:	4b09      	ldr	r3, [pc, #36]	; (8006098 <USBD_CDC_TransmitPacket+0x88>)
 8006074:	7819      	ldrb	r1, [r3, #0]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f001 ffa9 	bl	8007fda <USBD_LL_Transmit>

        ret = USBD_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	73fb      	strb	r3, [r7, #15]
    }

    return (uint8_t)ret;
 800608c:	7bfb      	ldrb	r3, [r7, #15]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000093 	.word	0x20000093

0800609c <USBD_CDC_ReceivePacket>:
 * @brief  USBD_CDC_ReceivePacket
 *         prepare OUT Endpoint for reception
 * @param  pdev: device instance
 * @retval status
 */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef * pdev) {
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	32b0      	adds	r2, #176	; 0xb0
 80060ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
    /* Get the Endpoints addresses allocated for this class instance */
    CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	32b0      	adds	r2, #176	; 0xb0
 80060be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <USBD_CDC_ReceivePacket+0x2e>
        return (uint8_t)USBD_FAIL;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e018      	b.n	80060fc <USBD_CDC_ReceivePacket+0x60>
    }

    if (pdev->dev_speed == USBD_SPEED_HIGH) {
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	7c1b      	ldrb	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10a      	bne.n	80060e8 <USBD_CDC_ReceivePacket+0x4c>
        /* Prepare Out endpoint to receive next packet */
        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80060d2:	4b0c      	ldr	r3, [pc, #48]	; (8006104 <USBD_CDC_ReceivePacket+0x68>)
 80060d4:	7819      	ldrb	r1, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f001 ff9b 	bl	800801c <USBD_LL_PrepareReceive>
 80060e6:	e008      	b.n	80060fa <USBD_CDC_ReceivePacket+0x5e>
                                     CDC_DATA_HS_OUT_PACKET_SIZE);
    } else {
        /* Prepare Out endpoint to receive next packet */
        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80060e8:	4b06      	ldr	r3, [pc, #24]	; (8006104 <USBD_CDC_ReceivePacket+0x68>)
 80060ea:	7819      	ldrb	r1, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060f2:	2340      	movs	r3, #64	; 0x40
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f001 ff91 	bl	800801c <USBD_LL_PrepareReceive>
                                     CDC_DATA_FS_OUT_PACKET_SIZE);
    }

    return (uint8_t)USBD_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	20000094 	.word	0x20000094

08006108 <USBD_Init>:
 * @param  pdesc: Descriptor structure address
 * @param  id: Low level core index
 * @retval None
 */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef * pdev, USBD_DescriptorsTypeDef * pdesc,
                             uint8_t id) {
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	4613      	mov	r3, r2
 8006114:	71fb      	strb	r3, [r7, #7]
    USBD_StatusTypeDef ret;

    /* Check whether the USB Host handle is valid */
    if (pdev == NULL) {
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <USBD_Init+0x18>
#if (USBD_DEBUG_LEVEL > 1U)
        USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
        return USBD_FAIL;
 800611c:	2303      	movs	r3, #3
 800611e:	e01f      	b.n	8006160 <USBD_Init+0x58>
        pdev->NumClasses = 0;
        pdev->classId = 0;
    }
#else
    /* Unlink previous class*/
    pdev->pClass[0] = NULL;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
    pdev->pUserData[0] = NULL;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

    pdev->pConfDesc = NULL;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

    /* Assign USBD Descriptors */
    if (pdesc != NULL) {
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <USBD_Init+0x3e>
        pdev->pDesc = pdesc;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    }

    /* Set Device initial State */
    pdev->dev_state = USBD_STATE_DEFAULT;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    pdev->id = id;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	79fa      	ldrb	r2, [r7, #7]
 8006152:	701a      	strb	r2, [r3, #0]

    /* Initialize low level driver */
    ret = USBD_LL_Init(pdev);
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f001 fe0b 	bl	8007d70 <USBD_LL_Init>
 800615a:	4603      	mov	r3, r0
 800615c:	75fb      	strb	r3, [r7, #23]

    return ret;
 800615e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <USBD_RegisterClass>:
 *         Link class driver to Device Core.
 * @param  pDevice : Device Handle
 * @param  pclass: Class handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef * pdev, USBD_ClassTypeDef * pclass) {
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
    uint16_t len = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	81fb      	strh	r3, [r7, #14]

    if (pclass == NULL) {
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <USBD_RegisterClass+0x18>
#if (USBD_DEBUG_LEVEL > 1U)
        USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
        return USBD_FAIL;
 800617c:	2303      	movs	r3, #3
 800617e:	e025      	b.n	80061cc <USBD_RegisterClass+0x64>
    }

    /* link the class to the USB Device handle */
    pdev->pClass[0] = pclass;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
#ifdef USE_USB_HS
    if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL) {
        pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
    }
#else  /* Default USE_USB_FS */
    if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL) {
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	32ae      	adds	r2, #174	; 0xae
 8006192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00f      	beq.n	80061bc <USBD_RegisterClass+0x54>
        pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	32ae      	adds	r2, #174	; 0xae
 80061a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	f107 020e 	add.w	r2, r7, #14
 80061b0:	4610      	mov	r0, r2
 80061b2:	4798      	blx	r3
 80061b4:	4602      	mov	r2, r0
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
    }
#endif /* USE_USB_FS */

    /* Increment the NumClasses */
    pdev->NumClasses++;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

    return USBD_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <USBD_Start>:
 * @brief  USBD_Start
 *         Start the USB Device Core.
 * @param  pdev: Device Handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef * pdev) {
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
    pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

    /* Start the low level driver  */
    return USBD_LL_Start(pdev);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f001 fe13 	bl	8007e08 <USBD_LL_Start>
 80061e2:	4603      	mov	r3, r0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <USBD_RunTestMode>:
 * @brief  USBD_RunTestMode
 *         Launch test mode process
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef * pdev) {
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
    return ret;
#else
    /* Prevent unused argument compilation warning */
    UNUSED(pdev);

    return USBD_OK;
 80061f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <USBD_SetClassConfig>:
 * @param  pdev: device instance
 * @param  cfgidx: configuration index
 * @retval status
 */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef * pdev, uint8_t cfgidx) {
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	460b      	mov	r3, r1
 800620c:	70fb      	strb	r3, [r7, #3]
    USBD_StatusTypeDef ret = USBD_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }
#else
    if (pdev->pClass[0] != NULL) {
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006218:	2b00      	cmp	r3, #0
 800621a:	d009      	beq.n	8006230 <USBD_SetClassConfig+0x2e>
        /* Set configuration and Start the Class */
        ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	78fa      	ldrb	r2, [r7, #3]
 8006226:	4611      	mov	r1, r2
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	4798      	blx	r3
 800622c:	4603      	mov	r3, r0
 800622e:	73fb      	strb	r3, [r7, #15]
    }
#endif /* USE_USBD_COMPOSITE */

    return ret;
 8006230:	7bfb      	ldrb	r3, [r7, #15]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <USBD_ClrClassConfig>:
 *         Clear current configuration
 * @param  pdev: device instance
 * @param  cfgidx: configuration index
 * @retval status: USBD_StatusTypeDef
 */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef * pdev, uint8_t cfgidx) {
 800623a:	b580      	push	{r7, lr}
 800623c:	b084      	sub	sp, #16
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	460b      	mov	r3, r1
 8006244:	70fb      	strb	r3, [r7, #3]
    USBD_StatusTypeDef ret = USBD_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]
            }
        }
    }
#else
    /* Clear configuration  and De-initialize the Class process */
    if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U) {
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	78fa      	ldrb	r2, [r7, #3]
 8006254:	4611      	mov	r1, r2
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	4798      	blx	r3
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <USBD_ClrClassConfig+0x2a>
        ret = USBD_FAIL;
 8006260:	2303      	movs	r3, #3
 8006262:	73fb      	strb	r3, [r7, #15]
    }
#endif /* USE_USBD_COMPOSITE */

    return ret;
 8006264:	7bfb      	ldrb	r3, [r7, #15]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <USBD_LL_SetupStage>:
 * @brief  USBD_LL_SetupStage
 *         Handle the setup stage
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef * pdev, uint8_t * psetup) {
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret;

    USBD_ParseSetupRequest(&pdev->request, psetup);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800627e:	6839      	ldr	r1, [r7, #0]
 8006280:	4618      	mov	r0, r3
 8006282:	f001 f908 	bl	8007496 <USBD_ParseSetupRequest>

    pdev->ep0_state = USBD_EP0_SETUP;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

    pdev->ep0_data_len = pdev->request.wLength;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006294:	461a      	mov	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

    switch (pdev->request.bmRequest & 0x1FU) {
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80062a2:	f003 031f 	and.w	r3, r3, #31
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d01a      	beq.n	80062e0 <USBD_LL_SetupStage+0x72>
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d822      	bhi.n	80062f4 <USBD_LL_SetupStage+0x86>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <USBD_LL_SetupStage+0x4a>
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d00a      	beq.n	80062cc <USBD_LL_SetupStage+0x5e>
 80062b6:	e01d      	b.n	80062f4 <USBD_LL_SetupStage+0x86>
    case USB_REQ_RECIPIENT_DEVICE:
        ret = USBD_StdDevReq(pdev, &pdev->request);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062be:	4619      	mov	r1, r3
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fb5f 	bl	8006984 <USBD_StdDevReq>
 80062c6:	4603      	mov	r3, r0
 80062c8:	73fb      	strb	r3, [r7, #15]
        break;
 80062ca:	e020      	b.n	800630e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
        ret = USBD_StdItfReq(pdev, &pdev->request);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062d2:	4619      	mov	r1, r3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fbc7 	bl	8006a68 <USBD_StdItfReq>
 80062da:	4603      	mov	r3, r0
 80062dc:	73fb      	strb	r3, [r7, #15]
        break;
 80062de:	e016      	b.n	800630e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
        ret = USBD_StdEPReq(pdev, &pdev->request);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062e6:	4619      	mov	r1, r3
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fc29 	bl	8006b40 <USBD_StdEPReq>
 80062ee:	4603      	mov	r3, r0
 80062f0:	73fb      	strb	r3, [r7, #15]
        break;
 80062f2:	e00c      	b.n	800630e <USBD_LL_SetupStage+0xa0>

    default:
        ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80062fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	4619      	mov	r1, r3
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f001 fde0 	bl	8007ec8 <USBD_LL_StallEP>
 8006308:	4603      	mov	r3, r0
 800630a:	73fb      	strb	r3, [r7, #15]
        break;
 800630c:	bf00      	nop
    }

    return ret;
 800630e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <USBD_LL_DataOutStage>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @param  pdata: data pointer
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef * pdev, uint8_t epnum, uint8_t * pdata) {
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	460b      	mov	r3, r1
 8006322:	607a      	str	r2, [r7, #4]
 8006324:	72fb      	strb	r3, [r7, #11]
    USBD_EndpointTypeDef * pep;
    USBD_StatusTypeDef ret = USBD_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	75fb      	strb	r3, [r7, #23]
    uint8_t idx;

    if (epnum == 0U) {
 800632a:	7afb      	ldrb	r3, [r7, #11]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d16e      	bne.n	800640e <USBD_LL_DataOutStage+0xf6>
        pep = &pdev->ep_out[0];
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006336:	613b      	str	r3, [r7, #16]

        if (pdev->ep0_state == USBD_EP0_DATA_OUT) {
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800633e:	2b03      	cmp	r3, #3
 8006340:	f040 8098 	bne.w	8006474 <USBD_LL_DataOutStage+0x15c>
            if (pep->rem_length > pep->maxpacket) {
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	429a      	cmp	r2, r3
 800634e:	d913      	bls.n	8006378 <USBD_LL_DataOutStage+0x60>
                pep->rem_length -= pep->maxpacket;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	1ad2      	subs	r2, r2, r3
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	609a      	str	r2, [r3, #8]

                (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	68da      	ldr	r2, [r3, #12]
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	4293      	cmp	r3, r2
 8006368:	bf28      	it	cs
 800636a:	4613      	movcs	r3, r2
 800636c:	461a      	mov	r2, r3
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f001 f984 	bl	800767e <USBD_CtlContinueRx>
 8006376:	e07d      	b.n	8006474 <USBD_LL_DataOutStage+0x15c>
            } else {
                /* Find the class ID relative to the current request */
                switch (pdev->request.bmRequest & 0x1FU) {
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800637e:	f003 031f 	and.w	r3, r3, #31
 8006382:	2b02      	cmp	r3, #2
 8006384:	d014      	beq.n	80063b0 <USBD_LL_DataOutStage+0x98>
 8006386:	2b02      	cmp	r3, #2
 8006388:	d81d      	bhi.n	80063c6 <USBD_LL_DataOutStage+0xae>
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <USBD_LL_DataOutStage+0x7c>
 800638e:	2b01      	cmp	r3, #1
 8006390:	d003      	beq.n	800639a <USBD_LL_DataOutStage+0x82>
 8006392:	e018      	b.n	80063c6 <USBD_LL_DataOutStage+0xae>
                case USB_REQ_RECIPIENT_DEVICE:
                    /* Device requests must be managed by the first instantiated class
                       (or duplicated by all classes for simplicity) */
                    idx = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	75bb      	strb	r3, [r7, #22]
                    break;
 8006398:	e018      	b.n	80063cc <USBD_LL_DataOutStage+0xb4>

                case USB_REQ_RECIPIENT_INTERFACE:
                    idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	4619      	mov	r1, r3
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 fa5e 	bl	8006866 <USBD_CoreFindIF>
 80063aa:	4603      	mov	r3, r0
 80063ac:	75bb      	strb	r3, [r7, #22]
                    break;
 80063ae:	e00d      	b.n	80063cc <USBD_LL_DataOutStage+0xb4>

                case USB_REQ_RECIPIENT_ENDPOINT:
                    idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	4619      	mov	r1, r3
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 fa60 	bl	8006880 <USBD_CoreFindEP>
 80063c0:	4603      	mov	r3, r0
 80063c2:	75bb      	strb	r3, [r7, #22]
                    break;
 80063c4:	e002      	b.n	80063cc <USBD_LL_DataOutStage+0xb4>

                default:
                    /* Back to the first class in case of doubt */
                    idx = 0U;
 80063c6:	2300      	movs	r3, #0
 80063c8:	75bb      	strb	r3, [r7, #22]
                    break;
 80063ca:	bf00      	nop
                }

                if (idx < USBD_MAX_SUPPORTED_CLASS) {
 80063cc:	7dbb      	ldrb	r3, [r7, #22]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d119      	bne.n	8006406 <USBD_LL_DataOutStage+0xee>
                    /* Setup the class ID and route the request to the relative class function */
                    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b03      	cmp	r3, #3
 80063dc:	d113      	bne.n	8006406 <USBD_LL_DataOutStage+0xee>
                        if (pdev->pClass[idx]->EP0_RxReady != NULL) {
 80063de:	7dba      	ldrb	r2, [r7, #22]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	32ae      	adds	r2, #174	; 0xae
 80063e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00b      	beq.n	8006406 <USBD_LL_DataOutStage+0xee>
                            pdev->classId = idx;
 80063ee:	7dba      	ldrb	r2, [r7, #22]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                            pdev->pClass[idx]->EP0_RxReady(pdev);
 80063f6:	7dba      	ldrb	r2, [r7, #22]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	32ae      	adds	r2, #174	; 0xae
 80063fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	4798      	blx	r3
                        }
                    }
                }

                (void)USBD_CtlSendStatus(pdev);
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f001 f94a 	bl	80076a0 <USBD_CtlSendStatus>
 800640c:	e032      	b.n	8006474 <USBD_LL_DataOutStage+0x15c>
      }
#endif
        }
    } else {
        /* Get the class index relative to this interface */
        idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800640e:	7afb      	ldrb	r3, [r7, #11]
 8006410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006414:	b2db      	uxtb	r3, r3
 8006416:	4619      	mov	r1, r3
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 fa31 	bl	8006880 <USBD_CoreFindEP>
 800641e:	4603      	mov	r3, r0
 8006420:	75bb      	strb	r3, [r7, #22]

        if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 8006422:	7dbb      	ldrb	r3, [r7, #22]
 8006424:	2bff      	cmp	r3, #255	; 0xff
 8006426:	d025      	beq.n	8006474 <USBD_LL_DataOutStage+0x15c>
 8006428:	7dbb      	ldrb	r3, [r7, #22]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d122      	bne.n	8006474 <USBD_LL_DataOutStage+0x15c>
            /* Call the class data out function to manage the request */
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b03      	cmp	r3, #3
 8006438:	d117      	bne.n	800646a <USBD_LL_DataOutStage+0x152>
                if (pdev->pClass[idx]->DataOut != NULL) {
 800643a:	7dba      	ldrb	r2, [r7, #22]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	32ae      	adds	r2, #174	; 0xae
 8006440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00f      	beq.n	800646a <USBD_LL_DataOutStage+0x152>
                    pdev->classId = idx;
 800644a:	7dba      	ldrb	r2, [r7, #22]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                    ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006452:	7dba      	ldrb	r2, [r7, #22]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	32ae      	adds	r2, #174	; 0xae
 8006458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	7afa      	ldrb	r2, [r7, #11]
 8006460:	4611      	mov	r1, r2
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	4798      	blx	r3
 8006466:	4603      	mov	r3, r0
 8006468:	75fb      	strb	r3, [r7, #23]
                }
            }
            if (ret != USBD_OK) {
 800646a:	7dfb      	ldrb	r3, [r7, #23]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <USBD_LL_DataOutStage+0x15c>
                return ret;
 8006470:	7dfb      	ldrb	r3, [r7, #23]
 8006472:	e000      	b.n	8006476 <USBD_LL_DataOutStage+0x15e>
            }
        }
    }

    return USBD_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <USBD_LL_DataInStage>:
 *         Handle data in stage
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef * pdev, uint8_t epnum, uint8_t * pdata) {
 800647e:	b580      	push	{r7, lr}
 8006480:	b086      	sub	sp, #24
 8006482:	af00      	add	r7, sp, #0
 8006484:	60f8      	str	r0, [r7, #12]
 8006486:	460b      	mov	r3, r1
 8006488:	607a      	str	r2, [r7, #4]
 800648a:	72fb      	strb	r3, [r7, #11]
    USBD_EndpointTypeDef * pep;
    USBD_StatusTypeDef ret;
    uint8_t idx;

    if (epnum == 0U) {
 800648c:	7afb      	ldrb	r3, [r7, #11]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d16f      	bne.n	8006572 <USBD_LL_DataInStage+0xf4>
        pep = &pdev->ep_in[0];
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3314      	adds	r3, #20
 8006496:	613b      	str	r3, [r7, #16]

        if (pdev->ep0_state == USBD_EP0_DATA_IN) {
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d15a      	bne.n	8006558 <USBD_LL_DataInStage+0xda>
            if (pep->rem_length > pep->maxpacket) {
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d914      	bls.n	80064d8 <USBD_LL_DataInStage+0x5a>
                pep->rem_length -= pep->maxpacket;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	1ad2      	subs	r2, r2, r3
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	609a      	str	r2, [r3, #8]

                (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	461a      	mov	r2, r3
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f001 f8ac 	bl	8007622 <USBD_CtlContinueSendData>

                /* Prepare endpoint for premature end of transfer */
                (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064ca:	2300      	movs	r3, #0
 80064cc:	2200      	movs	r2, #0
 80064ce:	2100      	movs	r1, #0
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f001 fda3 	bl	800801c <USBD_LL_PrepareReceive>
 80064d6:	e03f      	b.n	8006558 <USBD_LL_DataInStage+0xda>
            } else {
                /* last packet is MPS multiple, so send ZLP packet */
                if ((pep->maxpacket == pep->rem_length) && (pep->total_length >= pep->maxpacket) &&
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	68da      	ldr	r2, [r3, #12]
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d11c      	bne.n	800651e <USBD_LL_DataInStage+0xa0>
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d316      	bcc.n	800651e <USBD_LL_DataInStage+0xa0>
                    (pep->total_length < pdev->ep0_data_len)) {
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
                if ((pep->maxpacket == pep->rem_length) && (pep->total_length >= pep->maxpacket) &&
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d20f      	bcs.n	800651e <USBD_LL_DataInStage+0xa0>
                    (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80064fe:	2200      	movs	r2, #0
 8006500:	2100      	movs	r1, #0
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f001 f88d 	bl	8007622 <USBD_CtlContinueSendData>
                    pdev->ep0_data_len = 0U;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

                    /* Prepare endpoint for premature end of transfer */
                    (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006510:	2300      	movs	r3, #0
 8006512:	2200      	movs	r2, #0
 8006514:	2100      	movs	r1, #0
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f001 fd80 	bl	800801c <USBD_LL_PrepareReceive>
 800651c:	e01c      	b.n	8006558 <USBD_LL_DataInStage+0xda>
                } else {
                    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b03      	cmp	r3, #3
 8006528:	d10f      	bne.n	800654a <USBD_LL_DataInStage+0xcc>
                        if (pdev->pClass[0]->EP0_TxSent != NULL) {
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d009      	beq.n	800654a <USBD_LL_DataInStage+0xcc>
                            pdev->classId = 0U;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                            pdev->pClass[0]->EP0_TxSent(pdev);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	4798      	blx	r3
                        }
                    }
                    (void)USBD_LL_StallEP(pdev, 0x80U);
 800654a:	2180      	movs	r1, #128	; 0x80
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f001 fcbb 	bl	8007ec8 <USBD_LL_StallEP>
                    (void)USBD_CtlReceiveStatus(pdev);
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f001 f8b7 	bl	80076c6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
        }

        if (pdev->dev_test_mode != 0U) {
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d03a      	beq.n	80065d8 <USBD_LL_DataInStage+0x15a>
            (void)USBD_RunTestMode(pdev);
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f7ff fe42 	bl	80061ec <USBD_RunTestMode>
            pdev->dev_test_mode = 0U;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006570:	e032      	b.n	80065d8 <USBD_LL_DataInStage+0x15a>
        }
    } else {
        /* Get the class index relative to this interface */
        idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006572:	7afb      	ldrb	r3, [r7, #11]
 8006574:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006578:	b2db      	uxtb	r3, r3
 800657a:	4619      	mov	r1, r3
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 f97f 	bl	8006880 <USBD_CoreFindEP>
 8006582:	4603      	mov	r3, r0
 8006584:	75fb      	strb	r3, [r7, #23]

        if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 8006586:	7dfb      	ldrb	r3, [r7, #23]
 8006588:	2bff      	cmp	r3, #255	; 0xff
 800658a:	d025      	beq.n	80065d8 <USBD_LL_DataInStage+0x15a>
 800658c:	7dfb      	ldrb	r3, [r7, #23]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d122      	bne.n	80065d8 <USBD_LL_DataInStage+0x15a>
            /* Call the class data out function to manage the request */
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b03      	cmp	r3, #3
 800659c:	d11c      	bne.n	80065d8 <USBD_LL_DataInStage+0x15a>
                if (pdev->pClass[idx]->DataIn != NULL) {
 800659e:	7dfa      	ldrb	r2, [r7, #23]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	32ae      	adds	r2, #174	; 0xae
 80065a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d014      	beq.n	80065d8 <USBD_LL_DataInStage+0x15a>
                    pdev->classId = idx;
 80065ae:	7dfa      	ldrb	r2, [r7, #23]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                    ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80065b6:	7dfa      	ldrb	r2, [r7, #23]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	32ae      	adds	r2, #174	; 0xae
 80065bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	7afa      	ldrb	r2, [r7, #11]
 80065c4:	4611      	mov	r1, r2
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	4798      	blx	r3
 80065ca:	4603      	mov	r3, r0
 80065cc:	75bb      	strb	r3, [r7, #22]

                    if (ret != USBD_OK) {
 80065ce:	7dbb      	ldrb	r3, [r7, #22]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <USBD_LL_DataInStage+0x15a>
                        return ret;
 80065d4:	7dbb      	ldrb	r3, [r7, #22]
 80065d6:	e000      	b.n	80065da <USBD_LL_DataInStage+0x15c>
                }
            }
        }
    }

    return USBD_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <USBD_LL_Reset>:
 *         Handle Reset event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef * pdev) {
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b084      	sub	sp, #16
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
    USBD_StatusTypeDef ret = USBD_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	73fb      	strb	r3, [r7, #15]

    /* Upon Reset call user call back */
    pdev->dev_state = USBD_STATE_DEFAULT;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    pdev->ep0_state = USBD_EP0_IDLE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    pdev->dev_config = 0U;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	605a      	str	r2, [r3, #4]
    pdev->dev_remote_wakeup = 0U;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    pdev->dev_test_mode = 0U;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
            }
        }
    }
#else

    if (pdev->pClass[0] != NULL) {
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800661a:	2b00      	cmp	r3, #0
 800661c:	d014      	beq.n	8006648 <USBD_LL_Reset+0x66>
        if (pdev->pClass[0]->DeInit != NULL) {
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00e      	beq.n	8006648 <USBD_LL_Reset+0x66>
            if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK) {
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	6852      	ldr	r2, [r2, #4]
 8006636:	b2d2      	uxtb	r2, r2
 8006638:	4611      	mov	r1, r2
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	4798      	blx	r3
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <USBD_LL_Reset+0x66>
                ret = USBD_FAIL;
 8006644:	2303      	movs	r3, #3
 8006646:	73fb      	strb	r3, [r7, #15]
        }
    }
#endif /* USE_USBD_COMPOSITE */

    /* Open EP0 OUT */
    (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006648:	2340      	movs	r3, #64	; 0x40
 800664a:	2200      	movs	r2, #0
 800664c:	2100      	movs	r1, #0
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f001 fbf5 	bl	8007e3e <USBD_LL_OpenEP>
    pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

    pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2240      	movs	r2, #64	; 0x40
 8006660:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

    /* Open EP0 IN */
    (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006664:	2340      	movs	r3, #64	; 0x40
 8006666:	2200      	movs	r2, #0
 8006668:	2180      	movs	r1, #128	; 0x80
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f001 fbe7 	bl	8007e3e <USBD_LL_OpenEP>
    pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	849a      	strh	r2, [r3, #36]	; 0x24

    pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2240      	movs	r2, #64	; 0x40
 800667a:	621a      	str	r2, [r3, #32]

    return ret;
 800667c:	7bfb      	ldrb	r3, [r7, #15]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <USBD_LL_SetSpeed>:
 * @brief  USBD_LL_SetSpeed
 *         Handle Reset event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef * pdev, USBD_SpeedTypeDef speed) {
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	460b      	mov	r3, r1
 8006690:	70fb      	strb	r3, [r7, #3]
    pdev->dev_speed = speed;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	78fa      	ldrb	r2, [r7, #3]
 8006696:	741a      	strb	r2, [r3, #16]

    return USBD_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <USBD_LL_Suspend>:
 *         Handle Suspend event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef * pdev) {
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
    pdev->dev_old_state = pdev->dev_state;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
    pdev->dev_state = USBD_STATE_SUSPENDED;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2204      	movs	r2, #4
 80066c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

    return USBD_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <USBD_LL_Resume>:
 *         Handle Resume event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef * pdev) {
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
    if (pdev->dev_state == USBD_STATE_SUSPENDED) {
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	d106      	bne.n	80066f4 <USBD_LL_Resume+0x22>
        pdev->dev_state = pdev->dev_old_state;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    }

    return USBD_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <USBD_LL_SOF>:
 *         Handle SOF event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef * pdev) {
 8006702:	b580      	push	{r7, lr}
 8006704:	b082      	sub	sp, #8
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
    /* The SOF event can be distributed for all classes that support it */
    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b03      	cmp	r3, #3
 8006714:	d110      	bne.n	8006738 <USBD_LL_SOF+0x36>
                    }
                }
            }
        }
#else
        if (pdev->pClass[0] != NULL) {
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00b      	beq.n	8006738 <USBD_LL_SOF+0x36>
            if (pdev->pClass[0]->SOF != NULL) {
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d005      	beq.n	8006738 <USBD_LL_SOF+0x36>
                (void)pdev->pClass[0]->SOF(pdev);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006732:	69db      	ldr	r3, [r3, #28]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	4798      	blx	r3
            }
        }
#endif /* USE_USBD_COMPOSITE */
    }

    return USBD_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <USBD_LL_IsoINIncomplete>:
 * @brief  USBD_LL_IsoINIncomplete
 *         Handle iso in incomplete event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef * pdev, uint8_t epnum) {
 8006742:	b580      	push	{r7, lr}
 8006744:	b082      	sub	sp, #8
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	460b      	mov	r3, r1
 800674c:	70fb      	strb	r3, [r7, #3]
    if (pdev->pClass[pdev->classId] == NULL) {
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	32ae      	adds	r2, #174	; 0xae
 8006758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <USBD_LL_IsoINIncomplete+0x22>
        return USBD_FAIL;
 8006760:	2303      	movs	r3, #3
 8006762:	e01c      	b.n	800679e <USBD_LL_IsoINIncomplete+0x5c>
    }

    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b03      	cmp	r3, #3
 800676e:	d115      	bne.n	800679c <USBD_LL_IsoINIncomplete+0x5a>
        if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL) {
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	32ae      	adds	r2, #174	; 0xae
 800677a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00b      	beq.n	800679c <USBD_LL_IsoINIncomplete+0x5a>
            (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	32ae      	adds	r2, #174	; 0xae
 800678e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	78fa      	ldrb	r2, [r7, #3]
 8006796:	4611      	mov	r1, r2
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	4798      	blx	r3
        }
    }

    return USBD_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <USBD_LL_IsoOUTIncomplete>:
 * @brief  USBD_LL_IsoOUTIncomplete
 *         Handle iso out incomplete event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef * pdev, uint8_t epnum) {
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b082      	sub	sp, #8
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	460b      	mov	r3, r1
 80067b0:	70fb      	strb	r3, [r7, #3]
    if (pdev->pClass[pdev->classId] == NULL) {
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	32ae      	adds	r2, #174	; 0xae
 80067bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <USBD_LL_IsoOUTIncomplete+0x22>
        return USBD_FAIL;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e01c      	b.n	8006802 <USBD_LL_IsoOUTIncomplete+0x5c>
    }

    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b03      	cmp	r3, #3
 80067d2:	d115      	bne.n	8006800 <USBD_LL_IsoOUTIncomplete+0x5a>
        if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL) {
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	32ae      	adds	r2, #174	; 0xae
 80067de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00b      	beq.n	8006800 <USBD_LL_IsoOUTIncomplete+0x5a>
            (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	32ae      	adds	r2, #174	; 0xae
 80067f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	78fa      	ldrb	r2, [r7, #3]
 80067fa:	4611      	mov	r1, r2
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	4798      	blx	r3
        }
    }

    return USBD_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <USBD_LL_DevConnected>:
 * @brief  USBD_LL_DevConnected
 *         Handle device connection event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef * pdev) {
 800680a:	b480      	push	{r7}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument compilation warning */
    UNUSED(pdev);

    return USBD_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <USBD_LL_DevDisconnected>:
 * @brief  USBD_LL_DevDisconnected
 *         Handle device disconnection event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef * pdev) {
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
    USBD_StatusTypeDef ret = USBD_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	73fb      	strb	r3, [r7, #15]

    /* Free Class Resources */
    pdev->dev_state = USBD_STATE_DEFAULT;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
                }
            }
        }
    }
#else
    if (pdev->pClass[0] != NULL) {
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00e      	beq.n	800685c <USBD_LL_DevDisconnected+0x3c>
        if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U) {
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	6852      	ldr	r2, [r2, #4]
 800684a:	b2d2      	uxtb	r2, r2
 800684c:	4611      	mov	r1, r2
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	4798      	blx	r3
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <USBD_LL_DevDisconnected+0x3c>
            ret = USBD_FAIL;
 8006858:	2303      	movs	r3, #3
 800685a:	73fb      	strb	r3, [r7, #15]
        }
    }
#endif /* USE_USBD_COMPOSITE */

    return ret;
 800685c:	7bfb      	ldrb	r3, [r7, #15]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <USBD_CoreFindIF>:
 *         return the class index relative to the selected interface
 * @param  pdev: device instance
 * @param  index : selected interface number
 * @retval index of the class using the selected interface number. OxFF if no class found.
 */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef * pdev, uint8_t index) {
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	460b      	mov	r3, r1
 8006870:	70fb      	strb	r3, [r7, #3]
    return 0xFFU;
#else
    UNUSED(pdev);
    UNUSED(index);

    return 0x00U;
 8006872:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006874:	4618      	mov	r0, r3
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <USBD_CoreFindEP>:
 *         return the class index relative to the selected endpoint
 * @param  pdev: device instance
 * @param  index : selected endpoint number
 * @retval index of the class using the selected endpoint number. 0xFF if no class found.
 */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef * pdev, uint8_t index) {
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	70fb      	strb	r3, [r7, #3]
    return 0xFFU;
#else
    UNUSED(pdev);
    UNUSED(index);

    return 0x00U;
 800688c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800688e:	4618      	mov	r0, r3
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <USBD_GetEpDesc>:
 * @param  pdev: device instance
 * @param  pConfDesc:  pointer to Bos descriptor
 * @param  EpAddr:  endpoint address
 * @retval pointer to video endpoint descriptor
 */
void * USBD_GetEpDesc(uint8_t * pConfDesc, uint8_t EpAddr) {
 800689a:	b580      	push	{r7, lr}
 800689c:	b086      	sub	sp, #24
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	460b      	mov	r3, r1
 80068a4:	70fb      	strb	r3, [r7, #3]
    USBD_DescHeaderTypeDef * pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	617b      	str	r3, [r7, #20]
    USBD_ConfigDescTypeDef * desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	60fb      	str	r3, [r7, #12]
    USBD_EpDescTypeDef * pEpDesc = NULL;
 80068ae:	2300      	movs	r3, #0
 80068b0:	613b      	str	r3, [r7, #16]
    uint16_t ptr;

    if (desc->wTotalLength > desc->bLength) {
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	885b      	ldrh	r3, [r3, #2]
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	429a      	cmp	r2, r3
 80068c0:	d920      	bls.n	8006904 <USBD_GetEpDesc+0x6a>
        ptr = desc->bLength;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	817b      	strh	r3, [r7, #10]

        while (ptr < desc->wTotalLength) {
 80068ca:	e013      	b.n	80068f4 <USBD_GetEpDesc+0x5a>
            pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80068cc:	f107 030a 	add.w	r3, r7, #10
 80068d0:	4619      	mov	r1, r3
 80068d2:	6978      	ldr	r0, [r7, #20]
 80068d4:	f000 f81b 	bl	800690e <USBD_GetNextDesc>
 80068d8:	6178      	str	r0, [r7, #20]

            if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT) {
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	785b      	ldrb	r3, [r3, #1]
 80068de:	2b05      	cmp	r3, #5
 80068e0:	d108      	bne.n	80068f4 <USBD_GetEpDesc+0x5a>
                pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	613b      	str	r3, [r7, #16]

                if (pEpDesc->bEndpointAddress == EpAddr) {
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	789b      	ldrb	r3, [r3, #2]
 80068ea:	78fa      	ldrb	r2, [r7, #3]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d008      	beq.n	8006902 <USBD_GetEpDesc+0x68>
                    break;
                } else {
                    pEpDesc = NULL;
 80068f0:	2300      	movs	r3, #0
 80068f2:	613b      	str	r3, [r7, #16]
        while (ptr < desc->wTotalLength) {
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	885b      	ldrh	r3, [r3, #2]
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	897b      	ldrh	r3, [r7, #10]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d8e5      	bhi.n	80068cc <USBD_GetEpDesc+0x32>
 8006900:	e000      	b.n	8006904 <USBD_GetEpDesc+0x6a>
                    break;
 8006902:	bf00      	nop
                }
            }
        }
    }

    return (void *)pEpDesc;
 8006904:	693b      	ldr	r3, [r7, #16]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3718      	adds	r7, #24
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <USBD_GetNextDesc>:
 *         This function return the next descriptor header
 * @param  buf: Buffer where the descriptor is available
 * @param  ptr: data pointer inside the descriptor
 * @retval next header
 */
USBD_DescHeaderTypeDef * USBD_GetNextDesc(uint8_t * pbuf, uint16_t * ptr) {
 800690e:	b480      	push	{r7}
 8006910:	b085      	sub	sp, #20
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	6039      	str	r1, [r7, #0]
    USBD_DescHeaderTypeDef * pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	60fb      	str	r3, [r7, #12]

    *ptr += pnext->bLength;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	881a      	ldrh	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	b29b      	uxth	r3, r3
 8006926:	4413      	add	r3, r2
 8006928:	b29a      	uxth	r2, r3
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	801a      	strh	r2, [r3, #0]
    pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4413      	add	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]

    return (pnext);
 800693a:	68fb      	ldr	r3, [r7, #12]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <SWAPBYTE>:
 */

/** @defgroup USBD_DEF_Exported_Macros
 * @{
 */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t * addr) {
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
    uint16_t _SwapVal, _Byte1, _Byte2;
    uint8_t * _pbuff = addr;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	617b      	str	r3, [r7, #20]

    _Byte1 = *(uint8_t *)_pbuff;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	827b      	strh	r3, [r7, #18]
    _pbuff++;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	3301      	adds	r3, #1
 800695e:	617b      	str	r3, [r7, #20]
    _Byte2 = *(uint8_t *)_pbuff;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	823b      	strh	r3, [r7, #16]

    _SwapVal = (_Byte2 << 8) | _Byte1;
 8006966:	8a3b      	ldrh	r3, [r7, #16]
 8006968:	021b      	lsls	r3, r3, #8
 800696a:	b21a      	sxth	r2, r3
 800696c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006970:	4313      	orrs	r3, r2
 8006972:	b21b      	sxth	r3, r3
 8006974:	81fb      	strh	r3, [r7, #14]

    return _SwapVal;
 8006976:	89fb      	ldrh	r3, [r7, #14]
}
 8006978:	4618      	mov	r0, r3
 800697a:	371c      	adds	r7, #28
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <USBD_StdDevReq>:
 *         Handle standard usb device requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret = USBD_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	73fb      	strb	r3, [r7, #15]

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800699a:	2b40      	cmp	r3, #64	; 0x40
 800699c:	d005      	beq.n	80069aa <USBD_StdDevReq+0x26>
 800699e:	2b40      	cmp	r3, #64	; 0x40
 80069a0:	d857      	bhi.n	8006a52 <USBD_StdDevReq+0xce>
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00f      	beq.n	80069c6 <USBD_StdDevReq+0x42>
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	d153      	bne.n	8006a52 <USBD_StdDevReq+0xce>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
        ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	32ae      	adds	r2, #174	; 0xae
 80069b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	4798      	blx	r3
 80069c0:	4603      	mov	r3, r0
 80069c2:	73fb      	strb	r3, [r7, #15]
        break;
 80069c4:	e04a      	b.n	8006a5c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
        switch (req->bRequest) {
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	785b      	ldrb	r3, [r3, #1]
 80069ca:	2b09      	cmp	r3, #9
 80069cc:	d83b      	bhi.n	8006a46 <USBD_StdDevReq+0xc2>
 80069ce:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <USBD_StdDevReq+0x50>)
 80069d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d4:	08006a29 	.word	0x08006a29
 80069d8:	08006a3d 	.word	0x08006a3d
 80069dc:	08006a47 	.word	0x08006a47
 80069e0:	08006a33 	.word	0x08006a33
 80069e4:	08006a47 	.word	0x08006a47
 80069e8:	08006a07 	.word	0x08006a07
 80069ec:	080069fd 	.word	0x080069fd
 80069f0:	08006a47 	.word	0x08006a47
 80069f4:	08006a1f 	.word	0x08006a1f
 80069f8:	08006a11 	.word	0x08006a11
        case USB_REQ_GET_DESCRIPTOR:
            USBD_GetDescriptor(pdev, req);
 80069fc:	6839      	ldr	r1, [r7, #0]
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fa3c 	bl	8006e7c <USBD_GetDescriptor>
            break;
 8006a04:	e024      	b.n	8006a50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
            USBD_SetAddress(pdev, req);
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fba1 	bl	8007150 <USBD_SetAddress>
            break;
 8006a0e:	e01f      	b.n	8006a50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
            ret = USBD_SetConfig(pdev, req);
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fbe0 	bl	80071d8 <USBD_SetConfig>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	73fb      	strb	r3, [r7, #15]
            break;
 8006a1c:	e018      	b.n	8006a50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
            USBD_GetConfig(pdev, req);
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fc83 	bl	800732c <USBD_GetConfig>
            break;
 8006a26:	e013      	b.n	8006a50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
            USBD_GetStatus(pdev, req);
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fcb4 	bl	8007398 <USBD_GetStatus>
            break;
 8006a30:	e00e      	b.n	8006a50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
            USBD_SetFeature(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fce3 	bl	8007400 <USBD_SetFeature>
            break;
 8006a3a:	e009      	b.n	8006a50 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
            USBD_ClrFeature(pdev, req);
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fd07 	bl	8007452 <USBD_ClrFeature>
            break;
 8006a44:	e004      	b.n	8006a50 <USBD_StdDevReq+0xcc>

        default:
            USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fd5e 	bl	800750a <USBD_CtlError>
            break;
 8006a4e:	bf00      	nop
        }
        break;
 8006a50:	e004      	b.n	8006a5c <USBD_StdDevReq+0xd8>

    default:
        USBD_CtlError(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fd58 	bl	800750a <USBD_CtlError>
        break;
 8006a5a:	bf00      	nop
    }

    return ret;
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop

08006a68 <USBD_StdItfReq>:
 *         Handle standard usb interface requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret = USBD_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	73fb      	strb	r3, [r7, #15]
    uint8_t idx;

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a7e:	2b40      	cmp	r3, #64	; 0x40
 8006a80:	d005      	beq.n	8006a8e <USBD_StdItfReq+0x26>
 8006a82:	2b40      	cmp	r3, #64	; 0x40
 8006a84:	d852      	bhi.n	8006b2c <USBD_StdItfReq+0xc4>
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <USBD_StdItfReq+0x26>
 8006a8a:	2b20      	cmp	r3, #32
 8006a8c:	d14e      	bne.n	8006b2c <USBD_StdItfReq+0xc4>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
        switch (pdev->dev_state) {
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	3b01      	subs	r3, #1
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d840      	bhi.n	8006b1e <USBD_StdItfReq+0xb6>
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

            if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) {
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	889b      	ldrh	r3, [r3, #4]
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d836      	bhi.n	8006b14 <USBD_StdItfReq+0xac>
                /* Get the class index relative to this interface */
                idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	889b      	ldrh	r3, [r3, #4]
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	4619      	mov	r1, r3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7ff fed9 	bl	8006866 <USBD_CoreFindIF>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	73bb      	strb	r3, [r7, #14]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 8006ab8:	7bbb      	ldrb	r3, [r7, #14]
 8006aba:	2bff      	cmp	r3, #255	; 0xff
 8006abc:	d01d      	beq.n	8006afa <USBD_StdItfReq+0x92>
 8006abe:	7bbb      	ldrb	r3, [r7, #14]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d11a      	bne.n	8006afa <USBD_StdItfReq+0x92>
                    /* Call the class data out function to manage the request */
                    if (pdev->pClass[idx]->Setup != NULL) {
 8006ac4:	7bba      	ldrb	r2, [r7, #14]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	32ae      	adds	r2, #174	; 0xae
 8006aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00f      	beq.n	8006af4 <USBD_StdItfReq+0x8c>
                        pdev->classId = idx;
 8006ad4:	7bba      	ldrb	r2, [r7, #14]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                        ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006adc:	7bba      	ldrb	r2, [r7, #14]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	32ae      	adds	r2, #174	; 0xae
 8006ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	6839      	ldr	r1, [r7, #0]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	4798      	blx	r3
 8006aee:	4603      	mov	r3, r0
 8006af0:	73fb      	strb	r3, [r7, #15]
                    if (pdev->pClass[idx]->Setup != NULL) {
 8006af2:	e004      	b.n	8006afe <USBD_StdItfReq+0x96>
                    } else {
                        /* should never reach this condition */
                        ret = USBD_FAIL;
 8006af4:	2303      	movs	r3, #3
 8006af6:	73fb      	strb	r3, [r7, #15]
                    if (pdev->pClass[idx]->Setup != NULL) {
 8006af8:	e001      	b.n	8006afe <USBD_StdItfReq+0x96>
                    }
                } else {
                    /* No relative interface found */
                    ret = USBD_FAIL;
 8006afa:	2303      	movs	r3, #3
 8006afc:	73fb      	strb	r3, [r7, #15]
                }

                if ((req->wLength == 0U) && (ret == USBD_OK)) {
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	88db      	ldrh	r3, [r3, #6]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d110      	bne.n	8006b28 <USBD_StdItfReq+0xc0>
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10d      	bne.n	8006b28 <USBD_StdItfReq+0xc0>
                    (void)USBD_CtlSendStatus(pdev);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fdc7 	bl	80076a0 <USBD_CtlSendStatus>
                }
            } else {
                USBD_CtlError(pdev, req);
            }
            break;
 8006b12:	e009      	b.n	8006b28 <USBD_StdItfReq+0xc0>
                USBD_CtlError(pdev, req);
 8006b14:	6839      	ldr	r1, [r7, #0]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fcf7 	bl	800750a <USBD_CtlError>
            break;
 8006b1c:	e004      	b.n	8006b28 <USBD_StdItfReq+0xc0>

        default:
            USBD_CtlError(pdev, req);
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fcf2 	bl	800750a <USBD_CtlError>
            break;
 8006b26:	e000      	b.n	8006b2a <USBD_StdItfReq+0xc2>
            break;
 8006b28:	bf00      	nop
        }
        break;
 8006b2a:	e004      	b.n	8006b36 <USBD_StdItfReq+0xce>

    default:
        USBD_CtlError(pdev, req);
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fceb 	bl	800750a <USBD_CtlError>
        break;
 8006b34:	bf00      	nop
    }

    return ret;
 8006b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <USBD_StdEPReq>:
 *         Handle standard usb endpoint requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
    USBD_EndpointTypeDef * pep;
    uint8_t ep_addr;
    uint8_t idx;
    USBD_StatusTypeDef ret = USBD_OK;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	73fb      	strb	r3, [r7, #15]

    ep_addr = LOBYTE(req->wIndex);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	889b      	ldrh	r3, [r3, #4]
 8006b52:	73bb      	strb	r3, [r7, #14]

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b5c:	2b40      	cmp	r3, #64	; 0x40
 8006b5e:	d007      	beq.n	8006b70 <USBD_StdEPReq+0x30>
 8006b60:	2b40      	cmp	r3, #64	; 0x40
 8006b62:	f200 817f 	bhi.w	8006e64 <USBD_StdEPReq+0x324>
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d02a      	beq.n	8006bc0 <USBD_StdEPReq+0x80>
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	f040 817a 	bne.w	8006e64 <USBD_StdEPReq+0x324>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
        /* Get the class index relative to this endpoint */
        idx = USBD_CoreFindEP(pdev, ep_addr);
 8006b70:	7bbb      	ldrb	r3, [r7, #14]
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff fe83 	bl	8006880 <USBD_CoreFindEP>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	737b      	strb	r3, [r7, #13]
        if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 8006b7e:	7b7b      	ldrb	r3, [r7, #13]
 8006b80:	2bff      	cmp	r3, #255	; 0xff
 8006b82:	f000 8174 	beq.w	8006e6e <USBD_StdEPReq+0x32e>
 8006b86:	7b7b      	ldrb	r3, [r7, #13]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f040 8170 	bne.w	8006e6e <USBD_StdEPReq+0x32e>
            pdev->classId = idx;
 8006b8e:	7b7a      	ldrb	r2, [r7, #13]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
            /* Call the class data out function to manage the request */
            if (pdev->pClass[idx]->Setup != NULL) {
 8006b96:	7b7a      	ldrb	r2, [r7, #13]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	32ae      	adds	r2, #174	; 0xae
 8006b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 8163 	beq.w	8006e6e <USBD_StdEPReq+0x32e>
                ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006ba8:	7b7a      	ldrb	r2, [r7, #13]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	32ae      	adds	r2, #174	; 0xae
 8006bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	6839      	ldr	r1, [r7, #0]
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	4798      	blx	r3
 8006bba:	4603      	mov	r3, r0
 8006bbc:	73fb      	strb	r3, [r7, #15]
            }
        }
        break;
 8006bbe:	e156      	b.n	8006e6e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
        switch (req->bRequest) {
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	785b      	ldrb	r3, [r3, #1]
 8006bc4:	2b03      	cmp	r3, #3
 8006bc6:	d008      	beq.n	8006bda <USBD_StdEPReq+0x9a>
 8006bc8:	2b03      	cmp	r3, #3
 8006bca:	f300 8145 	bgt.w	8006e58 <USBD_StdEPReq+0x318>
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 809b 	beq.w	8006d0a <USBD_StdEPReq+0x1ca>
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d03c      	beq.n	8006c52 <USBD_StdEPReq+0x112>
 8006bd8:	e13e      	b.n	8006e58 <USBD_StdEPReq+0x318>
        case USB_REQ_SET_FEATURE:
            switch (pdev->dev_state) {
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d002      	beq.n	8006bec <USBD_StdEPReq+0xac>
 8006be6:	2b03      	cmp	r3, #3
 8006be8:	d016      	beq.n	8006c18 <USBD_StdEPReq+0xd8>
 8006bea:	e02c      	b.n	8006c46 <USBD_StdEPReq+0x106>
            case USBD_STATE_ADDRESSED:
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U)) {
 8006bec:	7bbb      	ldrb	r3, [r7, #14]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00d      	beq.n	8006c0e <USBD_StdEPReq+0xce>
 8006bf2:	7bbb      	ldrb	r3, [r7, #14]
 8006bf4:	2b80      	cmp	r3, #128	; 0x80
 8006bf6:	d00a      	beq.n	8006c0e <USBD_StdEPReq+0xce>
                    (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bf8:	7bbb      	ldrb	r3, [r7, #14]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f001 f963 	bl	8007ec8 <USBD_LL_StallEP>
                    (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c02:	2180      	movs	r1, #128	; 0x80
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f001 f95f 	bl	8007ec8 <USBD_LL_StallEP>
 8006c0a:	bf00      	nop
                } else {
                    USBD_CtlError(pdev, req);
                }
                break;
 8006c0c:	e020      	b.n	8006c50 <USBD_StdEPReq+0x110>
                    USBD_CtlError(pdev, req);
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fc7a 	bl	800750a <USBD_CtlError>
                break;
 8006c16:	e01b      	b.n	8006c50 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
                if (req->wValue == USB_FEATURE_EP_HALT) {
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	885b      	ldrh	r3, [r3, #2]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10e      	bne.n	8006c3e <USBD_StdEPReq+0xfe>
                    if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U)) {
 8006c20:	7bbb      	ldrb	r3, [r7, #14]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00b      	beq.n	8006c3e <USBD_StdEPReq+0xfe>
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	2b80      	cmp	r3, #128	; 0x80
 8006c2a:	d008      	beq.n	8006c3e <USBD_StdEPReq+0xfe>
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	88db      	ldrh	r3, [r3, #6]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d104      	bne.n	8006c3e <USBD_StdEPReq+0xfe>
                        (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c34:	7bbb      	ldrb	r3, [r7, #14]
 8006c36:	4619      	mov	r1, r3
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f001 f945 	bl	8007ec8 <USBD_LL_StallEP>
                    }
                }
                (void)USBD_CtlSendStatus(pdev);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fd2e 	bl	80076a0 <USBD_CtlSendStatus>

                break;
 8006c44:	e004      	b.n	8006c50 <USBD_StdEPReq+0x110>

            default:
                USBD_CtlError(pdev, req);
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fc5e 	bl	800750a <USBD_CtlError>
                break;
 8006c4e:	bf00      	nop
            }
            break;
 8006c50:	e107      	b.n	8006e62 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

            switch (pdev->dev_state) {
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d002      	beq.n	8006c64 <USBD_StdEPReq+0x124>
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d016      	beq.n	8006c90 <USBD_StdEPReq+0x150>
 8006c62:	e04b      	b.n	8006cfc <USBD_StdEPReq+0x1bc>
            case USBD_STATE_ADDRESSED:
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U)) {
 8006c64:	7bbb      	ldrb	r3, [r7, #14]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00d      	beq.n	8006c86 <USBD_StdEPReq+0x146>
 8006c6a:	7bbb      	ldrb	r3, [r7, #14]
 8006c6c:	2b80      	cmp	r3, #128	; 0x80
 8006c6e:	d00a      	beq.n	8006c86 <USBD_StdEPReq+0x146>
                    (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c70:	7bbb      	ldrb	r3, [r7, #14]
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 f927 	bl	8007ec8 <USBD_LL_StallEP>
                    (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c7a:	2180      	movs	r1, #128	; 0x80
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f001 f923 	bl	8007ec8 <USBD_LL_StallEP>
 8006c82:	bf00      	nop
                } else {
                    USBD_CtlError(pdev, req);
                }
                break;
 8006c84:	e040      	b.n	8006d08 <USBD_StdEPReq+0x1c8>
                    USBD_CtlError(pdev, req);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fc3e 	bl	800750a <USBD_CtlError>
                break;
 8006c8e:	e03b      	b.n	8006d08 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
                if (req->wValue == USB_FEATURE_EP_HALT) {
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	885b      	ldrh	r3, [r3, #2]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d136      	bne.n	8006d06 <USBD_StdEPReq+0x1c6>
                    if ((ep_addr & 0x7FU) != 0x00U) {
 8006c98:	7bbb      	ldrb	r3, [r7, #14]
 8006c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d004      	beq.n	8006cac <USBD_StdEPReq+0x16c>
                        (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ca2:	7bbb      	ldrb	r3, [r7, #14]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f001 f92d 	bl	8007f06 <USBD_LL_ClearStallEP>
                    }
                    (void)USBD_CtlSendStatus(pdev);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fcf7 	bl	80076a0 <USBD_CtlSendStatus>

                    /* Get the class index relative to this interface */
                    idx = USBD_CoreFindEP(pdev, ep_addr);
 8006cb2:	7bbb      	ldrb	r3, [r7, #14]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff fde2 	bl	8006880 <USBD_CoreFindEP>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	737b      	strb	r3, [r7, #13]
                    if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 8006cc0:	7b7b      	ldrb	r3, [r7, #13]
 8006cc2:	2bff      	cmp	r3, #255	; 0xff
 8006cc4:	d01f      	beq.n	8006d06 <USBD_StdEPReq+0x1c6>
 8006cc6:	7b7b      	ldrb	r3, [r7, #13]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d11c      	bne.n	8006d06 <USBD_StdEPReq+0x1c6>
                        pdev->classId = idx;
 8006ccc:	7b7a      	ldrb	r2, [r7, #13]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                        /* Call the class data out function to manage the request */
                        if (pdev->pClass[idx]->Setup != NULL) {
 8006cd4:	7b7a      	ldrb	r2, [r7, #13]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	32ae      	adds	r2, #174	; 0xae
 8006cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d010      	beq.n	8006d06 <USBD_StdEPReq+0x1c6>
                            ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006ce4:	7b7a      	ldrb	r2, [r7, #13]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	32ae      	adds	r2, #174	; 0xae
 8006cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	6839      	ldr	r1, [r7, #0]
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	4798      	blx	r3
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	73fb      	strb	r3, [r7, #15]
                        }
                    }
                }
                break;
 8006cfa:	e004      	b.n	8006d06 <USBD_StdEPReq+0x1c6>

            default:
                USBD_CtlError(pdev, req);
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fc03 	bl	800750a <USBD_CtlError>
                break;
 8006d04:	e000      	b.n	8006d08 <USBD_StdEPReq+0x1c8>
                break;
 8006d06:	bf00      	nop
            }
            break;
 8006d08:	e0ab      	b.n	8006e62 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
            switch (pdev->dev_state) {
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d002      	beq.n	8006d1c <USBD_StdEPReq+0x1dc>
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	d032      	beq.n	8006d80 <USBD_StdEPReq+0x240>
 8006d1a:	e097      	b.n	8006e4c <USBD_StdEPReq+0x30c>
            case USBD_STATE_ADDRESSED:
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U)) {
 8006d1c:	7bbb      	ldrb	r3, [r7, #14]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d007      	beq.n	8006d32 <USBD_StdEPReq+0x1f2>
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	2b80      	cmp	r3, #128	; 0x80
 8006d26:	d004      	beq.n	8006d32 <USBD_StdEPReq+0x1f2>
                    USBD_CtlError(pdev, req);
 8006d28:	6839      	ldr	r1, [r7, #0]
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fbed 	bl	800750a <USBD_CtlError>
                    break;
 8006d30:	e091      	b.n	8006e56 <USBD_StdEPReq+0x316>
                }
                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]
 8006d32:	f997 300e 	ldrsb.w	r3, [r7, #14]
                                                   : &pdev->ep_out[ep_addr & 0x7FU];
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	da0b      	bge.n	8006d52 <USBD_StdEPReq+0x212>
                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]
 8006d3a:	7bbb      	ldrb	r3, [r7, #14]
 8006d3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                                   : &pdev->ep_out[ep_addr & 0x7FU];
 8006d40:	4613      	mov	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	3310      	adds	r3, #16
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	3304      	adds	r3, #4
 8006d50:	e00b      	b.n	8006d6a <USBD_StdEPReq+0x22a>
 8006d52:	7bbb      	ldrb	r3, [r7, #14]
 8006d54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d58:	4613      	mov	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	4413      	add	r3, r2
 8006d68:	3304      	adds	r3, #4
                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]
 8006d6a:	60bb      	str	r3, [r7, #8]

                pep->status = 0x0000U;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	601a      	str	r2, [r3, #0]

                (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2202      	movs	r2, #2
 8006d76:	4619      	mov	r1, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fc37 	bl	80075ec <USBD_CtlSendData>
                break;
 8006d7e:	e06a      	b.n	8006e56 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
                if ((ep_addr & 0x80U) == 0x80U) {
 8006d80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	da11      	bge.n	8006dac <USBD_StdEPReq+0x26c>
                    if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U) {
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
 8006d8a:	f003 020f 	and.w	r2, r3, #15
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	4613      	mov	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	440b      	add	r3, r1
 8006d9a:	3324      	adds	r3, #36	; 0x24
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d117      	bne.n	8006dd2 <USBD_StdEPReq+0x292>
                        USBD_CtlError(pdev, req);
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fbb0 	bl	800750a <USBD_CtlError>
                        break;
 8006daa:	e054      	b.n	8006e56 <USBD_StdEPReq+0x316>
                    }
                } else {
                    if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U) {
 8006dac:	7bbb      	ldrb	r3, [r7, #14]
 8006dae:	f003 020f 	and.w	r2, r3, #15
 8006db2:	6879      	ldr	r1, [r7, #4]
 8006db4:	4613      	mov	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	440b      	add	r3, r1
 8006dbe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006dc2:	881b      	ldrh	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d104      	bne.n	8006dd2 <USBD_StdEPReq+0x292>
                        USBD_CtlError(pdev, req);
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fb9d 	bl	800750a <USBD_CtlError>
                        break;
 8006dd0:	e041      	b.n	8006e56 <USBD_StdEPReq+0x316>
                    }
                }

                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]
 8006dd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
                                                   : &pdev->ep_out[ep_addr & 0x7FU];
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	da0b      	bge.n	8006df2 <USBD_StdEPReq+0x2b2>
                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]
 8006dda:	7bbb      	ldrb	r3, [r7, #14]
 8006ddc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                                   : &pdev->ep_out[ep_addr & 0x7FU];
 8006de0:	4613      	mov	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	3310      	adds	r3, #16
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	4413      	add	r3, r2
 8006dee:	3304      	adds	r3, #4
 8006df0:	e00b      	b.n	8006e0a <USBD_StdEPReq+0x2ca>
 8006df2:	7bbb      	ldrb	r3, [r7, #14]
 8006df4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006df8:	4613      	mov	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	4413      	add	r3, r2
 8006e08:	3304      	adds	r3, #4
                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]
 8006e0a:	60bb      	str	r3, [r7, #8]

                if ((ep_addr == 0x00U) || (ep_addr == 0x80U)) {
 8006e0c:	7bbb      	ldrb	r3, [r7, #14]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <USBD_StdEPReq+0x2d8>
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
 8006e14:	2b80      	cmp	r3, #128	; 0x80
 8006e16:	d103      	bne.n	8006e20 <USBD_StdEPReq+0x2e0>
                    pep->status = 0x0000U;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	e00e      	b.n	8006e3e <USBD_StdEPReq+0x2fe>
                } else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U) {
 8006e20:	7bbb      	ldrb	r3, [r7, #14]
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f001 f88d 	bl	8007f44 <USBD_LL_IsStallEP>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d003      	beq.n	8006e38 <USBD_StdEPReq+0x2f8>
                    pep->status = 0x0001U;
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2201      	movs	r2, #1
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	e002      	b.n	8006e3e <USBD_StdEPReq+0x2fe>
                } else {
                    pep->status = 0x0000U;
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	601a      	str	r2, [r3, #0]
                }

                (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2202      	movs	r2, #2
 8006e42:	4619      	mov	r1, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fbd1 	bl	80075ec <USBD_CtlSendData>
                break;
 8006e4a:	e004      	b.n	8006e56 <USBD_StdEPReq+0x316>

            default:
                USBD_CtlError(pdev, req);
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fb5b 	bl	800750a <USBD_CtlError>
                break;
 8006e54:	bf00      	nop
            }
            break;
 8006e56:	e004      	b.n	8006e62 <USBD_StdEPReq+0x322>

        default:
            USBD_CtlError(pdev, req);
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fb55 	bl	800750a <USBD_CtlError>
            break;
 8006e60:	bf00      	nop
        }
        break;
 8006e62:	e005      	b.n	8006e70 <USBD_StdEPReq+0x330>

    default:
        USBD_CtlError(pdev, req);
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fb4f 	bl	800750a <USBD_CtlError>
        break;
 8006e6c:	e000      	b.n	8006e70 <USBD_StdEPReq+0x330>
        break;
 8006e6e:	bf00      	nop
    }

    return ret;
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
	...

08006e7c <USBD_GetDescriptor>:
 *         Handle Get Descriptor requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_GetDescriptor(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
    uint16_t len = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	813b      	strh	r3, [r7, #8]
    uint8_t * pbuf = NULL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60fb      	str	r3, [r7, #12]
    uint8_t err = 0U;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	72fb      	strb	r3, [r7, #11]

    switch (req->wValue >> 8) {
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	885b      	ldrh	r3, [r3, #2]
 8006e96:	0a1b      	lsrs	r3, r3, #8
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	2b06      	cmp	r3, #6
 8006e9e:	f200 8128 	bhi.w	80070f2 <USBD_GetDescriptor+0x276>
 8006ea2:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <USBD_GetDescriptor+0x2c>)
 8006ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea8:	08006ec5 	.word	0x08006ec5
 8006eac:	08006edd 	.word	0x08006edd
 8006eb0:	08006f1d 	.word	0x08006f1d
 8006eb4:	080070f3 	.word	0x080070f3
 8006eb8:	080070f3 	.word	0x080070f3
 8006ebc:	08007093 	.word	0x08007093
 8006ec0:	080070bf 	.word	0x080070bf
            err++;
        }
        break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
        pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	7c12      	ldrb	r2, [r2, #16]
 8006ed0:	f107 0108 	add.w	r1, r7, #8
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	4798      	blx	r3
 8006ed8:	60f8      	str	r0, [r7, #12]
        break;
 8006eda:	e112      	b.n	8007102 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
        if (pdev->dev_speed == USBD_SPEED_HIGH) {
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	7c1b      	ldrb	r3, [r3, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10d      	bne.n	8006f00 <USBD_GetDescriptor+0x84>
            if ((uint8_t)(pdev->NumClasses) > 0U) {
                pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
            } else
#endif /* USE_USBD_COMPOSITE */
            {
                pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eec:	f107 0208 	add.w	r2, r7, #8
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4798      	blx	r3
 8006ef4:	60f8      	str	r0, [r7, #12]
            }
            pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	2202      	movs	r2, #2
 8006efc:	701a      	strb	r2, [r3, #0]
            {
                pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
            }
            pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
        }
        break;
 8006efe:	e100      	b.n	8007102 <USBD_GetDescriptor+0x286>
                pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f08:	f107 0208 	add.w	r2, r7, #8
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	4798      	blx	r3
 8006f10:	60f8      	str	r0, [r7, #12]
            pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3301      	adds	r3, #1
 8006f16:	2202      	movs	r2, #2
 8006f18:	701a      	strb	r2, [r3, #0]
        break;
 8006f1a:	e0f2      	b.n	8007102 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
        switch ((uint8_t)(req->wValue)) {
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	885b      	ldrh	r3, [r3, #2]
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b05      	cmp	r3, #5
 8006f24:	f200 80ac 	bhi.w	8007080 <USBD_GetDescriptor+0x204>
 8006f28:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <USBD_GetDescriptor+0xb4>)
 8006f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2e:	bf00      	nop
 8006f30:	08006f49 	.word	0x08006f49
 8006f34:	08006f7d 	.word	0x08006f7d
 8006f38:	08006fb1 	.word	0x08006fb1
 8006f3c:	08006fe5 	.word	0x08006fe5
 8006f40:	08007019 	.word	0x08007019
 8006f44:	0800704d 	.word	0x0800704d
        case USBD_IDX_LANGID_STR:
            if (pdev->pDesc->GetLangIDStrDescriptor != NULL) {
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00b      	beq.n	8006f6c <USBD_GetDescriptor+0xf0>
                pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	7c12      	ldrb	r2, [r2, #16]
 8006f60:	f107 0108 	add.w	r1, r7, #8
 8006f64:	4610      	mov	r0, r2
 8006f66:	4798      	blx	r3
 8006f68:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 8006f6a:	e091      	b.n	8007090 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 facb 	bl	800750a <USBD_CtlError>
                err++;
 8006f74:	7afb      	ldrb	r3, [r7, #11]
 8006f76:	3301      	adds	r3, #1
 8006f78:	72fb      	strb	r3, [r7, #11]
            break;
 8006f7a:	e089      	b.n	8007090 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
            if (pdev->pDesc->GetManufacturerStrDescriptor != NULL) {
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00b      	beq.n	8006fa0 <USBD_GetDescriptor+0x124>
                pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	7c12      	ldrb	r2, [r2, #16]
 8006f94:	f107 0108 	add.w	r1, r7, #8
 8006f98:	4610      	mov	r0, r2
 8006f9a:	4798      	blx	r3
 8006f9c:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 8006f9e:	e077      	b.n	8007090 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fab1 	bl	800750a <USBD_CtlError>
                err++;
 8006fa8:	7afb      	ldrb	r3, [r7, #11]
 8006faa:	3301      	adds	r3, #1
 8006fac:	72fb      	strb	r3, [r7, #11]
            break;
 8006fae:	e06f      	b.n	8007090 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
            if (pdev->pDesc->GetProductStrDescriptor != NULL) {
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00b      	beq.n	8006fd4 <USBD_GetDescriptor+0x158>
                pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	7c12      	ldrb	r2, [r2, #16]
 8006fc8:	f107 0108 	add.w	r1, r7, #8
 8006fcc:	4610      	mov	r0, r2
 8006fce:	4798      	blx	r3
 8006fd0:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 8006fd2:	e05d      	b.n	8007090 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fa97 	bl	800750a <USBD_CtlError>
                err++;
 8006fdc:	7afb      	ldrb	r3, [r7, #11]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	72fb      	strb	r3, [r7, #11]
            break;
 8006fe2:	e055      	b.n	8007090 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
            if (pdev->pDesc->GetSerialStrDescriptor != NULL) {
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00b      	beq.n	8007008 <USBD_GetDescriptor+0x18c>
                pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	7c12      	ldrb	r2, [r2, #16]
 8006ffc:	f107 0108 	add.w	r1, r7, #8
 8007000:	4610      	mov	r0, r2
 8007002:	4798      	blx	r3
 8007004:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 8007006:	e043      	b.n	8007090 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fa7d 	bl	800750a <USBD_CtlError>
                err++;
 8007010:	7afb      	ldrb	r3, [r7, #11]
 8007012:	3301      	adds	r3, #1
 8007014:	72fb      	strb	r3, [r7, #11]
            break;
 8007016:	e03b      	b.n	8007090 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
            if (pdev->pDesc->GetConfigurationStrDescriptor != NULL) {
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00b      	beq.n	800703c <USBD_GetDescriptor+0x1c0>
                pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	7c12      	ldrb	r2, [r2, #16]
 8007030:	f107 0108 	add.w	r1, r7, #8
 8007034:	4610      	mov	r0, r2
 8007036:	4798      	blx	r3
 8007038:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800703a:	e029      	b.n	8007090 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fa63 	bl	800750a <USBD_CtlError>
                err++;
 8007044:	7afb      	ldrb	r3, [r7, #11]
 8007046:	3301      	adds	r3, #1
 8007048:	72fb      	strb	r3, [r7, #11]
            break;
 800704a:	e021      	b.n	8007090 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
            if (pdev->pDesc->GetInterfaceStrDescriptor != NULL) {
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00b      	beq.n	8007070 <USBD_GetDescriptor+0x1f4>
                pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	7c12      	ldrb	r2, [r2, #16]
 8007064:	f107 0108 	add.w	r1, r7, #8
 8007068:	4610      	mov	r0, r2
 800706a:	4798      	blx	r3
 800706c:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800706e:	e00f      	b.n	8007090 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fa49 	bl	800750a <USBD_CtlError>
                err++;
 8007078:	7afb      	ldrb	r3, [r7, #11]
 800707a:	3301      	adds	r3, #1
 800707c:	72fb      	strb	r3, [r7, #11]
            break;
 800707e:	e007      	b.n	8007090 <USBD_GetDescriptor+0x214>
                err++;
            }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
            USBD_CtlError(pdev, req);
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fa41 	bl	800750a <USBD_CtlError>
            err++;
 8007088:	7afb      	ldrb	r3, [r7, #11]
 800708a:	3301      	adds	r3, #1
 800708c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
            break;
 800708e:	bf00      	nop
        }
        break;
 8007090:	e037      	b.n	8007102 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
        if (pdev->dev_speed == USBD_SPEED_HIGH) {
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	7c1b      	ldrb	r3, [r3, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d109      	bne.n	80070ae <USBD_GetDescriptor+0x232>
            if ((uint8_t)(pdev->NumClasses) > 0U) {
                pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
            } else
#endif /* USE_USBD_COMPOSITE */
            {
                pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a2:	f107 0208 	add.w	r2, r7, #8
 80070a6:	4610      	mov	r0, r2
 80070a8:	4798      	blx	r3
 80070aa:	60f8      	str	r0, [r7, #12]
            }
        } else {
            USBD_CtlError(pdev, req);
            err++;
        }
        break;
 80070ac:	e029      	b.n	8007102 <USBD_GetDescriptor+0x286>
            USBD_CtlError(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fa2a 	bl	800750a <USBD_CtlError>
            err++;
 80070b6:	7afb      	ldrb	r3, [r7, #11]
 80070b8:	3301      	adds	r3, #1
 80070ba:	72fb      	strb	r3, [r7, #11]
        break;
 80070bc:	e021      	b.n	8007102 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
        if (pdev->dev_speed == USBD_SPEED_HIGH) {
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	7c1b      	ldrb	r3, [r3, #16]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10d      	bne.n	80070e2 <USBD_GetDescriptor+0x266>
            if ((uint8_t)(pdev->NumClasses) > 0U) {
                pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
            } else
#endif /* USE_USBD_COMPOSITE */
            {
                pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ce:	f107 0208 	add.w	r2, r7, #8
 80070d2:	4610      	mov	r0, r2
 80070d4:	4798      	blx	r3
 80070d6:	60f8      	str	r0, [r7, #12]
            }
            pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	3301      	adds	r3, #1
 80070dc:	2207      	movs	r2, #7
 80070de:	701a      	strb	r2, [r3, #0]
        } else {
            USBD_CtlError(pdev, req);
            err++;
        }
        break;
 80070e0:	e00f      	b.n	8007102 <USBD_GetDescriptor+0x286>
            USBD_CtlError(pdev, req);
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fa10 	bl	800750a <USBD_CtlError>
            err++;
 80070ea:	7afb      	ldrb	r3, [r7, #11]
 80070ec:	3301      	adds	r3, #1
 80070ee:	72fb      	strb	r3, [r7, #11]
        break;
 80070f0:	e007      	b.n	8007102 <USBD_GetDescriptor+0x286>

    default:
        USBD_CtlError(pdev, req);
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fa08 	bl	800750a <USBD_CtlError>
        err++;
 80070fa:	7afb      	ldrb	r3, [r7, #11]
 80070fc:	3301      	adds	r3, #1
 80070fe:	72fb      	strb	r3, [r7, #11]
        break;
 8007100:	bf00      	nop
    }

    if (err != 0U) {
 8007102:	7afb      	ldrb	r3, [r7, #11]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d11e      	bne.n	8007146 <USBD_GetDescriptor+0x2ca>
        return;
    }

    if (req->wLength != 0U) {
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	88db      	ldrh	r3, [r3, #6]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d016      	beq.n	800713e <USBD_GetDescriptor+0x2c2>
        if (len != 0U) {
 8007110:	893b      	ldrh	r3, [r7, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00e      	beq.n	8007134 <USBD_GetDescriptor+0x2b8>
            len = MIN(len, req->wLength);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	88da      	ldrh	r2, [r3, #6]
 800711a:	893b      	ldrh	r3, [r7, #8]
 800711c:	4293      	cmp	r3, r2
 800711e:	bf28      	it	cs
 8007120:	4613      	movcs	r3, r2
 8007122:	b29b      	uxth	r3, r3
 8007124:	813b      	strh	r3, [r7, #8]
            (void)USBD_CtlSendData(pdev, pbuf, len);
 8007126:	893b      	ldrh	r3, [r7, #8]
 8007128:	461a      	mov	r2, r3
 800712a:	68f9      	ldr	r1, [r7, #12]
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fa5d 	bl	80075ec <USBD_CtlSendData>
 8007132:	e009      	b.n	8007148 <USBD_GetDescriptor+0x2cc>
        } else {
            USBD_CtlError(pdev, req);
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f9e7 	bl	800750a <USBD_CtlError>
 800713c:	e004      	b.n	8007148 <USBD_GetDescriptor+0x2cc>
        }
    } else {
        (void)USBD_CtlSendStatus(pdev);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 faae 	bl	80076a0 <USBD_CtlSendStatus>
 8007144:	e000      	b.n	8007148 <USBD_GetDescriptor+0x2cc>
        return;
 8007146:	bf00      	nop
    }
}
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop

08007150 <USBD_SetAddress>:
 *         Set device address
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_SetAddress(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
    uint8_t dev_addr;

    if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U)) {
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	889b      	ldrh	r3, [r3, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d131      	bne.n	80071c6 <USBD_SetAddress+0x76>
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	88db      	ldrh	r3, [r3, #6]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d12d      	bne.n	80071c6 <USBD_SetAddress+0x76>
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	885b      	ldrh	r3, [r3, #2]
 800716e:	2b7f      	cmp	r3, #127	; 0x7f
 8007170:	d829      	bhi.n	80071c6 <USBD_SetAddress+0x76>
        dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	885b      	ldrh	r3, [r3, #2]
 8007176:	b2db      	uxtb	r3, r3
 8007178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800717c:	73fb      	strb	r3, [r7, #15]

        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b03      	cmp	r3, #3
 8007188:	d104      	bne.n	8007194 <USBD_SetAddress+0x44>
            USBD_CtlError(pdev, req);
 800718a:	6839      	ldr	r1, [r7, #0]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f9bc 	bl	800750a <USBD_CtlError>
        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8007192:	e01d      	b.n	80071d0 <USBD_SetAddress+0x80>
        } else {
            pdev->dev_address = dev_addr;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	7bfa      	ldrb	r2, [r7, #15]
 8007198:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
            (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800719c:	7bfb      	ldrb	r3, [r7, #15]
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fefb 	bl	8007f9c <USBD_LL_SetUSBAddress>
            (void)USBD_CtlSendStatus(pdev);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fa7a 	bl	80076a0 <USBD_CtlSendStatus>

            if (dev_addr != 0U) {
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d004      	beq.n	80071bc <USBD_SetAddress+0x6c>
                pdev->dev_state = USBD_STATE_ADDRESSED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2202      	movs	r2, #2
 80071b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80071ba:	e009      	b.n	80071d0 <USBD_SetAddress+0x80>
            } else {
                pdev->dev_state = USBD_STATE_DEFAULT;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80071c4:	e004      	b.n	80071d0 <USBD_SetAddress+0x80>
            }
        }
    } else {
        USBD_CtlError(pdev, req);
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f99e 	bl	800750a <USBD_CtlError>
    }
}
 80071ce:	bf00      	nop
 80071d0:	bf00      	nop
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <USBD_SetConfig>:
 *         Handle Set device configuration request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret = USBD_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	73fb      	strb	r3, [r7, #15]
    static uint8_t cfgidx;

    cfgidx = (uint8_t)(req->wValue);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	885b      	ldrh	r3, [r3, #2]
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	4b4e      	ldr	r3, [pc, #312]	; (8007328 <USBD_SetConfig+0x150>)
 80071ee:	701a      	strb	r2, [r3, #0]

    if (cfgidx > USBD_MAX_NUM_CONFIGURATION) {
 80071f0:	4b4d      	ldr	r3, [pc, #308]	; (8007328 <USBD_SetConfig+0x150>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d905      	bls.n	8007204 <USBD_SetConfig+0x2c>
        USBD_CtlError(pdev, req);
 80071f8:	6839      	ldr	r1, [r7, #0]
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f985 	bl	800750a <USBD_CtlError>
        return USBD_FAIL;
 8007200:	2303      	movs	r3, #3
 8007202:	e08c      	b.n	800731e <USBD_SetConfig+0x146>
    }

    switch (pdev->dev_state) {
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b02      	cmp	r3, #2
 800720e:	d002      	beq.n	8007216 <USBD_SetConfig+0x3e>
 8007210:	2b03      	cmp	r3, #3
 8007212:	d029      	beq.n	8007268 <USBD_SetConfig+0x90>
 8007214:	e075      	b.n	8007302 <USBD_SetConfig+0x12a>
    case USBD_STATE_ADDRESSED:
        if (cfgidx != 0U) {
 8007216:	4b44      	ldr	r3, [pc, #272]	; (8007328 <USBD_SetConfig+0x150>)
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d020      	beq.n	8007260 <USBD_SetConfig+0x88>
            pdev->dev_config = cfgidx;
 800721e:	4b42      	ldr	r3, [pc, #264]	; (8007328 <USBD_SetConfig+0x150>)
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	605a      	str	r2, [r3, #4]

            ret = USBD_SetClassConfig(pdev, cfgidx);
 8007228:	4b3f      	ldr	r3, [pc, #252]	; (8007328 <USBD_SetConfig+0x150>)
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7fe ffe7 	bl	8006202 <USBD_SetClassConfig>
 8007234:	4603      	mov	r3, r0
 8007236:	73fb      	strb	r3, [r7, #15]

            if (ret != USBD_OK) {
 8007238:	7bfb      	ldrb	r3, [r7, #15]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d008      	beq.n	8007250 <USBD_SetConfig+0x78>
                USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f962 	bl	800750a <USBD_CtlError>
                pdev->dev_state = USBD_STATE_ADDRESSED;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2202      	movs	r2, #2
 800724a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
                pdev->dev_state = USBD_STATE_CONFIGURED;
            }
        } else {
            (void)USBD_CtlSendStatus(pdev);
        }
        break;
 800724e:	e065      	b.n	800731c <USBD_SetConfig+0x144>
                (void)USBD_CtlSendStatus(pdev);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fa25 	bl	80076a0 <USBD_CtlSendStatus>
                pdev->dev_state = USBD_STATE_CONFIGURED;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2203      	movs	r2, #3
 800725a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        break;
 800725e:	e05d      	b.n	800731c <USBD_SetConfig+0x144>
            (void)USBD_CtlSendStatus(pdev);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fa1d 	bl	80076a0 <USBD_CtlSendStatus>
        break;
 8007266:	e059      	b.n	800731c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U) {
 8007268:	4b2f      	ldr	r3, [pc, #188]	; (8007328 <USBD_SetConfig+0x150>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d112      	bne.n	8007296 <USBD_SetConfig+0xbe>
            pdev->dev_state = USBD_STATE_ADDRESSED;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
            pdev->dev_config = cfgidx;
 8007278:	4b2b      	ldr	r3, [pc, #172]	; (8007328 <USBD_SetConfig+0x150>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	461a      	mov	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	605a      	str	r2, [r3, #4]
            (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007282:	4b29      	ldr	r3, [pc, #164]	; (8007328 <USBD_SetConfig+0x150>)
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7fe ffd6 	bl	800623a <USBD_ClrClassConfig>
            (void)USBD_CtlSendStatus(pdev);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa06 	bl	80076a0 <USBD_CtlSendStatus>
                (void)USBD_CtlSendStatus(pdev);
            }
        } else {
            (void)USBD_CtlSendStatus(pdev);
        }
        break;
 8007294:	e042      	b.n	800731c <USBD_SetConfig+0x144>
        } else if (cfgidx != pdev->dev_config) {
 8007296:	4b24      	ldr	r3, [pc, #144]	; (8007328 <USBD_SetConfig+0x150>)
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d02a      	beq.n	80072fa <USBD_SetConfig+0x122>
            (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7fe ffc4 	bl	800623a <USBD_ClrClassConfig>
            pdev->dev_config = cfgidx;
 80072b2:	4b1d      	ldr	r3, [pc, #116]	; (8007328 <USBD_SetConfig+0x150>)
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	605a      	str	r2, [r3, #4]
            ret = USBD_SetClassConfig(pdev, cfgidx);
 80072bc:	4b1a      	ldr	r3, [pc, #104]	; (8007328 <USBD_SetConfig+0x150>)
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7fe ff9d 	bl	8006202 <USBD_SetClassConfig>
 80072c8:	4603      	mov	r3, r0
 80072ca:	73fb      	strb	r3, [r7, #15]
            if (ret != USBD_OK) {
 80072cc:	7bfb      	ldrb	r3, [r7, #15]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00f      	beq.n	80072f2 <USBD_SetConfig+0x11a>
                USBD_CtlError(pdev, req);
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f918 	bl	800750a <USBD_CtlError>
                (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7fe ffa9 	bl	800623a <USBD_ClrClassConfig>
                pdev->dev_state = USBD_STATE_ADDRESSED;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        break;
 80072f0:	e014      	b.n	800731c <USBD_SetConfig+0x144>
                (void)USBD_CtlSendStatus(pdev);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f9d4 	bl	80076a0 <USBD_CtlSendStatus>
        break;
 80072f8:	e010      	b.n	800731c <USBD_SetConfig+0x144>
            (void)USBD_CtlSendStatus(pdev);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f9d0 	bl	80076a0 <USBD_CtlSendStatus>
        break;
 8007300:	e00c      	b.n	800731c <USBD_SetConfig+0x144>

    default:
        USBD_CtlError(pdev, req);
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f900 	bl	800750a <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800730a:	4b07      	ldr	r3, [pc, #28]	; (8007328 <USBD_SetConfig+0x150>)
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f7fe ff92 	bl	800623a <USBD_ClrClassConfig>
        ret = USBD_FAIL;
 8007316:	2303      	movs	r3, #3
 8007318:	73fb      	strb	r3, [r7, #15]
        break;
 800731a:	bf00      	nop
    }

    return ret;
 800731c:	7bfb      	ldrb	r3, [r7, #15]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20000228 	.word	0x20000228

0800732c <USBD_GetConfig>:
 *         Handle Get device configuration request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_GetConfig(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
    if (req->wLength != 1U) {
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	88db      	ldrh	r3, [r3, #6]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d004      	beq.n	8007348 <USBD_GetConfig+0x1c>
        USBD_CtlError(pdev, req);
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f8e2 	bl	800750a <USBD_CtlError>
        default:
            USBD_CtlError(pdev, req);
            break;
        }
    }
}
 8007346:	e023      	b.n	8007390 <USBD_GetConfig+0x64>
        switch (pdev->dev_state) {
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b02      	cmp	r3, #2
 8007352:	dc02      	bgt.n	800735a <USBD_GetConfig+0x2e>
 8007354:	2b00      	cmp	r3, #0
 8007356:	dc03      	bgt.n	8007360 <USBD_GetConfig+0x34>
 8007358:	e015      	b.n	8007386 <USBD_GetConfig+0x5a>
 800735a:	2b03      	cmp	r3, #3
 800735c:	d00b      	beq.n	8007376 <USBD_GetConfig+0x4a>
 800735e:	e012      	b.n	8007386 <USBD_GetConfig+0x5a>
            pdev->dev_default_config = 0U;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	609a      	str	r2, [r3, #8]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	3308      	adds	r3, #8
 800736a:	2201      	movs	r2, #1
 800736c:	4619      	mov	r1, r3
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f93c 	bl	80075ec <USBD_CtlSendData>
            break;
 8007374:	e00c      	b.n	8007390 <USBD_GetConfig+0x64>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	3304      	adds	r3, #4
 800737a:	2201      	movs	r2, #1
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f934 	bl	80075ec <USBD_CtlSendData>
            break;
 8007384:	e004      	b.n	8007390 <USBD_GetConfig+0x64>
            USBD_CtlError(pdev, req);
 8007386:	6839      	ldr	r1, [r7, #0]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f8be 	bl	800750a <USBD_CtlError>
            break;
 800738e:	bf00      	nop
}
 8007390:	bf00      	nop
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBD_GetStatus>:
 *         Handle Get Status request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_GetStatus(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
    switch (pdev->dev_state) {
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	3b01      	subs	r3, #1
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d81e      	bhi.n	80073ee <USBD_GetStatus+0x56>
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
        if (req->wLength != 0x2U) {
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	88db      	ldrh	r3, [r3, #6]
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d004      	beq.n	80073c2 <USBD_GetStatus+0x2a>
            USBD_CtlError(pdev, req);
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f8a5 	bl	800750a <USBD_CtlError>
            break;
 80073c0:	e01a      	b.n	80073f8 <USBD_GetStatus+0x60>
        }

#if (USBD_SELF_POWERED == 1U)
        pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	60da      	str	r2, [r3, #12]
#else
        pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

        if (pdev->dev_remote_wakeup != 0U) {
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d005      	beq.n	80073de <USBD_GetStatus+0x46>
            pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	f043 0202 	orr.w	r2, r3, #2
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	60da      	str	r2, [r3, #12]
        }

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	330c      	adds	r3, #12
 80073e2:	2202      	movs	r2, #2
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f900 	bl	80075ec <USBD_CtlSendData>
        break;
 80073ec:	e004      	b.n	80073f8 <USBD_GetStatus+0x60>

    default:
        USBD_CtlError(pdev, req);
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f88a 	bl	800750a <USBD_CtlError>
        break;
 80073f6:	bf00      	nop
    }
}
 80073f8:	bf00      	nop
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <USBD_SetFeature>:
 *         Handle Set device feature request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_SetFeature(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) {
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	885b      	ldrh	r3, [r3, #2]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d107      	bne.n	8007422 <USBD_SetFeature+0x22>
        pdev->dev_remote_wakeup = 1U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f940 	bl	80076a0 <USBD_CtlSendStatus>
        pdev->dev_test_mode = req->wIndex >> 8;
        (void)USBD_CtlSendStatus(pdev);
    } else {
        USBD_CtlError(pdev, req);
    }
}
 8007420:	e013      	b.n	800744a <USBD_SetFeature+0x4a>
    } else if (req->wValue == USB_FEATURE_TEST_MODE) {
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	885b      	ldrh	r3, [r3, #2]
 8007426:	2b02      	cmp	r3, #2
 8007428:	d10b      	bne.n	8007442 <USBD_SetFeature+0x42>
        pdev->dev_test_mode = req->wIndex >> 8;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	889b      	ldrh	r3, [r3, #4]
 800742e:	0a1b      	lsrs	r3, r3, #8
 8007430:	b29b      	uxth	r3, r3
 8007432:	b2da      	uxtb	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
        (void)USBD_CtlSendStatus(pdev);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f930 	bl	80076a0 <USBD_CtlSendStatus>
}
 8007440:	e003      	b.n	800744a <USBD_SetFeature+0x4a>
        USBD_CtlError(pdev, req);
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f860 	bl	800750a <USBD_CtlError>
}
 800744a:	bf00      	nop
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <USBD_ClrFeature>:
 *         Handle clear device feature request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_ClrFeature(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 8007452:	b580      	push	{r7, lr}
 8007454:	b082      	sub	sp, #8
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	6039      	str	r1, [r7, #0]
    switch (pdev->dev_state) {
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007462:	b2db      	uxtb	r3, r3
 8007464:	3b01      	subs	r3, #1
 8007466:	2b02      	cmp	r3, #2
 8007468:	d80b      	bhi.n	8007482 <USBD_ClrFeature+0x30>
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) {
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	885b      	ldrh	r3, [r3, #2]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d10c      	bne.n	800748c <USBD_ClrFeature+0x3a>
            pdev->dev_remote_wakeup = 0U;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
            (void)USBD_CtlSendStatus(pdev);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f910 	bl	80076a0 <USBD_CtlSendStatus>
        }
        break;
 8007480:	e004      	b.n	800748c <USBD_ClrFeature+0x3a>

    default:
        USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f840 	bl	800750a <USBD_CtlError>
        break;
 800748a:	e000      	b.n	800748e <USBD_ClrFeature+0x3c>
        break;
 800748c:	bf00      	nop
    }
}
 800748e:	bf00      	nop
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <USBD_ParseSetupRequest>:
 *         Copy buffer into setup structure
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval None
 */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef * req, uint8_t * pdata) {
 8007496:	b580      	push	{r7, lr}
 8007498:	b084      	sub	sp, #16
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	6039      	str	r1, [r7, #0]
    uint8_t * pbuff = pdata;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	60fb      	str	r3, [r7, #12]

    req->bmRequest = *(uint8_t *)(pbuff);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	781a      	ldrb	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	701a      	strb	r2, [r3, #0]

    pbuff++;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3301      	adds	r3, #1
 80074b0:	60fb      	str	r3, [r7, #12]
    req->bRequest = *(uint8_t *)(pbuff);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	781a      	ldrb	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	705a      	strb	r2, [r3, #1]

    pbuff++;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	3301      	adds	r3, #1
 80074be:	60fb      	str	r3, [r7, #12]
    req->wValue = SWAPBYTE(pbuff);
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f7ff fa41 	bl	8006948 <SWAPBYTE>
 80074c6:	4603      	mov	r3, r0
 80074c8:	461a      	mov	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	805a      	strh	r2, [r3, #2]

    pbuff++;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	3301      	adds	r3, #1
 80074d2:	60fb      	str	r3, [r7, #12]
    pbuff++;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	3301      	adds	r3, #1
 80074d8:	60fb      	str	r3, [r7, #12]
    req->wIndex = SWAPBYTE(pbuff);
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f7ff fa34 	bl	8006948 <SWAPBYTE>
 80074e0:	4603      	mov	r3, r0
 80074e2:	461a      	mov	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	809a      	strh	r2, [r3, #4]

    pbuff++;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3301      	adds	r3, #1
 80074ec:	60fb      	str	r3, [r7, #12]
    pbuff++;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	3301      	adds	r3, #1
 80074f2:	60fb      	str	r3, [r7, #12]
    req->wLength = SWAPBYTE(pbuff);
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f7ff fa27 	bl	8006948 <SWAPBYTE>
 80074fa:	4603      	mov	r3, r0
 80074fc:	461a      	mov	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	80da      	strh	r2, [r3, #6]
}
 8007502:	bf00      	nop
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <USBD_CtlError>:
 *         Handle USB low level Error
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval None
 */
void USBD_CtlError(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800750a:	b580      	push	{r7, lr}
 800750c:	b082      	sub	sp, #8
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	6039      	str	r1, [r7, #0]
    UNUSED(req);

    (void)USBD_LL_StallEP(pdev, 0x80U);
 8007514:	2180      	movs	r1, #128	; 0x80
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fcd6 	bl	8007ec8 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, 0U);
 800751c:	2100      	movs	r1, #0
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fcd2 	bl	8007ec8 <USBD_LL_StallEP>
}
 8007524:	bf00      	nop
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <USBD_GetString>:
 * @param  desc : descriptor buffer
 * @param  unicode : Formatted string buffer (unicode)
 * @param  len : descriptor length
 * @retval None
 */
void USBD_GetString(uint8_t * desc, uint8_t * unicode, uint16_t * len) {
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
    uint8_t idx = 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	75fb      	strb	r3, [r7, #23]
    uint8_t * pdesc;

    if (desc == NULL) {
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d036      	beq.n	80075b0 <USBD_GetString+0x84>
        return;
    }

    pdesc = desc;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	613b      	str	r3, [r7, #16]
    *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007546:	6938      	ldr	r0, [r7, #16]
 8007548:	f000 f836 	bl	80075b8 <USBD_GetLen>
 800754c:	4603      	mov	r3, r0
 800754e:	3301      	adds	r3, #1
 8007550:	b29b      	uxth	r3, r3
 8007552:	005b      	lsls	r3, r3, #1
 8007554:	b29a      	uxth	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	801a      	strh	r2, [r3, #0]

    unicode[idx] = *(uint8_t *)len;
 800755a:	7dfb      	ldrb	r3, [r7, #23]
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	4413      	add	r3, r2
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	7812      	ldrb	r2, [r2, #0]
 8007564:	701a      	strb	r2, [r3, #0]
    idx++;
 8007566:	7dfb      	ldrb	r3, [r7, #23]
 8007568:	3301      	adds	r3, #1
 800756a:	75fb      	strb	r3, [r7, #23]
    unicode[idx] = USB_DESC_TYPE_STRING;
 800756c:	7dfb      	ldrb	r3, [r7, #23]
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	4413      	add	r3, r2
 8007572:	2203      	movs	r2, #3
 8007574:	701a      	strb	r2, [r3, #0]
    idx++;
 8007576:	7dfb      	ldrb	r3, [r7, #23]
 8007578:	3301      	adds	r3, #1
 800757a:	75fb      	strb	r3, [r7, #23]

    while (*pdesc != (uint8_t)'\0') {
 800757c:	e013      	b.n	80075a6 <USBD_GetString+0x7a>
        unicode[idx] = *pdesc;
 800757e:	7dfb      	ldrb	r3, [r7, #23]
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	4413      	add	r3, r2
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	7812      	ldrb	r2, [r2, #0]
 8007588:	701a      	strb	r2, [r3, #0]
        pdesc++;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	3301      	adds	r3, #1
 800758e:	613b      	str	r3, [r7, #16]
        idx++;
 8007590:	7dfb      	ldrb	r3, [r7, #23]
 8007592:	3301      	adds	r3, #1
 8007594:	75fb      	strb	r3, [r7, #23]

        unicode[idx] = 0U;
 8007596:	7dfb      	ldrb	r3, [r7, #23]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	4413      	add	r3, r2
 800759c:	2200      	movs	r2, #0
 800759e:	701a      	strb	r2, [r3, #0]
        idx++;
 80075a0:	7dfb      	ldrb	r3, [r7, #23]
 80075a2:	3301      	adds	r3, #1
 80075a4:	75fb      	strb	r3, [r7, #23]
    while (*pdesc != (uint8_t)'\0') {
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1e7      	bne.n	800757e <USBD_GetString+0x52>
 80075ae:	e000      	b.n	80075b2 <USBD_GetString+0x86>
        return;
 80075b0:	bf00      	nop
    }
}
 80075b2:	3718      	adds	r7, #24
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <USBD_GetLen>:
 * @brief  USBD_GetLen
 *         return the string length
 * @param  buf : pointer to the ascii string buffer
 * @retval string length
 */
static uint8_t USBD_GetLen(uint8_t * buf) {
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
    uint8_t len = 0U;
 80075c0:	2300      	movs	r3, #0
 80075c2:	73fb      	strb	r3, [r7, #15]
    uint8_t * pbuff = buf;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	60bb      	str	r3, [r7, #8]

    while (*pbuff != (uint8_t)'\0') {
 80075c8:	e005      	b.n	80075d6 <USBD_GetLen+0x1e>
        len++;
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
 80075cc:	3301      	adds	r3, #1
 80075ce:	73fb      	strb	r3, [r7, #15]
        pbuff++;
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	3301      	adds	r3, #1
 80075d4:	60bb      	str	r3, [r7, #8]
    while (*pbuff != (uint8_t)'\0') {
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1f5      	bne.n	80075ca <USBD_GetLen+0x12>
    }

    return len;
 80075de:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <USBD_CtlSendData>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be sent
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef * pdev, uint8_t * pbuf, uint32_t len) {
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_DATA_IN;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2202      	movs	r2, #2
 80075fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    pdev->ep_in[0].total_length = len;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
    pdev->ep_in[0].rem_length = 0U;
#else
    pdev->ep_in[0].rem_length = len;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

    /* Start the transfer */
    (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	2100      	movs	r1, #0
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 fce1 	bl	8007fda <USBD_LL_Transmit>

    return USBD_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <USBD_CtlContinueSendData>:
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be sent
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef * pdev, uint8_t * pbuf,
                                            uint32_t len) {
 8007622:	b580      	push	{r7, lr}
 8007624:	b084      	sub	sp, #16
 8007626:	af00      	add	r7, sp, #0
 8007628:	60f8      	str	r0, [r7, #12]
 800762a:	60b9      	str	r1, [r7, #8]
 800762c:	607a      	str	r2, [r7, #4]
    /* Start the next transfer */
    (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	2100      	movs	r1, #0
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 fcd0 	bl	8007fda <USBD_LL_Transmit>

    return USBD_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBD_CtlPrepareRx>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be received
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef * pdev, uint8_t * pbuf, uint32_t len) {
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2203      	movs	r2, #3
 8007654:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    pdev->ep_out[0].total_length = len;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
    pdev->ep_out[0].rem_length = 0U;
#else
    pdev->ep_out[0].rem_length = len;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

    /* Start the transfer */
    (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	2100      	movs	r1, #0
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f000 fcd4 	bl	800801c <USBD_LL_PrepareReceive>

    return USBD_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <USBD_CtlContinueRx>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be received
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef * pdev, uint8_t * pbuf, uint32_t len) {
 800767e:	b580      	push	{r7, lr}
 8007680:	b084      	sub	sp, #16
 8007682:	af00      	add	r7, sp, #0
 8007684:	60f8      	str	r0, [r7, #12]
 8007686:	60b9      	str	r1, [r7, #8]
 8007688:	607a      	str	r2, [r7, #4]
    (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	2100      	movs	r1, #0
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 fcc3 	bl	800801c <USBD_LL_PrepareReceive>

    return USBD_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBD_CtlSendStatus>:
 * @brief  USBD_CtlSendStatus
 *         send zero lzngth packet on the ctl pipe
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef * pdev) {
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_STATUS_IN;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2204      	movs	r2, #4
 80076ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

    /* Start the transfer */
    (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80076b0:	2300      	movs	r3, #0
 80076b2:	2200      	movs	r2, #0
 80076b4:	2100      	movs	r1, #0
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fc8f 	bl	8007fda <USBD_LL_Transmit>

    return USBD_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_CtlReceiveStatus>:
 * @brief  USBD_CtlReceiveStatus
 *         receive zero lzngth packet on the ctl pipe
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef * pdev) {
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2205      	movs	r2, #5
 80076d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

    /* Start the transfer */
    (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076d6:	2300      	movs	r3, #0
 80076d8:	2200      	movs	r2, #0
 80076da:	2100      	movs	r1, #0
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fc9d 	bl	800801c <USBD_LL_PrepareReceive>

    return USBD_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3708      	adds	r7, #8
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <MX_USB_DEVICE_Init>:

/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(void) {
 80076ec:	b580      	push	{r7, lr}
 80076ee:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 80076f0:	2200      	movs	r2, #0
 80076f2:	4912      	ldr	r1, [pc, #72]	; (800773c <MX_USB_DEVICE_Init+0x50>)
 80076f4:	4812      	ldr	r0, [pc, #72]	; (8007740 <MX_USB_DEVICE_Init+0x54>)
 80076f6:	f7fe fd07 	bl	8006108 <USBD_Init>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d001      	beq.n	8007704 <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 8007700:	f7f9 f814 	bl	800072c <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8007704:	490f      	ldr	r1, [pc, #60]	; (8007744 <MX_USB_DEVICE_Init+0x58>)
 8007706:	480e      	ldr	r0, [pc, #56]	; (8007740 <MX_USB_DEVICE_Init+0x54>)
 8007708:	f7fe fd2e 	bl	8006168 <USBD_RegisterClass>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 8007712:	f7f9 f80b 	bl	800072c <Error_Handler>
    }
    if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8007716:	490c      	ldr	r1, [pc, #48]	; (8007748 <MX_USB_DEVICE_Init+0x5c>)
 8007718:	4809      	ldr	r0, [pc, #36]	; (8007740 <MX_USB_DEVICE_Init+0x54>)
 800771a:	f7fe fc1f 	bl	8005f5c <USBD_CDC_RegisterInterface>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 8007724:	f7f9 f802 	bl	800072c <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8007728:	4805      	ldr	r0, [pc, #20]	; (8007740 <MX_USB_DEVICE_Init+0x54>)
 800772a:	f7fe fd53 	bl	80061d4 <USBD_Start>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 8007734:	f7f8 fffa 	bl	800072c <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007738:	bf00      	nop
 800773a:	bd80      	pop	{r7, pc}
 800773c:	200000ac 	.word	0x200000ac
 8007740:	2000022c 	.word	0x2000022c
 8007744:	20000018 	.word	0x20000018
 8007748:	20000098 	.word	0x20000098

0800774c <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 800774c:	b580      	push	{r7, lr}
 800774e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007750:	2200      	movs	r2, #0
 8007752:	4905      	ldr	r1, [pc, #20]	; (8007768 <CDC_Init_FS+0x1c>)
 8007754:	4805      	ldr	r0, [pc, #20]	; (800776c <CDC_Init_FS+0x20>)
 8007756:	f7fe fc1b 	bl	8005f90 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800775a:	4905      	ldr	r1, [pc, #20]	; (8007770 <CDC_Init_FS+0x24>)
 800775c:	4803      	ldr	r0, [pc, #12]	; (800776c <CDC_Init_FS+0x20>)
 800775e:	f7fe fc39 	bl	8005fd4 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 8007762:	2300      	movs	r3, #0
    /* USER CODE END 3 */
}
 8007764:	4618      	mov	r0, r3
 8007766:	bd80      	pop	{r7, pc}
 8007768:	20000908 	.word	0x20000908
 800776c:	2000022c 	.word	0x2000022c
 8007770:	20000508 	.word	0x20000508

08007774 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 8007774:	b480      	push	{r7}
 8007776:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 4 */
    return (USBD_OK);
 8007778:	2300      	movs	r3, #0
    /* USER CODE END 4 */
}
 800777a:	4618      	mov	r0, r3
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t * pbuf, uint16_t length) {
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	4603      	mov	r3, r0
 800778c:	6039      	str	r1, [r7, #0]
 800778e:	71fb      	strb	r3, [r7, #7]
 8007790:	4613      	mov	r3, r2
 8007792:	80bb      	strh	r3, [r7, #4]
    /* USER CODE BEGIN 5 */
    switch (cmd) {
 8007794:	79fb      	ldrb	r3, [r7, #7]
 8007796:	2b23      	cmp	r3, #35	; 0x23
 8007798:	d84a      	bhi.n	8007830 <CDC_Control_FS+0xac>
 800779a:	a201      	add	r2, pc, #4	; (adr r2, 80077a0 <CDC_Control_FS+0x1c>)
 800779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a0:	08007831 	.word	0x08007831
 80077a4:	08007831 	.word	0x08007831
 80077a8:	08007831 	.word	0x08007831
 80077ac:	08007831 	.word	0x08007831
 80077b0:	08007831 	.word	0x08007831
 80077b4:	08007831 	.word	0x08007831
 80077b8:	08007831 	.word	0x08007831
 80077bc:	08007831 	.word	0x08007831
 80077c0:	08007831 	.word	0x08007831
 80077c4:	08007831 	.word	0x08007831
 80077c8:	08007831 	.word	0x08007831
 80077cc:	08007831 	.word	0x08007831
 80077d0:	08007831 	.word	0x08007831
 80077d4:	08007831 	.word	0x08007831
 80077d8:	08007831 	.word	0x08007831
 80077dc:	08007831 	.word	0x08007831
 80077e0:	08007831 	.word	0x08007831
 80077e4:	08007831 	.word	0x08007831
 80077e8:	08007831 	.word	0x08007831
 80077ec:	08007831 	.word	0x08007831
 80077f0:	08007831 	.word	0x08007831
 80077f4:	08007831 	.word	0x08007831
 80077f8:	08007831 	.word	0x08007831
 80077fc:	08007831 	.word	0x08007831
 8007800:	08007831 	.word	0x08007831
 8007804:	08007831 	.word	0x08007831
 8007808:	08007831 	.word	0x08007831
 800780c:	08007831 	.word	0x08007831
 8007810:	08007831 	.word	0x08007831
 8007814:	08007831 	.word	0x08007831
 8007818:	08007831 	.word	0x08007831
 800781c:	08007831 	.word	0x08007831
 8007820:	08007831 	.word	0x08007831
 8007824:	08007831 	.word	0x08007831
 8007828:	08007831 	.word	0x08007831
 800782c:	08007831 	.word	0x08007831
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 8007830:	bf00      	nop
    }

    return (USBD_OK);
 8007832:	2300      	movs	r3, #0
    /* USER CODE END 5 */
}
 8007834:	4618      	mov	r0, r3
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t * Buf, uint32_t * Len) {
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
    /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	4805      	ldr	r0, [pc, #20]	; (8007864 <CDC_Receive_FS+0x24>)
 800784e:	f7fe fbc1 	bl	8005fd4 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007852:	4804      	ldr	r0, [pc, #16]	; (8007864 <CDC_Receive_FS+0x24>)
 8007854:	f7fe fc22 	bl	800609c <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 8007858:	2300      	movs	r3, #0
    /* USER CODE END 6 */
}
 800785a:	4618      	mov	r0, r3
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	2000022c 	.word	0x2000022c

08007868 <CDC_Transmit_FS>:
 *
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t * Buf, uint16_t Len) {
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	460b      	mov	r3, r1
 8007872:	807b      	strh	r3, [r7, #2]
    uint8_t result = USBD_OK;
 8007874:	2300      	movs	r3, #0
 8007876:	73fb      	strb	r3, [r7, #15]
    /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 8007878:	4b0d      	ldr	r3, [pc, #52]	; (80078b0 <CDC_Transmit_FS+0x48>)
 800787a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800787e:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 800788a:	2301      	movs	r3, #1
 800788c:	e00b      	b.n	80078a6 <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800788e:	887b      	ldrh	r3, [r7, #2]
 8007890:	461a      	mov	r2, r3
 8007892:	6879      	ldr	r1, [r7, #4]
 8007894:	4806      	ldr	r0, [pc, #24]	; (80078b0 <CDC_Transmit_FS+0x48>)
 8007896:	f7fe fb7b 	bl	8005f90 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800789a:	4805      	ldr	r0, [pc, #20]	; (80078b0 <CDC_Transmit_FS+0x48>)
 800789c:	f7fe fbb8 	bl	8006010 <USBD_CDC_TransmitPacket>
 80078a0:	4603      	mov	r3, r0
 80078a2:	73fb      	strb	r3, [r7, #15]
    /* USER CODE END 7 */
    return result;
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	2000022c 	.word	0x2000022c

080078b4 <CDC_TransmitCplt_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t * Buf, uint32_t * Len, uint8_t epnum) {
 80078b4:	b480      	push	{r7}
 80078b6:	b087      	sub	sp, #28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	4613      	mov	r3, r2
 80078c0:	71fb      	strb	r3, [r7, #7]
    uint8_t result = USBD_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	75fb      	strb	r3, [r7, #23]
    /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
    /* USER CODE END 13 */
    return result;
 80078c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	371c      	adds	r7, #28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
	...

080078d8 <USBD_FS_DeviceDescriptor>:
 * @brief  Return the device descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	4603      	mov	r3, r0
 80078e0:	6039      	str	r1, [r7, #0]
 80078e2:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = sizeof(USBD_FS_DeviceDesc);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	2212      	movs	r2, #18
 80078e8:	801a      	strh	r2, [r3, #0]
    return USBD_FS_DeviceDesc;
 80078ea:	4b03      	ldr	r3, [pc, #12]	; (80078f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr
 80078f8:	200000c8 	.word	0x200000c8

080078fc <USBD_FS_LangIDStrDescriptor>:
 * @brief  Return the LangID string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	4603      	mov	r3, r0
 8007904:	6039      	str	r1, [r7, #0]
 8007906:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = sizeof(USBD_LangIDDesc);
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	2204      	movs	r2, #4
 800790c:	801a      	strh	r2, [r3, #0]
    return USBD_LangIDDesc;
 800790e:	4b03      	ldr	r3, [pc, #12]	; (800791c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007910:	4618      	mov	r0, r3
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	200000dc 	.word	0x200000dc

08007920 <USBD_FS_ProductStrDescriptor>:
 * @brief  Return the product string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	4603      	mov	r3, r0
 8007928:	6039      	str	r1, [r7, #0]
 800792a:	71fb      	strb	r3, [r7, #7]
    if (speed == 0) {
 800792c:	79fb      	ldrb	r3, [r7, #7]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d105      	bne.n	800793e <USBD_FS_ProductStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	4907      	ldr	r1, [pc, #28]	; (8007954 <USBD_FS_ProductStrDescriptor+0x34>)
 8007936:	4808      	ldr	r0, [pc, #32]	; (8007958 <USBD_FS_ProductStrDescriptor+0x38>)
 8007938:	f7ff fdf8 	bl	800752c <USBD_GetString>
 800793c:	e004      	b.n	8007948 <USBD_FS_ProductStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	4904      	ldr	r1, [pc, #16]	; (8007954 <USBD_FS_ProductStrDescriptor+0x34>)
 8007942:	4805      	ldr	r0, [pc, #20]	; (8007958 <USBD_FS_ProductStrDescriptor+0x38>)
 8007944:	f7ff fdf2 	bl	800752c <USBD_GetString>
    }
    return USBD_StrDesc;
 8007948:	4b02      	ldr	r3, [pc, #8]	; (8007954 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800794a:	4618      	mov	r0, r3
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	20000d08 	.word	0x20000d08
 8007958:	08008a88 	.word	0x08008a88

0800795c <USBD_FS_ManufacturerStrDescriptor>:
 * @brief  Return the manufacturer string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	6039      	str	r1, [r7, #0]
 8007966:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	4904      	ldr	r1, [pc, #16]	; (800797c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800796c:	4804      	ldr	r0, [pc, #16]	; (8007980 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800796e:	f7ff fddd 	bl	800752c <USBD_GetString>
    return USBD_StrDesc;
 8007972:	4b02      	ldr	r3, [pc, #8]	; (800797c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007974:	4618      	mov	r0, r3
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	20000d08 	.word	0x20000d08
 8007980:	08008aa0 	.word	0x08008aa0

08007984 <USBD_FS_SerialStrDescriptor>:
 * @brief  Return the serial number string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	4603      	mov	r3, r0
 800798c:	6039      	str	r1, [r7, #0]
 800798e:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = USB_SIZ_STRING_SERIAL;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	221a      	movs	r2, #26
 8007994:	801a      	strh	r2, [r3, #0]

    /* Update the serial number string descriptor with the data from the unique
     * ID */
    Get_SerialNum();
 8007996:	f000 f843 	bl	8007a20 <Get_SerialNum>
    /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

    /* USER CODE END USBD_FS_SerialStrDescriptor */
    return (uint8_t *)USBD_StringSerial;
 800799a:	4b02      	ldr	r3, [pc, #8]	; (80079a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800799c:	4618      	mov	r0, r3
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	200000e0 	.word	0x200000e0

080079a8 <USBD_FS_ConfigStrDescriptor>:
 * @brief  Return the configuration string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	4603      	mov	r3, r0
 80079b0:	6039      	str	r1, [r7, #0]
 80079b2:	71fb      	strb	r3, [r7, #7]
    if (speed == USBD_SPEED_HIGH) {
 80079b4:	79fb      	ldrb	r3, [r7, #7]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d105      	bne.n	80079c6 <USBD_FS_ConfigStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	4907      	ldr	r1, [pc, #28]	; (80079dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80079be:	4808      	ldr	r0, [pc, #32]	; (80079e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80079c0:	f7ff fdb4 	bl	800752c <USBD_GetString>
 80079c4:	e004      	b.n	80079d0 <USBD_FS_ConfigStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	4904      	ldr	r1, [pc, #16]	; (80079dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80079ca:	4805      	ldr	r0, [pc, #20]	; (80079e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80079cc:	f7ff fdae 	bl	800752c <USBD_GetString>
    }
    return USBD_StrDesc;
 80079d0:	4b02      	ldr	r3, [pc, #8]	; (80079dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	20000d08 	.word	0x20000d08
 80079e0:	08008ab4 	.word	0x08008ab4

080079e4 <USBD_FS_InterfaceStrDescriptor>:
 * @brief  Return the interface string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	4603      	mov	r3, r0
 80079ec:	6039      	str	r1, [r7, #0]
 80079ee:	71fb      	strb	r3, [r7, #7]
    if (speed == 0) {
 80079f0:	79fb      	ldrb	r3, [r7, #7]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d105      	bne.n	8007a02 <USBD_FS_InterfaceStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	4907      	ldr	r1, [pc, #28]	; (8007a18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079fa:	4808      	ldr	r0, [pc, #32]	; (8007a1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079fc:	f7ff fd96 	bl	800752c <USBD_GetString>
 8007a00:	e004      	b.n	8007a0c <USBD_FS_InterfaceStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	4904      	ldr	r1, [pc, #16]	; (8007a18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a06:	4805      	ldr	r0, [pc, #20]	; (8007a1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a08:	f7ff fd90 	bl	800752c <USBD_GetString>
    }
    return USBD_StrDesc;
 8007a0c:	4b02      	ldr	r3, [pc, #8]	; (8007a18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20000d08 	.word	0x20000d08
 8007a1c:	08008ac0 	.word	0x08008ac0

08007a20 <Get_SerialNum>:
/**
 * @brief  Create the serial number string descriptor
 * @param  None
 * @retval None
 */
static void Get_SerialNum(void) {
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
    uint32_t deviceserial0;
    uint32_t deviceserial1;
    uint32_t deviceserial2;

    deviceserial0 = *(uint32_t *)DEVICE_ID1;
 8007a26:	4b0f      	ldr	r3, [pc, #60]	; (8007a64 <Get_SerialNum+0x44>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60fb      	str	r3, [r7, #12]
    deviceserial1 = *(uint32_t *)DEVICE_ID2;
 8007a2c:	4b0e      	ldr	r3, [pc, #56]	; (8007a68 <Get_SerialNum+0x48>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	60bb      	str	r3, [r7, #8]
    deviceserial2 = *(uint32_t *)DEVICE_ID3;
 8007a32:	4b0e      	ldr	r3, [pc, #56]	; (8007a6c <Get_SerialNum+0x4c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	607b      	str	r3, [r7, #4]

    deviceserial0 += deviceserial2;
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	60fb      	str	r3, [r7, #12]

    if (deviceserial0 != 0) {
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d009      	beq.n	8007a5a <Get_SerialNum+0x3a>
        IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a46:	2208      	movs	r2, #8
 8007a48:	4909      	ldr	r1, [pc, #36]	; (8007a70 <Get_SerialNum+0x50>)
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f000 f814 	bl	8007a78 <IntToUnicode>
        IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a50:	2204      	movs	r2, #4
 8007a52:	4908      	ldr	r1, [pc, #32]	; (8007a74 <Get_SerialNum+0x54>)
 8007a54:	68b8      	ldr	r0, [r7, #8]
 8007a56:	f000 f80f 	bl	8007a78 <IntToUnicode>
    }
}
 8007a5a:	bf00      	nop
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	1fff7a10 	.word	0x1fff7a10
 8007a68:	1fff7a14 	.word	0x1fff7a14
 8007a6c:	1fff7a18 	.word	0x1fff7a18
 8007a70:	200000e2 	.word	0x200000e2
 8007a74:	200000f2 	.word	0x200000f2

08007a78 <IntToUnicode>:
 * @param  value: value to convert
 * @param  pbuf: pointer to the buffer
 * @param  len: buffer length
 * @retval None
 */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len) {
 8007a78:	b480      	push	{r7}
 8007a7a:	b087      	sub	sp, #28
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	4613      	mov	r3, r2
 8007a84:	71fb      	strb	r3, [r7, #7]
    uint8_t idx = 0;
 8007a86:	2300      	movs	r3, #0
 8007a88:	75fb      	strb	r3, [r7, #23]

    for (idx = 0; idx < len; idx++) {
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	75fb      	strb	r3, [r7, #23]
 8007a8e:	e027      	b.n	8007ae0 <IntToUnicode+0x68>
        if (((value >> 28)) < 0xA) {
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	0f1b      	lsrs	r3, r3, #28
 8007a94:	2b09      	cmp	r3, #9
 8007a96:	d80b      	bhi.n	8007ab0 <IntToUnicode+0x38>
            pbuf[2 * idx] = (value >> 28) + '0';
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	0f1b      	lsrs	r3, r3, #28
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	7dfb      	ldrb	r3, [r7, #23]
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	440b      	add	r3, r1
 8007aa8:	3230      	adds	r2, #48	; 0x30
 8007aaa:	b2d2      	uxtb	r2, r2
 8007aac:	701a      	strb	r2, [r3, #0]
 8007aae:	e00a      	b.n	8007ac6 <IntToUnicode+0x4e>
        } else {
            pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	0f1b      	lsrs	r3, r3, #28
 8007ab4:	b2da      	uxtb	r2, r3
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
 8007ab8:	005b      	lsls	r3, r3, #1
 8007aba:	4619      	mov	r1, r3
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	440b      	add	r3, r1
 8007ac0:	3237      	adds	r2, #55	; 0x37
 8007ac2:	b2d2      	uxtb	r2, r2
 8007ac4:	701a      	strb	r2, [r3, #0]
        }

        value = value << 4;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	011b      	lsls	r3, r3, #4
 8007aca:	60fb      	str	r3, [r7, #12]

        pbuf[2 * idx + 1] = 0;
 8007acc:	7dfb      	ldrb	r3, [r7, #23]
 8007ace:	005b      	lsls	r3, r3, #1
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	701a      	strb	r2, [r3, #0]
    for (idx = 0; idx < len; idx++) {
 8007ada:	7dfb      	ldrb	r3, [r7, #23]
 8007adc:	3301      	adds	r3, #1
 8007ade:	75fb      	strb	r3, [r7, #23]
 8007ae0:	7dfa      	ldrb	r2, [r7, #23]
 8007ae2:	79fb      	ldrb	r3, [r7, #7]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d3d3      	bcc.n	8007a90 <IntToUnicode+0x18>
    }
}
 8007ae8:	bf00      	nop
 8007aea:	bf00      	nop
 8007aec:	371c      	adds	r7, #28
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
	...

08007af8 <HAL_PCD_MspInit>:
/*******************************************************************************
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef * pcdHandle) {
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08a      	sub	sp, #40	; 0x28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b00:	f107 0314 	add.w	r3, r7, #20
 8007b04:	2200      	movs	r2, #0
 8007b06:	601a      	str	r2, [r3, #0]
 8007b08:	605a      	str	r2, [r3, #4]
 8007b0a:	609a      	str	r2, [r3, #8]
 8007b0c:	60da      	str	r2, [r3, #12]
 8007b0e:	611a      	str	r2, [r3, #16]
    if (pcdHandle->Instance == USB_OTG_FS) {
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b18:	d13a      	bne.n	8007b90 <HAL_PCD_MspInit+0x98>
        /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

        /* USER CODE END USB_OTG_FS_MspInit 0 */

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	613b      	str	r3, [r7, #16]
 8007b1e:	4b1e      	ldr	r3, [pc, #120]	; (8007b98 <HAL_PCD_MspInit+0xa0>)
 8007b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b22:	4a1d      	ldr	r2, [pc, #116]	; (8007b98 <HAL_PCD_MspInit+0xa0>)
 8007b24:	f043 0301 	orr.w	r3, r3, #1
 8007b28:	6313      	str	r3, [r2, #48]	; 0x30
 8007b2a:	4b1b      	ldr	r3, [pc, #108]	; (8007b98 <HAL_PCD_MspInit+0xa0>)
 8007b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	613b      	str	r3, [r7, #16]
 8007b34:	693b      	ldr	r3, [r7, #16]
        /**USB_OTG_FS GPIO Configuration
        PA11     ------> USB_OTG_FS_DM
        PA12     ------> USB_OTG_FS_DP
        */
        GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8007b36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007b3a:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b40:	2300      	movs	r3, #0
 8007b42:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b44:	2303      	movs	r3, #3
 8007b46:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b48:	230a      	movs	r3, #10
 8007b4a:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b4c:	f107 0314 	add.w	r3, r7, #20
 8007b50:	4619      	mov	r1, r3
 8007b52:	4812      	ldr	r0, [pc, #72]	; (8007b9c <HAL_PCD_MspInit+0xa4>)
 8007b54:	f7f9 fc1c 	bl	8001390 <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b58:	4b0f      	ldr	r3, [pc, #60]	; (8007b98 <HAL_PCD_MspInit+0xa0>)
 8007b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b5c:	4a0e      	ldr	r2, [pc, #56]	; (8007b98 <HAL_PCD_MspInit+0xa0>)
 8007b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b62:	6353      	str	r3, [r2, #52]	; 0x34
 8007b64:	2300      	movs	r3, #0
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	4b0b      	ldr	r3, [pc, #44]	; (8007b98 <HAL_PCD_MspInit+0xa0>)
 8007b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b6c:	4a0a      	ldr	r2, [pc, #40]	; (8007b98 <HAL_PCD_MspInit+0xa0>)
 8007b6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b72:	6453      	str	r3, [r2, #68]	; 0x44
 8007b74:	4b08      	ldr	r3, [pc, #32]	; (8007b98 <HAL_PCD_MspInit+0xa0>)
 8007b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b7c:	60fb      	str	r3, [r7, #12]
 8007b7e:	68fb      	ldr	r3, [r7, #12]

        /* Peripheral interrupt init */
        HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b80:	2200      	movs	r2, #0
 8007b82:	2100      	movs	r1, #0
 8007b84:	2043      	movs	r0, #67	; 0x43
 8007b86:	f7f9 f9e6 	bl	8000f56 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b8a:	2043      	movs	r0, #67	; 0x43
 8007b8c:	f7f9 f9ff 	bl	8000f8e <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

        /* USER CODE END USB_OTG_FS_MspInit 1 */
    }
}
 8007b90:	bf00      	nop
 8007b92:	3728      	adds	r7, #40	; 0x28
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	40023800 	.word	0x40023800
 8007b9c:	40020000 	.word	0x40020000

08007ba0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
    USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	f7fe fb59 	bl	800626e <USBD_LL_SetupStage>
}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007bd6:	78fa      	ldrb	r2, [r7, #3]
 8007bd8:	6879      	ldr	r1, [r7, #4]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	00db      	lsls	r3, r3, #3
 8007bde:	4413      	add	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	440b      	add	r3, r1
 8007be4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	78fb      	ldrb	r3, [r7, #3]
 8007bec:	4619      	mov	r1, r3
 8007bee:	f7fe fb93 	bl	8006318 <USBD_LL_DataOutStage>
}
 8007bf2:	bf00      	nop
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b082      	sub	sp, #8
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	460b      	mov	r3, r1
 8007c04:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007c0c:	78fa      	ldrb	r2, [r7, #3]
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	4613      	mov	r3, r2
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	4413      	add	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	440b      	add	r3, r1
 8007c1a:	334c      	adds	r3, #76	; 0x4c
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	78fb      	ldrb	r3, [r7, #3]
 8007c20:	4619      	mov	r1, r3
 8007c22:	f7fe fc2c 	bl	800647e <USBD_LL_DataInStage>
}
 8007c26:	bf00      	nop
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b082      	sub	sp, #8
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
    USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fe fd60 	bl	8006702 <USBD_LL_SOF>
}
 8007c42:	bf00      	nop
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
    USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c52:	2301      	movs	r3, #1
 8007c54:	73fb      	strb	r3, [r7, #15]

    if (hpcd->Init.speed != PCD_SPEED_FULL) {
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d001      	beq.n	8007c62 <HAL_PCD_ResetCallback+0x18>
        Error_Handler();
 8007c5e:	f7f8 fd65 	bl	800072c <Error_Handler>
    }
    /* Set Speed. */
    USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c68:	7bfa      	ldrb	r2, [r7, #15]
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fe fd0a 	bl	8006686 <USBD_LL_SetSpeed>

    /* Reset Device. */
    USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fe fcb2 	bl	80065e2 <USBD_LL_Reset>
}
 8007c7e:	bf00      	nop
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
	...

08007c88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
    /* Inform USB library that core enters in suspend Mode. */
    USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe fd05 	bl	80066a6 <USBD_LL_Suspend>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	6812      	ldr	r2, [r2, #0]
 8007caa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cae:	f043 0301 	orr.w	r3, r3, #1
 8007cb2:	6013      	str	r3, [r2, #0]
    /* Enter in STOP mode. */
    /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d005      	beq.n	8007cc8 <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007cbc:	4b04      	ldr	r3, [pc, #16]	; (8007cd0 <HAL_PCD_SuspendCallback+0x48>)
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	4a03      	ldr	r2, [pc, #12]	; (8007cd0 <HAL_PCD_SuspendCallback+0x48>)
 8007cc2:	f043 0306 	orr.w	r3, r3, #6
 8007cc6:	6113      	str	r3, [r2, #16]
    }
    /* USER CODE END 2 */
}
 8007cc8:	bf00      	nop
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	e000ed00 	.word	0xe000ed00

08007cd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN 3 */

    /* USER CODE END 3 */
    USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fe fcf5 	bl	80066d2 <USBD_LL_Resume>
}
 8007ce8:	bf00      	nop
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	70fb      	strb	r3, [r7, #3]
    USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d02:	78fa      	ldrb	r2, [r7, #3]
 8007d04:	4611      	mov	r1, r2
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fe fd4d 	bl	80067a6 <USBD_LL_IsoOUTIncomplete>
}
 8007d0c:	bf00      	nop
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	70fb      	strb	r3, [r7, #3]
    USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d26:	78fa      	ldrb	r2, [r7, #3]
 8007d28:	4611      	mov	r1, r2
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fe fd09 	bl	8006742 <USBD_LL_IsoINIncomplete>
}
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
    USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fe fd5f 	bl	800680a <USBD_LL_DevConnected>
}
 8007d4c:	bf00      	nop
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
    USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fe fd5c 	bl	8006820 <USBD_LL_DevDisconnected>
}
 8007d68:	bf00      	nop
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBD_LL_Init>:
/**
 * @brief  Initializes the low level portion of the device driver.
 * @param  pdev: Device handle
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef * pdev) {
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
    /* Init USB Ip. */
    if (pdev->id == DEVICE_FS) {
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d13c      	bne.n	8007dfa <USBD_LL_Init+0x8a>
        /* Link the driver to the stack. */
        hpcd_USB_OTG_FS.pData = pdev;
 8007d80:	4a20      	ldr	r2, [pc, #128]	; (8007e04 <USBD_LL_Init+0x94>)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
        pdev->pData = &hpcd_USB_OTG_FS;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a1e      	ldr	r2, [pc, #120]	; (8007e04 <USBD_LL_Init+0x94>)
 8007d8c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

        hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d90:	4b1c      	ldr	r3, [pc, #112]	; (8007e04 <USBD_LL_Init+0x94>)
 8007d92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007d96:	601a      	str	r2, [r3, #0]
        hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007d98:	4b1a      	ldr	r3, [pc, #104]	; (8007e04 <USBD_LL_Init+0x94>)
 8007d9a:	2204      	movs	r2, #4
 8007d9c:	605a      	str	r2, [r3, #4]
        hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d9e:	4b19      	ldr	r3, [pc, #100]	; (8007e04 <USBD_LL_Init+0x94>)
 8007da0:	2202      	movs	r2, #2
 8007da2:	60da      	str	r2, [r3, #12]
        hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007da4:	4b17      	ldr	r3, [pc, #92]	; (8007e04 <USBD_LL_Init+0x94>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	611a      	str	r2, [r3, #16]
        hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007daa:	4b16      	ldr	r3, [pc, #88]	; (8007e04 <USBD_LL_Init+0x94>)
 8007dac:	2202      	movs	r2, #2
 8007dae:	619a      	str	r2, [r3, #24]
        hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007db0:	4b14      	ldr	r3, [pc, #80]	; (8007e04 <USBD_LL_Init+0x94>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	61da      	str	r2, [r3, #28]
        hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007db6:	4b13      	ldr	r3, [pc, #76]	; (8007e04 <USBD_LL_Init+0x94>)
 8007db8:	2200      	movs	r2, #0
 8007dba:	621a      	str	r2, [r3, #32]
        hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007dbc:	4b11      	ldr	r3, [pc, #68]	; (8007e04 <USBD_LL_Init+0x94>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	625a      	str	r2, [r3, #36]	; 0x24
        hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007dc2:	4b10      	ldr	r3, [pc, #64]	; (8007e04 <USBD_LL_Init+0x94>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	62da      	str	r2, [r3, #44]	; 0x2c
        hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007dc8:	4b0e      	ldr	r3, [pc, #56]	; (8007e04 <USBD_LL_Init+0x94>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	631a      	str	r2, [r3, #48]	; 0x30
        if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8007dce:	480d      	ldr	r0, [pc, #52]	; (8007e04 <USBD_LL_Init+0x94>)
 8007dd0:	f7f9 fc62 	bl	8001698 <HAL_PCD_Init>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <USBD_LL_Init+0x6e>
            Error_Handler();
 8007dda:	f7f8 fca7 	bl	800072c <Error_Handler>
        HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
        HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
        HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
        HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007dde:	2180      	movs	r1, #128	; 0x80
 8007de0:	4808      	ldr	r0, [pc, #32]	; (8007e04 <USBD_LL_Init+0x94>)
 8007de2:	f7fa feba 	bl	8002b5a <HAL_PCDEx_SetRxFiFo>
        HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007de6:	2240      	movs	r2, #64	; 0x40
 8007de8:	2100      	movs	r1, #0
 8007dea:	4806      	ldr	r0, [pc, #24]	; (8007e04 <USBD_LL_Init+0x94>)
 8007dec:	f7fa fe6e 	bl	8002acc <HAL_PCDEx_SetTxFiFo>
        HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007df0:	2280      	movs	r2, #128	; 0x80
 8007df2:	2101      	movs	r1, #1
 8007df4:	4803      	ldr	r0, [pc, #12]	; (8007e04 <USBD_LL_Init+0x94>)
 8007df6:	f7fa fe69 	bl	8002acc <HAL_PCDEx_SetTxFiFo>
    }
    return USBD_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	20000f08 	.word	0x20000f08

08007e08 <USBD_LL_Start>:
/**
 * @brief  Starts the low level portion of the device driver.
 * @param  pdev: Device handle
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef * pdev) {
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8007e10:	2300      	movs	r3, #0
 8007e12:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8007e14:	2300      	movs	r3, #0
 8007e16:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_Start(pdev->pData);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7f9 fd57 	bl	80018d2 <HAL_PCD_Start>
 8007e24:	4603      	mov	r3, r0
 8007e26:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 f942 	bl	80080b4 <USBD_Get_USB_Status>
 8007e30:	4603      	mov	r3, r0
 8007e32:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 8007e34:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <USBD_LL_OpenEP>:
 * @param  ep_type: Endpoint type
 * @param  ep_mps: Endpoint max packet size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr, uint8_t ep_type,
                                  uint16_t ep_mps) {
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b084      	sub	sp, #16
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
 8007e46:	4608      	mov	r0, r1
 8007e48:	4611      	mov	r1, r2
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	70fb      	strb	r3, [r7, #3]
 8007e50:	460b      	mov	r3, r1
 8007e52:	70bb      	strb	r3, [r7, #2]
 8007e54:	4613      	mov	r3, r2
 8007e56:	803b      	strh	r3, [r7, #0]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e66:	78bb      	ldrb	r3, [r7, #2]
 8007e68:	883a      	ldrh	r2, [r7, #0]
 8007e6a:	78f9      	ldrb	r1, [r7, #3]
 8007e6c:	f7fa fa28 	bl	80022c0 <HAL_PCD_EP_Open>
 8007e70:	4603      	mov	r3, r0
 8007e72:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 f91c 	bl	80080b4 <USBD_Get_USB_Status>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 8007e80:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <USBD_LL_CloseEP>:
 * @brief  Closes an endpoint of the low level driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b084      	sub	sp, #16
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	460b      	mov	r3, r1
 8007e94:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ea4:	78fa      	ldrb	r2, [r7, #3]
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fa fa71 	bl	8002390 <HAL_PCD_EP_Close>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f000 f8fd 	bl	80080b4 <USBD_Get_USB_Status>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 8007ebe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <USBD_LL_StallEP>:
 * @brief  Sets a Stall condition on an endpoint of the Low Level Driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ee2:	78fa      	ldrb	r2, [r7, #3]
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fa fb49 	bl	800257e <HAL_PCD_EP_SetStall>
 8007eec:	4603      	mov	r3, r0
 8007eee:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 f8de 	bl	80080b4 <USBD_Get_USB_Status>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 8007efc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <USBD_LL_ClearStallEP>:
 * @brief  Clears a Stall condition on an endpoint of the Low Level Driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b084      	sub	sp, #16
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
 8007f0e:	460b      	mov	r3, r1
 8007f10:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8007f12:	2300      	movs	r3, #0
 8007f14:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f20:	78fa      	ldrb	r2, [r7, #3]
 8007f22:	4611      	mov	r1, r2
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7fa fb8e 	bl	8002646 <HAL_PCD_EP_ClrStall>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 f8bf 	bl	80080b4 <USBD_Get_USB_Status>
 8007f36:	4603      	mov	r3, r0
 8007f38:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 8007f3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USBD_LL_IsStallEP>:
 * @brief  Returns Stall condition.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval Stall (1: Yes, 0: No)
 */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	70fb      	strb	r3, [r7, #3]
    PCD_HandleTypeDef * hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f56:	60fb      	str	r3, [r7, #12]

    if ((ep_addr & 0x80) == 0x80) {
 8007f58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	da0b      	bge.n	8007f78 <USBD_LL_IsStallEP+0x34>
        return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f60:	78fb      	ldrb	r3, [r7, #3]
 8007f62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f66:	68f9      	ldr	r1, [r7, #12]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	00db      	lsls	r3, r3, #3
 8007f6c:	4413      	add	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	440b      	add	r3, r1
 8007f72:	333e      	adds	r3, #62	; 0x3e
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	e00b      	b.n	8007f90 <USBD_LL_IsStallEP+0x4c>
    } else {
        return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f78:	78fb      	ldrb	r3, [r7, #3]
 8007f7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f7e:	68f9      	ldr	r1, [r7, #12]
 8007f80:	4613      	mov	r3, r2
 8007f82:	00db      	lsls	r3, r3, #3
 8007f84:	4413      	add	r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	440b      	add	r3, r1
 8007f8a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007f8e:	781b      	ldrb	r3, [r3, #0]
    }
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <USBD_LL_SetUSBAddress>:
 * @brief  Assigns a USB address to the device.
 * @param  pdev: Device handle
 * @param  dev_addr: Device address
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef * pdev, uint8_t dev_addr) {
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fb6:	78fa      	ldrb	r2, [r7, #3]
 8007fb8:	4611      	mov	r1, r2
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fa f95b 	bl	8002276 <HAL_PCD_SetAddress>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 f874 	bl	80080b4 <USBD_Get_USB_Status>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <USBD_LL_Transmit>:
 * @param  pbuf: Pointer to data to be sent
 * @param  size: Data size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef * pdev, uint8_t ep_addr, uint8_t * pbuf,
                                    uint32_t size) {
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b086      	sub	sp, #24
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	60f8      	str	r0, [r7, #12]
 8007fe2:	607a      	str	r2, [r7, #4]
 8007fe4:	603b      	str	r3, [r7, #0]
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	75fb      	strb	r3, [r7, #23]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	75bb      	strb	r3, [r7, #22]

    hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ff8:	7af9      	ldrb	r1, [r7, #11]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	f7fa fa74 	bl	80024ea <HAL_PCD_EP_Transmit>
 8008002:	4603      	mov	r3, r0
 8008004:	75fb      	strb	r3, [r7, #23]

    usb_status = USBD_Get_USB_Status(hal_status);
 8008006:	7dfb      	ldrb	r3, [r7, #23]
 8008008:	4618      	mov	r0, r3
 800800a:	f000 f853 	bl	80080b4 <USBD_Get_USB_Status>
 800800e:	4603      	mov	r3, r0
 8008010:	75bb      	strb	r3, [r7, #22]

    return usb_status;
 8008012:	7dbb      	ldrb	r3, [r7, #22]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3718      	adds	r7, #24
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBD_LL_PrepareReceive>:
 * @param  pbuf: Pointer to data to be received
 * @param  size: Data size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef * pdev, uint8_t ep_addr,
                                          uint8_t * pbuf, uint32_t size) {
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	607a      	str	r2, [r7, #4]
 8008026:	603b      	str	r3, [r7, #0]
 8008028:	460b      	mov	r3, r1
 800802a:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	75fb      	strb	r3, [r7, #23]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	75bb      	strb	r3, [r7, #22]

    hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800803a:	7af9      	ldrb	r1, [r7, #11]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	f7fa f9f0 	bl	8002424 <HAL_PCD_EP_Receive>
 8008044:	4603      	mov	r3, r0
 8008046:	75fb      	strb	r3, [r7, #23]

    usb_status = USBD_Get_USB_Status(hal_status);
 8008048:	7dfb      	ldrb	r3, [r7, #23]
 800804a:	4618      	mov	r0, r3
 800804c:	f000 f832 	bl	80080b4 <USBD_Get_USB_Status>
 8008050:	4603      	mov	r3, r0
 8008052:	75bb      	strb	r3, [r7, #22]

    return usb_status;
 8008054:	7dbb      	ldrb	r3, [r7, #22]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3718      	adds	r7, #24
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBD_LL_GetRxDataSize>:
 * @brief  Returns the last transferred packet size.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval Received Data Size
 */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	460b      	mov	r3, r1
 8008068:	70fb      	strb	r3, [r7, #3]
    return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008070:	78fa      	ldrb	r2, [r7, #3]
 8008072:	4611      	mov	r1, r2
 8008074:	4618      	mov	r0, r3
 8008076:	f7fa fa20 	bl	80024ba <HAL_PCD_EP_GetRxCount>
 800807a:	4603      	mov	r3, r0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <USBD_static_malloc>:
/**
 * @brief  Static single allocation.
 * @param  size: Size of allocated memory
 * @retval None
 */
void * USBD_static_malloc(uint32_t size) {
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
    static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
    return mem;
 800808c:	4b03      	ldr	r3, [pc, #12]	; (800809c <USBD_static_malloc+0x18>)
}
 800808e:	4618      	mov	r0, r3
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	20001414 	.word	0x20001414

080080a0 <USBD_static_free>:
/**
 * @brief  Dummy memory free
 * @param  p: Pointer to allocated  memory address
 * @retval None
 */
void USBD_static_free(void * p) {
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <USBD_Get_USB_Status>:
/**
 * @brief  Returns the USB status depending on the HAL status:
 * @param  hal_status: HAL status
 * @retval USB status
 */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status) {
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	4603      	mov	r3, r0
 80080bc:	71fb      	strb	r3, [r7, #7]
    USBD_StatusTypeDef usb_status = USBD_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	73fb      	strb	r3, [r7, #15]

    switch (hal_status) {
 80080c2:	79fb      	ldrb	r3, [r7, #7]
 80080c4:	2b03      	cmp	r3, #3
 80080c6:	d817      	bhi.n	80080f8 <USBD_Get_USB_Status+0x44>
 80080c8:	a201      	add	r2, pc, #4	; (adr r2, 80080d0 <USBD_Get_USB_Status+0x1c>)
 80080ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ce:	bf00      	nop
 80080d0:	080080e1 	.word	0x080080e1
 80080d4:	080080e7 	.word	0x080080e7
 80080d8:	080080ed 	.word	0x080080ed
 80080dc:	080080f3 	.word	0x080080f3
    case HAL_OK:
        usb_status = USBD_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	73fb      	strb	r3, [r7, #15]
        break;
 80080e4:	e00b      	b.n	80080fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR:
        usb_status = USBD_FAIL;
 80080e6:	2303      	movs	r3, #3
 80080e8:	73fb      	strb	r3, [r7, #15]
        break;
 80080ea:	e008      	b.n	80080fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY:
        usb_status = USBD_BUSY;
 80080ec:	2301      	movs	r3, #1
 80080ee:	73fb      	strb	r3, [r7, #15]
        break;
 80080f0:	e005      	b.n	80080fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT:
        usb_status = USBD_FAIL;
 80080f2:	2303      	movs	r3, #3
 80080f4:	73fb      	strb	r3, [r7, #15]
        break;
 80080f6:	e002      	b.n	80080fe <USBD_Get_USB_Status+0x4a>
    default:
        usb_status = USBD_FAIL;
 80080f8:	2303      	movs	r3, #3
 80080fa:	73fb      	strb	r3, [r7, #15]
        break;
 80080fc:	bf00      	nop
    }
    return usb_status;
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <__errno>:
 800810c:	4b01      	ldr	r3, [pc, #4]	; (8008114 <__errno+0x8>)
 800810e:	6818      	ldr	r0, [r3, #0]
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	200000fc 	.word	0x200000fc

08008118 <__libc_init_array>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	4d0d      	ldr	r5, [pc, #52]	; (8008150 <__libc_init_array+0x38>)
 800811c:	4c0d      	ldr	r4, [pc, #52]	; (8008154 <__libc_init_array+0x3c>)
 800811e:	1b64      	subs	r4, r4, r5
 8008120:	10a4      	asrs	r4, r4, #2
 8008122:	2600      	movs	r6, #0
 8008124:	42a6      	cmp	r6, r4
 8008126:	d109      	bne.n	800813c <__libc_init_array+0x24>
 8008128:	4d0b      	ldr	r5, [pc, #44]	; (8008158 <__libc_init_array+0x40>)
 800812a:	4c0c      	ldr	r4, [pc, #48]	; (800815c <__libc_init_array+0x44>)
 800812c:	f000 fc96 	bl	8008a5c <_init>
 8008130:	1b64      	subs	r4, r4, r5
 8008132:	10a4      	asrs	r4, r4, #2
 8008134:	2600      	movs	r6, #0
 8008136:	42a6      	cmp	r6, r4
 8008138:	d105      	bne.n	8008146 <__libc_init_array+0x2e>
 800813a:	bd70      	pop	{r4, r5, r6, pc}
 800813c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008140:	4798      	blx	r3
 8008142:	3601      	adds	r6, #1
 8008144:	e7ee      	b.n	8008124 <__libc_init_array+0xc>
 8008146:	f855 3b04 	ldr.w	r3, [r5], #4
 800814a:	4798      	blx	r3
 800814c:	3601      	adds	r6, #1
 800814e:	e7f2      	b.n	8008136 <__libc_init_array+0x1e>
 8008150:	08008b2c 	.word	0x08008b2c
 8008154:	08008b2c 	.word	0x08008b2c
 8008158:	08008b2c 	.word	0x08008b2c
 800815c:	08008b30 	.word	0x08008b30

08008160 <malloc>:
 8008160:	4b02      	ldr	r3, [pc, #8]	; (800816c <malloc+0xc>)
 8008162:	4601      	mov	r1, r0
 8008164:	6818      	ldr	r0, [r3, #0]
 8008166:	f000 b877 	b.w	8008258 <_malloc_r>
 800816a:	bf00      	nop
 800816c:	200000fc 	.word	0x200000fc

08008170 <memset>:
 8008170:	4402      	add	r2, r0
 8008172:	4603      	mov	r3, r0
 8008174:	4293      	cmp	r3, r2
 8008176:	d100      	bne.n	800817a <memset+0xa>
 8008178:	4770      	bx	lr
 800817a:	f803 1b01 	strb.w	r1, [r3], #1
 800817e:	e7f9      	b.n	8008174 <memset+0x4>

08008180 <_free_r>:
 8008180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008182:	2900      	cmp	r1, #0
 8008184:	d044      	beq.n	8008210 <_free_r+0x90>
 8008186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800818a:	9001      	str	r0, [sp, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	f1a1 0404 	sub.w	r4, r1, #4
 8008192:	bfb8      	it	lt
 8008194:	18e4      	addlt	r4, r4, r3
 8008196:	f000 f903 	bl	80083a0 <__malloc_lock>
 800819a:	4a1e      	ldr	r2, [pc, #120]	; (8008214 <_free_r+0x94>)
 800819c:	9801      	ldr	r0, [sp, #4]
 800819e:	6813      	ldr	r3, [r2, #0]
 80081a0:	b933      	cbnz	r3, 80081b0 <_free_r+0x30>
 80081a2:	6063      	str	r3, [r4, #4]
 80081a4:	6014      	str	r4, [r2, #0]
 80081a6:	b003      	add	sp, #12
 80081a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081ac:	f000 b8fe 	b.w	80083ac <__malloc_unlock>
 80081b0:	42a3      	cmp	r3, r4
 80081b2:	d908      	bls.n	80081c6 <_free_r+0x46>
 80081b4:	6825      	ldr	r5, [r4, #0]
 80081b6:	1961      	adds	r1, r4, r5
 80081b8:	428b      	cmp	r3, r1
 80081ba:	bf01      	itttt	eq
 80081bc:	6819      	ldreq	r1, [r3, #0]
 80081be:	685b      	ldreq	r3, [r3, #4]
 80081c0:	1949      	addeq	r1, r1, r5
 80081c2:	6021      	streq	r1, [r4, #0]
 80081c4:	e7ed      	b.n	80081a2 <_free_r+0x22>
 80081c6:	461a      	mov	r2, r3
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	b10b      	cbz	r3, 80081d0 <_free_r+0x50>
 80081cc:	42a3      	cmp	r3, r4
 80081ce:	d9fa      	bls.n	80081c6 <_free_r+0x46>
 80081d0:	6811      	ldr	r1, [r2, #0]
 80081d2:	1855      	adds	r5, r2, r1
 80081d4:	42a5      	cmp	r5, r4
 80081d6:	d10b      	bne.n	80081f0 <_free_r+0x70>
 80081d8:	6824      	ldr	r4, [r4, #0]
 80081da:	4421      	add	r1, r4
 80081dc:	1854      	adds	r4, r2, r1
 80081de:	42a3      	cmp	r3, r4
 80081e0:	6011      	str	r1, [r2, #0]
 80081e2:	d1e0      	bne.n	80081a6 <_free_r+0x26>
 80081e4:	681c      	ldr	r4, [r3, #0]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	6053      	str	r3, [r2, #4]
 80081ea:	4421      	add	r1, r4
 80081ec:	6011      	str	r1, [r2, #0]
 80081ee:	e7da      	b.n	80081a6 <_free_r+0x26>
 80081f0:	d902      	bls.n	80081f8 <_free_r+0x78>
 80081f2:	230c      	movs	r3, #12
 80081f4:	6003      	str	r3, [r0, #0]
 80081f6:	e7d6      	b.n	80081a6 <_free_r+0x26>
 80081f8:	6825      	ldr	r5, [r4, #0]
 80081fa:	1961      	adds	r1, r4, r5
 80081fc:	428b      	cmp	r3, r1
 80081fe:	bf04      	itt	eq
 8008200:	6819      	ldreq	r1, [r3, #0]
 8008202:	685b      	ldreq	r3, [r3, #4]
 8008204:	6063      	str	r3, [r4, #4]
 8008206:	bf04      	itt	eq
 8008208:	1949      	addeq	r1, r1, r5
 800820a:	6021      	streq	r1, [r4, #0]
 800820c:	6054      	str	r4, [r2, #4]
 800820e:	e7ca      	b.n	80081a6 <_free_r+0x26>
 8008210:	b003      	add	sp, #12
 8008212:	bd30      	pop	{r4, r5, pc}
 8008214:	20001634 	.word	0x20001634

08008218 <sbrk_aligned>:
 8008218:	b570      	push	{r4, r5, r6, lr}
 800821a:	4e0e      	ldr	r6, [pc, #56]	; (8008254 <sbrk_aligned+0x3c>)
 800821c:	460c      	mov	r4, r1
 800821e:	6831      	ldr	r1, [r6, #0]
 8008220:	4605      	mov	r5, r0
 8008222:	b911      	cbnz	r1, 800822a <sbrk_aligned+0x12>
 8008224:	f000 f88c 	bl	8008340 <_sbrk_r>
 8008228:	6030      	str	r0, [r6, #0]
 800822a:	4621      	mov	r1, r4
 800822c:	4628      	mov	r0, r5
 800822e:	f000 f887 	bl	8008340 <_sbrk_r>
 8008232:	1c43      	adds	r3, r0, #1
 8008234:	d00a      	beq.n	800824c <sbrk_aligned+0x34>
 8008236:	1cc4      	adds	r4, r0, #3
 8008238:	f024 0403 	bic.w	r4, r4, #3
 800823c:	42a0      	cmp	r0, r4
 800823e:	d007      	beq.n	8008250 <sbrk_aligned+0x38>
 8008240:	1a21      	subs	r1, r4, r0
 8008242:	4628      	mov	r0, r5
 8008244:	f000 f87c 	bl	8008340 <_sbrk_r>
 8008248:	3001      	adds	r0, #1
 800824a:	d101      	bne.n	8008250 <sbrk_aligned+0x38>
 800824c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008250:	4620      	mov	r0, r4
 8008252:	bd70      	pop	{r4, r5, r6, pc}
 8008254:	20001638 	.word	0x20001638

08008258 <_malloc_r>:
 8008258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800825c:	1ccd      	adds	r5, r1, #3
 800825e:	f025 0503 	bic.w	r5, r5, #3
 8008262:	3508      	adds	r5, #8
 8008264:	2d0c      	cmp	r5, #12
 8008266:	bf38      	it	cc
 8008268:	250c      	movcc	r5, #12
 800826a:	2d00      	cmp	r5, #0
 800826c:	4607      	mov	r7, r0
 800826e:	db01      	blt.n	8008274 <_malloc_r+0x1c>
 8008270:	42a9      	cmp	r1, r5
 8008272:	d905      	bls.n	8008280 <_malloc_r+0x28>
 8008274:	230c      	movs	r3, #12
 8008276:	603b      	str	r3, [r7, #0]
 8008278:	2600      	movs	r6, #0
 800827a:	4630      	mov	r0, r6
 800827c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008280:	4e2e      	ldr	r6, [pc, #184]	; (800833c <_malloc_r+0xe4>)
 8008282:	f000 f88d 	bl	80083a0 <__malloc_lock>
 8008286:	6833      	ldr	r3, [r6, #0]
 8008288:	461c      	mov	r4, r3
 800828a:	bb34      	cbnz	r4, 80082da <_malloc_r+0x82>
 800828c:	4629      	mov	r1, r5
 800828e:	4638      	mov	r0, r7
 8008290:	f7ff ffc2 	bl	8008218 <sbrk_aligned>
 8008294:	1c43      	adds	r3, r0, #1
 8008296:	4604      	mov	r4, r0
 8008298:	d14d      	bne.n	8008336 <_malloc_r+0xde>
 800829a:	6834      	ldr	r4, [r6, #0]
 800829c:	4626      	mov	r6, r4
 800829e:	2e00      	cmp	r6, #0
 80082a0:	d140      	bne.n	8008324 <_malloc_r+0xcc>
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	4631      	mov	r1, r6
 80082a6:	4638      	mov	r0, r7
 80082a8:	eb04 0803 	add.w	r8, r4, r3
 80082ac:	f000 f848 	bl	8008340 <_sbrk_r>
 80082b0:	4580      	cmp	r8, r0
 80082b2:	d13a      	bne.n	800832a <_malloc_r+0xd2>
 80082b4:	6821      	ldr	r1, [r4, #0]
 80082b6:	3503      	adds	r5, #3
 80082b8:	1a6d      	subs	r5, r5, r1
 80082ba:	f025 0503 	bic.w	r5, r5, #3
 80082be:	3508      	adds	r5, #8
 80082c0:	2d0c      	cmp	r5, #12
 80082c2:	bf38      	it	cc
 80082c4:	250c      	movcc	r5, #12
 80082c6:	4629      	mov	r1, r5
 80082c8:	4638      	mov	r0, r7
 80082ca:	f7ff ffa5 	bl	8008218 <sbrk_aligned>
 80082ce:	3001      	adds	r0, #1
 80082d0:	d02b      	beq.n	800832a <_malloc_r+0xd2>
 80082d2:	6823      	ldr	r3, [r4, #0]
 80082d4:	442b      	add	r3, r5
 80082d6:	6023      	str	r3, [r4, #0]
 80082d8:	e00e      	b.n	80082f8 <_malloc_r+0xa0>
 80082da:	6822      	ldr	r2, [r4, #0]
 80082dc:	1b52      	subs	r2, r2, r5
 80082de:	d41e      	bmi.n	800831e <_malloc_r+0xc6>
 80082e0:	2a0b      	cmp	r2, #11
 80082e2:	d916      	bls.n	8008312 <_malloc_r+0xba>
 80082e4:	1961      	adds	r1, r4, r5
 80082e6:	42a3      	cmp	r3, r4
 80082e8:	6025      	str	r5, [r4, #0]
 80082ea:	bf18      	it	ne
 80082ec:	6059      	strne	r1, [r3, #4]
 80082ee:	6863      	ldr	r3, [r4, #4]
 80082f0:	bf08      	it	eq
 80082f2:	6031      	streq	r1, [r6, #0]
 80082f4:	5162      	str	r2, [r4, r5]
 80082f6:	604b      	str	r3, [r1, #4]
 80082f8:	4638      	mov	r0, r7
 80082fa:	f104 060b 	add.w	r6, r4, #11
 80082fe:	f000 f855 	bl	80083ac <__malloc_unlock>
 8008302:	f026 0607 	bic.w	r6, r6, #7
 8008306:	1d23      	adds	r3, r4, #4
 8008308:	1af2      	subs	r2, r6, r3
 800830a:	d0b6      	beq.n	800827a <_malloc_r+0x22>
 800830c:	1b9b      	subs	r3, r3, r6
 800830e:	50a3      	str	r3, [r4, r2]
 8008310:	e7b3      	b.n	800827a <_malloc_r+0x22>
 8008312:	6862      	ldr	r2, [r4, #4]
 8008314:	42a3      	cmp	r3, r4
 8008316:	bf0c      	ite	eq
 8008318:	6032      	streq	r2, [r6, #0]
 800831a:	605a      	strne	r2, [r3, #4]
 800831c:	e7ec      	b.n	80082f8 <_malloc_r+0xa0>
 800831e:	4623      	mov	r3, r4
 8008320:	6864      	ldr	r4, [r4, #4]
 8008322:	e7b2      	b.n	800828a <_malloc_r+0x32>
 8008324:	4634      	mov	r4, r6
 8008326:	6876      	ldr	r6, [r6, #4]
 8008328:	e7b9      	b.n	800829e <_malloc_r+0x46>
 800832a:	230c      	movs	r3, #12
 800832c:	603b      	str	r3, [r7, #0]
 800832e:	4638      	mov	r0, r7
 8008330:	f000 f83c 	bl	80083ac <__malloc_unlock>
 8008334:	e7a1      	b.n	800827a <_malloc_r+0x22>
 8008336:	6025      	str	r5, [r4, #0]
 8008338:	e7de      	b.n	80082f8 <_malloc_r+0xa0>
 800833a:	bf00      	nop
 800833c:	20001634 	.word	0x20001634

08008340 <_sbrk_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4d06      	ldr	r5, [pc, #24]	; (800835c <_sbrk_r+0x1c>)
 8008344:	2300      	movs	r3, #0
 8008346:	4604      	mov	r4, r0
 8008348:	4608      	mov	r0, r1
 800834a:	602b      	str	r3, [r5, #0]
 800834c:	f7f8 face 	bl	80008ec <_sbrk>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d102      	bne.n	800835a <_sbrk_r+0x1a>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	b103      	cbz	r3, 800835a <_sbrk_r+0x1a>
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	2000163c 	.word	0x2000163c

08008360 <siprintf>:
 8008360:	b40e      	push	{r1, r2, r3}
 8008362:	b500      	push	{lr}
 8008364:	b09c      	sub	sp, #112	; 0x70
 8008366:	ab1d      	add	r3, sp, #116	; 0x74
 8008368:	9002      	str	r0, [sp, #8]
 800836a:	9006      	str	r0, [sp, #24]
 800836c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008370:	4809      	ldr	r0, [pc, #36]	; (8008398 <siprintf+0x38>)
 8008372:	9107      	str	r1, [sp, #28]
 8008374:	9104      	str	r1, [sp, #16]
 8008376:	4909      	ldr	r1, [pc, #36]	; (800839c <siprintf+0x3c>)
 8008378:	f853 2b04 	ldr.w	r2, [r3], #4
 800837c:	9105      	str	r1, [sp, #20]
 800837e:	6800      	ldr	r0, [r0, #0]
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	a902      	add	r1, sp, #8
 8008384:	f000 f874 	bl	8008470 <_svfiprintf_r>
 8008388:	9b02      	ldr	r3, [sp, #8]
 800838a:	2200      	movs	r2, #0
 800838c:	701a      	strb	r2, [r3, #0]
 800838e:	b01c      	add	sp, #112	; 0x70
 8008390:	f85d eb04 	ldr.w	lr, [sp], #4
 8008394:	b003      	add	sp, #12
 8008396:	4770      	bx	lr
 8008398:	200000fc 	.word	0x200000fc
 800839c:	ffff0208 	.word	0xffff0208

080083a0 <__malloc_lock>:
 80083a0:	4801      	ldr	r0, [pc, #4]	; (80083a8 <__malloc_lock+0x8>)
 80083a2:	f000 baf9 	b.w	8008998 <__retarget_lock_acquire_recursive>
 80083a6:	bf00      	nop
 80083a8:	20001640 	.word	0x20001640

080083ac <__malloc_unlock>:
 80083ac:	4801      	ldr	r0, [pc, #4]	; (80083b4 <__malloc_unlock+0x8>)
 80083ae:	f000 baf4 	b.w	800899a <__retarget_lock_release_recursive>
 80083b2:	bf00      	nop
 80083b4:	20001640 	.word	0x20001640

080083b8 <__ssputs_r>:
 80083b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083bc:	688e      	ldr	r6, [r1, #8]
 80083be:	429e      	cmp	r6, r3
 80083c0:	4682      	mov	sl, r0
 80083c2:	460c      	mov	r4, r1
 80083c4:	4690      	mov	r8, r2
 80083c6:	461f      	mov	r7, r3
 80083c8:	d838      	bhi.n	800843c <__ssputs_r+0x84>
 80083ca:	898a      	ldrh	r2, [r1, #12]
 80083cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083d0:	d032      	beq.n	8008438 <__ssputs_r+0x80>
 80083d2:	6825      	ldr	r5, [r4, #0]
 80083d4:	6909      	ldr	r1, [r1, #16]
 80083d6:	eba5 0901 	sub.w	r9, r5, r1
 80083da:	6965      	ldr	r5, [r4, #20]
 80083dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083e4:	3301      	adds	r3, #1
 80083e6:	444b      	add	r3, r9
 80083e8:	106d      	asrs	r5, r5, #1
 80083ea:	429d      	cmp	r5, r3
 80083ec:	bf38      	it	cc
 80083ee:	461d      	movcc	r5, r3
 80083f0:	0553      	lsls	r3, r2, #21
 80083f2:	d531      	bpl.n	8008458 <__ssputs_r+0xa0>
 80083f4:	4629      	mov	r1, r5
 80083f6:	f7ff ff2f 	bl	8008258 <_malloc_r>
 80083fa:	4606      	mov	r6, r0
 80083fc:	b950      	cbnz	r0, 8008414 <__ssputs_r+0x5c>
 80083fe:	230c      	movs	r3, #12
 8008400:	f8ca 3000 	str.w	r3, [sl]
 8008404:	89a3      	ldrh	r3, [r4, #12]
 8008406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800840a:	81a3      	strh	r3, [r4, #12]
 800840c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008414:	6921      	ldr	r1, [r4, #16]
 8008416:	464a      	mov	r2, r9
 8008418:	f000 fac0 	bl	800899c <memcpy>
 800841c:	89a3      	ldrh	r3, [r4, #12]
 800841e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008426:	81a3      	strh	r3, [r4, #12]
 8008428:	6126      	str	r6, [r4, #16]
 800842a:	6165      	str	r5, [r4, #20]
 800842c:	444e      	add	r6, r9
 800842e:	eba5 0509 	sub.w	r5, r5, r9
 8008432:	6026      	str	r6, [r4, #0]
 8008434:	60a5      	str	r5, [r4, #8]
 8008436:	463e      	mov	r6, r7
 8008438:	42be      	cmp	r6, r7
 800843a:	d900      	bls.n	800843e <__ssputs_r+0x86>
 800843c:	463e      	mov	r6, r7
 800843e:	6820      	ldr	r0, [r4, #0]
 8008440:	4632      	mov	r2, r6
 8008442:	4641      	mov	r1, r8
 8008444:	f000 fab8 	bl	80089b8 <memmove>
 8008448:	68a3      	ldr	r3, [r4, #8]
 800844a:	1b9b      	subs	r3, r3, r6
 800844c:	60a3      	str	r3, [r4, #8]
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	4433      	add	r3, r6
 8008452:	6023      	str	r3, [r4, #0]
 8008454:	2000      	movs	r0, #0
 8008456:	e7db      	b.n	8008410 <__ssputs_r+0x58>
 8008458:	462a      	mov	r2, r5
 800845a:	f000 fac7 	bl	80089ec <_realloc_r>
 800845e:	4606      	mov	r6, r0
 8008460:	2800      	cmp	r0, #0
 8008462:	d1e1      	bne.n	8008428 <__ssputs_r+0x70>
 8008464:	6921      	ldr	r1, [r4, #16]
 8008466:	4650      	mov	r0, sl
 8008468:	f7ff fe8a 	bl	8008180 <_free_r>
 800846c:	e7c7      	b.n	80083fe <__ssputs_r+0x46>
	...

08008470 <_svfiprintf_r>:
 8008470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008474:	4698      	mov	r8, r3
 8008476:	898b      	ldrh	r3, [r1, #12]
 8008478:	061b      	lsls	r3, r3, #24
 800847a:	b09d      	sub	sp, #116	; 0x74
 800847c:	4607      	mov	r7, r0
 800847e:	460d      	mov	r5, r1
 8008480:	4614      	mov	r4, r2
 8008482:	d50e      	bpl.n	80084a2 <_svfiprintf_r+0x32>
 8008484:	690b      	ldr	r3, [r1, #16]
 8008486:	b963      	cbnz	r3, 80084a2 <_svfiprintf_r+0x32>
 8008488:	2140      	movs	r1, #64	; 0x40
 800848a:	f7ff fee5 	bl	8008258 <_malloc_r>
 800848e:	6028      	str	r0, [r5, #0]
 8008490:	6128      	str	r0, [r5, #16]
 8008492:	b920      	cbnz	r0, 800849e <_svfiprintf_r+0x2e>
 8008494:	230c      	movs	r3, #12
 8008496:	603b      	str	r3, [r7, #0]
 8008498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800849c:	e0d1      	b.n	8008642 <_svfiprintf_r+0x1d2>
 800849e:	2340      	movs	r3, #64	; 0x40
 80084a0:	616b      	str	r3, [r5, #20]
 80084a2:	2300      	movs	r3, #0
 80084a4:	9309      	str	r3, [sp, #36]	; 0x24
 80084a6:	2320      	movs	r3, #32
 80084a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80084b0:	2330      	movs	r3, #48	; 0x30
 80084b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800865c <_svfiprintf_r+0x1ec>
 80084b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084ba:	f04f 0901 	mov.w	r9, #1
 80084be:	4623      	mov	r3, r4
 80084c0:	469a      	mov	sl, r3
 80084c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084c6:	b10a      	cbz	r2, 80084cc <_svfiprintf_r+0x5c>
 80084c8:	2a25      	cmp	r2, #37	; 0x25
 80084ca:	d1f9      	bne.n	80084c0 <_svfiprintf_r+0x50>
 80084cc:	ebba 0b04 	subs.w	fp, sl, r4
 80084d0:	d00b      	beq.n	80084ea <_svfiprintf_r+0x7a>
 80084d2:	465b      	mov	r3, fp
 80084d4:	4622      	mov	r2, r4
 80084d6:	4629      	mov	r1, r5
 80084d8:	4638      	mov	r0, r7
 80084da:	f7ff ff6d 	bl	80083b8 <__ssputs_r>
 80084de:	3001      	adds	r0, #1
 80084e0:	f000 80aa 	beq.w	8008638 <_svfiprintf_r+0x1c8>
 80084e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084e6:	445a      	add	r2, fp
 80084e8:	9209      	str	r2, [sp, #36]	; 0x24
 80084ea:	f89a 3000 	ldrb.w	r3, [sl]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f000 80a2 	beq.w	8008638 <_svfiprintf_r+0x1c8>
 80084f4:	2300      	movs	r3, #0
 80084f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084fe:	f10a 0a01 	add.w	sl, sl, #1
 8008502:	9304      	str	r3, [sp, #16]
 8008504:	9307      	str	r3, [sp, #28]
 8008506:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800850a:	931a      	str	r3, [sp, #104]	; 0x68
 800850c:	4654      	mov	r4, sl
 800850e:	2205      	movs	r2, #5
 8008510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008514:	4851      	ldr	r0, [pc, #324]	; (800865c <_svfiprintf_r+0x1ec>)
 8008516:	f7f7 fe63 	bl	80001e0 <memchr>
 800851a:	9a04      	ldr	r2, [sp, #16]
 800851c:	b9d8      	cbnz	r0, 8008556 <_svfiprintf_r+0xe6>
 800851e:	06d0      	lsls	r0, r2, #27
 8008520:	bf44      	itt	mi
 8008522:	2320      	movmi	r3, #32
 8008524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008528:	0711      	lsls	r1, r2, #28
 800852a:	bf44      	itt	mi
 800852c:	232b      	movmi	r3, #43	; 0x2b
 800852e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008532:	f89a 3000 	ldrb.w	r3, [sl]
 8008536:	2b2a      	cmp	r3, #42	; 0x2a
 8008538:	d015      	beq.n	8008566 <_svfiprintf_r+0xf6>
 800853a:	9a07      	ldr	r2, [sp, #28]
 800853c:	4654      	mov	r4, sl
 800853e:	2000      	movs	r0, #0
 8008540:	f04f 0c0a 	mov.w	ip, #10
 8008544:	4621      	mov	r1, r4
 8008546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800854a:	3b30      	subs	r3, #48	; 0x30
 800854c:	2b09      	cmp	r3, #9
 800854e:	d94e      	bls.n	80085ee <_svfiprintf_r+0x17e>
 8008550:	b1b0      	cbz	r0, 8008580 <_svfiprintf_r+0x110>
 8008552:	9207      	str	r2, [sp, #28]
 8008554:	e014      	b.n	8008580 <_svfiprintf_r+0x110>
 8008556:	eba0 0308 	sub.w	r3, r0, r8
 800855a:	fa09 f303 	lsl.w	r3, r9, r3
 800855e:	4313      	orrs	r3, r2
 8008560:	9304      	str	r3, [sp, #16]
 8008562:	46a2      	mov	sl, r4
 8008564:	e7d2      	b.n	800850c <_svfiprintf_r+0x9c>
 8008566:	9b03      	ldr	r3, [sp, #12]
 8008568:	1d19      	adds	r1, r3, #4
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	9103      	str	r1, [sp, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	bfbb      	ittet	lt
 8008572:	425b      	neglt	r3, r3
 8008574:	f042 0202 	orrlt.w	r2, r2, #2
 8008578:	9307      	strge	r3, [sp, #28]
 800857a:	9307      	strlt	r3, [sp, #28]
 800857c:	bfb8      	it	lt
 800857e:	9204      	strlt	r2, [sp, #16]
 8008580:	7823      	ldrb	r3, [r4, #0]
 8008582:	2b2e      	cmp	r3, #46	; 0x2e
 8008584:	d10c      	bne.n	80085a0 <_svfiprintf_r+0x130>
 8008586:	7863      	ldrb	r3, [r4, #1]
 8008588:	2b2a      	cmp	r3, #42	; 0x2a
 800858a:	d135      	bne.n	80085f8 <_svfiprintf_r+0x188>
 800858c:	9b03      	ldr	r3, [sp, #12]
 800858e:	1d1a      	adds	r2, r3, #4
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	9203      	str	r2, [sp, #12]
 8008594:	2b00      	cmp	r3, #0
 8008596:	bfb8      	it	lt
 8008598:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800859c:	3402      	adds	r4, #2
 800859e:	9305      	str	r3, [sp, #20]
 80085a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800866c <_svfiprintf_r+0x1fc>
 80085a4:	7821      	ldrb	r1, [r4, #0]
 80085a6:	2203      	movs	r2, #3
 80085a8:	4650      	mov	r0, sl
 80085aa:	f7f7 fe19 	bl	80001e0 <memchr>
 80085ae:	b140      	cbz	r0, 80085c2 <_svfiprintf_r+0x152>
 80085b0:	2340      	movs	r3, #64	; 0x40
 80085b2:	eba0 000a 	sub.w	r0, r0, sl
 80085b6:	fa03 f000 	lsl.w	r0, r3, r0
 80085ba:	9b04      	ldr	r3, [sp, #16]
 80085bc:	4303      	orrs	r3, r0
 80085be:	3401      	adds	r4, #1
 80085c0:	9304      	str	r3, [sp, #16]
 80085c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085c6:	4826      	ldr	r0, [pc, #152]	; (8008660 <_svfiprintf_r+0x1f0>)
 80085c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085cc:	2206      	movs	r2, #6
 80085ce:	f7f7 fe07 	bl	80001e0 <memchr>
 80085d2:	2800      	cmp	r0, #0
 80085d4:	d038      	beq.n	8008648 <_svfiprintf_r+0x1d8>
 80085d6:	4b23      	ldr	r3, [pc, #140]	; (8008664 <_svfiprintf_r+0x1f4>)
 80085d8:	bb1b      	cbnz	r3, 8008622 <_svfiprintf_r+0x1b2>
 80085da:	9b03      	ldr	r3, [sp, #12]
 80085dc:	3307      	adds	r3, #7
 80085de:	f023 0307 	bic.w	r3, r3, #7
 80085e2:	3308      	adds	r3, #8
 80085e4:	9303      	str	r3, [sp, #12]
 80085e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e8:	4433      	add	r3, r6
 80085ea:	9309      	str	r3, [sp, #36]	; 0x24
 80085ec:	e767      	b.n	80084be <_svfiprintf_r+0x4e>
 80085ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80085f2:	460c      	mov	r4, r1
 80085f4:	2001      	movs	r0, #1
 80085f6:	e7a5      	b.n	8008544 <_svfiprintf_r+0xd4>
 80085f8:	2300      	movs	r3, #0
 80085fa:	3401      	adds	r4, #1
 80085fc:	9305      	str	r3, [sp, #20]
 80085fe:	4619      	mov	r1, r3
 8008600:	f04f 0c0a 	mov.w	ip, #10
 8008604:	4620      	mov	r0, r4
 8008606:	f810 2b01 	ldrb.w	r2, [r0], #1
 800860a:	3a30      	subs	r2, #48	; 0x30
 800860c:	2a09      	cmp	r2, #9
 800860e:	d903      	bls.n	8008618 <_svfiprintf_r+0x1a8>
 8008610:	2b00      	cmp	r3, #0
 8008612:	d0c5      	beq.n	80085a0 <_svfiprintf_r+0x130>
 8008614:	9105      	str	r1, [sp, #20]
 8008616:	e7c3      	b.n	80085a0 <_svfiprintf_r+0x130>
 8008618:	fb0c 2101 	mla	r1, ip, r1, r2
 800861c:	4604      	mov	r4, r0
 800861e:	2301      	movs	r3, #1
 8008620:	e7f0      	b.n	8008604 <_svfiprintf_r+0x194>
 8008622:	ab03      	add	r3, sp, #12
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	462a      	mov	r2, r5
 8008628:	4b0f      	ldr	r3, [pc, #60]	; (8008668 <_svfiprintf_r+0x1f8>)
 800862a:	a904      	add	r1, sp, #16
 800862c:	4638      	mov	r0, r7
 800862e:	f3af 8000 	nop.w
 8008632:	1c42      	adds	r2, r0, #1
 8008634:	4606      	mov	r6, r0
 8008636:	d1d6      	bne.n	80085e6 <_svfiprintf_r+0x176>
 8008638:	89ab      	ldrh	r3, [r5, #12]
 800863a:	065b      	lsls	r3, r3, #25
 800863c:	f53f af2c 	bmi.w	8008498 <_svfiprintf_r+0x28>
 8008640:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008642:	b01d      	add	sp, #116	; 0x74
 8008644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008648:	ab03      	add	r3, sp, #12
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	462a      	mov	r2, r5
 800864e:	4b06      	ldr	r3, [pc, #24]	; (8008668 <_svfiprintf_r+0x1f8>)
 8008650:	a904      	add	r1, sp, #16
 8008652:	4638      	mov	r0, r7
 8008654:	f000 f87a 	bl	800874c <_printf_i>
 8008658:	e7eb      	b.n	8008632 <_svfiprintf_r+0x1c2>
 800865a:	bf00      	nop
 800865c:	08008af0 	.word	0x08008af0
 8008660:	08008afa 	.word	0x08008afa
 8008664:	00000000 	.word	0x00000000
 8008668:	080083b9 	.word	0x080083b9
 800866c:	08008af6 	.word	0x08008af6

08008670 <_printf_common>:
 8008670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008674:	4616      	mov	r6, r2
 8008676:	4699      	mov	r9, r3
 8008678:	688a      	ldr	r2, [r1, #8]
 800867a:	690b      	ldr	r3, [r1, #16]
 800867c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008680:	4293      	cmp	r3, r2
 8008682:	bfb8      	it	lt
 8008684:	4613      	movlt	r3, r2
 8008686:	6033      	str	r3, [r6, #0]
 8008688:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800868c:	4607      	mov	r7, r0
 800868e:	460c      	mov	r4, r1
 8008690:	b10a      	cbz	r2, 8008696 <_printf_common+0x26>
 8008692:	3301      	adds	r3, #1
 8008694:	6033      	str	r3, [r6, #0]
 8008696:	6823      	ldr	r3, [r4, #0]
 8008698:	0699      	lsls	r1, r3, #26
 800869a:	bf42      	ittt	mi
 800869c:	6833      	ldrmi	r3, [r6, #0]
 800869e:	3302      	addmi	r3, #2
 80086a0:	6033      	strmi	r3, [r6, #0]
 80086a2:	6825      	ldr	r5, [r4, #0]
 80086a4:	f015 0506 	ands.w	r5, r5, #6
 80086a8:	d106      	bne.n	80086b8 <_printf_common+0x48>
 80086aa:	f104 0a19 	add.w	sl, r4, #25
 80086ae:	68e3      	ldr	r3, [r4, #12]
 80086b0:	6832      	ldr	r2, [r6, #0]
 80086b2:	1a9b      	subs	r3, r3, r2
 80086b4:	42ab      	cmp	r3, r5
 80086b6:	dc26      	bgt.n	8008706 <_printf_common+0x96>
 80086b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086bc:	1e13      	subs	r3, r2, #0
 80086be:	6822      	ldr	r2, [r4, #0]
 80086c0:	bf18      	it	ne
 80086c2:	2301      	movne	r3, #1
 80086c4:	0692      	lsls	r2, r2, #26
 80086c6:	d42b      	bmi.n	8008720 <_printf_common+0xb0>
 80086c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086cc:	4649      	mov	r1, r9
 80086ce:	4638      	mov	r0, r7
 80086d0:	47c0      	blx	r8
 80086d2:	3001      	adds	r0, #1
 80086d4:	d01e      	beq.n	8008714 <_printf_common+0xa4>
 80086d6:	6823      	ldr	r3, [r4, #0]
 80086d8:	68e5      	ldr	r5, [r4, #12]
 80086da:	6832      	ldr	r2, [r6, #0]
 80086dc:	f003 0306 	and.w	r3, r3, #6
 80086e0:	2b04      	cmp	r3, #4
 80086e2:	bf08      	it	eq
 80086e4:	1aad      	subeq	r5, r5, r2
 80086e6:	68a3      	ldr	r3, [r4, #8]
 80086e8:	6922      	ldr	r2, [r4, #16]
 80086ea:	bf0c      	ite	eq
 80086ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086f0:	2500      	movne	r5, #0
 80086f2:	4293      	cmp	r3, r2
 80086f4:	bfc4      	itt	gt
 80086f6:	1a9b      	subgt	r3, r3, r2
 80086f8:	18ed      	addgt	r5, r5, r3
 80086fa:	2600      	movs	r6, #0
 80086fc:	341a      	adds	r4, #26
 80086fe:	42b5      	cmp	r5, r6
 8008700:	d11a      	bne.n	8008738 <_printf_common+0xc8>
 8008702:	2000      	movs	r0, #0
 8008704:	e008      	b.n	8008718 <_printf_common+0xa8>
 8008706:	2301      	movs	r3, #1
 8008708:	4652      	mov	r2, sl
 800870a:	4649      	mov	r1, r9
 800870c:	4638      	mov	r0, r7
 800870e:	47c0      	blx	r8
 8008710:	3001      	adds	r0, #1
 8008712:	d103      	bne.n	800871c <_printf_common+0xac>
 8008714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800871c:	3501      	adds	r5, #1
 800871e:	e7c6      	b.n	80086ae <_printf_common+0x3e>
 8008720:	18e1      	adds	r1, r4, r3
 8008722:	1c5a      	adds	r2, r3, #1
 8008724:	2030      	movs	r0, #48	; 0x30
 8008726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800872a:	4422      	add	r2, r4
 800872c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008730:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008734:	3302      	adds	r3, #2
 8008736:	e7c7      	b.n	80086c8 <_printf_common+0x58>
 8008738:	2301      	movs	r3, #1
 800873a:	4622      	mov	r2, r4
 800873c:	4649      	mov	r1, r9
 800873e:	4638      	mov	r0, r7
 8008740:	47c0      	blx	r8
 8008742:	3001      	adds	r0, #1
 8008744:	d0e6      	beq.n	8008714 <_printf_common+0xa4>
 8008746:	3601      	adds	r6, #1
 8008748:	e7d9      	b.n	80086fe <_printf_common+0x8e>
	...

0800874c <_printf_i>:
 800874c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008750:	7e0f      	ldrb	r7, [r1, #24]
 8008752:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008754:	2f78      	cmp	r7, #120	; 0x78
 8008756:	4691      	mov	r9, r2
 8008758:	4680      	mov	r8, r0
 800875a:	460c      	mov	r4, r1
 800875c:	469a      	mov	sl, r3
 800875e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008762:	d807      	bhi.n	8008774 <_printf_i+0x28>
 8008764:	2f62      	cmp	r7, #98	; 0x62
 8008766:	d80a      	bhi.n	800877e <_printf_i+0x32>
 8008768:	2f00      	cmp	r7, #0
 800876a:	f000 80d8 	beq.w	800891e <_printf_i+0x1d2>
 800876e:	2f58      	cmp	r7, #88	; 0x58
 8008770:	f000 80a3 	beq.w	80088ba <_printf_i+0x16e>
 8008774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800877c:	e03a      	b.n	80087f4 <_printf_i+0xa8>
 800877e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008782:	2b15      	cmp	r3, #21
 8008784:	d8f6      	bhi.n	8008774 <_printf_i+0x28>
 8008786:	a101      	add	r1, pc, #4	; (adr r1, 800878c <_printf_i+0x40>)
 8008788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800878c:	080087e5 	.word	0x080087e5
 8008790:	080087f9 	.word	0x080087f9
 8008794:	08008775 	.word	0x08008775
 8008798:	08008775 	.word	0x08008775
 800879c:	08008775 	.word	0x08008775
 80087a0:	08008775 	.word	0x08008775
 80087a4:	080087f9 	.word	0x080087f9
 80087a8:	08008775 	.word	0x08008775
 80087ac:	08008775 	.word	0x08008775
 80087b0:	08008775 	.word	0x08008775
 80087b4:	08008775 	.word	0x08008775
 80087b8:	08008905 	.word	0x08008905
 80087bc:	08008829 	.word	0x08008829
 80087c0:	080088e7 	.word	0x080088e7
 80087c4:	08008775 	.word	0x08008775
 80087c8:	08008775 	.word	0x08008775
 80087cc:	08008927 	.word	0x08008927
 80087d0:	08008775 	.word	0x08008775
 80087d4:	08008829 	.word	0x08008829
 80087d8:	08008775 	.word	0x08008775
 80087dc:	08008775 	.word	0x08008775
 80087e0:	080088ef 	.word	0x080088ef
 80087e4:	682b      	ldr	r3, [r5, #0]
 80087e6:	1d1a      	adds	r2, r3, #4
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	602a      	str	r2, [r5, #0]
 80087ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087f4:	2301      	movs	r3, #1
 80087f6:	e0a3      	b.n	8008940 <_printf_i+0x1f4>
 80087f8:	6820      	ldr	r0, [r4, #0]
 80087fa:	6829      	ldr	r1, [r5, #0]
 80087fc:	0606      	lsls	r6, r0, #24
 80087fe:	f101 0304 	add.w	r3, r1, #4
 8008802:	d50a      	bpl.n	800881a <_printf_i+0xce>
 8008804:	680e      	ldr	r6, [r1, #0]
 8008806:	602b      	str	r3, [r5, #0]
 8008808:	2e00      	cmp	r6, #0
 800880a:	da03      	bge.n	8008814 <_printf_i+0xc8>
 800880c:	232d      	movs	r3, #45	; 0x2d
 800880e:	4276      	negs	r6, r6
 8008810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008814:	485e      	ldr	r0, [pc, #376]	; (8008990 <_printf_i+0x244>)
 8008816:	230a      	movs	r3, #10
 8008818:	e019      	b.n	800884e <_printf_i+0x102>
 800881a:	680e      	ldr	r6, [r1, #0]
 800881c:	602b      	str	r3, [r5, #0]
 800881e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008822:	bf18      	it	ne
 8008824:	b236      	sxthne	r6, r6
 8008826:	e7ef      	b.n	8008808 <_printf_i+0xbc>
 8008828:	682b      	ldr	r3, [r5, #0]
 800882a:	6820      	ldr	r0, [r4, #0]
 800882c:	1d19      	adds	r1, r3, #4
 800882e:	6029      	str	r1, [r5, #0]
 8008830:	0601      	lsls	r1, r0, #24
 8008832:	d501      	bpl.n	8008838 <_printf_i+0xec>
 8008834:	681e      	ldr	r6, [r3, #0]
 8008836:	e002      	b.n	800883e <_printf_i+0xf2>
 8008838:	0646      	lsls	r6, r0, #25
 800883a:	d5fb      	bpl.n	8008834 <_printf_i+0xe8>
 800883c:	881e      	ldrh	r6, [r3, #0]
 800883e:	4854      	ldr	r0, [pc, #336]	; (8008990 <_printf_i+0x244>)
 8008840:	2f6f      	cmp	r7, #111	; 0x6f
 8008842:	bf0c      	ite	eq
 8008844:	2308      	moveq	r3, #8
 8008846:	230a      	movne	r3, #10
 8008848:	2100      	movs	r1, #0
 800884a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800884e:	6865      	ldr	r5, [r4, #4]
 8008850:	60a5      	str	r5, [r4, #8]
 8008852:	2d00      	cmp	r5, #0
 8008854:	bfa2      	ittt	ge
 8008856:	6821      	ldrge	r1, [r4, #0]
 8008858:	f021 0104 	bicge.w	r1, r1, #4
 800885c:	6021      	strge	r1, [r4, #0]
 800885e:	b90e      	cbnz	r6, 8008864 <_printf_i+0x118>
 8008860:	2d00      	cmp	r5, #0
 8008862:	d04d      	beq.n	8008900 <_printf_i+0x1b4>
 8008864:	4615      	mov	r5, r2
 8008866:	fbb6 f1f3 	udiv	r1, r6, r3
 800886a:	fb03 6711 	mls	r7, r3, r1, r6
 800886e:	5dc7      	ldrb	r7, [r0, r7]
 8008870:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008874:	4637      	mov	r7, r6
 8008876:	42bb      	cmp	r3, r7
 8008878:	460e      	mov	r6, r1
 800887a:	d9f4      	bls.n	8008866 <_printf_i+0x11a>
 800887c:	2b08      	cmp	r3, #8
 800887e:	d10b      	bne.n	8008898 <_printf_i+0x14c>
 8008880:	6823      	ldr	r3, [r4, #0]
 8008882:	07de      	lsls	r6, r3, #31
 8008884:	d508      	bpl.n	8008898 <_printf_i+0x14c>
 8008886:	6923      	ldr	r3, [r4, #16]
 8008888:	6861      	ldr	r1, [r4, #4]
 800888a:	4299      	cmp	r1, r3
 800888c:	bfde      	ittt	le
 800888e:	2330      	movle	r3, #48	; 0x30
 8008890:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008894:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008898:	1b52      	subs	r2, r2, r5
 800889a:	6122      	str	r2, [r4, #16]
 800889c:	f8cd a000 	str.w	sl, [sp]
 80088a0:	464b      	mov	r3, r9
 80088a2:	aa03      	add	r2, sp, #12
 80088a4:	4621      	mov	r1, r4
 80088a6:	4640      	mov	r0, r8
 80088a8:	f7ff fee2 	bl	8008670 <_printf_common>
 80088ac:	3001      	adds	r0, #1
 80088ae:	d14c      	bne.n	800894a <_printf_i+0x1fe>
 80088b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088b4:	b004      	add	sp, #16
 80088b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ba:	4835      	ldr	r0, [pc, #212]	; (8008990 <_printf_i+0x244>)
 80088bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80088c0:	6829      	ldr	r1, [r5, #0]
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80088c8:	6029      	str	r1, [r5, #0]
 80088ca:	061d      	lsls	r5, r3, #24
 80088cc:	d514      	bpl.n	80088f8 <_printf_i+0x1ac>
 80088ce:	07df      	lsls	r7, r3, #31
 80088d0:	bf44      	itt	mi
 80088d2:	f043 0320 	orrmi.w	r3, r3, #32
 80088d6:	6023      	strmi	r3, [r4, #0]
 80088d8:	b91e      	cbnz	r6, 80088e2 <_printf_i+0x196>
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	f023 0320 	bic.w	r3, r3, #32
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	2310      	movs	r3, #16
 80088e4:	e7b0      	b.n	8008848 <_printf_i+0xfc>
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	f043 0320 	orr.w	r3, r3, #32
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	2378      	movs	r3, #120	; 0x78
 80088f0:	4828      	ldr	r0, [pc, #160]	; (8008994 <_printf_i+0x248>)
 80088f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088f6:	e7e3      	b.n	80088c0 <_printf_i+0x174>
 80088f8:	0659      	lsls	r1, r3, #25
 80088fa:	bf48      	it	mi
 80088fc:	b2b6      	uxthmi	r6, r6
 80088fe:	e7e6      	b.n	80088ce <_printf_i+0x182>
 8008900:	4615      	mov	r5, r2
 8008902:	e7bb      	b.n	800887c <_printf_i+0x130>
 8008904:	682b      	ldr	r3, [r5, #0]
 8008906:	6826      	ldr	r6, [r4, #0]
 8008908:	6961      	ldr	r1, [r4, #20]
 800890a:	1d18      	adds	r0, r3, #4
 800890c:	6028      	str	r0, [r5, #0]
 800890e:	0635      	lsls	r5, r6, #24
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	d501      	bpl.n	8008918 <_printf_i+0x1cc>
 8008914:	6019      	str	r1, [r3, #0]
 8008916:	e002      	b.n	800891e <_printf_i+0x1d2>
 8008918:	0670      	lsls	r0, r6, #25
 800891a:	d5fb      	bpl.n	8008914 <_printf_i+0x1c8>
 800891c:	8019      	strh	r1, [r3, #0]
 800891e:	2300      	movs	r3, #0
 8008920:	6123      	str	r3, [r4, #16]
 8008922:	4615      	mov	r5, r2
 8008924:	e7ba      	b.n	800889c <_printf_i+0x150>
 8008926:	682b      	ldr	r3, [r5, #0]
 8008928:	1d1a      	adds	r2, r3, #4
 800892a:	602a      	str	r2, [r5, #0]
 800892c:	681d      	ldr	r5, [r3, #0]
 800892e:	6862      	ldr	r2, [r4, #4]
 8008930:	2100      	movs	r1, #0
 8008932:	4628      	mov	r0, r5
 8008934:	f7f7 fc54 	bl	80001e0 <memchr>
 8008938:	b108      	cbz	r0, 800893e <_printf_i+0x1f2>
 800893a:	1b40      	subs	r0, r0, r5
 800893c:	6060      	str	r0, [r4, #4]
 800893e:	6863      	ldr	r3, [r4, #4]
 8008940:	6123      	str	r3, [r4, #16]
 8008942:	2300      	movs	r3, #0
 8008944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008948:	e7a8      	b.n	800889c <_printf_i+0x150>
 800894a:	6923      	ldr	r3, [r4, #16]
 800894c:	462a      	mov	r2, r5
 800894e:	4649      	mov	r1, r9
 8008950:	4640      	mov	r0, r8
 8008952:	47d0      	blx	sl
 8008954:	3001      	adds	r0, #1
 8008956:	d0ab      	beq.n	80088b0 <_printf_i+0x164>
 8008958:	6823      	ldr	r3, [r4, #0]
 800895a:	079b      	lsls	r3, r3, #30
 800895c:	d413      	bmi.n	8008986 <_printf_i+0x23a>
 800895e:	68e0      	ldr	r0, [r4, #12]
 8008960:	9b03      	ldr	r3, [sp, #12]
 8008962:	4298      	cmp	r0, r3
 8008964:	bfb8      	it	lt
 8008966:	4618      	movlt	r0, r3
 8008968:	e7a4      	b.n	80088b4 <_printf_i+0x168>
 800896a:	2301      	movs	r3, #1
 800896c:	4632      	mov	r2, r6
 800896e:	4649      	mov	r1, r9
 8008970:	4640      	mov	r0, r8
 8008972:	47d0      	blx	sl
 8008974:	3001      	adds	r0, #1
 8008976:	d09b      	beq.n	80088b0 <_printf_i+0x164>
 8008978:	3501      	adds	r5, #1
 800897a:	68e3      	ldr	r3, [r4, #12]
 800897c:	9903      	ldr	r1, [sp, #12]
 800897e:	1a5b      	subs	r3, r3, r1
 8008980:	42ab      	cmp	r3, r5
 8008982:	dcf2      	bgt.n	800896a <_printf_i+0x21e>
 8008984:	e7eb      	b.n	800895e <_printf_i+0x212>
 8008986:	2500      	movs	r5, #0
 8008988:	f104 0619 	add.w	r6, r4, #25
 800898c:	e7f5      	b.n	800897a <_printf_i+0x22e>
 800898e:	bf00      	nop
 8008990:	08008b01 	.word	0x08008b01
 8008994:	08008b12 	.word	0x08008b12

08008998 <__retarget_lock_acquire_recursive>:
 8008998:	4770      	bx	lr

0800899a <__retarget_lock_release_recursive>:
 800899a:	4770      	bx	lr

0800899c <memcpy>:
 800899c:	440a      	add	r2, r1
 800899e:	4291      	cmp	r1, r2
 80089a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80089a4:	d100      	bne.n	80089a8 <memcpy+0xc>
 80089a6:	4770      	bx	lr
 80089a8:	b510      	push	{r4, lr}
 80089aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089b2:	4291      	cmp	r1, r2
 80089b4:	d1f9      	bne.n	80089aa <memcpy+0xe>
 80089b6:	bd10      	pop	{r4, pc}

080089b8 <memmove>:
 80089b8:	4288      	cmp	r0, r1
 80089ba:	b510      	push	{r4, lr}
 80089bc:	eb01 0402 	add.w	r4, r1, r2
 80089c0:	d902      	bls.n	80089c8 <memmove+0x10>
 80089c2:	4284      	cmp	r4, r0
 80089c4:	4623      	mov	r3, r4
 80089c6:	d807      	bhi.n	80089d8 <memmove+0x20>
 80089c8:	1e43      	subs	r3, r0, #1
 80089ca:	42a1      	cmp	r1, r4
 80089cc:	d008      	beq.n	80089e0 <memmove+0x28>
 80089ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089d6:	e7f8      	b.n	80089ca <memmove+0x12>
 80089d8:	4402      	add	r2, r0
 80089da:	4601      	mov	r1, r0
 80089dc:	428a      	cmp	r2, r1
 80089de:	d100      	bne.n	80089e2 <memmove+0x2a>
 80089e0:	bd10      	pop	{r4, pc}
 80089e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089ea:	e7f7      	b.n	80089dc <memmove+0x24>

080089ec <_realloc_r>:
 80089ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f0:	4680      	mov	r8, r0
 80089f2:	4614      	mov	r4, r2
 80089f4:	460e      	mov	r6, r1
 80089f6:	b921      	cbnz	r1, 8008a02 <_realloc_r+0x16>
 80089f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089fc:	4611      	mov	r1, r2
 80089fe:	f7ff bc2b 	b.w	8008258 <_malloc_r>
 8008a02:	b92a      	cbnz	r2, 8008a10 <_realloc_r+0x24>
 8008a04:	f7ff fbbc 	bl	8008180 <_free_r>
 8008a08:	4625      	mov	r5, r4
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a10:	f000 f81b 	bl	8008a4a <_malloc_usable_size_r>
 8008a14:	4284      	cmp	r4, r0
 8008a16:	4607      	mov	r7, r0
 8008a18:	d802      	bhi.n	8008a20 <_realloc_r+0x34>
 8008a1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a1e:	d812      	bhi.n	8008a46 <_realloc_r+0x5a>
 8008a20:	4621      	mov	r1, r4
 8008a22:	4640      	mov	r0, r8
 8008a24:	f7ff fc18 	bl	8008258 <_malloc_r>
 8008a28:	4605      	mov	r5, r0
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	d0ed      	beq.n	8008a0a <_realloc_r+0x1e>
 8008a2e:	42bc      	cmp	r4, r7
 8008a30:	4622      	mov	r2, r4
 8008a32:	4631      	mov	r1, r6
 8008a34:	bf28      	it	cs
 8008a36:	463a      	movcs	r2, r7
 8008a38:	f7ff ffb0 	bl	800899c <memcpy>
 8008a3c:	4631      	mov	r1, r6
 8008a3e:	4640      	mov	r0, r8
 8008a40:	f7ff fb9e 	bl	8008180 <_free_r>
 8008a44:	e7e1      	b.n	8008a0a <_realloc_r+0x1e>
 8008a46:	4635      	mov	r5, r6
 8008a48:	e7df      	b.n	8008a0a <_realloc_r+0x1e>

08008a4a <_malloc_usable_size_r>:
 8008a4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a4e:	1f18      	subs	r0, r3, #4
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	bfbc      	itt	lt
 8008a54:	580b      	ldrlt	r3, [r1, r0]
 8008a56:	18c0      	addlt	r0, r0, r3
 8008a58:	4770      	bx	lr
	...

08008a5c <_init>:
 8008a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5e:	bf00      	nop
 8008a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a62:	bc08      	pop	{r3}
 8008a64:	469e      	mov	lr, r3
 8008a66:	4770      	bx	lr

08008a68 <_fini>:
 8008a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6a:	bf00      	nop
 8008a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a6e:	bc08      	pop	{r3}
 8008a70:	469e      	mov	lr, r3
 8008a72:	4770      	bx	lr
