
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08008f10  08008f10  00018f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fc0  08008fc0  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  08008fc0  08008fc0  00018fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fc8  08008fc8  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fc8  08008fc8  00018fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fcc  08008fcc  00018fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  08008fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000167c  2000015c  0800912c  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017d8  0800912c  000217d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015631  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003862  00000000  00000000  00035800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00039068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d32  00000000  00000000  0003a1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001980a  00000000  00000000  0003aeda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bcd4  00000000  00000000  000546e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b90f  00000000  00000000  000703b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bfc  00000000  00000000  000fbcc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  001008c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000015c 	.word	0x2000015c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008ef8 	.word	0x08008ef8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000160 	.word	0x20000160
 80001dc:	08008ef8 	.word	0x08008ef8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <flightController_App>:
extern DMA_HandleTypeDef hdma_usart2_rx;

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void flightController_App(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
    static IBUS_HandleTypeDef_t * rc_controller;
    uint8_t channel = CHANNEL_1;
 8000592:	2301      	movs	r3, #1
 8000594:	75fb      	strb	r3, [r7, #23]
    static uint16_t channelValue;
    uint8_t str[20];

    rc_controller = FSA8S_RC_Init(&huart2);
 8000596:	4812      	ldr	r0, [pc, #72]	; (80005e0 <flightController_App+0x54>)
 8000598:	f000 fbd6 	bl	8000d48 <FSA8S_RC_Init>
 800059c:	4603      	mov	r3, r0
 800059e:	4a11      	ldr	r2, [pc, #68]	; (80005e4 <flightController_App+0x58>)
 80005a0:	6013      	str	r3, [r2, #0]

    while (1) {
        channelValue = FSA8S_RC_ReadChannel(rc_controller, channel);
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <flightController_App+0x58>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	7dfa      	ldrb	r2, [r7, #23]
 80005a8:	4611      	mov	r1, r2
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fc26 	bl	8000dfc <FSA8S_RC_ReadChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	461a      	mov	r2, r3
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <flightController_App+0x5c>)
 80005b6:	801a      	strh	r2, [r3, #0]
        sprintf((char *)str, (const char *)"Channel %d: %d\r\n", channel, channelValue);
 80005b8:	7dfa      	ldrb	r2, [r7, #23]
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <flightController_App+0x5c>)
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	4638      	mov	r0, r7
 80005c0:	490a      	ldr	r1, [pc, #40]	; (80005ec <flightController_App+0x60>)
 80005c2:	f008 f8a1 	bl	8008708 <siprintf>
        CDC_Transmit_FS(str, strlen((const char *)str));
 80005c6:	463b      	mov	r3, r7
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe09 	bl	80001e0 <strlen>
 80005ce:	4603      	mov	r3, r0
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	463b      	mov	r3, r7
 80005d4:	4611      	mov	r1, r2
 80005d6:	4618      	mov	r0, r3
 80005d8:	f007 fb88 	bl	8007cec <CDC_Transmit_FS>
        channelValue = FSA8S_RC_ReadChannel(rc_controller, channel);
 80005dc:	e7e1      	b.n	80005a2 <flightController_App+0x16>
 80005de:	bf00      	nop
 80005e0:	200001d4 	.word	0x200001d4
 80005e4:	20000178 	.word	0x20000178
 80005e8:	2000017c 	.word	0x2000017c
 80005ec:	08008f10 	.word	0x08008f10

080005f0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80005f4:	f000 fc3c 	bl	8000e70 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80005f8:	f000 f810 	bl	800061c <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80005fc:	f000 f8ea 	bl	80007d4 <MX_GPIO_Init>
    MX_DMA_Init();
 8000600:	f000 f8ce 	bl	80007a0 <MX_DMA_Init>
    MX_USB_DEVICE_Init();
 8000604:	f007 fab4 	bl	8007b70 <MX_USB_DEVICE_Init>
    MX_I2C1_Init();
 8000608:	f000 f872 	bl	80006f0 <MX_I2C1_Init>
    MX_USART2_UART_Init();
 800060c:	f000 f89e 	bl	800074c <MX_USART2_UART_Init>
    /* USER CODE BEGIN 2 */
    flightController_App();
 8000610:	f7ff ffbc 	bl	800058c <flightController_App>
 8000614:	2300      	movs	r3, #0
    /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    /* USER CODE END 3 */
}
 8000616:	4618      	mov	r0, r3
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f008 f88c 	bl	8008748 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <SystemClock_Config+0xcc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000668:	4a20      	ldr	r2, [pc, #128]	; (80006ec <SystemClock_Config+0xd0>)
 800066a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 15;
 8000690:	230f      	movs	r3, #15
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 144;
 8000694:	2390      	movs	r3, #144	; 0x90
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000698:	2304      	movs	r3, #4
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 5;
 800069c:	2305      	movs	r3, #5
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 fcb7 	bl	8003018 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x98>
        Error_Handler();
 80006b0:	f000 f8c6 	bl	8000840 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType =
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
        RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c4:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2101      	movs	r1, #1
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 ff19 	bl	8003508 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xc4>
        Error_Handler();
 80006dc:	f000 f8b0 	bl	8000840 <Error_Handler>
    }
}
 80006e0:	bf00      	nop
 80006e2:	3750      	adds	r7, #80	; 0x50
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN I2C1_Init 0 */
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */
    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_I2C1_Init+0x50>)
 80006f6:	4a13      	ldr	r2, [pc, #76]	; (8000744 <MX_I2C1_Init+0x54>)
 80006f8:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_I2C1_Init+0x50>)
 80006fc:	4a12      	ldr	r2, [pc, #72]	; (8000748 <MX_I2C1_Init+0x58>)
 80006fe:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_I2C1_Init+0x50>)
 800070e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000712:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_I2C1_Init+0x50>)
 800072e:	f001 f8b1 	bl	8001894 <HAL_I2C_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_I2C1_Init+0x4c>
        Error_Handler();
 8000738:	f000 f882 	bl	8000840 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */
    /* USER CODE END I2C1_Init 2 */
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000180 	.word	0x20000180
 8000744:	40005400 	.word	0x40005400
 8000748:	00061a80 	.word	0x00061a80

0800074c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART2_Init 0 */
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */
    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <MX_USART2_UART_Init+0x50>)
 8000754:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800075c:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_RX;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000772:	2204      	movs	r2, #4
 8000774:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000784:	f003 f8a0 	bl	80038c8 <HAL_UART_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_USART2_UART_Init+0x46>
        Error_Handler();
 800078e:	f000 f857 	bl	8000840 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */
    /* USER CODE END USART2_Init 2 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200001d4 	.word	0x200001d4
 800079c:	40004400 	.word	0x40004400

080007a0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_DMA_Init+0x30>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <MX_DMA_Init+0x30>)
 80007b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_DMA_Init+0x30>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_GPIO_Init+0x68>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a16      	ldr	r2, [pc, #88]	; (800083c <MX_GPIO_Init+0x68>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_GPIO_Init+0x68>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_GPIO_Init+0x68>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a0f      	ldr	r2, [pc, #60]	; (800083c <MX_GPIO_Init+0x68>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <MX_GPIO_Init+0x68>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_GPIO_Init+0x68>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <MX_GPIO_Init+0x68>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_GPIO_Init+0x68>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* USER CODE END Error_Handler_Debug */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	4a0f      	ldr	r2, [pc, #60]	; (800089c <HAL_MspInit+0x4c>)
 8000860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000864:	6453      	str	r3, [r2, #68]	; 0x44
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <HAL_MspInit+0x4c>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	4a08      	ldr	r2, [pc, #32]	; (800089c <HAL_MspInit+0x4c>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000880:	6413      	str	r3, [r2, #64]	; 0x40
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_MspInit+0x4c>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800

080008a0 <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef * hi2c) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
    if (hi2c->Instance == I2C1) {
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a19      	ldr	r2, [pc, #100]	; (8000924 <HAL_I2C_MspInit+0x84>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d12b      	bne.n	800091a <HAL_I2C_MspInit+0x7a>
        /* USER CODE BEGIN I2C1_MspInit 0 */

        /* USER CODE END I2C1_MspInit 0 */

        __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <HAL_I2C_MspInit+0x88>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a17      	ldr	r2, [pc, #92]	; (8000928 <HAL_I2C_MspInit+0x88>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <HAL_I2C_MspInit+0x88>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
        /**I2C1 GPIO Configuration
        PB6     ------> I2C1_SCL
        PB7     ------> I2C1_SDA
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80008de:	23c0      	movs	r3, #192	; 0xc0
 80008e0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e2:	2312      	movs	r3, #18
 80008e4:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ee:	2304      	movs	r3, #4
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <HAL_I2C_MspInit+0x8c>)
 80008fa:	f000 fe47 	bl	800158c <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_I2C1_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_I2C_MspInit+0x88>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_I2C_MspInit+0x88>)
 8000908:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800090c:	6413      	str	r3, [r2, #64]	; 0x40
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_I2C_MspInit+0x88>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN I2C1_MspInit 1 */

        /* USER CODE END I2C1_MspInit 1 */
    }
}
 800091a:	bf00      	nop
 800091c:	3728      	adds	r7, #40	; 0x28
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40005400 	.word	0x40005400
 8000928:	40023800 	.word	0x40023800
 800092c:	40020400 	.word	0x40020400

08000930 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef * huart) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
    if (huart->Instance == USART2) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a30      	ldr	r2, [pc, #192]	; (8000a10 <HAL_UART_MspInit+0xe0>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d15a      	bne.n	8000a08 <HAL_UART_MspInit+0xd8>
        /* USER CODE BEGIN USART2_MspInit 0 */

        /* USER CODE END USART2_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART2_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <HAL_UART_MspInit+0xe4>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a2e      	ldr	r2, [pc, #184]	; (8000a14 <HAL_UART_MspInit+0xe4>)
 800095c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b2c      	ldr	r3, [pc, #176]	; (8000a14 <HAL_UART_MspInit+0xe4>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <HAL_UART_MspInit+0xe4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a27      	ldr	r2, [pc, #156]	; (8000a14 <HAL_UART_MspInit+0xe4>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <HAL_UART_MspInit+0xe4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
        /**USART2 GPIO Configuration
        PA2     ------> USART2_TX
        PA3     ------> USART2_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 800098a:	230c      	movs	r3, #12
 800098c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800099a:	2307      	movs	r3, #7
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	481c      	ldr	r0, [pc, #112]	; (8000a18 <HAL_UART_MspInit+0xe8>)
 80009a6:	f000 fdf1 	bl	800158c <HAL_GPIO_Init>

        /* USART2 DMA Init */
        /* USART2_RX Init */
        hdma_usart2_rx.Instance = DMA1_Stream5;
 80009aa:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <HAL_UART_MspInit+0xec>)
 80009ac:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <HAL_UART_MspInit+0xf0>)
 80009ae:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80009b0:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <HAL_UART_MspInit+0xec>)
 80009b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009b6:	605a      	str	r2, [r3, #4]
        hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <HAL_UART_MspInit+0xec>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
        hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <HAL_UART_MspInit+0xec>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
        hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_UART_MspInit+0xec>)
 80009c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ca:	611a      	str	r2, [r3, #16]
        hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <HAL_UART_MspInit+0xec>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
        hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_UART_MspInit+0xec>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
        hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <HAL_UART_MspInit+0xec>)
 80009da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009de:	61da      	str	r2, [r3, #28]
        hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_UART_MspInit+0xec>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	621a      	str	r2, [r3, #32]
        hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <HAL_UART_MspInit+0xec>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	625a      	str	r2, [r3, #36]	; 0x24
        if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 80009ec:	480b      	ldr	r0, [pc, #44]	; (8000a1c <HAL_UART_MspInit+0xec>)
 80009ee:	f000 fbe7 	bl	80011c0 <HAL_DMA_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <HAL_UART_MspInit+0xcc>
            Error_Handler();
 80009f8:	f7ff ff22 	bl	8000840 <Error_Handler>
        }

        __HAL_LINKDMA(huart, hdmarx, hdma_usart2_rx);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_UART_MspInit+0xec>)
 8000a00:	639a      	str	r2, [r3, #56]	; 0x38
 8000a02:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <HAL_UART_MspInit+0xec>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6393      	str	r3, [r2, #56]	; 0x38

        /* USER CODE BEGIN USART2_MspInit 1 */

        /* USER CODE END USART2_MspInit 1 */
    }
}
 8000a08:	bf00      	nop
 8000a0a:	3728      	adds	r7, #40	; 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40004400 	.word	0x40004400
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020000 	.word	0x40020000
 8000a1c:	20000218 	.word	0x20000218
 8000a20:	40026088 	.word	0x40026088

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8000a28:	e7fe      	b.n	8000a28 <NMI_Handler+0x4>

08000a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <MemManage_Handler+0x4>

08000a36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a70:	f000 fa50 	bl	8000f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a7c:	4802      	ldr	r0, [pc, #8]	; (8000a88 <OTG_FS_IRQHandler+0x10>)
 8000a7e:	f001 f99d 	bl	8001dbc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000f64 	.word	0x20000f64

08000a8c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a94:	4a14      	ldr	r2, [pc, #80]	; (8000ae8 <_sbrk+0x5c>)
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <_sbrk+0x60>)
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8000aa0:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <_sbrk+0x64>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d102      	bne.n	8000aae <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <_sbrk+0x64>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <_sbrk+0x68>)
 8000aac:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <_sbrk+0x64>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d207      	bcs.n	8000acc <_sbrk+0x40>
        errno = ENOMEM;
 8000abc:	f007 fe5c 	bl	8008778 <__errno>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aca:	e009      	b.n	8000ae0 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <_sbrk+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <_sbrk+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <_sbrk+0x64>)
 8000adc:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8000ade:	68fb      	ldr	r3, [r7, #12]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20010000 	.word	0x20010000
 8000aec:	00000400 	.word	0x00000400
 8000af0:	20000278 	.word	0x20000278
 8000af4:	200017d8 	.word	0x200017d8

08000af8 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <SystemInit+0x20>)
 8000afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b02:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <SystemInit+0x20>)
 8000b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b20:	480d      	ldr	r0, [pc, #52]	; (8000b58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b22:	490e      	ldr	r1, [pc, #56]	; (8000b5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b24:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b38:	4c0b      	ldr	r4, [pc, #44]	; (8000b68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b46:	f7ff ffd7 	bl	8000af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f007 fe1b 	bl	8008784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4e:	f7ff fd4f 	bl	80005f0 <main>
  bx  lr
 8000b52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b54:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000b60:	08008fd0 	.word	0x08008fd0
  ldr r2, =_sbss
 8000b64:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000b68:	200017d8 	.word	0x200017d8

08000b6c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC_IRQHandler>

08000b6e <IBUS_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t IBUS_Init(IBUS_HandleTypeDef_t * hibus) {
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d101      	bne.n	8000b80 <IBUS_Init+0x12>
        return false;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	e00f      	b.n	8000ba0 <IBUS_Init+0x32>
    }

    /* Initialize DMA reception */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize)) {
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6818      	ldr	r0, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6859      	ldr	r1, [r3, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	7a1b      	ldrb	r3, [r3, #8]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	461a      	mov	r2, r3
 8000b90:	f002 fee7 	bl	8003962 <HAL_UART_Receive_DMA>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <IBUS_Init+0x30>
        /* END MODIFY 1 */

        /* DMA initialization was unsuccessful */
        return false;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e000      	b.n	8000ba0 <IBUS_Init+0x32>
    }

    /* iBus initialization was successful */
    return true;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <FSA8S_RC_CheckFirstBytes>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t FSA8S_RC_CheckFirstBytes(IBUS_HandleTypeDef_t * hibus) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d101      	bne.n	8000bba <FSA8S_RC_CheckFirstBytes+0x12>
        return false;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e00d      	b.n	8000bd6 <FSA8S_RC_CheckFirstBytes+0x2e>
    }

    /* Check first bytes*/
    if (IBUS_BUFFER_LENGTH == hibus->buffer[0] && IBUS_COMMAND == hibus->buffer[1]) {
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b20      	cmp	r3, #32
 8000bc2:	d107      	bne.n	8000bd4 <FSA8S_RC_CheckFirstBytes+0x2c>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b40      	cmp	r3, #64	; 0x40
 8000bce:	d101      	bne.n	8000bd4 <FSA8S_RC_CheckFirstBytes+0x2c>
        /* First two bytes are correct */
        return true;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e000      	b.n	8000bd6 <FSA8S_RC_CheckFirstBytes+0x2e>
    } else {
        /* First two bytes are not correct */
        return false;
 8000bd4:	2300      	movs	r3, #0
    }
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <FSA8S_RC_Checksum>:

static bool_t FSA8S_RC_Checksum(IBUS_HandleTypeDef_t * hibus) {
 8000be2:	b480      	push	{r7}
 8000be4:	b085      	sub	sp, #20
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]

    uint16_t sentChecksum;
    uint16_t receivedChecksum = 0xFFFF;
 8000bea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bee:	81fb      	strh	r3, [r7, #14]

    /* Check parameter */
    if (NULL == hibus) {
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <FSA8S_RC_Checksum+0x18>
        return false;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e02c      	b.n	8000c54 <FSA8S_RC_Checksum+0x72>
    }

    /* Get received checksum value */
    sentChecksum =
        (hibus->buffer[hibus->bufferSize - 1] << 8) | (hibus->buffer[hibus->bufferSize - 2]);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	685a      	ldr	r2, [r3, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	7a1b      	ldrb	r3, [r3, #8]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	4413      	add	r3, r2
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	021b      	lsls	r3, r3, #8
 8000c0a:	b21a      	sxth	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6859      	ldr	r1, [r3, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	7a1b      	ldrb	r3, [r3, #8]
 8000c14:	3b02      	subs	r3, #2
 8000c16:	440b      	add	r3, r1
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b21b      	sxth	r3, r3
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	b21b      	sxth	r3, r3
    sentChecksum =
 8000c20:	817b      	strh	r3, [r7, #10]

    /* Calculate checksum */
    for (uint8_t i = 0; i < 30; i++) {
 8000c22:	2300      	movs	r3, #0
 8000c24:	737b      	strb	r3, [r7, #13]
 8000c26:	e00b      	b.n	8000c40 <FSA8S_RC_Checksum+0x5e>
        receivedChecksum -= hibus->buffer[i];
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	7b7b      	ldrb	r3, [r7, #13]
 8000c2e:	4413      	add	r3, r2
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	89fa      	ldrh	r2, [r7, #14]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < 30; i++) {
 8000c3a:	7b7b      	ldrb	r3, [r7, #13]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	737b      	strb	r3, [r7, #13]
 8000c40:	7b7b      	ldrb	r3, [r7, #13]
 8000c42:	2b1d      	cmp	r3, #29
 8000c44:	d9f0      	bls.n	8000c28 <FSA8S_RC_Checksum+0x46>
    }

    /* Compare received checksum value with calculated one */
    if (sentChecksum == receivedChecksum) {
 8000c46:	897a      	ldrh	r2, [r7, #10]
 8000c48:	89fb      	ldrh	r3, [r7, #14]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d101      	bne.n	8000c52 <FSA8S_RC_Checksum+0x70>
        /* Received data is correct */
        return true;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e000      	b.n	8000c54 <FSA8S_RC_Checksum+0x72>
    } else {
        /* Received data is corrupted */
        return false;
 8000c52:	2300      	movs	r3, #0
    }
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <FSA8S_RC_AmendData>:

static void FSA8S_RC_AmendData(IBUS_HandleTypeDef_t * hibus) {
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

    uint16_t channelValue;

    /* Check parameter */
    if (NULL != hibus) {
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d062      	beq.n	8000d34 <FSA8S_RC_AmendData+0xd4>

        /* Ammend data */
        for (uint8_t i = 2; i <= (hibus->bufferSize - 2); i += 2) {
 8000c6e:	2302      	movs	r3, #2
 8000c70:	737b      	strb	r3, [r7, #13]
 8000c72:	e059      	b.n	8000d28 <FSA8S_RC_AmendData+0xc8>

            channelValue = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	81fb      	strh	r3, [r7, #14]

            /* Swap channel bytes */
            channelValue =
                ((hibus->buffer[i + 1] << 8) | (hibus->buffer[i])) - calibrationValues[(i - 2) / 2];
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685a      	ldr	r2, [r3, #4]
 8000c7c:	7b7b      	ldrb	r3, [r7, #13]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	021b      	lsls	r3, r3, #8
 8000c86:	b21a      	sxth	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6859      	ldr	r1, [r3, #4]
 8000c8c:	7b7b      	ldrb	r3, [r7, #13]
 8000c8e:	440b      	add	r3, r1
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b21b      	sxth	r3, r3
 8000c94:	4313      	orrs	r3, r2
 8000c96:	b21b      	sxth	r3, r3
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	7b7b      	ldrb	r3, [r7, #13]
 8000c9c:	3b02      	subs	r3, #2
 8000c9e:	0fd9      	lsrs	r1, r3, #31
 8000ca0:	440b      	add	r3, r1
 8000ca2:	105b      	asrs	r3, r3, #1
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <FSA8S_RC_AmendData+0xe0>)
 8000ca8:	5c5b      	ldrb	r3, [r3, r1]
 8000caa:	b29b      	uxth	r3, r3
            channelValue =
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	81fb      	strh	r3, [r7, #14]

            /* Map channel value from 0 to IBUS_CHANNEL_MAX_VALUE */
            if ((1000 <= channelValue) && (IBUS_CHANNEL_MAX_RAW_VALUE >= channelValue)) {
 8000cb0:	89fb      	ldrh	r3, [r7, #14]
 8000cb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cb6:	d308      	bcc.n	8000cca <FSA8S_RC_AmendData+0x6a>
 8000cb8:	89fb      	ldrh	r3, [r7, #14]
 8000cba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cbe:	d804      	bhi.n	8000cca <FSA8S_RC_AmendData+0x6a>
                channelValue -= IBUS_CHANNEL_MIN_RAW_VALUE;
 8000cc0:	89fb      	ldrh	r3, [r7, #14]
 8000cc2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000cc6:	81fb      	strh	r3, [r7, #14]
 8000cc8:	e001      	b.n	8000cce <FSA8S_RC_AmendData+0x6e>
            } else {
                channelValue = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	81fb      	strh	r3, [r7, #14]
            }

            hibus->data[(i - 2) / 2] =
                channelValue *
 8000cce:	89fb      	ldrh	r3, [r7, #14]
 8000cd0:	ee07 3a90 	vmov	s15, r3
 8000cd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                ((float)(IBUS_CHANNEL_MAX_VALUE + (calibrationValues[(i - 2) / 2] *
 8000cd8:	7b7b      	ldrb	r3, [r7, #13]
 8000cda:	3b02      	subs	r3, #2
 8000cdc:	0fda      	lsrs	r2, r3, #31
 8000cde:	4413      	add	r3, r2
 8000ce0:	105b      	asrs	r3, r3, #1
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <FSA8S_RC_AmendData+0xe0>)
 8000ce6:	5c9b      	ldrb	r3, [r3, r2]
 8000ce8:	ee07 3a90 	vmov	s15, r3
 8000cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf0:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000d44 <FSA8S_RC_AmendData+0xe4>
 8000cf4:	ee77 6aa6 	vadd.f32	s13, s15, s13
                                                   ((float)IBUS_CHANNEL_MAX_VALUE / 1000))) /
 8000cf8:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8000d44 <FSA8S_RC_AmendData+0xe4>
 8000cfc:	eec6 7a86 	vdiv.f32	s15, s13, s12
                channelValue *
 8000d00:	ee67 7a27 	vmul.f32	s15, s14, s15
            hibus->data[(i - 2) / 2] =
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68da      	ldr	r2, [r3, #12]
 8000d08:	7b7b      	ldrb	r3, [r7, #13]
 8000d0a:	3b02      	subs	r3, #2
 8000d0c:	0fd9      	lsrs	r1, r3, #31
 8000d0e:	440b      	add	r3, r1
 8000d10:	105b      	asrs	r3, r3, #1
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d1a:	ee17 2a90 	vmov	r2, s15
 8000d1e:	b292      	uxth	r2, r2
 8000d20:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 2; i <= (hibus->bufferSize - 2); i += 2) {
 8000d22:	7b7b      	ldrb	r3, [r7, #13]
 8000d24:	3302      	adds	r3, #2
 8000d26:	737b      	strb	r3, [r7, #13]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7a1b      	ldrb	r3, [r3, #8]
 8000d2c:	1e5a      	subs	r2, r3, #1
 8000d2e:	7b7b      	ldrb	r3, [r7, #13]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	dc9f      	bgt.n	8000c74 <FSA8S_RC_AmendData+0x14>
                 1000);
        }
    }
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	20000004 	.word	0x20000004
 8000d44:	447a0000 	.word	0x447a0000

08000d48 <FSA8S_RC_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
IBUS_HandleTypeDef_t * FSA8S_RC_Init(UART_HandleTypeDef * huart) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

    static uint8_t alreadyInitialized = false;

    /* Check parameter */
    if (NULL == huart) {
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <FSA8S_RC_Init+0x12>
        return NULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e049      	b.n	8000dee <FSA8S_RC_Init+0xa6>
    }

    /* Check if driver was already initialized */
    if (alreadyInitialized) {
 8000d5a:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <FSA8S_RC_Init+0xb0>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <FSA8S_RC_Init+0x1e>
        return NULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e043      	b.n	8000dee <FSA8S_RC_Init+0xa6>
#ifdef USE_FREERTOS
    IBUS_HandleTypeDef_t * hibus = pvPortmalloc(sizeof(IBUS_HandleTypeDef_t));
    uint8_t * buffer = pvortMalloc(sizeof(IBUS_BUFFER_LENGTH));
    uint16_t * data = pvortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
#else
    IBUS_HandleTypeDef_t * hibus = malloc(sizeof(IBUS_HandleTypeDef_t));
 8000d66:	2014      	movs	r0, #20
 8000d68:	f007 fc12 	bl	8008590 <malloc>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	617b      	str	r3, [r7, #20]
    uint8_t * buffer = malloc(sizeof(IBUS_BUFFER_LENGTH));
 8000d70:	2004      	movs	r0, #4
 8000d72:	f007 fc0d 	bl	8008590 <malloc>
 8000d76:	4603      	mov	r3, r0
 8000d78:	613b      	str	r3, [r7, #16]
    uint16_t * data = malloc(sizeof(uint16_t));
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	f007 fc08 	bl	8008590 <malloc>
 8000d80:	4603      	mov	r3, r0
 8000d82:	60fb      	str	r3, [r7, #12]
#endif

    /* Initialize iBus_HandleTypeDef structure */
    if (hibus) {
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d00f      	beq.n	8000daa <FSA8S_RC_Init+0x62>
        hibus->huart = huart;
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	601a      	str	r2, [r3, #0]
        hibus->buffer = buffer;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGTH;
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	2220      	movs	r2, #32
 8000d9a:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	220e      	movs	r2, #14
 8000da6:	741a      	strb	r2, [r3, #16]
 8000da8:	e00a      	b.n	8000dc0 <FSA8S_RC_Init+0x78>
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
        vPortFree(hibus);
#else
        /* Free up dynamic allocated memory */
        hibus->buffer = 0;
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	2200      	movs	r2, #0
 8000dae:	605a      	str	r2, [r3, #4]
        free(hibus->buffer);
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f007 fbf3 	bl	80085a0 <free>
        free(hibus);
 8000dba:	6978      	ldr	r0, [r7, #20]
 8000dbc:	f007 fbf0 	bl	80085a0 <free>
#endif
    }

    /* Initialize iBus communication */
    if (IBUS_Init(hibus)) {
 8000dc0:	6978      	ldr	r0, [r7, #20]
 8000dc2:	f7ff fed4 	bl	8000b6e <IBUS_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d004      	beq.n	8000dd6 <FSA8S_RC_Init+0x8e>
        /* Initialization was successful */
        alreadyInitialized = true;
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <FSA8S_RC_Init+0xb0>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	701a      	strb	r2, [r3, #0]
        return hibus;
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	e00b      	b.n	8000dee <FSA8S_RC_Init+0xa6>
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
        vPortFree(hibus);
#else
        /* Free up dynamic allocated memory */
        hibus->buffer = 0;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	605a      	str	r2, [r3, #4]
        free(hibus->buffer);
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f007 fbdd 	bl	80085a0 <free>
        free(hibus);
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	f007 fbda 	bl	80085a0 <free>
#endif
        return NULL;
 8000dec:	2300      	movs	r3, #0
    }
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000027c 	.word	0x2000027c

08000dfc <FSA8S_RC_ReadChannel>:

uint16_t FSA8S_RC_ReadChannel(IBUS_HandleTypeDef_t * hibus, FSA8S_RC_CHANNEL_t channel) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	70fb      	strb	r3, [r7, #3]

    /* Check parameter */
    if (NULL == hibus) {
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <FSA8S_RC_ReadChannel+0x16>
        return 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e029      	b.n	8000e66 <FSA8S_RC_ReadChannel+0x6a>
    }
    /* Check parameter */
    if (!(channel > 0 && channel <= IBUS_CHANNELS)) {
 8000e12:	78fb      	ldrb	r3, [r7, #3]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d002      	beq.n	8000e1e <FSA8S_RC_ReadChannel+0x22>
 8000e18:	78fb      	ldrb	r3, [r7, #3]
 8000e1a:	2b0e      	cmp	r3, #14
 8000e1c:	d901      	bls.n	8000e22 <FSA8S_RC_ReadChannel+0x26>
        return 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e021      	b.n	8000e66 <FSA8S_RC_ReadChannel+0x6a>
    }

    /* Check if first two bytes are IBUS_LENGTH and IBUS_COMMAND */
    while (1) {
        while (!FSA8S_RC_CheckFirstBytes(hibus)) {
 8000e22:	bf00      	nop
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff febf 	bl	8000ba8 <FSA8S_RC_CheckFirstBytes>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	f083 0301 	eor.w	r3, r3, #1
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d1f6      	bne.n	8000e24 <FSA8S_RC_ReadChannel+0x28>
            /* Wait until a data frame with the right format is received */
        }

        /* Perform a checksum */
        if (!FSA8S_RC_Checksum(hibus)) {
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff fed3 	bl	8000be2 <FSA8S_RC_Checksum>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	f083 0301 	eor.w	r3, r3, #1
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <FSA8S_RC_ReadChannel+0x50>
            /* Received data is corrupted */
            continue;
 8000e48:	bf00      	nop
        while (!FSA8S_RC_CheckFirstBytes(hibus)) {
 8000e4a:	e7ea      	b.n	8000e22 <FSA8S_RC_ReadChannel+0x26>
        } else {
            /* Received data is correct */
            break;
 8000e4c:	bf00      	nop
        }
    }

    /* Get channels data in little-endian */
    FSA8S_RC_AmendData(hibus);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ff06 	bl	8000c60 <FSA8S_RC_AmendData>

    return hibus->data[channel - IBUS_CHANNEL_NUM_OFFSET];
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4413      	add	r3, r2
 8000e64:	881b      	ldrh	r3, [r3, #0]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <HAL_Init+0x40>)
 8000e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <HAL_Init+0x40>)
 8000e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <HAL_Init+0x40>)
 8000e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f000 f94f 	bl	800113c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9e:	200f      	movs	r0, #15
 8000ea0:	f000 f808 	bl	8000eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea4:	f7ff fcd4 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023c00 	.word	0x40023c00

08000eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_InitTick+0x54>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x58>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f967 	bl	80011a6 <HAL_SYSTICK_Config>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00e      	b.n	8000f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	d80a      	bhi.n	8000efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ef0:	f000 f92f 	bl	8001152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef4:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <HAL_InitTick+0x5c>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e000      	b.n	8000f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000018 	.word	0x20000018
 8000f10:	20000014 	.word	0x20000014

08000f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x20>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x24>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <HAL_IncTick+0x24>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000018 	.word	0x20000018
 8000f38:	20000280 	.word	0x20000280

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <HAL_GetTick+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000280 	.word	0x20000280

08000f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f5c:	f7ff ffee 	bl	8000f3c <HAL_GetTick>
 8000f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f6c:	d005      	beq.n	8000f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_Delay+0x44>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4413      	add	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f7a:	bf00      	nop
 8000f7c:	f7ff ffde 	bl	8000f3c <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d8f7      	bhi.n	8000f7c <HAL_Delay+0x28>
  {
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000018 	.word	0x20000018

08000f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fce:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	60d3      	str	r3, [r2, #12]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <__NVIC_GetPriorityGrouping+0x18>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	f003 0307 	and.w	r3, r3, #7
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	2b00      	cmp	r3, #0
 8001010:	db0b      	blt.n	800102a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	f003 021f 	and.w	r2, r3, #31
 8001018:	4907      	ldr	r1, [pc, #28]	; (8001038 <__NVIC_EnableIRQ+0x38>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	095b      	lsrs	r3, r3, #5
 8001020:	2001      	movs	r0, #1
 8001022:	fa00 f202 	lsl.w	r2, r0, r2
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000e100 	.word	0xe000e100

0800103c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	db0a      	blt.n	8001066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	b2da      	uxtb	r2, r3
 8001054:	490c      	ldr	r1, [pc, #48]	; (8001088 <__NVIC_SetPriority+0x4c>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	0112      	lsls	r2, r2, #4
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	440b      	add	r3, r1
 8001060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001064:	e00a      	b.n	800107c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4908      	ldr	r1, [pc, #32]	; (800108c <__NVIC_SetPriority+0x50>)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	3b04      	subs	r3, #4
 8001074:	0112      	lsls	r2, r2, #4
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	440b      	add	r3, r1
 800107a:	761a      	strb	r2, [r3, #24]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000e100 	.word	0xe000e100
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f1c3 0307 	rsb	r3, r3, #7
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	bf28      	it	cs
 80010ae:	2304      	movcs	r3, #4
 80010b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3304      	adds	r3, #4
 80010b6:	2b06      	cmp	r3, #6
 80010b8:	d902      	bls.n	80010c0 <NVIC_EncodePriority+0x30>
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3b03      	subs	r3, #3
 80010be:	e000      	b.n	80010c2 <NVIC_EncodePriority+0x32>
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43da      	mvns	r2, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	401a      	ands	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	43d9      	mvns	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	4313      	orrs	r3, r2
         );
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3724      	adds	r7, #36	; 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001108:	d301      	bcc.n	800110e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110a:	2301      	movs	r3, #1
 800110c:	e00f      	b.n	800112e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <SysTick_Config+0x40>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001116:	210f      	movs	r1, #15
 8001118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800111c:	f7ff ff8e 	bl	800103c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <SysTick_Config+0x40>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <SysTick_Config+0x40>)
 8001128:	2207      	movs	r2, #7
 800112a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	e000e010 	.word	0xe000e010

0800113c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff29 	bl	8000f9c <__NVIC_SetPriorityGrouping>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001164:	f7ff ff3e 	bl	8000fe4 <__NVIC_GetPriorityGrouping>
 8001168:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	6978      	ldr	r0, [r7, #20]
 8001170:	f7ff ff8e 	bl	8001090 <NVIC_EncodePriority>
 8001174:	4602      	mov	r2, r0
 8001176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff5d 	bl	800103c <__NVIC_SetPriority>
}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff31 	bl	8001000 <__NVIC_EnableIRQ>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ffa2 	bl	80010f8 <SysTick_Config>
 80011b4:	4603      	mov	r3, r0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011cc:	f7ff feb6 	bl	8000f3c <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e099      	b.n	8001310 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2202      	movs	r2, #2
 80011e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0201 	bic.w	r2, r2, #1
 80011fa:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011fc:	e00f      	b.n	800121e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011fe:	f7ff fe9d 	bl	8000f3c <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b05      	cmp	r3, #5
 800120a:	d908      	bls.n	800121e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2220      	movs	r2, #32
 8001210:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2203      	movs	r2, #3
 8001216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e078      	b.n	8001310 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1e8      	bne.n	80011fe <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	4b38      	ldr	r3, [pc, #224]	; (8001318 <HAL_DMA_Init+0x158>)
 8001238:	4013      	ands	r3, r2
 800123a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800124a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001256:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001262:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	4313      	orrs	r3, r2
 800126e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001274:	2b04      	cmp	r3, #4
 8001276:	d107      	bne.n	8001288 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	4313      	orrs	r3, r2
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4313      	orrs	r3, r2
 8001286:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f023 0307 	bic.w	r3, r3, #7
 800129e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d117      	bne.n	80012e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d00e      	beq.n	80012e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 f8e5 	bl	8001494 <DMA_CheckFifoParam>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d008      	beq.n	80012e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2240      	movs	r2, #64	; 0x40
 80012d4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e016      	b.n	8001310 <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 f89c 	bl	8001428 <DMA_CalcBaseAndBitshift>
 80012f0:	4603      	mov	r3, r0
 80012f2:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f8:	223f      	movs	r2, #63	; 0x3f
 80012fa:	409a      	lsls	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	f010803f 	.word	0xf010803f

0800131c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001332:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800133a:	2b01      	cmp	r3, #1
 800133c:	d101      	bne.n	8001342 <HAL_DMA_Start_IT+0x26>
 800133e:	2302      	movs	r3, #2
 8001340:	e040      	b.n	80013c4 <HAL_DMA_Start_IT+0xa8>
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b01      	cmp	r3, #1
 8001354:	d12f      	bne.n	80013b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2202      	movs	r2, #2
 800135a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	655a      	str	r2, [r3, #84]	; 0x54

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	68b9      	ldr	r1, [r7, #8]
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 f82e 	bl	80013cc <DMA_SetConfig>

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001374:	223f      	movs	r2, #63	; 0x3f
 8001376:	409a      	lsls	r2, r3
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	609a      	str	r2, [r3, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f042 0216 	orr.w	r2, r2, #22
 800138a:	601a      	str	r2, [r3, #0]

    if(hdma->XferHalfCpltCallback != NULL)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	2b00      	cmp	r3, #0
 8001392:	d007      	beq.n	80013a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f042 0208 	orr.w	r2, r2, #8
 80013a2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 0201 	orr.w	r2, r2, #1
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	e005      	b.n	80013c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 80013be:	2302      	movs	r3, #2
 80013c0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2b40      	cmp	r3, #64	; 0x40
 80013f8:	d108      	bne.n	800140c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800140a:	e007      	b.n	800141c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	60da      	str	r2, [r3, #12]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	3b10      	subs	r3, #16
 8001438:	4a14      	ldr	r2, [pc, #80]	; (800148c <DMA_CalcBaseAndBitshift+0x64>)
 800143a:	fba2 2303 	umull	r2, r3, r2, r3
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001442:	4a13      	ldr	r2, [pc, #76]	; (8001490 <DMA_CalcBaseAndBitshift+0x68>)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4413      	add	r3, r2
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b03      	cmp	r3, #3
 8001454:	d909      	bls.n	800146a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800145e:	f023 0303 	bic.w	r3, r3, #3
 8001462:	1d1a      	adds	r2, r3, #4
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	659a      	str	r2, [r3, #88]	; 0x58
 8001468:	e007      	b.n	800147a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001472:	f023 0303 	bic.w	r3, r3, #3
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800147e:	4618      	mov	r0, r3
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	aaaaaaab 	.word	0xaaaaaaab
 8001490:	08008f84 	.word	0x08008f84

08001494 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d11f      	bne.n	80014ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d856      	bhi.n	8001562 <DMA_CheckFifoParam+0xce>
 80014b4:	a201      	add	r2, pc, #4	; (adr r2, 80014bc <DMA_CheckFifoParam+0x28>)
 80014b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ba:	bf00      	nop
 80014bc:	080014cd 	.word	0x080014cd
 80014c0:	080014df 	.word	0x080014df
 80014c4:	080014cd 	.word	0x080014cd
 80014c8:	08001563 	.word	0x08001563
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d046      	beq.n	8001566 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014dc:	e043      	b.n	8001566 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014e6:	d140      	bne.n	800156a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014ec:	e03d      	b.n	800156a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014f6:	d121      	bne.n	800153c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d837      	bhi.n	800156e <DMA_CheckFifoParam+0xda>
 80014fe:	a201      	add	r2, pc, #4	; (adr r2, 8001504 <DMA_CheckFifoParam+0x70>)
 8001500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001504:	08001515 	.word	0x08001515
 8001508:	0800151b 	.word	0x0800151b
 800150c:	08001515 	.word	0x08001515
 8001510:	0800152d 	.word	0x0800152d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
      break;
 8001518:	e030      	b.n	800157c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d025      	beq.n	8001572 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800152a:	e022      	b.n	8001572 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001530:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001534:	d11f      	bne.n	8001576 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800153a:	e01c      	b.n	8001576 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d903      	bls.n	800154a <DMA_CheckFifoParam+0xb6>
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	2b03      	cmp	r3, #3
 8001546:	d003      	beq.n	8001550 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001548:	e018      	b.n	800157c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	73fb      	strb	r3, [r7, #15]
      break;
 800154e:	e015      	b.n	800157c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00e      	beq.n	800157a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
      break;
 8001560:	e00b      	b.n	800157a <DMA_CheckFifoParam+0xe6>
      break;
 8001562:	bf00      	nop
 8001564:	e00a      	b.n	800157c <DMA_CheckFifoParam+0xe8>
      break;
 8001566:	bf00      	nop
 8001568:	e008      	b.n	800157c <DMA_CheckFifoParam+0xe8>
      break;
 800156a:	bf00      	nop
 800156c:	e006      	b.n	800157c <DMA_CheckFifoParam+0xe8>
      break;
 800156e:	bf00      	nop
 8001570:	e004      	b.n	800157c <DMA_CheckFifoParam+0xe8>
      break;
 8001572:	bf00      	nop
 8001574:	e002      	b.n	800157c <DMA_CheckFifoParam+0xe8>
      break;
 8001576:	bf00      	nop
 8001578:	e000      	b.n	800157c <DMA_CheckFifoParam+0xe8>
      break;
 800157a:	bf00      	nop
    }
  }

  return status;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop

0800158c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
 80015a6:	e159      	b.n	800185c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015a8:	2201      	movs	r2, #1
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	f040 8148 	bne.w	8001856 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d005      	beq.n	80015de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d130      	bne.n	8001640 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001614:	2201      	movs	r2, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 0201 	and.w	r2, r3, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b03      	cmp	r3, #3
 800164a:	d017      	beq.n	800167c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d123      	bne.n	80016d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	08da      	lsrs	r2, r3, #3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3208      	adds	r2, #8
 8001690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	69b9      	ldr	r1, [r7, #24]
 80016cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0203 	and.w	r2, r3, #3
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80a2 	beq.w	8001856 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b57      	ldr	r3, [pc, #348]	; (8001874 <HAL_GPIO_Init+0x2e8>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	4a56      	ldr	r2, [pc, #344]	; (8001874 <HAL_GPIO_Init+0x2e8>)
 800171c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001720:	6453      	str	r3, [r2, #68]	; 0x44
 8001722:	4b54      	ldr	r3, [pc, #336]	; (8001874 <HAL_GPIO_Init+0x2e8>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800172e:	4a52      	ldr	r2, [pc, #328]	; (8001878 <HAL_GPIO_Init+0x2ec>)
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	3302      	adds	r3, #2
 8001736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	220f      	movs	r2, #15
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a49      	ldr	r2, [pc, #292]	; (800187c <HAL_GPIO_Init+0x2f0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d019      	beq.n	800178e <HAL_GPIO_Init+0x202>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a48      	ldr	r2, [pc, #288]	; (8001880 <HAL_GPIO_Init+0x2f4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d013      	beq.n	800178a <HAL_GPIO_Init+0x1fe>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a47      	ldr	r2, [pc, #284]	; (8001884 <HAL_GPIO_Init+0x2f8>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00d      	beq.n	8001786 <HAL_GPIO_Init+0x1fa>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a46      	ldr	r2, [pc, #280]	; (8001888 <HAL_GPIO_Init+0x2fc>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d007      	beq.n	8001782 <HAL_GPIO_Init+0x1f6>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a45      	ldr	r2, [pc, #276]	; (800188c <HAL_GPIO_Init+0x300>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d101      	bne.n	800177e <HAL_GPIO_Init+0x1f2>
 800177a:	2304      	movs	r3, #4
 800177c:	e008      	b.n	8001790 <HAL_GPIO_Init+0x204>
 800177e:	2307      	movs	r3, #7
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x204>
 8001782:	2303      	movs	r3, #3
 8001784:	e004      	b.n	8001790 <HAL_GPIO_Init+0x204>
 8001786:	2302      	movs	r3, #2
 8001788:	e002      	b.n	8001790 <HAL_GPIO_Init+0x204>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_GPIO_Init+0x204>
 800178e:	2300      	movs	r3, #0
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	f002 0203 	and.w	r2, r2, #3
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	4093      	lsls	r3, r2
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a0:	4935      	ldr	r1, [pc, #212]	; (8001878 <HAL_GPIO_Init+0x2ec>)
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	089b      	lsrs	r3, r3, #2
 80017a6:	3302      	adds	r3, #2
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ae:	4b38      	ldr	r3, [pc, #224]	; (8001890 <HAL_GPIO_Init+0x304>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017d2:	4a2f      	ldr	r2, [pc, #188]	; (8001890 <HAL_GPIO_Init+0x304>)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d8:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <HAL_GPIO_Init+0x304>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017fc:	4a24      	ldr	r2, [pc, #144]	; (8001890 <HAL_GPIO_Init+0x304>)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001802:	4b23      	ldr	r3, [pc, #140]	; (8001890 <HAL_GPIO_Init+0x304>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001826:	4a1a      	ldr	r2, [pc, #104]	; (8001890 <HAL_GPIO_Init+0x304>)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <HAL_GPIO_Init+0x304>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001850:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <HAL_GPIO_Init+0x304>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3301      	adds	r3, #1
 800185a:	61fb      	str	r3, [r7, #28]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	2b0f      	cmp	r3, #15
 8001860:	f67f aea2 	bls.w	80015a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3724      	adds	r7, #36	; 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	40013800 	.word	0x40013800
 800187c:	40020000 	.word	0x40020000
 8001880:	40020400 	.word	0x40020400
 8001884:	40020800 	.word	0x40020800
 8001888:	40020c00 	.word	0x40020c00
 800188c:	40021000 	.word	0x40021000
 8001890:	40013c00 	.word	0x40013c00

08001894 <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef * hi2c) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
    uint32_t freqrange;
    uint32_t pclk1;

    /* Check the I2C handle allocation */
    if (hi2c == NULL) {
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_I2C_Init+0x12>
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e12b      	b.n	8001afe <HAL_I2C_Init+0x26a>
    assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
    assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
    assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
    assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

    if (hi2c->State == HAL_I2C_STATE_RESET) {
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d106      	bne.n	80018c0 <HAL_I2C_Init+0x2c>
        /* Allocate lock resource and initialize it */
        hi2c->Lock = HAL_UNLOCKED;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        hi2c->MspInitCallback(hi2c);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        HAL_I2C_MspInit(hi2c);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7fe fff0 	bl	80008a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2224      	movs	r2, #36	; 0x24
 80018c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0201 	bic.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

    /*Reset I2C*/
    hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018e6:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018f6:	601a      	str	r2, [r3, #0]

    /* Get PCLK1 frequency */
    pclk1 = HAL_RCC_GetPCLK1Freq();
 80018f8:	f001 ffbe 	bl	8003878 <HAL_RCC_GetPCLK1Freq>
 80018fc:	60f8      	str	r0, [r7, #12]

    /* Check the minimum allowed PCLK1 frequency */
    if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4a81      	ldr	r2, [pc, #516]	; (8001b08 <HAL_I2C_Init+0x274>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d807      	bhi.n	8001918 <HAL_I2C_Init+0x84>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4a80      	ldr	r2, [pc, #512]	; (8001b0c <HAL_I2C_Init+0x278>)
 800190c:	4293      	cmp	r3, r2
 800190e:	bf94      	ite	ls
 8001910:	2301      	movls	r3, #1
 8001912:	2300      	movhi	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	e006      	b.n	8001926 <HAL_I2C_Init+0x92>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4a7d      	ldr	r2, [pc, #500]	; (8001b10 <HAL_I2C_Init+0x27c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	bf94      	ite	ls
 8001920:	2301      	movls	r3, #1
 8001922:	2300      	movhi	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_I2C_Init+0x9a>
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e0e7      	b.n	8001afe <HAL_I2C_Init+0x26a>
    }

    /* Calculate frequency range */
    freqrange = I2C_FREQRANGE(pclk1);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4a78      	ldr	r2, [pc, #480]	; (8001b14 <HAL_I2C_Init+0x280>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	0c9b      	lsrs	r3, r3, #18
 8001938:	60bb      	str	r3, [r7, #8]

    /*---------------------------- I2Cx CR2 Configuration ----------------------*/
    /* Configure I2Cx: Frequency range */
    MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	430a      	orrs	r2, r1
 800194c:	605a      	str	r2, [r3, #4]

    /*---------------------------- I2Cx TRISE Configuration --------------------*/
    /* Configure I2Cx: Rise Time */
    MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE,
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4a6a      	ldr	r2, [pc, #424]	; (8001b08 <HAL_I2C_Init+0x274>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d802      	bhi.n	8001968 <HAL_I2C_Init+0xd4>
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	3301      	adds	r3, #1
 8001966:	e009      	b.n	800197c <HAL_I2C_Init+0xe8>
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800196e:	fb02 f303 	mul.w	r3, r2, r3
 8001972:	4a69      	ldr	r2, [pc, #420]	; (8001b18 <HAL_I2C_Init+0x284>)
 8001974:	fba2 2303 	umull	r2, r3, r2, r3
 8001978:	099b      	lsrs	r3, r3, #6
 800197a:	3301      	adds	r3, #1
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	430b      	orrs	r3, r1
 8001982:	6213      	str	r3, [r2, #32]
               I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

    /*---------------------------- I2Cx CCR Configuration ----------------------*/
    /* Configure I2Cx: Speed */
    MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR),
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800198e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	495c      	ldr	r1, [pc, #368]	; (8001b08 <HAL_I2C_Init+0x274>)
 8001998:	428b      	cmp	r3, r1
 800199a:	d819      	bhi.n	80019d0 <HAL_I2C_Init+0x13c>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1e59      	subs	r1, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80019aa:	1c59      	adds	r1, r3, #1
 80019ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019b0:	400b      	ands	r3, r1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00a      	beq.n	80019cc <HAL_I2C_Init+0x138>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	1e59      	subs	r1, r3, #1
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80019c4:	3301      	adds	r3, #1
 80019c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ca:	e051      	b.n	8001a70 <HAL_I2C_Init+0x1dc>
 80019cc:	2304      	movs	r3, #4
 80019ce:	e04f      	b.n	8001a70 <HAL_I2C_Init+0x1dc>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d111      	bne.n	80019fc <HAL_I2C_Init+0x168>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1e58      	subs	r0, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6859      	ldr	r1, [r3, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	440b      	add	r3, r1
 80019e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ea:	3301      	adds	r3, #1
 80019ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf0c      	ite	eq
 80019f4:	2301      	moveq	r3, #1
 80019f6:	2300      	movne	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	e012      	b.n	8001a22 <HAL_I2C_Init+0x18e>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	1e58      	subs	r0, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6859      	ldr	r1, [r3, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	0099      	lsls	r1, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a12:	3301      	adds	r3, #1
 8001a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bf0c      	ite	eq
 8001a1c:	2301      	moveq	r3, #1
 8001a1e:	2300      	movne	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_I2C_Init+0x196>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e022      	b.n	8001a70 <HAL_I2C_Init+0x1dc>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10e      	bne.n	8001a50 <HAL_I2C_Init+0x1bc>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1e58      	subs	r0, r3, #1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6859      	ldr	r1, [r3, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	440b      	add	r3, r1
 8001a40:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a44:	3301      	adds	r3, #1
 8001a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a4e:	e00f      	b.n	8001a70 <HAL_I2C_Init+0x1dc>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1e58      	subs	r0, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6859      	ldr	r1, [r3, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	0099      	lsls	r1, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a66:	3301      	adds	r3, #1
 8001a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	6809      	ldr	r1, [r1, #0]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61cb      	str	r3, [r1, #28]
               I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));

    /*---------------------------- I2Cx CR1 Configuration ----------------------*/
    /* Configure I2Cx: Generalcall and NoStretch mode */
    MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH),
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69da      	ldr	r2, [r3, #28]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]
               (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));

    /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
    /* Configure I2Cx: Own Address1 and addressing mode */
    MODIFY_REG(hi2c->Instance->OAR1,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6911      	ldr	r1, [r2, #16]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68d2      	ldr	r2, [r2, #12]
 8001aaa:	4311      	orrs	r1, r2
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	6093      	str	r3, [r2, #8]
               (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0),
               (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));

    /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
    /* Configure I2Cx: Dual mode and Own Address2 */
    MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2),
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	695a      	ldr	r2, [r3, #20]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	60da      	str	r2, [r3, #12]
               (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

    /* Enable the selected I2C peripheral */
    __HAL_I2C_ENABLE(hi2c);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]

    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2220      	movs	r2, #32
 8001aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	000186a0 	.word	0x000186a0
 8001b0c:	001e847f 	.word	0x001e847f
 8001b10:	003d08ff 	.word	0x003d08ff
 8001b14:	431bde83 	.word	0x431bde83
 8001b18:	10624dd3 	.word	0x10624dd3

08001b1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1e:	b08f      	sub	sp, #60	; 0x3c
 8001b20:	af0a      	add	r7, sp, #40	; 0x28
 8001b22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e10f      	b.n	8001d4e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d106      	bne.n	8001b4e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f006 fa17 	bl	8007f7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2203      	movs	r2, #3
 8001b52:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d102      	bne.n	8001b68 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f002 fcfe 	bl	800456e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	687e      	ldr	r6, [r7, #4]
 8001b7a:	466d      	mov	r5, sp
 8001b7c:	f106 0410 	add.w	r4, r6, #16
 8001b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b90:	1d33      	adds	r3, r6, #4
 8001b92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b94:	6838      	ldr	r0, [r7, #0]
 8001b96:	f002 fbd5 	bl	8004344 <USB_CoreInit>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0d0      	b.n	8001d4e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f002 fcec 	bl	8004590 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]
 8001bbc:	e04a      	b.n	8001c54 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	440b      	add	r3, r1
 8001bcc:	333d      	adds	r3, #61	; 0x3d
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bd2:	7bfa      	ldrb	r2, [r7, #15]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	333c      	adds	r3, #60	; 0x3c
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001be6:	7bfa      	ldrb	r2, [r7, #15]
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	b298      	uxth	r0, r3
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	3344      	adds	r3, #68	; 0x44
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bfe:	7bfa      	ldrb	r2, [r7, #15]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4413      	add	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	3340      	adds	r3, #64	; 0x40
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c12:	7bfa      	ldrb	r2, [r7, #15]
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	440b      	add	r3, r1
 8001c20:	3348      	adds	r3, #72	; 0x48
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c26:	7bfa      	ldrb	r2, [r7, #15]
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4413      	add	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	440b      	add	r3, r1
 8001c34:	334c      	adds	r3, #76	; 0x4c
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4413      	add	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	440b      	add	r3, r1
 8001c48:	3354      	adds	r3, #84	; 0x54
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	3301      	adds	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
 8001c54:	7bfa      	ldrb	r2, [r7, #15]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d3af      	bcc.n	8001bbe <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]
 8001c62:	e044      	b.n	8001cee <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4413      	add	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ca6:	7bfa      	ldrb	r2, [r7, #15]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4413      	add	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	440b      	add	r3, r1
 8001ce0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	3301      	adds	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d3b5      	bcc.n	8001c64 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	687e      	ldr	r6, [r7, #4]
 8001d00:	466d      	mov	r5, sp
 8001d02:	f106 0410 	add.w	r4, r6, #16
 8001d06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d12:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d16:	1d33      	adds	r3, r6, #4
 8001d18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d1a:	6838      	ldr	r0, [r7, #0]
 8001d1c:	f002 fc84 	bl	8004628 <USB_DevInit>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00d      	b.n	8001d4e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f003 fdd3 	bl	80058f2 <USB_DevDisconnect>

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d56 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_PCD_Start+0x1c>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e020      	b.n	8001db4 <HAL_PCD_Start+0x5e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d109      	bne.n	8001d96 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d005      	beq.n	8001d96 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 fbd6 	bl	800454c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f003 fd83 	bl	80058b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b08d      	sub	sp, #52	; 0x34
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 fe41 	bl	8005a5a <USB_GetMode>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f040 848a 	bne.w	80026f4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f003 fda5 	bl	8005934 <USB_ReadInterrupts>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 8480 	beq.w	80026f2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	0a1b      	lsrs	r3, r3, #8
 8001dfc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f003 fd92 	bl	8005934 <USB_ReadInterrupts>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d107      	bne.n	8001e2a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695a      	ldr	r2, [r3, #20]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f002 0202 	and.w	r2, r2, #2
 8001e28:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 fd80 	bl	8005934 <USB_ReadInterrupts>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	2b10      	cmp	r3, #16
 8001e3c:	d161      	bne.n	8001f02 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	699a      	ldr	r2, [r3, #24]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0210 	bic.w	r2, r2, #16
 8001e4c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	f003 020f 	and.w	r2, r3, #15
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4413      	add	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	0c5b      	lsrs	r3, r3, #17
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d124      	bne.n	8001ec4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d035      	beq.n	8001ef2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	6a38      	ldr	r0, [r7, #32]
 8001e9a:	f003 fbb7 	bl	800560c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	691a      	ldr	r2, [r3, #16]
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	091b      	lsrs	r3, r3, #4
 8001ea6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eaa:	441a      	add	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	6a1a      	ldr	r2, [r3, #32]
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ebc:	441a      	add	r2, r3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	621a      	str	r2, [r3, #32]
 8001ec2:	e016      	b.n	8001ef2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	0c5b      	lsrs	r3, r3, #17
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	2b06      	cmp	r3, #6
 8001ece:	d110      	bne.n	8001ef2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ed6:	2208      	movs	r2, #8
 8001ed8:	4619      	mov	r1, r3
 8001eda:	6a38      	ldr	r0, [r7, #32]
 8001edc:	f003 fb96 	bl	800560c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	6a1a      	ldr	r2, [r3, #32]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eec:	441a      	add	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	699a      	ldr	r2, [r3, #24]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 0210 	orr.w	r2, r2, #16
 8001f00:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f003 fd14 	bl	8005934 <USB_ReadInterrupts>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f16:	f040 80a7 	bne.w	8002068 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 fd19 	bl	800595a <USB_ReadDevAllOutEpInterrupt>
 8001f28:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f2a:	e099      	b.n	8002060 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 808e 	beq.w	8002054 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	4611      	mov	r1, r2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f003 fd3d 	bl	80059c2 <USB_ReadDevOutEPInterrupt>
 8001f48:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00c      	beq.n	8001f6e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f60:	461a      	mov	r2, r3
 8001f62:	2301      	movs	r3, #1
 8001f64:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fec3 	bl	8002cf4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00c      	beq.n	8001f92 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f84:	461a      	mov	r2, r3
 8001f86:	2308      	movs	r3, #8
 8001f88:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 ff99 	bl	8002ec4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa8:	461a      	mov	r2, r3
 8001faa:	2310      	movs	r3, #16
 8001fac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d030      	beq.n	800201a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc0:	2b80      	cmp	r3, #128	; 0x80
 8001fc2:	d109      	bne.n	8001fd8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fd6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4413      	add	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	3304      	adds	r3, #4
 8001fec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	78db      	ldrb	r3, [r3, #3]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d108      	bne.n	8002008 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	4619      	mov	r1, r3
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f006 f8b6 	bl	8008174 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	4413      	add	r3, r2
 8002010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002014:	461a      	mov	r2, r3
 8002016:	2302      	movs	r3, #2
 8002018:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	f003 0320 	and.w	r3, r3, #32
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	015a      	lsls	r2, r3, #5
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	4413      	add	r3, r2
 800202c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002030:	461a      	mov	r2, r3
 8002032:	2320      	movs	r3, #32
 8002034:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d009      	beq.n	8002054 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	4413      	add	r3, r2
 8002048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800204c:	461a      	mov	r2, r3
 800204e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002052:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	3301      	adds	r3, #1
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800205a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205c:	085b      	lsrs	r3, r3, #1
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002062:	2b00      	cmp	r3, #0
 8002064:	f47f af62 	bne.w	8001f2c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f003 fc61 	bl	8005934 <USB_ReadInterrupts>
 8002072:	4603      	mov	r3, r0
 8002074:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002078:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800207c:	f040 80db 	bne.w	8002236 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f003 fc82 	bl	800598e <USB_ReadDevAllInEpInterrupt>
 800208a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002090:	e0cd      	b.n	800222e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80c2 	beq.w	8002222 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f003 fca8 	bl	80059fe <USB_ReadDevInEPInterrupt>
 80020ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d057      	beq.n	800216a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	f003 030f 	and.w	r3, r3, #15
 80020c0:	2201      	movs	r2, #1
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69f9      	ldr	r1, [r7, #28]
 80020d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020da:	4013      	ands	r3, r2
 80020dc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020ea:	461a      	mov	r2, r3
 80020ec:	2301      	movs	r3, #1
 80020ee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d132      	bne.n	800215e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	334c      	adds	r3, #76	; 0x4c
 8002108:	6819      	ldr	r1, [r3, #0]
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800210e:	4613      	mov	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4403      	add	r3, r0
 8002118:	3348      	adds	r3, #72	; 0x48
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4419      	add	r1, r3
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002122:	4613      	mov	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4403      	add	r3, r0
 800212c:	334c      	adds	r3, #76	; 0x4c
 800212e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	2b00      	cmp	r3, #0
 8002134:	d113      	bne.n	800215e <HAL_PCD_IRQHandler+0x3a2>
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213a:	4613      	mov	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	440b      	add	r3, r1
 8002144:	3354      	adds	r3, #84	; 0x54
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d108      	bne.n	800215e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002156:	461a      	mov	r2, r3
 8002158:	2101      	movs	r1, #1
 800215a:	f003 fcaf 	bl	8005abc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	b2db      	uxtb	r3, r3
 8002162:	4619      	mov	r1, r3
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f005 ff8a 	bl	800807e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	4413      	add	r3, r2
 800217c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002180:	461a      	mov	r2, r3
 8002182:	2308      	movs	r3, #8
 8002184:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	4413      	add	r3, r2
 8002198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800219c:	461a      	mov	r2, r3
 800219e:	2310      	movs	r3, #16
 80021a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	015a      	lsls	r2, r3, #5
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021b8:	461a      	mov	r2, r3
 80021ba:	2340      	movs	r3, #64	; 0x40
 80021bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d023      	beq.n	8002210 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80021c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021ca:	6a38      	ldr	r0, [r7, #32]
 80021cc:	f002 fb90 	bl	80048f0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80021d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d2:	4613      	mov	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4413      	add	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	3338      	adds	r3, #56	; 0x38
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	3304      	adds	r3, #4
 80021e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	78db      	ldrb	r3, [r3, #3]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d108      	bne.n	80021fe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2200      	movs	r2, #0
 80021f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	4619      	mov	r1, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f005 ffcd 	bl	8008198 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	4413      	add	r3, r2
 8002206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800220a:	461a      	mov	r2, r3
 800220c:	2302      	movs	r3, #2
 800220e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800221a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 fcdb 	bl	8002bd8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	3301      	adds	r3, #1
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222a:	085b      	lsrs	r3, r3, #1
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002230:	2b00      	cmp	r3, #0
 8002232:	f47f af2e 	bne.w	8002092 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f003 fb7a 	bl	8005934 <USB_ReadInterrupts>
 8002240:	4603      	mov	r3, r0
 8002242:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002246:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800224a:	d122      	bne.n	8002292 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002266:	2b01      	cmp	r3, #1
 8002268:	d108      	bne.n	800227c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002272:	2100      	movs	r1, #0
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 fec3 	bl	8003000 <HAL_PCDEx_LPM_Callback>
 800227a:	e002      	b.n	8002282 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f005 ff6b 	bl	8008158 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002290:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f003 fb4c 	bl	8005934 <USB_ReadInterrupts>
 800229c:	4603      	mov	r3, r0
 800229e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022a6:	d112      	bne.n	80022ce <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d102      	bne.n	80022be <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f005 ff27 	bl	800810c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80022cc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f003 fb2e 	bl	8005934 <USB_ReadInterrupts>
 80022d8:	4603      	mov	r3, r0
 80022da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022e2:	f040 80b7 	bne.w	8002454 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	69fa      	ldr	r2, [r7, #28]
 80022f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2110      	movs	r1, #16
 8002300:	4618      	mov	r0, r3
 8002302:	f002 faf5 	bl	80048f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002306:	2300      	movs	r3, #0
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800230a:	e046      	b.n	800239a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800230c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230e:	015a      	lsls	r2, r3, #5
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	4413      	add	r3, r2
 8002314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002318:	461a      	mov	r2, r3
 800231a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800231e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	4413      	add	r3, r2
 8002328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002330:	0151      	lsls	r1, r2, #5
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	440a      	add	r2, r1
 8002336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800233a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800233e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	4413      	add	r3, r2
 8002348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800234c:	461a      	mov	r2, r3
 800234e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002352:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	4413      	add	r3, r2
 800235c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002364:	0151      	lsls	r1, r2, #5
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	440a      	add	r2, r1
 800236a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800236e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002372:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	4413      	add	r3, r2
 800237c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002384:	0151      	lsls	r1, r2, #5
 8002386:	69fa      	ldr	r2, [r7, #28]
 8002388:	440a      	add	r2, r1
 800238a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800238e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002392:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002396:	3301      	adds	r3, #1
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d3b3      	bcc.n	800230c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023b2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80023b6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d016      	beq.n	80023ee <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023d0:	f043 030b 	orr.w	r3, r3, #11
 80023d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023e6:	f043 030b 	orr.w	r3, r3, #11
 80023ea:	6453      	str	r3, [r2, #68]	; 0x44
 80023ec:	e015      	b.n	800241a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	69fa      	ldr	r2, [r7, #28]
 80023f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002400:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002404:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002414:	f043 030b 	orr.w	r3, r3, #11
 8002418:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	69fa      	ldr	r2, [r7, #28]
 8002424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002428:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800242c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800243e:	461a      	mov	r2, r3
 8002440:	f003 fb3c 	bl	8005abc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002452:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f003 fa6b 	bl	8005934 <USB_ReadInterrupts>
 800245e:	4603      	mov	r3, r0
 8002460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002468:	d124      	bne.n	80024b4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f003 fb01 	bl	8005a76 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f002 fab6 	bl	80049ea <USB_GetDevSpeed>
 800247e:	4603      	mov	r3, r0
 8002480:	461a      	mov	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681c      	ldr	r4, [r3, #0]
 800248a:	f001 f9e9 	bl	8003860 <HAL_RCC_GetHCLKFreq>
 800248e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002494:	b2db      	uxtb	r3, r3
 8002496:	461a      	mov	r2, r3
 8002498:	4620      	mov	r0, r4
 800249a:	f001 ffb5 	bl	8004408 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f005 fe15 	bl	80080ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80024b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f003 fa3b 	bl	8005934 <USB_ReadInterrupts>
 80024be:	4603      	mov	r3, r0
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d10a      	bne.n	80024de <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f005 fdf2 	bl	80080b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	695a      	ldr	r2, [r3, #20]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f002 0208 	and.w	r2, r2, #8
 80024dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f003 fa26 	bl	8005934 <USB_ReadInterrupts>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ee:	2b80      	cmp	r3, #128	; 0x80
 80024f0:	d122      	bne.n	8002538 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024fe:	2301      	movs	r3, #1
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
 8002502:	e014      	b.n	800252e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002508:	4613      	mov	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d105      	bne.n	8002528 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	b2db      	uxtb	r3, r3
 8002520:	4619      	mov	r1, r3
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 fb27 	bl	8002b76 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	3301      	adds	r3, #1
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002534:	429a      	cmp	r2, r3
 8002536:	d3e5      	bcc.n	8002504 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f003 f9f9 	bl	8005934 <USB_ReadInterrupts>
 8002542:	4603      	mov	r3, r0
 8002544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800254c:	d13b      	bne.n	80025c6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800254e:	2301      	movs	r3, #1
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
 8002552:	e02b      	b.n	80025ac <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	015a      	lsls	r2, r3, #5
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	4413      	add	r3, r2
 800255c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	3340      	adds	r3, #64	; 0x40
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d115      	bne.n	80025a6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800257a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800257c:	2b00      	cmp	r3, #0
 800257e:	da12      	bge.n	80025a6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	333f      	adds	r3, #63	; 0x3f
 8002590:	2201      	movs	r2, #1
 8002592:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800259c:	b2db      	uxtb	r3, r3
 800259e:	4619      	mov	r1, r3
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 fae8 	bl	8002b76 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	3301      	adds	r3, #1
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d3ce      	bcc.n	8002554 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80025c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f003 f9b2 	bl	8005934 <USB_ReadInterrupts>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025da:	d155      	bne.n	8002688 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025dc:	2301      	movs	r3, #1
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
 80025e0:	e045      	b.n	800266e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	015a      	lsls	r2, r3, #5
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f6:	4613      	mov	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4413      	add	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d12e      	bne.n	8002668 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800260a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800260c:	2b00      	cmp	r3, #0
 800260e:	da2b      	bge.n	8002668 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800261c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002620:	429a      	cmp	r2, r3
 8002622:	d121      	bne.n	8002668 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002636:	2201      	movs	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10a      	bne.n	8002668 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002660:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002664:	6053      	str	r3, [r2, #4]
            break;
 8002666:	e007      	b.n	8002678 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	3301      	adds	r3, #1
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002674:	429a      	cmp	r2, r3
 8002676:	d3b4      	bcc.n	80025e2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002686:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f003 f951 	bl	8005934 <USB_ReadInterrupts>
 8002692:	4603      	mov	r3, r0
 8002694:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269c:	d10a      	bne.n	80026b4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f005 fd8c 	bl	80081bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695a      	ldr	r2, [r3, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80026b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 f93b 	bl	8005934 <USB_ReadInterrupts>
 80026be:	4603      	mov	r3, r0
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d115      	bne.n	80026f4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f005 fd7c 	bl	80081d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6859      	ldr	r1, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	e000      	b.n	80026f4 <HAL_PCD_IRQHandler+0x938>
      return;
 80026f2:	bf00      	nop
    }
  }
}
 80026f4:	3734      	adds	r7, #52	; 0x34
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd90      	pop	{r4, r7, pc}

080026fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	460b      	mov	r3, r1
 8002704:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_PCD_SetAddress+0x1a>
 8002710:	2302      	movs	r3, #2
 8002712:	e013      	b.n	800273c <HAL_PCD_SetAddress+0x42>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	78fa      	ldrb	r2, [r7, #3]
 8002720:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	78fa      	ldrb	r2, [r7, #3]
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f003 f899 	bl	8005864 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	4608      	mov	r0, r1
 800274e:	4611      	mov	r1, r2
 8002750:	461a      	mov	r2, r3
 8002752:	4603      	mov	r3, r0
 8002754:	70fb      	strb	r3, [r7, #3]
 8002756:	460b      	mov	r3, r1
 8002758:	803b      	strh	r3, [r7, #0]
 800275a:	4613      	mov	r3, r2
 800275c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002762:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002766:	2b00      	cmp	r3, #0
 8002768:	da0f      	bge.n	800278a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	f003 020f 	and.w	r2, r3, #15
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	3338      	adds	r3, #56	; 0x38
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	3304      	adds	r3, #4
 8002780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	705a      	strb	r2, [r3, #1]
 8002788:	e00f      	b.n	80027aa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	f003 020f 	and.w	r2, r3, #15
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	4413      	add	r3, r2
 80027a0:	3304      	adds	r3, #4
 80027a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027aa:	78fb      	ldrb	r3, [r7, #3]
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027b6:	883a      	ldrh	r2, [r7, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	78ba      	ldrb	r2, [r7, #2]
 80027c0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d004      	beq.n	80027d4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027d4:	78bb      	ldrb	r3, [r7, #2]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d102      	bne.n	80027e0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <HAL_PCD_EP_Open+0xaa>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e00e      	b.n	800280c <HAL_PCD_EP_Open+0xc8>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68f9      	ldr	r1, [r7, #12]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f002 f919 	bl	8004a34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800280a:	7afb      	ldrb	r3, [r7, #11]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002820:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002824:	2b00      	cmp	r3, #0
 8002826:	da0f      	bge.n	8002848 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002828:	78fb      	ldrb	r3, [r7, #3]
 800282a:	f003 020f 	and.w	r2, r3, #15
 800282e:	4613      	mov	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	3338      	adds	r3, #56	; 0x38
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	4413      	add	r3, r2
 800283c:	3304      	adds	r3, #4
 800283e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2201      	movs	r2, #1
 8002844:	705a      	strb	r2, [r3, #1]
 8002846:	e00f      	b.n	8002868 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	f003 020f 	and.w	r2, r3, #15
 800284e:	4613      	mov	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	4413      	add	r3, r2
 800285e:	3304      	adds	r3, #4
 8002860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002868:	78fb      	ldrb	r3, [r7, #3]
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	b2da      	uxtb	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_PCD_EP_Close+0x6e>
 800287e:	2302      	movs	r3, #2
 8002880:	e00e      	b.n	80028a0 <HAL_PCD_EP_Close+0x8c>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68f9      	ldr	r1, [r7, #12]
 8002890:	4618      	mov	r0, r3
 8002892:	f002 f957 	bl	8004b44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	460b      	mov	r3, r1
 80028b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028b8:	7afb      	ldrb	r3, [r7, #11]
 80028ba:	f003 020f 	and.w	r2, r3, #15
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4413      	add	r3, r2
 80028ce:	3304      	adds	r3, #4
 80028d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2200      	movs	r2, #0
 80028e2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2200      	movs	r2, #0
 80028e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028ea:	7afb      	ldrb	r3, [r7, #11]
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d102      	bne.n	8002904 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002904:	7afb      	ldrb	r3, [r7, #11]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	2b00      	cmp	r3, #0
 800290c:	d109      	bne.n	8002922 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	6979      	ldr	r1, [r7, #20]
 800291c:	f002 fc36 	bl	800518c <USB_EP0StartXfer>
 8002920:	e008      	b.n	8002934 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	6979      	ldr	r1, [r7, #20]
 8002930:	f002 f9e4 	bl	8004cfc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	460b      	mov	r3, r1
 8002948:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	f003 020f 	and.w	r2, r3, #15
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002960:	681b      	ldr	r3, [r3, #0]
}
 8002962:	4618      	mov	r0, r3
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b086      	sub	sp, #24
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
 800297a:	460b      	mov	r3, r1
 800297c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800297e:	7afb      	ldrb	r3, [r7, #11]
 8002980:	f003 020f 	and.w	r2, r3, #15
 8002984:	4613      	mov	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	4413      	add	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	3338      	adds	r3, #56	; 0x38
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4413      	add	r3, r2
 8002992:	3304      	adds	r3, #4
 8002994:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2200      	movs	r2, #0
 80029a6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2201      	movs	r2, #1
 80029ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ae:	7afb      	ldrb	r3, [r7, #11]
 80029b0:	f003 030f 	and.w	r3, r3, #15
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d102      	bne.n	80029c8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029c8:	7afb      	ldrb	r3, [r7, #11]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	6979      	ldr	r1, [r7, #20]
 80029e0:	f002 fbd4 	bl	800518c <USB_EP0StartXfer>
 80029e4:	e008      	b.n	80029f8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6818      	ldr	r0, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	6979      	ldr	r1, [r7, #20]
 80029f4:	f002 f982 	bl	8004cfc <USB_EPStartXfer>
  }

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a0e:	78fb      	ldrb	r3, [r7, #3]
 8002a10:	f003 020f 	and.w	r2, r3, #15
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d901      	bls.n	8002a20 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e050      	b.n	8002ac2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	da0f      	bge.n	8002a48 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a28:	78fb      	ldrb	r3, [r7, #3]
 8002a2a:	f003 020f 	and.w	r2, r3, #15
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	3338      	adds	r3, #56	; 0x38
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2201      	movs	r2, #1
 8002a44:	705a      	strb	r2, [r3, #1]
 8002a46:	e00d      	b.n	8002a64 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a48:	78fa      	ldrb	r2, [r7, #3]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2201      	movs	r2, #1
 8002a68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_PCD_EP_SetStall+0x82>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e01e      	b.n	8002ac2 <HAL_PCD_EP_SetStall+0xc0>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68f9      	ldr	r1, [r7, #12]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f002 fe12 	bl	80056bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10a      	bne.n	8002ab8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	b2d9      	uxtb	r1, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f003 f802 	bl	8005abc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ad6:	78fb      	ldrb	r3, [r7, #3]
 8002ad8:	f003 020f 	and.w	r2, r3, #15
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d901      	bls.n	8002ae8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e042      	b.n	8002b6e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	da0f      	bge.n	8002b10 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	f003 020f 	and.w	r2, r3, #15
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	3338      	adds	r3, #56	; 0x38
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	4413      	add	r3, r2
 8002b04:	3304      	adds	r3, #4
 8002b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	705a      	strb	r2, [r3, #1]
 8002b0e:	e00f      	b.n	8002b30 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	f003 020f 	and.w	r2, r3, #15
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	3304      	adds	r3, #4
 8002b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_PCD_EP_ClrStall+0x86>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e00e      	b.n	8002b6e <HAL_PCD_EP_ClrStall+0xa4>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68f9      	ldr	r1, [r7, #12]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f002 fe1a 	bl	8005798 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b084      	sub	sp, #16
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002b82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	da0c      	bge.n	8002ba4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b8a:	78fb      	ldrb	r3, [r7, #3]
 8002b8c:	f003 020f 	and.w	r2, r3, #15
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	3338      	adds	r3, #56	; 0x38
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	e00c      	b.n	8002bbe <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	f003 020f 	and.w	r2, r3, #15
 8002baa:	4613      	mov	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	3304      	adds	r3, #4
 8002bbc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68f9      	ldr	r1, [r7, #12]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f002 fc39 	bl	800543c <USB_EPStopXfer>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002bce:	7afb      	ldrb	r3, [r7, #11]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08a      	sub	sp, #40	; 0x28
 8002bdc:	af02      	add	r7, sp, #8
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	3338      	adds	r3, #56	; 0x38
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a1a      	ldr	r2, [r3, #32]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d901      	bls.n	8002c10 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e06c      	b.n	8002cea <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	699a      	ldr	r2, [r3, #24]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d902      	bls.n	8002c2c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	3303      	adds	r3, #3
 8002c30:	089b      	lsrs	r3, r3, #2
 8002c32:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c34:	e02b      	b.n	8002c8e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	69fa      	ldr	r2, [r7, #28]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d902      	bls.n	8002c52 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	3303      	adds	r3, #3
 8002c56:	089b      	lsrs	r3, r3, #2
 8002c58:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6919      	ldr	r1, [r3, #16]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	4603      	mov	r3, r0
 8002c70:	6978      	ldr	r0, [r7, #20]
 8002c72:	f002 fc8d 	bl	8005590 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	441a      	add	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a1a      	ldr	r2, [r3, #32]
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	441a      	add	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d809      	bhi.n	8002cb8 <PCD_WriteEmptyTxFifo+0xe0>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a1a      	ldr	r2, [r3, #32]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d203      	bcs.n	8002cb8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1be      	bne.n	8002c36 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	699a      	ldr	r2, [r3, #24]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d811      	bhi.n	8002ce8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	2201      	movs	r2, #1
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	6939      	ldr	r1, [r7, #16]
 8002ce0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3720      	adds	r7, #32
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	333c      	adds	r3, #60	; 0x3c
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d17b      	bne.n	8002e22 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d015      	beq.n	8002d60 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	4a61      	ldr	r2, [pc, #388]	; (8002ebc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	f240 80b9 	bls.w	8002eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80b3 	beq.w	8002eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d56:	461a      	mov	r2, r3
 8002d58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d5c:	6093      	str	r3, [r2, #8]
 8002d5e:	e0a7      	b.n	8002eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d009      	beq.n	8002d7e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d76:	461a      	mov	r2, r3
 8002d78:	2320      	movs	r3, #32
 8002d7a:	6093      	str	r3, [r2, #8]
 8002d7c:	e098      	b.n	8002eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f040 8093 	bne.w	8002eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	4a4b      	ldr	r2, [pc, #300]	; (8002ebc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d90f      	bls.n	8002db2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00a      	beq.n	8002db2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	015a      	lsls	r2, r3, #5
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002da8:	461a      	mov	r2, r3
 8002daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dae:	6093      	str	r3, [r2, #8]
 8002db0:	e07e      	b.n	8002eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	4613      	mov	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	69da      	ldr	r2, [r3, #28]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	0159      	lsls	r1, r3, #5
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	440b      	add	r3, r1
 8002dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dde:	1ad2      	subs	r2, r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d114      	bne.n	8002e14 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	2101      	movs	r1, #1
 8002e00:	f002 fe5c 	bl	8005abc <USB_EP0_OutStart>
 8002e04:	e006      	b.n	8002e14 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	441a      	add	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	4619      	mov	r1, r3
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f005 f914 	bl	8008048 <HAL_PCD_DataOutStageCallback>
 8002e20:	e046      	b.n	8002eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	4a26      	ldr	r2, [pc, #152]	; (8002ec0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d124      	bne.n	8002e74 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e40:	461a      	mov	r2, r3
 8002e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e46:	6093      	str	r3, [r2, #8]
 8002e48:	e032      	b.n	8002eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f003 0320 	and.w	r3, r3, #32
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e60:	461a      	mov	r2, r3
 8002e62:	2320      	movs	r3, #32
 8002e64:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f005 f8eb 	bl	8008048 <HAL_PCD_DataOutStageCallback>
 8002e72:	e01d      	b.n	8002eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d114      	bne.n	8002ea4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4413      	add	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d108      	bne.n	8002ea4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	f002 fe0c 	bl	8005abc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f005 f8cc 	bl	8008048 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3720      	adds	r7, #32
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	4f54300a 	.word	0x4f54300a
 8002ec0:	4f54310a 	.word	0x4f54310a

08002ec4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	333c      	adds	r3, #60	; 0x3c
 8002edc:	3304      	adds	r3, #4
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a15      	ldr	r2, [pc, #84]	; (8002f4c <PCD_EP_OutSetupPacket_int+0x88>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d90e      	bls.n	8002f18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d009      	beq.n	8002f18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f10:	461a      	mov	r2, r3
 8002f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f005 f883 	bl	8008024 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <PCD_EP_OutSetupPacket_int+0x88>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d90c      	bls.n	8002f40 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d108      	bne.n	8002f40 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	f002 fdbe 	bl	8005abc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	4f54300a 	.word	0x4f54300a

08002f50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	70fb      	strb	r3, [r7, #3]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d107      	bne.n	8002f7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f6e:	883b      	ldrh	r3, [r7, #0]
 8002f70:	0419      	lsls	r1, r3, #16
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f7c:	e028      	b.n	8002fd0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	0c1b      	lsrs	r3, r3, #16
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	4413      	add	r3, r2
 8002f8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	73fb      	strb	r3, [r7, #15]
 8002f90:	e00d      	b.n	8002fae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	3340      	adds	r3, #64	; 0x40
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	0c1b      	lsrs	r3, r3, #16
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	3301      	adds	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
 8002fae:	7bfa      	ldrb	r2, [r7, #15]
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d3ec      	bcc.n	8002f92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002fb8:	883b      	ldrh	r3, [r7, #0]
 8002fba:	0418      	lsls	r0, r3, #16
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6819      	ldr	r1, [r3, #0]
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	4302      	orrs	r2, r0
 8002fc8:	3340      	adds	r3, #64	; 0x40
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	887a      	ldrh	r2, [r7, #2]
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e267      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d075      	beq.n	8003122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003036:	4b88      	ldr	r3, [pc, #544]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b04      	cmp	r3, #4
 8003040:	d00c      	beq.n	800305c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003042:	4b85      	ldr	r3, [pc, #532]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800304a:	2b08      	cmp	r3, #8
 800304c:	d112      	bne.n	8003074 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800304e:	4b82      	ldr	r3, [pc, #520]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800305a:	d10b      	bne.n	8003074 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305c:	4b7e      	ldr	r3, [pc, #504]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d05b      	beq.n	8003120 <HAL_RCC_OscConfig+0x108>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d157      	bne.n	8003120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e242      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307c:	d106      	bne.n	800308c <HAL_RCC_OscConfig+0x74>
 800307e:	4b76      	ldr	r3, [pc, #472]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a75      	ldr	r2, [pc, #468]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e01d      	b.n	80030c8 <HAL_RCC_OscConfig+0xb0>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003094:	d10c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x98>
 8003096:	4b70      	ldr	r3, [pc, #448]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a6f      	ldr	r2, [pc, #444]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 800309c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	4b6d      	ldr	r3, [pc, #436]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a6c      	ldr	r2, [pc, #432]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 80030a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	e00b      	b.n	80030c8 <HAL_RCC_OscConfig+0xb0>
 80030b0:	4b69      	ldr	r3, [pc, #420]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a68      	ldr	r2, [pc, #416]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 80030b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	4b66      	ldr	r3, [pc, #408]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a65      	ldr	r2, [pc, #404]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 80030c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d013      	beq.n	80030f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fd ff34 	bl	8000f3c <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030d8:	f7fd ff30 	bl	8000f3c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	; 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e207      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	4b5b      	ldr	r3, [pc, #364]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0xc0>
 80030f6:	e014      	b.n	8003122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7fd ff20 	bl	8000f3c <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003100:	f7fd ff1c 	bl	8000f3c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	; 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e1f3      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003112:	4b51      	ldr	r3, [pc, #324]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0xe8>
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d063      	beq.n	80031f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800312e:	4b4a      	ldr	r3, [pc, #296]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00b      	beq.n	8003152 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313a:	4b47      	ldr	r3, [pc, #284]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003142:	2b08      	cmp	r3, #8
 8003144:	d11c      	bne.n	8003180 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003146:	4b44      	ldr	r3, [pc, #272]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d116      	bne.n	8003180 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003152:	4b41      	ldr	r3, [pc, #260]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <HAL_RCC_OscConfig+0x152>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d001      	beq.n	800316a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e1c7      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316a:	4b3b      	ldr	r3, [pc, #236]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4937      	ldr	r1, [pc, #220]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317e:	e03a      	b.n	80031f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003188:	4b34      	ldr	r3, [pc, #208]	; (800325c <HAL_RCC_OscConfig+0x244>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318e:	f7fd fed5 	bl	8000f3c <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003196:	f7fd fed1 	bl	8000f3c <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e1a8      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a8:	4b2b      	ldr	r3, [pc, #172]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b4:	4b28      	ldr	r3, [pc, #160]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4925      	ldr	r1, [pc, #148]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]
 80031c8:	e015      	b.n	80031f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ca:	4b24      	ldr	r3, [pc, #144]	; (800325c <HAL_RCC_OscConfig+0x244>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fd feb4 	bl	8000f3c <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031d8:	f7fd feb0 	bl	8000f3c <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e187      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ea:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d036      	beq.n	8003270 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d016      	beq.n	8003238 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320a:	4b15      	ldr	r3, [pc, #84]	; (8003260 <HAL_RCC_OscConfig+0x248>)
 800320c:	2201      	movs	r2, #1
 800320e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7fd fe94 	bl	8000f3c <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003218:	f7fd fe90 	bl	8000f3c <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e167      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322a:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 800322c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0x200>
 8003236:	e01b      	b.n	8003270 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003238:	4b09      	ldr	r3, [pc, #36]	; (8003260 <HAL_RCC_OscConfig+0x248>)
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323e:	f7fd fe7d 	bl	8000f3c <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003244:	e00e      	b.n	8003264 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003246:	f7fd fe79 	bl	8000f3c <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d907      	bls.n	8003264 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e150      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
 8003258:	40023800 	.word	0x40023800
 800325c:	42470000 	.word	0x42470000
 8003260:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003264:	4b88      	ldr	r3, [pc, #544]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1ea      	bne.n	8003246 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 8097 	beq.w	80033ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800327e:	2300      	movs	r3, #0
 8003280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003282:	4b81      	ldr	r3, [pc, #516]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10f      	bne.n	80032ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	4b7d      	ldr	r3, [pc, #500]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	4a7c      	ldr	r2, [pc, #496]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800329c:	6413      	str	r3, [r2, #64]	; 0x40
 800329e:	4b7a      	ldr	r3, [pc, #488]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032aa:	2301      	movs	r3, #1
 80032ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ae:	4b77      	ldr	r3, [pc, #476]	; (800348c <HAL_RCC_OscConfig+0x474>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d118      	bne.n	80032ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ba:	4b74      	ldr	r3, [pc, #464]	; (800348c <HAL_RCC_OscConfig+0x474>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a73      	ldr	r2, [pc, #460]	; (800348c <HAL_RCC_OscConfig+0x474>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c6:	f7fd fe39 	bl	8000f3c <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ce:	f7fd fe35 	bl	8000f3c <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e10c      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e0:	4b6a      	ldr	r3, [pc, #424]	; (800348c <HAL_RCC_OscConfig+0x474>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d106      	bne.n	8003302 <HAL_RCC_OscConfig+0x2ea>
 80032f4:	4b64      	ldr	r3, [pc, #400]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	4a63      	ldr	r2, [pc, #396]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003300:	e01c      	b.n	800333c <HAL_RCC_OscConfig+0x324>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b05      	cmp	r3, #5
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0x30c>
 800330a:	4b5f      	ldr	r3, [pc, #380]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	4a5e      	ldr	r2, [pc, #376]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003310:	f043 0304 	orr.w	r3, r3, #4
 8003314:	6713      	str	r3, [r2, #112]	; 0x70
 8003316:	4b5c      	ldr	r3, [pc, #368]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331a:	4a5b      	ldr	r2, [pc, #364]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	6713      	str	r3, [r2, #112]	; 0x70
 8003322:	e00b      	b.n	800333c <HAL_RCC_OscConfig+0x324>
 8003324:	4b58      	ldr	r3, [pc, #352]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	4a57      	ldr	r2, [pc, #348]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	6713      	str	r3, [r2, #112]	; 0x70
 8003330:	4b55      	ldr	r3, [pc, #340]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003334:	4a54      	ldr	r2, [pc, #336]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003336:	f023 0304 	bic.w	r3, r3, #4
 800333a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d015      	beq.n	8003370 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003344:	f7fd fdfa 	bl	8000f3c <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334a:	e00a      	b.n	8003362 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800334c:	f7fd fdf6 	bl	8000f3c <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	; 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e0cb      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003362:	4b49      	ldr	r3, [pc, #292]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0ee      	beq.n	800334c <HAL_RCC_OscConfig+0x334>
 800336e:	e014      	b.n	800339a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003370:	f7fd fde4 	bl	8000f3c <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003376:	e00a      	b.n	800338e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003378:	f7fd fde0 	bl	8000f3c <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	; 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e0b5      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800338e:	4b3e      	ldr	r3, [pc, #248]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1ee      	bne.n	8003378 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800339a:	7dfb      	ldrb	r3, [r7, #23]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d105      	bne.n	80033ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a0:	4b39      	ldr	r3, [pc, #228]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	4a38      	ldr	r2, [pc, #224]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 80033a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80a1 	beq.w	80034f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033b6:	4b34      	ldr	r3, [pc, #208]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d05c      	beq.n	800347c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d141      	bne.n	800344e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ca:	4b31      	ldr	r3, [pc, #196]	; (8003490 <HAL_RCC_OscConfig+0x478>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7fd fdb4 	bl	8000f3c <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fd fdb0 	bl	8000f3c <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e087      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ea:	4b27      	ldr	r3, [pc, #156]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69da      	ldr	r2, [r3, #28]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	019b      	lsls	r3, r3, #6
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	085b      	lsrs	r3, r3, #1
 800340e:	3b01      	subs	r3, #1
 8003410:	041b      	lsls	r3, r3, #16
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	061b      	lsls	r3, r3, #24
 800341a:	491b      	ldr	r1, [pc, #108]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 800341c:	4313      	orrs	r3, r2
 800341e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003420:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <HAL_RCC_OscConfig+0x478>)
 8003422:	2201      	movs	r2, #1
 8003424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7fd fd89 	bl	8000f3c <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342e:	f7fd fd85 	bl	8000f3c <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e05c      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x416>
 800344c:	e054      	b.n	80034f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344e:	4b10      	ldr	r3, [pc, #64]	; (8003490 <HAL_RCC_OscConfig+0x478>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fd fd72 	bl	8000f3c <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345c:	f7fd fd6e 	bl	8000f3c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e045      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x444>
 800347a:	e03d      	b.n	80034f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d107      	bne.n	8003494 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e038      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
 8003488:	40023800 	.word	0x40023800
 800348c:	40007000 	.word	0x40007000
 8003490:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003494:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <HAL_RCC_OscConfig+0x4ec>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d028      	beq.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d121      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d11a      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034c4:	4013      	ands	r3, r2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d111      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	085b      	lsrs	r3, r3, #1
 80034dc:	3b01      	subs	r3, #1
 80034de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d107      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800

08003508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0cc      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800351c:	4b68      	ldr	r3, [pc, #416]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d90c      	bls.n	8003544 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352a:	4b65      	ldr	r3, [pc, #404]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b63      	ldr	r3, [pc, #396]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0b8      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800355c:	4b59      	ldr	r3, [pc, #356]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a58      	ldr	r2, [pc, #352]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003566:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003574:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4a52      	ldr	r2, [pc, #328]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800357e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b50      	ldr	r3, [pc, #320]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	494d      	ldr	r1, [pc, #308]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d044      	beq.n	8003628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	4b47      	ldr	r3, [pc, #284]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d119      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e07f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d003      	beq.n	80035c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d107      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c6:	4b3f      	ldr	r3, [pc, #252]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e06f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d6:	4b3b      	ldr	r3, [pc, #236]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e067      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035e6:	4b37      	ldr	r3, [pc, #220]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f023 0203 	bic.w	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	4934      	ldr	r1, [pc, #208]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f8:	f7fd fca0 	bl	8000f3c <HAL_GetTick>
 80035fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003600:	f7fd fc9c 	bl	8000f3c <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	; 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e04f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003616:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 020c 	and.w	r2, r3, #12
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	429a      	cmp	r2, r3
 8003626:	d1eb      	bne.n	8003600 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003628:	4b25      	ldr	r3, [pc, #148]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d20c      	bcs.n	8003650 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003636:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800363e:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e032      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800365c:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4916      	ldr	r1, [pc, #88]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	4313      	orrs	r3, r2
 800366c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	490e      	ldr	r1, [pc, #56]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800368e:	f000 f821 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8003692:	4602      	mov	r2, r0
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	490a      	ldr	r1, [pc, #40]	; (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 80036a0:	5ccb      	ldrb	r3, [r1, r3]
 80036a2:	fa22 f303 	lsr.w	r3, r2, r3
 80036a6:	4a09      	ldr	r2, [pc, #36]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 80036a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036aa:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <HAL_RCC_ClockConfig+0x1c8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fd fc00 	bl	8000eb4 <HAL_InitTick>

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40023c00 	.word	0x40023c00
 80036c4:	40023800 	.word	0x40023800
 80036c8:	08008f6c 	.word	0x08008f6c
 80036cc:	20000000 	.word	0x20000000
 80036d0:	20000014 	.word	0x20000014

080036d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036d8:	b090      	sub	sp, #64	; 0x40
 80036da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	637b      	str	r3, [r7, #52]	; 0x34
 80036e0:	2300      	movs	r3, #0
 80036e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036e4:	2300      	movs	r3, #0
 80036e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ec:	4b59      	ldr	r3, [pc, #356]	; (8003854 <HAL_RCC_GetSysClockFreq+0x180>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d00d      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x40>
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	f200 80a1 	bhi.w	8003840 <HAL_RCC_GetSysClockFreq+0x16c>
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x34>
 8003702:	2b04      	cmp	r3, #4
 8003704:	d003      	beq.n	800370e <HAL_RCC_GetSysClockFreq+0x3a>
 8003706:	e09b      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003708:	4b53      	ldr	r3, [pc, #332]	; (8003858 <HAL_RCC_GetSysClockFreq+0x184>)
 800370a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800370c:	e09b      	b.n	8003846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800370e:	4b53      	ldr	r3, [pc, #332]	; (800385c <HAL_RCC_GetSysClockFreq+0x188>)
 8003710:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003712:	e098      	b.n	8003846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003714:	4b4f      	ldr	r3, [pc, #316]	; (8003854 <HAL_RCC_GetSysClockFreq+0x180>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800371c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800371e:	4b4d      	ldr	r3, [pc, #308]	; (8003854 <HAL_RCC_GetSysClockFreq+0x180>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d028      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800372a:	4b4a      	ldr	r3, [pc, #296]	; (8003854 <HAL_RCC_GetSysClockFreq+0x180>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	099b      	lsrs	r3, r3, #6
 8003730:	2200      	movs	r2, #0
 8003732:	623b      	str	r3, [r7, #32]
 8003734:	627a      	str	r2, [r7, #36]	; 0x24
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800373c:	2100      	movs	r1, #0
 800373e:	4b47      	ldr	r3, [pc, #284]	; (800385c <HAL_RCC_GetSysClockFreq+0x188>)
 8003740:	fb03 f201 	mul.w	r2, r3, r1
 8003744:	2300      	movs	r3, #0
 8003746:	fb00 f303 	mul.w	r3, r0, r3
 800374a:	4413      	add	r3, r2
 800374c:	4a43      	ldr	r2, [pc, #268]	; (800385c <HAL_RCC_GetSysClockFreq+0x188>)
 800374e:	fba0 1202 	umull	r1, r2, r0, r2
 8003752:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003754:	460a      	mov	r2, r1
 8003756:	62ba      	str	r2, [r7, #40]	; 0x28
 8003758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800375a:	4413      	add	r3, r2
 800375c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800375e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003760:	2200      	movs	r2, #0
 8003762:	61bb      	str	r3, [r7, #24]
 8003764:	61fa      	str	r2, [r7, #28]
 8003766:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800376a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800376e:	f7fc fd8f 	bl	8000290 <__aeabi_uldivmod>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	4613      	mov	r3, r2
 8003778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800377a:	e053      	b.n	8003824 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800377c:	4b35      	ldr	r3, [pc, #212]	; (8003854 <HAL_RCC_GetSysClockFreq+0x180>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	099b      	lsrs	r3, r3, #6
 8003782:	2200      	movs	r2, #0
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	617a      	str	r2, [r7, #20]
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800378e:	f04f 0b00 	mov.w	fp, #0
 8003792:	4652      	mov	r2, sl
 8003794:	465b      	mov	r3, fp
 8003796:	f04f 0000 	mov.w	r0, #0
 800379a:	f04f 0100 	mov.w	r1, #0
 800379e:	0159      	lsls	r1, r3, #5
 80037a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037a4:	0150      	lsls	r0, r2, #5
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	ebb2 080a 	subs.w	r8, r2, sl
 80037ae:	eb63 090b 	sbc.w	r9, r3, fp
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037c6:	ebb2 0408 	subs.w	r4, r2, r8
 80037ca:	eb63 0509 	sbc.w	r5, r3, r9
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	00eb      	lsls	r3, r5, #3
 80037d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037dc:	00e2      	lsls	r2, r4, #3
 80037de:	4614      	mov	r4, r2
 80037e0:	461d      	mov	r5, r3
 80037e2:	eb14 030a 	adds.w	r3, r4, sl
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	eb45 030b 	adc.w	r3, r5, fp
 80037ec:	607b      	str	r3, [r7, #4]
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037fa:	4629      	mov	r1, r5
 80037fc:	028b      	lsls	r3, r1, #10
 80037fe:	4621      	mov	r1, r4
 8003800:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003804:	4621      	mov	r1, r4
 8003806:	028a      	lsls	r2, r1, #10
 8003808:	4610      	mov	r0, r2
 800380a:	4619      	mov	r1, r3
 800380c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800380e:	2200      	movs	r2, #0
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	60fa      	str	r2, [r7, #12]
 8003814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003818:	f7fc fd3a 	bl	8000290 <__aeabi_uldivmod>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4613      	mov	r3, r2
 8003822:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <HAL_RCC_GetSysClockFreq+0x180>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	0c1b      	lsrs	r3, r3, #16
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	3301      	adds	r3, #1
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003834:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003838:	fbb2 f3f3 	udiv	r3, r2, r3
 800383c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800383e:	e002      	b.n	8003846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003840:	4b05      	ldr	r3, [pc, #20]	; (8003858 <HAL_RCC_GetSysClockFreq+0x184>)
 8003842:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003848:	4618      	mov	r0, r3
 800384a:	3740      	adds	r7, #64	; 0x40
 800384c:	46bd      	mov	sp, r7
 800384e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003852:	bf00      	nop
 8003854:	40023800 	.word	0x40023800
 8003858:	00f42400 	.word	0x00f42400
 800385c:	017d7840 	.word	0x017d7840

08003860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003864:	4b03      	ldr	r3, [pc, #12]	; (8003874 <HAL_RCC_GetHCLKFreq+0x14>)
 8003866:	681b      	ldr	r3, [r3, #0]
}
 8003868:	4618      	mov	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20000000 	.word	0x20000000

08003878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800387c:	f7ff fff0 	bl	8003860 <HAL_RCC_GetHCLKFreq>
 8003880:	4602      	mov	r2, r0
 8003882:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	0a9b      	lsrs	r3, r3, #10
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	4903      	ldr	r1, [pc, #12]	; (800389c <HAL_RCC_GetPCLK1Freq+0x24>)
 800388e:	5ccb      	ldrb	r3, [r1, r3]
 8003890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003894:	4618      	mov	r0, r3
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40023800 	.word	0x40023800
 800389c:	08008f7c 	.word	0x08008f7c

080038a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038a4:	f7ff ffdc 	bl	8003860 <HAL_RCC_GetHCLKFreq>
 80038a8:	4602      	mov	r2, r0
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	0b5b      	lsrs	r3, r3, #13
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	4903      	ldr	r1, [pc, #12]	; (80038c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038b6:	5ccb      	ldrb	r3, [r1, r3]
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038bc:	4618      	mov	r0, r3
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40023800 	.word	0x40023800
 80038c4:	08008f7c 	.word	0x08008f7c

080038c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e03f      	b.n	800395a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fd f81e 	bl	8000930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2224      	movs	r2, #36	; 0x24
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800390a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 faa5 	bl	8003e5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003920:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695a      	ldr	r2, [r3, #20]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003930:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003940:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b084      	sub	sp, #16
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	4613      	mov	r3, r2
 800396e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b20      	cmp	r3, #32
 800397a:	d11d      	bne.n	80039b8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_UART_Receive_DMA+0x26>
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e016      	b.n	80039ba <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_UART_Receive_DMA+0x38>
 8003996:	2302      	movs	r3, #2
 8003998:	e00f      	b.n	80039ba <HAL_UART_Receive_DMA+0x58>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80039a8:	88fb      	ldrh	r3, [r7, #6]
 80039aa:	461a      	mov	r2, r3
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f92a 	bl	8003c08 <UART_Start_Receive_DMA>
 80039b4:	4603      	mov	r3, r0
 80039b6:	e000      	b.n	80039ba <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80039b8:	2302      	movs	r3, #2
  }
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	460b      	mov	r3, r1
 8003a08:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b09c      	sub	sp, #112	; 0x70
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d172      	bne.n	8003b18 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a34:	2200      	movs	r2, #0
 8003a36:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	330c      	adds	r3, #12
 8003a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a42:	e853 3f00 	ldrex	r3, [r3]
 8003a46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	330c      	adds	r3, #12
 8003a56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a58:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a5a:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a60:	e841 2300 	strex	r3, r2, [r1]
 8003a64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1e5      	bne.n	8003a38 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3314      	adds	r3, #20
 8003a72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a76:	e853 3f00 	ldrex	r3, [r3]
 8003a7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7e:	f023 0301 	bic.w	r3, r3, #1
 8003a82:	667b      	str	r3, [r7, #100]	; 0x64
 8003a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3314      	adds	r3, #20
 8003a8a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003a8c:	647a      	str	r2, [r7, #68]	; 0x44
 8003a8e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a94:	e841 2300 	strex	r3, r2, [r1]
 8003a98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e5      	bne.n	8003a6c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3314      	adds	r3, #20
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
 8003aae:	623b      	str	r3, [r7, #32]
   return(result);
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab6:	663b      	str	r3, [r7, #96]	; 0x60
 8003ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3314      	adds	r3, #20
 8003abe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ac0:	633a      	str	r2, [r7, #48]	; 0x30
 8003ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ac8:	e841 2300 	strex	r3, r2, [r1]
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e5      	bne.n	8003aa0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d119      	bne.n	8003b18 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	330c      	adds	r3, #12
 8003aea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	e853 3f00 	ldrex	r3, [r3]
 8003af2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f023 0310 	bic.w	r3, r3, #16
 8003afa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	330c      	adds	r3, #12
 8003b02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b04:	61fa      	str	r2, [r7, #28]
 8003b06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b08:	69b9      	ldr	r1, [r7, #24]
 8003b0a:	69fa      	ldr	r2, [r7, #28]
 8003b0c:	e841 2300 	strex	r3, r2, [r1]
 8003b10:	617b      	str	r3, [r7, #20]
   return(result);
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1e5      	bne.n	8003ae4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d106      	bne.n	8003b2e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b24:	4619      	mov	r1, r3
 8003b26:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003b28:	f7ff ff69 	bl	80039fe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b2c:	e002      	b.n	8003b34 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003b2e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003b30:	f7ff ff47 	bl	80039c2 <HAL_UART_RxCpltCallback>
}
 8003b34:	bf00      	nop
 8003b36:	3770      	adds	r7, #112	; 0x70
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d108      	bne.n	8003b64 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b56:	085b      	lsrs	r3, r3, #1
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f7ff ff4e 	bl	80039fe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b62:	e002      	b.n	8003b6a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f7ff ff36 	bl	80039d6 <HAL_UART_RxHalfCpltCallback>
}
 8003b6a:	bf00      	nop
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b82:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	2b80      	cmp	r3, #128	; 0x80
 8003b90:	bf0c      	ite	eq
 8003b92:	2301      	moveq	r3, #1
 8003b94:	2300      	movne	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b21      	cmp	r3, #33	; 0x21
 8003ba4:	d108      	bne.n	8003bb8 <UART_DMAError+0x46>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003bb2:	68b8      	ldr	r0, [r7, #8]
 8003bb4:	f000 f8c6 	bl	8003d44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc2:	2b40      	cmp	r3, #64	; 0x40
 8003bc4:	bf0c      	ite	eq
 8003bc6:	2301      	moveq	r3, #1
 8003bc8:	2300      	movne	r3, #0
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b22      	cmp	r3, #34	; 0x22
 8003bd8:	d108      	bne.n	8003bec <UART_DMAError+0x7a>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2200      	movs	r2, #0
 8003be4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003be6:	68b8      	ldr	r0, [r7, #8]
 8003be8:	f000 f8d4 	bl	8003d94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	f043 0210 	orr.w	r2, r3, #16
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bf8:	68b8      	ldr	r0, [r7, #8]
 8003bfa:	f7ff fef6 	bl	80039ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bfe:	bf00      	nop
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b098      	sub	sp, #96	; 0x60
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	4613      	mov	r3, r2
 8003c14:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	88fa      	ldrh	r2, [r7, #6]
 8003c20:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2222      	movs	r2, #34	; 0x22
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	4a40      	ldr	r2, [pc, #256]	; (8003d38 <UART_Start_Receive_DMA+0x130>)
 8003c36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3c:	4a3f      	ldr	r2, [pc, #252]	; (8003d3c <UART_Start_Receive_DMA+0x134>)
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	4a3e      	ldr	r2, [pc, #248]	; (8003d40 <UART_Start_Receive_DMA+0x138>)
 8003c46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003c50:	f107 0308 	add.w	r3, r7, #8
 8003c54:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4619      	mov	r1, r3
 8003c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	f7fd fb58 	bl	800131c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d019      	beq.n	8003cc6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	330c      	adds	r3, #12
 8003c98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	330c      	adds	r3, #12
 8003cb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cb2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003cb4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003cb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cba:	e841 2300 	strex	r3, r2, [r1]
 8003cbe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1e5      	bne.n	8003c92 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3314      	adds	r3, #20
 8003ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	657b      	str	r3, [r7, #84]	; 0x54
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3314      	adds	r3, #20
 8003ce4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ce6:	63ba      	str	r2, [r7, #56]	; 0x38
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e5      	bne.n	8003cc6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3314      	adds	r3, #20
 8003d00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	617b      	str	r3, [r7, #20]
   return(result);
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d10:	653b      	str	r3, [r7, #80]	; 0x50
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3314      	adds	r3, #20
 8003d18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d1a:	627a      	str	r2, [r7, #36]	; 0x24
 8003d1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6a39      	ldr	r1, [r7, #32]
 8003d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e5      	bne.n	8003cfa <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3760      	adds	r7, #96	; 0x60
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	08003a17 	.word	0x08003a17
 8003d3c:	08003b3d 	.word	0x08003b3d
 8003d40:	08003b73 	.word	0x08003b73

08003d44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b089      	sub	sp, #36	; 0x24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	330c      	adds	r3, #12
 8003d52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	e853 3f00 	ldrex	r3, [r3]
 8003d5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d62:	61fb      	str	r3, [r7, #28]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	330c      	adds	r3, #12
 8003d6a:	69fa      	ldr	r2, [r7, #28]
 8003d6c:	61ba      	str	r2, [r7, #24]
 8003d6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	6979      	ldr	r1, [r7, #20]
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	e841 2300 	strex	r3, r2, [r1]
 8003d78:	613b      	str	r3, [r7, #16]
   return(result);
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e5      	bne.n	8003d4c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003d88:	bf00      	nop
 8003d8a:	3724      	adds	r7, #36	; 0x24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b095      	sub	sp, #84	; 0x54
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	330c      	adds	r3, #12
 8003da2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	330c      	adds	r3, #12
 8003dba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dbc:	643a      	str	r2, [r7, #64]	; 0x40
 8003dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003dc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e5      	bne.n	8003d9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3314      	adds	r3, #20
 8003dd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	61fb      	str	r3, [r7, #28]
   return(result);
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f023 0301 	bic.w	r3, r3, #1
 8003de6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3314      	adds	r3, #20
 8003dee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003df0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003df8:	e841 2300 	strex	r3, r2, [r1]
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e5      	bne.n	8003dd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d119      	bne.n	8003e40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	330c      	adds	r3, #12
 8003e12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f023 0310 	bic.w	r3, r3, #16
 8003e22:	647b      	str	r3, [r7, #68]	; 0x44
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	330c      	adds	r3, #12
 8003e2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e2c:	61ba      	str	r2, [r7, #24]
 8003e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	6979      	ldr	r1, [r7, #20]
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	613b      	str	r3, [r7, #16]
   return(result);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e5      	bne.n	8003e0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e4e:	bf00      	nop
 8003e50:	3754      	adds	r7, #84	; 0x54
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
	...

08003e5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e60:	b0c0      	sub	sp, #256	; 0x100
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e78:	68d9      	ldr	r1, [r3, #12]
 8003e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	ea40 0301 	orr.w	r3, r0, r1
 8003e84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003eb4:	f021 010c 	bic.w	r1, r1, #12
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed6:	6999      	ldr	r1, [r3, #24]
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	ea40 0301 	orr.w	r3, r0, r1
 8003ee2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	4b8f      	ldr	r3, [pc, #572]	; (8004128 <UART_SetConfig+0x2cc>)
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d005      	beq.n	8003efc <UART_SetConfig+0xa0>
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	4b8d      	ldr	r3, [pc, #564]	; (800412c <UART_SetConfig+0x2d0>)
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d104      	bne.n	8003f06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003efc:	f7ff fcd0 	bl	80038a0 <HAL_RCC_GetPCLK2Freq>
 8003f00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f04:	e003      	b.n	8003f0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f06:	f7ff fcb7 	bl	8003878 <HAL_RCC_GetPCLK1Freq>
 8003f0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f18:	f040 810c 	bne.w	8004134 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f20:	2200      	movs	r2, #0
 8003f22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f2e:	4622      	mov	r2, r4
 8003f30:	462b      	mov	r3, r5
 8003f32:	1891      	adds	r1, r2, r2
 8003f34:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f36:	415b      	adcs	r3, r3
 8003f38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f3e:	4621      	mov	r1, r4
 8003f40:	eb12 0801 	adds.w	r8, r2, r1
 8003f44:	4629      	mov	r1, r5
 8003f46:	eb43 0901 	adc.w	r9, r3, r1
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f5e:	4690      	mov	r8, r2
 8003f60:	4699      	mov	r9, r3
 8003f62:	4623      	mov	r3, r4
 8003f64:	eb18 0303 	adds.w	r3, r8, r3
 8003f68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f6c:	462b      	mov	r3, r5
 8003f6e:	eb49 0303 	adc.w	r3, r9, r3
 8003f72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	18db      	adds	r3, r3, r3
 8003f8e:	653b      	str	r3, [r7, #80]	; 0x50
 8003f90:	4613      	mov	r3, r2
 8003f92:	eb42 0303 	adc.w	r3, r2, r3
 8003f96:	657b      	str	r3, [r7, #84]	; 0x54
 8003f98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fa0:	f7fc f976 	bl	8000290 <__aeabi_uldivmod>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4b61      	ldr	r3, [pc, #388]	; (8004130 <UART_SetConfig+0x2d4>)
 8003faa:	fba3 2302 	umull	r2, r3, r3, r2
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	011c      	lsls	r4, r3, #4
 8003fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003fc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003fc4:	4642      	mov	r2, r8
 8003fc6:	464b      	mov	r3, r9
 8003fc8:	1891      	adds	r1, r2, r2
 8003fca:	64b9      	str	r1, [r7, #72]	; 0x48
 8003fcc:	415b      	adcs	r3, r3
 8003fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fd4:	4641      	mov	r1, r8
 8003fd6:	eb12 0a01 	adds.w	sl, r2, r1
 8003fda:	4649      	mov	r1, r9
 8003fdc:	eb43 0b01 	adc.w	fp, r3, r1
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ff0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ff4:	4692      	mov	sl, r2
 8003ff6:	469b      	mov	fp, r3
 8003ff8:	4643      	mov	r3, r8
 8003ffa:	eb1a 0303 	adds.w	r3, sl, r3
 8003ffe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004002:	464b      	mov	r3, r9
 8004004:	eb4b 0303 	adc.w	r3, fp, r3
 8004008:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800400c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004018:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800401c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004020:	460b      	mov	r3, r1
 8004022:	18db      	adds	r3, r3, r3
 8004024:	643b      	str	r3, [r7, #64]	; 0x40
 8004026:	4613      	mov	r3, r2
 8004028:	eb42 0303 	adc.w	r3, r2, r3
 800402c:	647b      	str	r3, [r7, #68]	; 0x44
 800402e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004032:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004036:	f7fc f92b 	bl	8000290 <__aeabi_uldivmod>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4611      	mov	r1, r2
 8004040:	4b3b      	ldr	r3, [pc, #236]	; (8004130 <UART_SetConfig+0x2d4>)
 8004042:	fba3 2301 	umull	r2, r3, r3, r1
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	2264      	movs	r2, #100	; 0x64
 800404a:	fb02 f303 	mul.w	r3, r2, r3
 800404e:	1acb      	subs	r3, r1, r3
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004056:	4b36      	ldr	r3, [pc, #216]	; (8004130 <UART_SetConfig+0x2d4>)
 8004058:	fba3 2302 	umull	r2, r3, r3, r2
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004064:	441c      	add	r4, r3
 8004066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800406a:	2200      	movs	r2, #0
 800406c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004070:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004074:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004078:	4642      	mov	r2, r8
 800407a:	464b      	mov	r3, r9
 800407c:	1891      	adds	r1, r2, r2
 800407e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004080:	415b      	adcs	r3, r3
 8004082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004084:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004088:	4641      	mov	r1, r8
 800408a:	1851      	adds	r1, r2, r1
 800408c:	6339      	str	r1, [r7, #48]	; 0x30
 800408e:	4649      	mov	r1, r9
 8004090:	414b      	adcs	r3, r1
 8004092:	637b      	str	r3, [r7, #52]	; 0x34
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040a0:	4659      	mov	r1, fp
 80040a2:	00cb      	lsls	r3, r1, #3
 80040a4:	4651      	mov	r1, sl
 80040a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040aa:	4651      	mov	r1, sl
 80040ac:	00ca      	lsls	r2, r1, #3
 80040ae:	4610      	mov	r0, r2
 80040b0:	4619      	mov	r1, r3
 80040b2:	4603      	mov	r3, r0
 80040b4:	4642      	mov	r2, r8
 80040b6:	189b      	adds	r3, r3, r2
 80040b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040bc:	464b      	mov	r3, r9
 80040be:	460a      	mov	r2, r1
 80040c0:	eb42 0303 	adc.w	r3, r2, r3
 80040c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040dc:	460b      	mov	r3, r1
 80040de:	18db      	adds	r3, r3, r3
 80040e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040e2:	4613      	mov	r3, r2
 80040e4:	eb42 0303 	adc.w	r3, r2, r3
 80040e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80040f2:	f7fc f8cd 	bl	8000290 <__aeabi_uldivmod>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4b0d      	ldr	r3, [pc, #52]	; (8004130 <UART_SetConfig+0x2d4>)
 80040fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	2164      	movs	r1, #100	; 0x64
 8004104:	fb01 f303 	mul.w	r3, r1, r3
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	3332      	adds	r3, #50	; 0x32
 800410e:	4a08      	ldr	r2, [pc, #32]	; (8004130 <UART_SetConfig+0x2d4>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	f003 0207 	and.w	r2, r3, #7
 800411a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4422      	add	r2, r4
 8004122:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004124:	e106      	b.n	8004334 <UART_SetConfig+0x4d8>
 8004126:	bf00      	nop
 8004128:	40011000 	.word	0x40011000
 800412c:	40011400 	.word	0x40011400
 8004130:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004138:	2200      	movs	r2, #0
 800413a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800413e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004142:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004146:	4642      	mov	r2, r8
 8004148:	464b      	mov	r3, r9
 800414a:	1891      	adds	r1, r2, r2
 800414c:	6239      	str	r1, [r7, #32]
 800414e:	415b      	adcs	r3, r3
 8004150:	627b      	str	r3, [r7, #36]	; 0x24
 8004152:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004156:	4641      	mov	r1, r8
 8004158:	1854      	adds	r4, r2, r1
 800415a:	4649      	mov	r1, r9
 800415c:	eb43 0501 	adc.w	r5, r3, r1
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	00eb      	lsls	r3, r5, #3
 800416a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800416e:	00e2      	lsls	r2, r4, #3
 8004170:	4614      	mov	r4, r2
 8004172:	461d      	mov	r5, r3
 8004174:	4643      	mov	r3, r8
 8004176:	18e3      	adds	r3, r4, r3
 8004178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800417c:	464b      	mov	r3, r9
 800417e:	eb45 0303 	adc.w	r3, r5, r3
 8004182:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004192:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041a2:	4629      	mov	r1, r5
 80041a4:	008b      	lsls	r3, r1, #2
 80041a6:	4621      	mov	r1, r4
 80041a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ac:	4621      	mov	r1, r4
 80041ae:	008a      	lsls	r2, r1, #2
 80041b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041b4:	f7fc f86c 	bl	8000290 <__aeabi_uldivmod>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	4b60      	ldr	r3, [pc, #384]	; (8004340 <UART_SetConfig+0x4e4>)
 80041be:	fba3 2302 	umull	r2, r3, r3, r2
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	011c      	lsls	r4, r3, #4
 80041c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041ca:	2200      	movs	r2, #0
 80041cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80041d8:	4642      	mov	r2, r8
 80041da:	464b      	mov	r3, r9
 80041dc:	1891      	adds	r1, r2, r2
 80041de:	61b9      	str	r1, [r7, #24]
 80041e0:	415b      	adcs	r3, r3
 80041e2:	61fb      	str	r3, [r7, #28]
 80041e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041e8:	4641      	mov	r1, r8
 80041ea:	1851      	adds	r1, r2, r1
 80041ec:	6139      	str	r1, [r7, #16]
 80041ee:	4649      	mov	r1, r9
 80041f0:	414b      	adcs	r3, r1
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004200:	4659      	mov	r1, fp
 8004202:	00cb      	lsls	r3, r1, #3
 8004204:	4651      	mov	r1, sl
 8004206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800420a:	4651      	mov	r1, sl
 800420c:	00ca      	lsls	r2, r1, #3
 800420e:	4610      	mov	r0, r2
 8004210:	4619      	mov	r1, r3
 8004212:	4603      	mov	r3, r0
 8004214:	4642      	mov	r2, r8
 8004216:	189b      	adds	r3, r3, r2
 8004218:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800421c:	464b      	mov	r3, r9
 800421e:	460a      	mov	r2, r1
 8004220:	eb42 0303 	adc.w	r3, r2, r3
 8004224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	67bb      	str	r3, [r7, #120]	; 0x78
 8004232:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004240:	4649      	mov	r1, r9
 8004242:	008b      	lsls	r3, r1, #2
 8004244:	4641      	mov	r1, r8
 8004246:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800424a:	4641      	mov	r1, r8
 800424c:	008a      	lsls	r2, r1, #2
 800424e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004252:	f7fc f81d 	bl	8000290 <__aeabi_uldivmod>
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	4611      	mov	r1, r2
 800425c:	4b38      	ldr	r3, [pc, #224]	; (8004340 <UART_SetConfig+0x4e4>)
 800425e:	fba3 2301 	umull	r2, r3, r3, r1
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	2264      	movs	r2, #100	; 0x64
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	1acb      	subs	r3, r1, r3
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	3332      	adds	r3, #50	; 0x32
 8004270:	4a33      	ldr	r2, [pc, #204]	; (8004340 <UART_SetConfig+0x4e4>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800427c:	441c      	add	r4, r3
 800427e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004282:	2200      	movs	r2, #0
 8004284:	673b      	str	r3, [r7, #112]	; 0x70
 8004286:	677a      	str	r2, [r7, #116]	; 0x74
 8004288:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800428c:	4642      	mov	r2, r8
 800428e:	464b      	mov	r3, r9
 8004290:	1891      	adds	r1, r2, r2
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	415b      	adcs	r3, r3
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800429c:	4641      	mov	r1, r8
 800429e:	1851      	adds	r1, r2, r1
 80042a0:	6039      	str	r1, [r7, #0]
 80042a2:	4649      	mov	r1, r9
 80042a4:	414b      	adcs	r3, r1
 80042a6:	607b      	str	r3, [r7, #4]
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042b4:	4659      	mov	r1, fp
 80042b6:	00cb      	lsls	r3, r1, #3
 80042b8:	4651      	mov	r1, sl
 80042ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042be:	4651      	mov	r1, sl
 80042c0:	00ca      	lsls	r2, r1, #3
 80042c2:	4610      	mov	r0, r2
 80042c4:	4619      	mov	r1, r3
 80042c6:	4603      	mov	r3, r0
 80042c8:	4642      	mov	r2, r8
 80042ca:	189b      	adds	r3, r3, r2
 80042cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80042ce:	464b      	mov	r3, r9
 80042d0:	460a      	mov	r2, r1
 80042d2:	eb42 0303 	adc.w	r3, r2, r3
 80042d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	663b      	str	r3, [r7, #96]	; 0x60
 80042e2:	667a      	str	r2, [r7, #100]	; 0x64
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80042f0:	4649      	mov	r1, r9
 80042f2:	008b      	lsls	r3, r1, #2
 80042f4:	4641      	mov	r1, r8
 80042f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042fa:	4641      	mov	r1, r8
 80042fc:	008a      	lsls	r2, r1, #2
 80042fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004302:	f7fb ffc5 	bl	8000290 <__aeabi_uldivmod>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4b0d      	ldr	r3, [pc, #52]	; (8004340 <UART_SetConfig+0x4e4>)
 800430c:	fba3 1302 	umull	r1, r3, r3, r2
 8004310:	095b      	lsrs	r3, r3, #5
 8004312:	2164      	movs	r1, #100	; 0x64
 8004314:	fb01 f303 	mul.w	r3, r1, r3
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	3332      	adds	r3, #50	; 0x32
 800431e:	4a08      	ldr	r2, [pc, #32]	; (8004340 <UART_SetConfig+0x4e4>)
 8004320:	fba2 2303 	umull	r2, r3, r2, r3
 8004324:	095b      	lsrs	r3, r3, #5
 8004326:	f003 020f 	and.w	r2, r3, #15
 800432a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4422      	add	r2, r4
 8004332:	609a      	str	r2, [r3, #8]
}
 8004334:	bf00      	nop
 8004336:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800433a:	46bd      	mov	sp, r7
 800433c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004340:	51eb851f 	.word	0x51eb851f

08004344 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004344:	b084      	sub	sp, #16
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	f107 001c 	add.w	r0, r7, #28
 8004352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	2b01      	cmp	r3, #1
 800435a:	d122      	bne.n	80043a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004360:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004386:	2b01      	cmp	r3, #1
 8004388:	d105      	bne.n	8004396 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f001 fbee 	bl	8005b78 <USB_CoreReset>
 800439c:	4603      	mov	r3, r0
 800439e:	73fb      	strb	r3, [r7, #15]
 80043a0:	e01a      	b.n	80043d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f001 fbe2 	bl	8005b78 <USB_CoreReset>
 80043b4:	4603      	mov	r3, r0
 80043b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80043b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
 80043ca:	e005      	b.n	80043d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d10b      	bne.n	80043f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f043 0206 	orr.w	r2, r3, #6
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f043 0220 	orr.w	r2, r3, #32
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004402:	b004      	add	sp, #16
 8004404:	4770      	bx	lr
	...

08004408 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	4613      	mov	r3, r2
 8004414:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d165      	bne.n	80044e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4a41      	ldr	r2, [pc, #260]	; (8004524 <USB_SetTurnaroundTime+0x11c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d906      	bls.n	8004432 <USB_SetTurnaroundTime+0x2a>
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4a40      	ldr	r2, [pc, #256]	; (8004528 <USB_SetTurnaroundTime+0x120>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d202      	bcs.n	8004432 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800442c:	230f      	movs	r3, #15
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	e062      	b.n	80044f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	4a3c      	ldr	r2, [pc, #240]	; (8004528 <USB_SetTurnaroundTime+0x120>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d306      	bcc.n	8004448 <USB_SetTurnaroundTime+0x40>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	4a3b      	ldr	r2, [pc, #236]	; (800452c <USB_SetTurnaroundTime+0x124>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d202      	bcs.n	8004448 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004442:	230e      	movs	r3, #14
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	e057      	b.n	80044f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4a38      	ldr	r2, [pc, #224]	; (800452c <USB_SetTurnaroundTime+0x124>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d306      	bcc.n	800445e <USB_SetTurnaroundTime+0x56>
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4a37      	ldr	r2, [pc, #220]	; (8004530 <USB_SetTurnaroundTime+0x128>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d202      	bcs.n	800445e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004458:	230d      	movs	r3, #13
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	e04c      	b.n	80044f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4a33      	ldr	r2, [pc, #204]	; (8004530 <USB_SetTurnaroundTime+0x128>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d306      	bcc.n	8004474 <USB_SetTurnaroundTime+0x6c>
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	4a32      	ldr	r2, [pc, #200]	; (8004534 <USB_SetTurnaroundTime+0x12c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d802      	bhi.n	8004474 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800446e:	230c      	movs	r3, #12
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	e041      	b.n	80044f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4a2f      	ldr	r2, [pc, #188]	; (8004534 <USB_SetTurnaroundTime+0x12c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d906      	bls.n	800448a <USB_SetTurnaroundTime+0x82>
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4a2e      	ldr	r2, [pc, #184]	; (8004538 <USB_SetTurnaroundTime+0x130>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d802      	bhi.n	800448a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004484:	230b      	movs	r3, #11
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	e036      	b.n	80044f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	4a2a      	ldr	r2, [pc, #168]	; (8004538 <USB_SetTurnaroundTime+0x130>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d906      	bls.n	80044a0 <USB_SetTurnaroundTime+0x98>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	4a29      	ldr	r2, [pc, #164]	; (800453c <USB_SetTurnaroundTime+0x134>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d802      	bhi.n	80044a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800449a:	230a      	movs	r3, #10
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	e02b      	b.n	80044f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4a26      	ldr	r2, [pc, #152]	; (800453c <USB_SetTurnaroundTime+0x134>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d906      	bls.n	80044b6 <USB_SetTurnaroundTime+0xae>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4a25      	ldr	r2, [pc, #148]	; (8004540 <USB_SetTurnaroundTime+0x138>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d202      	bcs.n	80044b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80044b0:	2309      	movs	r3, #9
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	e020      	b.n	80044f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4a21      	ldr	r2, [pc, #132]	; (8004540 <USB_SetTurnaroundTime+0x138>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d306      	bcc.n	80044cc <USB_SetTurnaroundTime+0xc4>
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4a20      	ldr	r2, [pc, #128]	; (8004544 <USB_SetTurnaroundTime+0x13c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d802      	bhi.n	80044cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80044c6:	2308      	movs	r3, #8
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	e015      	b.n	80044f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4a1d      	ldr	r2, [pc, #116]	; (8004544 <USB_SetTurnaroundTime+0x13c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d906      	bls.n	80044e2 <USB_SetTurnaroundTime+0xda>
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4a1c      	ldr	r2, [pc, #112]	; (8004548 <USB_SetTurnaroundTime+0x140>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d202      	bcs.n	80044e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80044dc:	2307      	movs	r3, #7
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	e00a      	b.n	80044f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80044e2:	2306      	movs	r3, #6
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	e007      	b.n	80044f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d102      	bne.n	80044f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80044ee:	2309      	movs	r3, #9
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	e001      	b.n	80044f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80044f4:	2309      	movs	r3, #9
 80044f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	029b      	lsls	r3, r3, #10
 800450c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004510:	431a      	orrs	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	371c      	adds	r7, #28
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	00d8acbf 	.word	0x00d8acbf
 8004528:	00e4e1c0 	.word	0x00e4e1c0
 800452c:	00f42400 	.word	0x00f42400
 8004530:	01067380 	.word	0x01067380
 8004534:	011a499f 	.word	0x011a499f
 8004538:	01312cff 	.word	0x01312cff
 800453c:	014ca43f 	.word	0x014ca43f
 8004540:	016e3600 	.word	0x016e3600
 8004544:	01a6ab1f 	.word	0x01a6ab1f
 8004548:	01e84800 	.word	0x01e84800

0800454c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f043 0201 	orr.w	r2, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f023 0201 	bic.w	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045ac:	78fb      	ldrb	r3, [r7, #3]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d115      	bne.n	80045de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045be:	2001      	movs	r0, #1
 80045c0:	f7fc fcc8 	bl	8000f54 <HAL_Delay>
      ms++;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3301      	adds	r3, #1
 80045c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f001 fa45 	bl	8005a5a <USB_GetMode>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d01e      	beq.n	8004614 <USB_SetCurrentMode+0x84>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b31      	cmp	r3, #49	; 0x31
 80045da:	d9f0      	bls.n	80045be <USB_SetCurrentMode+0x2e>
 80045dc:	e01a      	b.n	8004614 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045de:	78fb      	ldrb	r3, [r7, #3]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d115      	bne.n	8004610 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045f0:	2001      	movs	r0, #1
 80045f2:	f7fc fcaf 	bl	8000f54 <HAL_Delay>
      ms++;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3301      	adds	r3, #1
 80045fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f001 fa2c 	bl	8005a5a <USB_GetMode>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <USB_SetCurrentMode+0x84>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b31      	cmp	r3, #49	; 0x31
 800460c:	d9f0      	bls.n	80045f0 <USB_SetCurrentMode+0x60>
 800460e:	e001      	b.n	8004614 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e005      	b.n	8004620 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b32      	cmp	r3, #50	; 0x32
 8004618:	d101      	bne.n	800461e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004628:	b084      	sub	sp, #16
 800462a:	b580      	push	{r7, lr}
 800462c:	b086      	sub	sp, #24
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004636:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004642:	2300      	movs	r3, #0
 8004644:	613b      	str	r3, [r7, #16]
 8004646:	e009      	b.n	800465c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	3340      	adds	r3, #64	; 0x40
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	2200      	movs	r2, #0
 8004654:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	3301      	adds	r3, #1
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b0e      	cmp	r3, #14
 8004660:	d9f2      	bls.n	8004648 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d11c      	bne.n	80046a2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004676:	f043 0302 	orr.w	r3, r3, #2
 800467a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	639a      	str	r2, [r3, #56]	; 0x38
 80046a0:	e00b      	b.n	80046ba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046c0:	461a      	mov	r2, r3
 80046c2:	2300      	movs	r3, #0
 80046c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046cc:	4619      	mov	r1, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d4:	461a      	mov	r2, r3
 80046d6:	680b      	ldr	r3, [r1, #0]
 80046d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d10c      	bne.n	80046fa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d104      	bne.n	80046f0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046e6:	2100      	movs	r1, #0
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f965 	bl	80049b8 <USB_SetDevSpeed>
 80046ee:	e008      	b.n	8004702 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046f0:	2101      	movs	r1, #1
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f960 	bl	80049b8 <USB_SetDevSpeed>
 80046f8:	e003      	b.n	8004702 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046fa:	2103      	movs	r1, #3
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f95b 	bl	80049b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004702:	2110      	movs	r1, #16
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f8f3 	bl	80048f0 <USB_FlushTxFifo>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f91f 	bl	8004958 <USB_FlushRxFifo>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472a:	461a      	mov	r2, r3
 800472c:	2300      	movs	r3, #0
 800472e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004736:	461a      	mov	r2, r3
 8004738:	2300      	movs	r3, #0
 800473a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004742:	461a      	mov	r2, r3
 8004744:	2300      	movs	r3, #0
 8004746:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	e043      	b.n	80047d6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4413      	add	r3, r2
 8004756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004764:	d118      	bne.n	8004798 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004778:	461a      	mov	r2, r3
 800477a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	e013      	b.n	80047aa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478e:	461a      	mov	r2, r3
 8004790:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	e008      	b.n	80047aa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a4:	461a      	mov	r2, r3
 80047a6:	2300      	movs	r3, #0
 80047a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b6:	461a      	mov	r2, r3
 80047b8:	2300      	movs	r3, #0
 80047ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c8:	461a      	mov	r2, r3
 80047ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	3301      	adds	r3, #1
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d3b7      	bcc.n	800474e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047de:	2300      	movs	r3, #0
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	e043      	b.n	800486c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047fa:	d118      	bne.n	800482e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10a      	bne.n	8004818 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480e:	461a      	mov	r2, r3
 8004810:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	e013      	b.n	8004840 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004824:	461a      	mov	r2, r3
 8004826:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	e008      	b.n	8004840 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483a:	461a      	mov	r2, r3
 800483c:	2300      	movs	r3, #0
 800483e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484c:	461a      	mov	r2, r3
 800484e:	2300      	movs	r3, #0
 8004850:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485e:	461a      	mov	r2, r3
 8004860:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004864:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	3301      	adds	r3, #1
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	429a      	cmp	r2, r3
 8004872:	d3b7      	bcc.n	80047e4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004882:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004886:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004894:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	2b00      	cmp	r3, #0
 800489a:	d105      	bne.n	80048a8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	f043 0210 	orr.w	r2, r3, #16
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699a      	ldr	r2, [r3, #24]
 80048ac:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <USB_DevInit+0x2c4>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d005      	beq.n	80048c6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	f043 0208 	orr.w	r2, r3, #8
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d107      	bne.n	80048dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048d4:	f043 0304 	orr.w	r3, r3, #4
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048e8:	b004      	add	sp, #16
 80048ea:	4770      	bx	lr
 80048ec:	803c3800 	.word	0x803c3800

080048f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3301      	adds	r3, #1
 8004902:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4a13      	ldr	r2, [pc, #76]	; (8004954 <USB_FlushTxFifo+0x64>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d901      	bls.n	8004910 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e01b      	b.n	8004948 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	daf2      	bge.n	80048fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	019b      	lsls	r3, r3, #6
 8004920:	f043 0220 	orr.w	r2, r3, #32
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3301      	adds	r3, #1
 800492c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4a08      	ldr	r2, [pc, #32]	; (8004954 <USB_FlushTxFifo+0x64>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e006      	b.n	8004948 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0320 	and.w	r3, r3, #32
 8004942:	2b20      	cmp	r3, #32
 8004944:	d0f0      	beq.n	8004928 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	00030d40 	.word	0x00030d40

08004958 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	3301      	adds	r3, #1
 8004968:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4a11      	ldr	r2, [pc, #68]	; (80049b4 <USB_FlushRxFifo+0x5c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d901      	bls.n	8004976 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e018      	b.n	80049a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	daf2      	bge.n	8004964 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2210      	movs	r2, #16
 8004986:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3301      	adds	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4a08      	ldr	r2, [pc, #32]	; (80049b4 <USB_FlushRxFifo+0x5c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e006      	b.n	80049a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	2b10      	cmp	r3, #16
 80049a4:	d0f0      	beq.n	8004988 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	00030d40 	.word	0x00030d40

080049b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	460b      	mov	r3, r1
 80049c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	68f9      	ldr	r1, [r7, #12]
 80049d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049d8:	4313      	orrs	r3, r2
 80049da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b087      	sub	sp, #28
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 0306 	and.w	r3, r3, #6
 8004a02:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d102      	bne.n	8004a10 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	75fb      	strb	r3, [r7, #23]
 8004a0e:	e00a      	b.n	8004a26 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d002      	beq.n	8004a1c <USB_GetDevSpeed+0x32>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2b06      	cmp	r3, #6
 8004a1a:	d102      	bne.n	8004a22 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	75fb      	strb	r3, [r7, #23]
 8004a20:	e001      	b.n	8004a26 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004a22:	230f      	movs	r3, #15
 8004a24:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	371c      	adds	r7, #28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	785b      	ldrb	r3, [r3, #1]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d13a      	bne.n	8004ac6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	2101      	movs	r1, #1
 8004a62:	fa01 f303 	lsl.w	r3, r1, r3
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	68f9      	ldr	r1, [r7, #12]
 8004a6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d155      	bne.n	8004b34 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	791b      	ldrb	r3, [r3, #4]
 8004aa2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004aa4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	059b      	lsls	r3, r3, #22
 8004aaa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004aac:	4313      	orrs	r3, r2
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	0151      	lsls	r1, r2, #5
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	440a      	add	r2, r1
 8004ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	e036      	b.n	8004b34 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004acc:	69da      	ldr	r2, [r3, #28]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8004adc:	041b      	lsls	r3, r3, #16
 8004ade:	68f9      	ldr	r1, [r7, #12]
 8004ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d11a      	bne.n	8004b34 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	791b      	ldrb	r3, [r3, #4]
 8004b18:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b1a:	430b      	orrs	r3, r1
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	0151      	lsls	r1, r2, #5
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	440a      	add	r2, r1
 8004b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b32:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
	...

08004b44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	785b      	ldrb	r3, [r3, #1]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d161      	bne.n	8004c24 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b76:	d11f      	bne.n	8004bb8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	0151      	lsls	r1, r2, #5
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	440a      	add	r2, r1
 8004b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b96:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	0151      	lsls	r1, r2, #5
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	440a      	add	r2, r1
 8004bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	f003 030f 	and.w	r3, r3, #15
 8004bc8:	2101      	movs	r1, #1
 8004bca:	fa01 f303 	lsl.w	r3, r1, r3
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	68f9      	ldr	r1, [r7, #12]
 8004bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bd8:	4013      	ands	r3, r2
 8004bda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be2:	69da      	ldr	r2, [r3, #28]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	f003 030f 	and.w	r3, r3, #15
 8004bec:	2101      	movs	r1, #1
 8004bee:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	68f9      	ldr	r1, [r7, #12]
 8004bf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	0159      	lsls	r1, r3, #5
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	440b      	add	r3, r1
 8004c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4b35      	ldr	r3, [pc, #212]	; (8004cf4 <USB_DeactivateEndpoint+0x1b0>)
 8004c1e:	4013      	ands	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]
 8004c22:	e060      	b.n	8004ce6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c3a:	d11f      	bne.n	8004c7c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	0151      	lsls	r1, r2, #5
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	440a      	add	r2, r1
 8004c52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c5a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	0151      	lsls	r1, r2, #5
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	440a      	add	r2, r1
 8004c72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	f003 030f 	and.w	r3, r3, #15
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c92:	041b      	lsls	r3, r3, #16
 8004c94:	43db      	mvns	r3, r3
 8004c96:	68f9      	ldr	r1, [r7, #12]
 8004c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca6:	69da      	ldr	r2, [r3, #28]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	f003 030f 	and.w	r3, r3, #15
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb6:	041b      	lsls	r3, r3, #16
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	68f9      	ldr	r1, [r7, #12]
 8004cbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	0159      	lsls	r1, r3, #5
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	440b      	add	r3, r1
 8004cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <USB_DeactivateEndpoint+0x1b4>)
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	ec337800 	.word	0xec337800
 8004cf8:	eff37800 	.word	0xeff37800

08004cfc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08a      	sub	sp, #40	; 0x28
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	4613      	mov	r3, r2
 8004d08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	785b      	ldrb	r3, [r3, #1]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	f040 815c 	bne.w	8004fd6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d132      	bne.n	8004d8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	0151      	lsls	r1, r2, #5
 8004d38:	69fa      	ldr	r2, [r7, #28]
 8004d3a:	440a      	add	r2, r1
 8004d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	0151      	lsls	r1, r2, #5
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	440a      	add	r2, r1
 8004d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	0151      	lsls	r1, r2, #5
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	440a      	add	r2, r1
 8004d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d84:	0cdb      	lsrs	r3, r3, #19
 8004d86:	04db      	lsls	r3, r3, #19
 8004d88:	6113      	str	r3, [r2, #16]
 8004d8a:	e074      	b.n	8004e76 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	0151      	lsls	r1, r2, #5
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	440a      	add	r2, r1
 8004da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da6:	0cdb      	lsrs	r3, r3, #19
 8004da8:	04db      	lsls	r3, r3, #19
 8004daa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	0151      	lsls	r1, r2, #5
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	440a      	add	r2, r1
 8004dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ddc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	6999      	ldr	r1, [r3, #24]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	440b      	add	r3, r1
 8004de8:	1e59      	subs	r1, r3, #1
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	fbb1 f3f3 	udiv	r3, r1, r3
 8004df2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004df4:	4b9d      	ldr	r3, [pc, #628]	; (800506c <USB_EPStartXfer+0x370>)
 8004df6:	400b      	ands	r3, r1
 8004df8:	69b9      	ldr	r1, [r7, #24]
 8004dfa:	0148      	lsls	r0, r1, #5
 8004dfc:	69f9      	ldr	r1, [r7, #28]
 8004dfe:	4401      	add	r1, r0
 8004e00:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e04:	4313      	orrs	r3, r2
 8004e06:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e1e:	69b9      	ldr	r1, [r7, #24]
 8004e20:	0148      	lsls	r0, r1, #5
 8004e22:	69f9      	ldr	r1, [r7, #28]
 8004e24:	4401      	add	r1, r0
 8004e26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	791b      	ldrb	r3, [r3, #4]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d11f      	bne.n	8004e76 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	0151      	lsls	r1, r2, #5
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	440a      	add	r2, r1
 8004e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e50:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004e54:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	0151      	lsls	r1, r2, #5
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	440a      	add	r2, r1
 8004e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e74:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e76:	79fb      	ldrb	r3, [r7, #7]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d14b      	bne.n	8004f14 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d009      	beq.n	8004e98 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e90:	461a      	mov	r2, r3
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	791b      	ldrb	r3, [r3, #4]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d128      	bne.n	8004ef2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d110      	bne.n	8004ed2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	0151      	lsls	r1, r2, #5
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	440a      	add	r2, r1
 8004ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	e00f      	b.n	8004ef2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	0151      	lsls	r1, r2, #5
 8004ee4:	69fa      	ldr	r2, [r7, #28]
 8004ee6:	440a      	add	r2, r1
 8004ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	0151      	lsls	r1, r2, #5
 8004f04:	69fa      	ldr	r2, [r7, #28]
 8004f06:	440a      	add	r2, r1
 8004f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	e133      	b.n	800517c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	0151      	lsls	r1, r2, #5
 8004f26:	69fa      	ldr	r2, [r7, #28]
 8004f28:	440a      	add	r2, r1
 8004f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f32:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	791b      	ldrb	r3, [r3, #4]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d015      	beq.n	8004f68 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 811b 	beq.w	800517c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	2101      	movs	r1, #1
 8004f58:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5c:	69f9      	ldr	r1, [r7, #28]
 8004f5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f62:	4313      	orrs	r3, r2
 8004f64:	634b      	str	r3, [r1, #52]	; 0x34
 8004f66:	e109      	b.n	800517c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d110      	bne.n	8004f9a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	0151      	lsls	r1, r2, #5
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	440a      	add	r2, r1
 8004f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	e00f      	b.n	8004fba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	0151      	lsls	r1, r2, #5
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	440a      	add	r2, r1
 8004fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	6919      	ldr	r1, [r3, #16]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	781a      	ldrb	r2, [r3, #0]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	b298      	uxth	r0, r3
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	4603      	mov	r3, r0
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 fade 	bl	8005590 <USB_WritePacket>
 8004fd4:	e0d2      	b.n	800517c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	0151      	lsls	r1, r2, #5
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	440a      	add	r2, r1
 8004fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ff0:	0cdb      	lsrs	r3, r3, #19
 8004ff2:	04db      	lsls	r3, r3, #19
 8004ff4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	0151      	lsls	r1, r2, #5
 8005008:	69fa      	ldr	r2, [r7, #28]
 800500a:	440a      	add	r2, r1
 800500c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005010:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005014:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005018:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d126      	bne.n	8005070 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005038:	69b9      	ldr	r1, [r7, #24]
 800503a:	0148      	lsls	r0, r1, #5
 800503c:	69f9      	ldr	r1, [r7, #28]
 800503e:	4401      	add	r1, r0
 8005040:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005044:	4313      	orrs	r3, r2
 8005046:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	0151      	lsls	r1, r2, #5
 800505a:	69fa      	ldr	r2, [r7, #28]
 800505c:	440a      	add	r2, r1
 800505e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005062:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005066:	6113      	str	r3, [r2, #16]
 8005068:	e03a      	b.n	80050e0 <USB_EPStartXfer+0x3e4>
 800506a:	bf00      	nop
 800506c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	699a      	ldr	r2, [r3, #24]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	4413      	add	r3, r2
 800507a:	1e5a      	subs	r2, r3, #1
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	fbb2 f3f3 	udiv	r3, r2, r3
 8005084:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	8afa      	ldrh	r2, [r7, #22]
 800508c:	fb03 f202 	mul.w	r2, r3, r2
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	8afb      	ldrh	r3, [r7, #22]
 80050a4:	04d9      	lsls	r1, r3, #19
 80050a6:	4b38      	ldr	r3, [pc, #224]	; (8005188 <USB_EPStartXfer+0x48c>)
 80050a8:	400b      	ands	r3, r1
 80050aa:	69b9      	ldr	r1, [r7, #24]
 80050ac:	0148      	lsls	r0, r1, #5
 80050ae:	69f9      	ldr	r1, [r7, #28]
 80050b0:	4401      	add	r1, r0
 80050b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050b6:	4313      	orrs	r3, r2
 80050b8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050d0:	69b9      	ldr	r1, [r7, #24]
 80050d2:	0148      	lsls	r0, r1, #5
 80050d4:	69f9      	ldr	r1, [r7, #28]
 80050d6:	4401      	add	r1, r0
 80050d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050dc:	4313      	orrs	r3, r2
 80050de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80050e0:	79fb      	ldrb	r3, [r7, #7]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d10d      	bne.n	8005102 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d009      	beq.n	8005102 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	6919      	ldr	r1, [r3, #16]
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fe:	460a      	mov	r2, r1
 8005100:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	791b      	ldrb	r3, [r3, #4]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d128      	bne.n	800515c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005116:	2b00      	cmp	r3, #0
 8005118:	d110      	bne.n	800513c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	0151      	lsls	r1, r2, #5
 800512c:	69fa      	ldr	r2, [r7, #28]
 800512e:	440a      	add	r2, r1
 8005130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005134:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	e00f      	b.n	800515c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	0151      	lsls	r1, r2, #5
 800514e:	69fa      	ldr	r2, [r7, #28]
 8005150:	440a      	add	r2, r1
 8005152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800515a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	0151      	lsls	r1, r2, #5
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	440a      	add	r2, r1
 8005172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005176:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800517a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3720      	adds	r7, #32
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	1ff80000 	.word	0x1ff80000

0800518c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	4613      	mov	r3, r2
 8005198:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	785b      	ldrb	r3, [r3, #1]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	f040 80ce 	bne.w	800534a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d132      	bne.n	800521c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	0151      	lsls	r1, r2, #5
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	440a      	add	r2, r1
 80051cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	0151      	lsls	r1, r2, #5
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	440a      	add	r2, r1
 80051f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	440a      	add	r2, r1
 8005210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005214:	0cdb      	lsrs	r3, r3, #19
 8005216:	04db      	lsls	r3, r3, #19
 8005218:	6113      	str	r3, [r2, #16]
 800521a:	e04e      	b.n	80052ba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	0151      	lsls	r1, r2, #5
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	440a      	add	r2, r1
 8005232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005236:	0cdb      	lsrs	r3, r3, #19
 8005238:	04db      	lsls	r3, r3, #19
 800523a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	0151      	lsls	r1, r2, #5
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	440a      	add	r2, r1
 8005252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005256:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800525a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800525e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	699a      	ldr	r2, [r3, #24]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	429a      	cmp	r2, r3
 800526a:	d903      	bls.n	8005274 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	0151      	lsls	r1, r2, #5
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	440a      	add	r2, r1
 800528a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800528e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005292:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a0:	691a      	ldr	r2, [r3, #16]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052aa:	6939      	ldr	r1, [r7, #16]
 80052ac:	0148      	lsls	r0, r1, #5
 80052ae:	6979      	ldr	r1, [r7, #20]
 80052b0:	4401      	add	r1, r0
 80052b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052b6:	4313      	orrs	r3, r2
 80052b8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052ba:	79fb      	ldrb	r3, [r7, #7]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d11e      	bne.n	80052fe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d009      	beq.n	80052dc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d4:	461a      	mov	r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	0151      	lsls	r1, r2, #5
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	440a      	add	r2, r1
 80052f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	e097      	b.n	800542e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	0151      	lsls	r1, r2, #5
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	440a      	add	r2, r1
 8005314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005318:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800531c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 8083 	beq.w	800542e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	f003 030f 	and.w	r3, r3, #15
 8005338:	2101      	movs	r1, #1
 800533a:	fa01 f303 	lsl.w	r3, r1, r3
 800533e:	6979      	ldr	r1, [r7, #20]
 8005340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005344:	4313      	orrs	r3, r2
 8005346:	634b      	str	r3, [r1, #52]	; 0x34
 8005348:	e071      	b.n	800542e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	4413      	add	r3, r2
 8005352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	0151      	lsls	r1, r2, #5
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	440a      	add	r2, r1
 8005360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005364:	0cdb      	lsrs	r3, r3, #19
 8005366:	04db      	lsls	r3, r3, #19
 8005368:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	0151      	lsls	r1, r2, #5
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	440a      	add	r2, r1
 8005380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005384:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005388:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800538c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	0151      	lsls	r1, r2, #5
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	440a      	add	r2, r1
 80053bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053dc:	6939      	ldr	r1, [r7, #16]
 80053de:	0148      	lsls	r0, r1, #5
 80053e0:	6979      	ldr	r1, [r7, #20]
 80053e2:	4401      	add	r1, r0
 80053e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053e8:	4313      	orrs	r3, r2
 80053ea:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80053ec:	79fb      	ldrb	r3, [r7, #7]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d10d      	bne.n	800540e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	6919      	ldr	r1, [r3, #16]
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	4413      	add	r3, r2
 8005406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540a:	460a      	mov	r2, r1
 800540c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	0151      	lsls	r1, r2, #5
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	440a      	add	r2, r1
 8005424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005428:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800542c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	371c      	adds	r7, #28
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	785b      	ldrb	r3, [r3, #1]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d14a      	bne.n	80054f0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800546e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005472:	f040 8086 	bne.w	8005582 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	4413      	add	r3, r2
 8005480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	7812      	ldrb	r2, [r2, #0]
 800548a:	0151      	lsls	r1, r2, #5
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	440a      	add	r2, r1
 8005490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005494:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005498:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	7812      	ldrb	r2, [r2, #0]
 80054ae:	0151      	lsls	r1, r2, #5
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	440a      	add	r2, r1
 80054b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3301      	adds	r3, #1
 80054c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d902      	bls.n	80054d4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	75fb      	strb	r3, [r7, #23]
          break;
 80054d2:	e056      	b.n	8005582 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054ec:	d0e7      	beq.n	80054be <USB_EPStopXfer+0x82>
 80054ee:	e048      	b.n	8005582 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005508:	d13b      	bne.n	8005582 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	7812      	ldrb	r2, [r2, #0]
 800551e:	0151      	lsls	r1, r2, #5
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	440a      	add	r2, r1
 8005524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005528:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800552c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	7812      	ldrb	r2, [r2, #0]
 8005542:	0151      	lsls	r1, r2, #5
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	440a      	add	r2, r1
 8005548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800554c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005550:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3301      	adds	r3, #1
 8005556:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f242 7210 	movw	r2, #10000	; 0x2710
 800555e:	4293      	cmp	r3, r2
 8005560:	d902      	bls.n	8005568 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	75fb      	strb	r3, [r7, #23]
          break;
 8005566:	e00c      	b.n	8005582 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	4413      	add	r3, r2
 8005572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800557c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005580:	d0e7      	beq.n	8005552 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005582:	7dfb      	ldrb	r3, [r7, #23]
}
 8005584:	4618      	mov	r0, r3
 8005586:	371c      	adds	r7, #28
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005590:	b480      	push	{r7}
 8005592:	b089      	sub	sp, #36	; 0x24
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	4611      	mov	r1, r2
 800559c:	461a      	mov	r2, r3
 800559e:	460b      	mov	r3, r1
 80055a0:	71fb      	strb	r3, [r7, #7]
 80055a2:	4613      	mov	r3, r2
 80055a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80055ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d123      	bne.n	80055fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055b6:	88bb      	ldrh	r3, [r7, #4]
 80055b8:	3303      	adds	r3, #3
 80055ba:	089b      	lsrs	r3, r3, #2
 80055bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80055be:	2300      	movs	r3, #0
 80055c0:	61bb      	str	r3, [r7, #24]
 80055c2:	e018      	b.n	80055f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80055c4:	79fb      	ldrb	r3, [r7, #7]
 80055c6:	031a      	lsls	r2, r3, #12
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d0:	461a      	mov	r2, r3
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	3301      	adds	r3, #1
 80055dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	3301      	adds	r3, #1
 80055e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	3301      	adds	r3, #1
 80055e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	3301      	adds	r3, #1
 80055ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	3301      	adds	r3, #1
 80055f4:	61bb      	str	r3, [r7, #24]
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d3e2      	bcc.n	80055c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3724      	adds	r7, #36	; 0x24
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800560c:	b480      	push	{r7}
 800560e:	b08b      	sub	sp, #44	; 0x2c
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	4613      	mov	r3, r2
 8005618:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005622:	88fb      	ldrh	r3, [r7, #6]
 8005624:	089b      	lsrs	r3, r3, #2
 8005626:	b29b      	uxth	r3, r3
 8005628:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800562a:	88fb      	ldrh	r3, [r7, #6]
 800562c:	f003 0303 	and.w	r3, r3, #3
 8005630:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005632:	2300      	movs	r3, #0
 8005634:	623b      	str	r3, [r7, #32]
 8005636:	e014      	b.n	8005662 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	601a      	str	r2, [r3, #0]
    pDest++;
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	3301      	adds	r3, #1
 8005648:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	3301      	adds	r3, #1
 800564e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	3301      	adds	r3, #1
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	3301      	adds	r3, #1
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	3301      	adds	r3, #1
 8005660:	623b      	str	r3, [r7, #32]
 8005662:	6a3a      	ldr	r2, [r7, #32]
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	429a      	cmp	r2, r3
 8005668:	d3e6      	bcc.n	8005638 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800566a:	8bfb      	ldrh	r3, [r7, #30]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01e      	beq.n	80056ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800567a:	461a      	mov	r2, r3
 800567c:	f107 0310 	add.w	r3, r7, #16
 8005680:	6812      	ldr	r2, [r2, #0]
 8005682:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	b2db      	uxtb	r3, r3
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	fa22 f303 	lsr.w	r3, r2, r3
 8005690:	b2da      	uxtb	r2, r3
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	701a      	strb	r2, [r3, #0]
      i++;
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	3301      	adds	r3, #1
 800569a:	623b      	str	r3, [r7, #32]
      pDest++;
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	3301      	adds	r3, #1
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80056a2:	8bfb      	ldrh	r3, [r7, #30]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80056a8:	8bfb      	ldrh	r3, [r7, #30]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1ea      	bne.n	8005684 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	372c      	adds	r7, #44	; 0x2c
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	785b      	ldrb	r3, [r3, #1]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d12c      	bne.n	8005732 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	db12      	blt.n	8005710 <USB_EPSetStall+0x54>
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00f      	beq.n	8005710 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	0151      	lsls	r1, r2, #5
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	440a      	add	r2, r1
 8005706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800570a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800570e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	0151      	lsls	r1, r2, #5
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	440a      	add	r2, r1
 8005726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800572a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	e02b      	b.n	800578a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	db12      	blt.n	800576a <USB_EPSetStall+0xae>
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00f      	beq.n	800576a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	0151      	lsls	r1, r2, #5
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	440a      	add	r2, r1
 8005760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005764:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005768:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	0151      	lsls	r1, r2, #5
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	440a      	add	r2, r1
 8005780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005784:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005788:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	785b      	ldrb	r3, [r3, #1]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d128      	bne.n	8005806 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	0151      	lsls	r1, r2, #5
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	440a      	add	r2, r1
 80057ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	791b      	ldrb	r3, [r3, #4]
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d003      	beq.n	80057e4 <USB_EPClearStall+0x4c>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	791b      	ldrb	r3, [r3, #4]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d138      	bne.n	8005856 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	0151      	lsls	r1, r2, #5
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	440a      	add	r2, r1
 80057fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	e027      	b.n	8005856 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	0151      	lsls	r1, r2, #5
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	440a      	add	r2, r1
 800581c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005820:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005824:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	791b      	ldrb	r3, [r3, #4]
 800582a:	2b03      	cmp	r3, #3
 800582c:	d003      	beq.n	8005836 <USB_EPClearStall+0x9e>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	791b      	ldrb	r3, [r3, #4]
 8005832:	2b02      	cmp	r3, #2
 8005834:	d10f      	bne.n	8005856 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	0151      	lsls	r1, r2, #5
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	440a      	add	r2, r1
 800584c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005854:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005882:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005886:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	78fb      	ldrb	r3, [r7, #3]
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005898:	68f9      	ldr	r1, [r7, #12]
 800589a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800589e:	4313      	orrs	r3, r2
 80058a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058ca:	f023 0303 	bic.w	r3, r3, #3
 80058ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058de:	f023 0302 	bic.w	r3, r3, #2
 80058e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b085      	sub	sp, #20
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800590c:	f023 0303 	bic.w	r3, r3, #3
 8005910:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005920:	f043 0302 	orr.w	r3, r3, #2
 8005924:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	4013      	ands	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800594c:	68fb      	ldr	r3, [r7, #12]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800595a:	b480      	push	{r7}
 800595c:	b085      	sub	sp, #20
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	4013      	ands	r3, r2
 800597c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	0c1b      	lsrs	r3, r3, #16
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800598e:	b480      	push	{r7}
 8005990:	b085      	sub	sp, #20
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	4013      	ands	r3, r2
 80059b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	b29b      	uxth	r3, r3
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b085      	sub	sp, #20
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
 80059ca:	460b      	mov	r3, r1
 80059cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80059d2:	78fb      	ldrb	r3, [r7, #3]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	4013      	ands	r3, r2
 80059ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059f0:	68bb      	ldr	r3, [r7, #8]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b087      	sub	sp, #28
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	460b      	mov	r3, r1
 8005a08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a20:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005a22:	78fb      	ldrb	r3, [r7, #3]
 8005a24:	f003 030f 	and.w	r3, r3, #15
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a2e:	01db      	lsls	r3, r3, #7
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a4c:	68bb      	ldr	r3, [r7, #8]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	371c      	adds	r7, #28
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	f003 0301 	and.w	r3, r3, #1
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b085      	sub	sp, #20
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a90:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a94:	f023 0307 	bic.w	r3, r3, #7
 8005a98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	333c      	adds	r3, #60	; 0x3c
 8005ad2:	3304      	adds	r3, #4
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	4a26      	ldr	r2, [pc, #152]	; (8005b74 <USB_EP0_OutStart+0xb8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d90a      	bls.n	8005af6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005af0:	d101      	bne.n	8005af6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005af2:	2300      	movs	r3, #0
 8005af4:	e037      	b.n	8005b66 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afc:	461a      	mov	r2, r3
 8005afe:	2300      	movs	r3, #0
 8005b00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b24:	f043 0318 	orr.w	r3, r3, #24
 8005b28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b38:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005b3c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005b3e:	7afb      	ldrb	r3, [r7, #11]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d10f      	bne.n	8005b64 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b5e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005b62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	4f54300a 	.word	0x4f54300a

08005b78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3301      	adds	r3, #1
 8005b88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4a13      	ldr	r2, [pc, #76]	; (8005bdc <USB_CoreReset+0x64>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d901      	bls.n	8005b96 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e01b      	b.n	8005bce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	daf2      	bge.n	8005b84 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f043 0201 	orr.w	r2, r3, #1
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4a09      	ldr	r2, [pc, #36]	; (8005bdc <USB_CoreReset+0x64>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d901      	bls.n	8005bc0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e006      	b.n	8005bce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d0f0      	beq.n	8005bae <USB_CoreReset+0x36>

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	00030d40 	.word	0x00030d40

08005be0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	460b      	mov	r3, r1
 8005bea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005bec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005bf0:	f002 fc8a 	bl	8008508 <USBD_static_malloc>
 8005bf4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d109      	bne.n	8005c10 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	32b0      	adds	r2, #176	; 0xb0
 8005c06:	2100      	movs	r1, #0
 8005c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e0d4      	b.n	8005dba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005c10:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005c14:	2100      	movs	r1, #0
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f002 fd96 	bl	8008748 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	32b0      	adds	r2, #176	; 0xb0
 8005c26:	68f9      	ldr	r1, [r7, #12]
 8005c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	32b0      	adds	r2, #176	; 0xb0
 8005c36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	7c1b      	ldrb	r3, [r3, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d138      	bne.n	8005cba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005c48:	4b5e      	ldr	r3, [pc, #376]	; (8005dc4 <USBD_CDC_Init+0x1e4>)
 8005c4a:	7819      	ldrb	r1, [r3, #0]
 8005c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c50:	2202      	movs	r2, #2
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f002 fb35 	bl	80082c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005c58:	4b5a      	ldr	r3, [pc, #360]	; (8005dc4 <USBD_CDC_Init+0x1e4>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	f003 020f 	and.w	r2, r3, #15
 8005c60:	6879      	ldr	r1, [r7, #4]
 8005c62:	4613      	mov	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	440b      	add	r3, r1
 8005c6c:	3324      	adds	r3, #36	; 0x24
 8005c6e:	2201      	movs	r2, #1
 8005c70:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005c72:	4b55      	ldr	r3, [pc, #340]	; (8005dc8 <USBD_CDC_Init+0x1e8>)
 8005c74:	7819      	ldrb	r1, [r3, #0]
 8005c76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f002 fb20 	bl	80082c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005c82:	4b51      	ldr	r3, [pc, #324]	; (8005dc8 <USBD_CDC_Init+0x1e8>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	f003 020f 	and.w	r2, r3, #15
 8005c8a:	6879      	ldr	r1, [r7, #4]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	440b      	add	r3, r1
 8005c96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005c9e:	4b4b      	ldr	r3, [pc, #300]	; (8005dcc <USBD_CDC_Init+0x1ec>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	f003 020f 	and.w	r2, r3, #15
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	440b      	add	r3, r1
 8005cb2:	3326      	adds	r3, #38	; 0x26
 8005cb4:	2210      	movs	r2, #16
 8005cb6:	801a      	strh	r2, [r3, #0]
 8005cb8:	e035      	b.n	8005d26 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005cba:	4b42      	ldr	r3, [pc, #264]	; (8005dc4 <USBD_CDC_Init+0x1e4>)
 8005cbc:	7819      	ldrb	r1, [r3, #0]
 8005cbe:	2340      	movs	r3, #64	; 0x40
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f002 fafd 	bl	80082c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005cc8:	4b3e      	ldr	r3, [pc, #248]	; (8005dc4 <USBD_CDC_Init+0x1e4>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	f003 020f 	and.w	r2, r3, #15
 8005cd0:	6879      	ldr	r1, [r7, #4]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	440b      	add	r3, r1
 8005cdc:	3324      	adds	r3, #36	; 0x24
 8005cde:	2201      	movs	r2, #1
 8005ce0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005ce2:	4b39      	ldr	r3, [pc, #228]	; (8005dc8 <USBD_CDC_Init+0x1e8>)
 8005ce4:	7819      	ldrb	r1, [r3, #0]
 8005ce6:	2340      	movs	r3, #64	; 0x40
 8005ce8:	2202      	movs	r2, #2
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f002 fae9 	bl	80082c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005cf0:	4b35      	ldr	r3, [pc, #212]	; (8005dc8 <USBD_CDC_Init+0x1e8>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	f003 020f 	and.w	r2, r3, #15
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	440b      	add	r3, r1
 8005d04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d08:	2201      	movs	r2, #1
 8005d0a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005d0c:	4b2f      	ldr	r3, [pc, #188]	; (8005dcc <USBD_CDC_Init+0x1ec>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	f003 020f 	and.w	r2, r3, #15
 8005d14:	6879      	ldr	r1, [r7, #4]
 8005d16:	4613      	mov	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	440b      	add	r3, r1
 8005d20:	3326      	adds	r3, #38	; 0x26
 8005d22:	2210      	movs	r2, #16
 8005d24:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005d26:	4b29      	ldr	r3, [pc, #164]	; (8005dcc <USBD_CDC_Init+0x1ec>)
 8005d28:	7819      	ldrb	r1, [r3, #0]
 8005d2a:	2308      	movs	r3, #8
 8005d2c:	2203      	movs	r2, #3
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f002 fac7 	bl	80082c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005d34:	4b25      	ldr	r3, [pc, #148]	; (8005dcc <USBD_CDC_Init+0x1ec>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	f003 020f 	and.w	r2, r3, #15
 8005d3c:	6879      	ldr	r1, [r7, #4]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	440b      	add	r3, r1
 8005d48:	3324      	adds	r3, #36	; 0x24
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	33b0      	adds	r3, #176	; 0xb0
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005d84:	2302      	movs	r3, #2
 8005d86:	e018      	b.n	8005dba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	7c1b      	ldrb	r3, [r3, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10a      	bne.n	8005da6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d90:	4b0d      	ldr	r3, [pc, #52]	; (8005dc8 <USBD_CDC_Init+0x1e8>)
 8005d92:	7819      	ldrb	r1, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f002 fb7e 	bl	80084a0 <USBD_LL_PrepareReceive>
 8005da4:	e008      	b.n	8005db8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005da6:	4b08      	ldr	r3, [pc, #32]	; (8005dc8 <USBD_CDC_Init+0x1e8>)
 8005da8:	7819      	ldrb	r1, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005db0:	2340      	movs	r3, #64	; 0x40
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f002 fb74 	bl	80084a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	200000a3 	.word	0x200000a3
 8005dc8:	200000a4 	.word	0x200000a4
 8005dcc:	200000a5 	.word	0x200000a5

08005dd0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005ddc:	4b3a      	ldr	r3, [pc, #232]	; (8005ec8 <USBD_CDC_DeInit+0xf8>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	4619      	mov	r1, r3
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f002 fa93 	bl	800830e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005de8:	4b37      	ldr	r3, [pc, #220]	; (8005ec8 <USBD_CDC_DeInit+0xf8>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	f003 020f 	and.w	r2, r3, #15
 8005df0:	6879      	ldr	r1, [r7, #4]
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	3324      	adds	r3, #36	; 0x24
 8005dfe:	2200      	movs	r2, #0
 8005e00:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005e02:	4b32      	ldr	r3, [pc, #200]	; (8005ecc <USBD_CDC_DeInit+0xfc>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	4619      	mov	r1, r3
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f002 fa80 	bl	800830e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005e0e:	4b2f      	ldr	r3, [pc, #188]	; (8005ecc <USBD_CDC_DeInit+0xfc>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	f003 020f 	and.w	r2, r3, #15
 8005e16:	6879      	ldr	r1, [r7, #4]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	440b      	add	r3, r1
 8005e22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e26:	2200      	movs	r2, #0
 8005e28:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005e2a:	4b29      	ldr	r3, [pc, #164]	; (8005ed0 <USBD_CDC_DeInit+0x100>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	4619      	mov	r1, r3
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f002 fa6c 	bl	800830e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005e36:	4b26      	ldr	r3, [pc, #152]	; (8005ed0 <USBD_CDC_DeInit+0x100>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	f003 020f 	and.w	r2, r3, #15
 8005e3e:	6879      	ldr	r1, [r7, #4]
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	440b      	add	r3, r1
 8005e4a:	3324      	adds	r3, #36	; 0x24
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005e50:	4b1f      	ldr	r3, [pc, #124]	; (8005ed0 <USBD_CDC_DeInit+0x100>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	f003 020f 	and.w	r2, r3, #15
 8005e58:	6879      	ldr	r1, [r7, #4]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	440b      	add	r3, r1
 8005e64:	3326      	adds	r3, #38	; 0x26
 8005e66:	2200      	movs	r2, #0
 8005e68:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	32b0      	adds	r2, #176	; 0xb0
 8005e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d01f      	beq.n	8005ebc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	33b0      	adds	r3, #176	; 0xb0
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	32b0      	adds	r2, #176	; 0xb0
 8005e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f002 fb40 	bl	8008524 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	32b0      	adds	r2, #176	; 0xb0
 8005eae:	2100      	movs	r1, #0
 8005eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	200000a3 	.word	0x200000a3
 8005ecc:	200000a4 	.word	0x200000a4
 8005ed0:	200000a5 	.word	0x200000a5

08005ed4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	32b0      	adds	r2, #176	; 0xb0
 8005ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e0bf      	b.n	8006084 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d050      	beq.n	8005fb2 <USBD_CDC_Setup+0xde>
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	f040 80af 	bne.w	8006074 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	88db      	ldrh	r3, [r3, #6]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d03a      	beq.n	8005f94 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	b25b      	sxtb	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	da1b      	bge.n	8005f60 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	33b0      	adds	r3, #176	; 0xb0
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005f3e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	88d2      	ldrh	r2, [r2, #6]
 8005f44:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	88db      	ldrh	r3, [r3, #6]
 8005f4a:	2b07      	cmp	r3, #7
 8005f4c:	bf28      	it	cs
 8005f4e:	2307      	movcs	r3, #7
 8005f50:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	89fa      	ldrh	r2, [r7, #14]
 8005f56:	4619      	mov	r1, r3
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f001 fd89 	bl	8007a70 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005f5e:	e090      	b.n	8006082 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	785a      	ldrb	r2, [r3, #1]
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	88db      	ldrh	r3, [r3, #6]
 8005f6e:	2b3f      	cmp	r3, #63	; 0x3f
 8005f70:	d803      	bhi.n	8005f7a <USBD_CDC_Setup+0xa6>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	88db      	ldrh	r3, [r3, #6]
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	e000      	b.n	8005f7c <USBD_CDC_Setup+0xa8>
 8005f7a:	2240      	movs	r2, #64	; 0x40
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005f82:	6939      	ldr	r1, [r7, #16]
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f001 fd9b 	bl	8007ac8 <USBD_CtlPrepareRx>
      break;
 8005f92:	e076      	b.n	8006082 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	33b0      	adds	r3, #176	; 0xb0
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	7850      	ldrb	r0, [r2, #1]
 8005faa:	2200      	movs	r2, #0
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	4798      	blx	r3
      break;
 8005fb0:	e067      	b.n	8006082 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	785b      	ldrb	r3, [r3, #1]
 8005fb6:	2b0b      	cmp	r3, #11
 8005fb8:	d851      	bhi.n	800605e <USBD_CDC_Setup+0x18a>
 8005fba:	a201      	add	r2, pc, #4	; (adr r2, 8005fc0 <USBD_CDC_Setup+0xec>)
 8005fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc0:	08005ff1 	.word	0x08005ff1
 8005fc4:	0800606d 	.word	0x0800606d
 8005fc8:	0800605f 	.word	0x0800605f
 8005fcc:	0800605f 	.word	0x0800605f
 8005fd0:	0800605f 	.word	0x0800605f
 8005fd4:	0800605f 	.word	0x0800605f
 8005fd8:	0800605f 	.word	0x0800605f
 8005fdc:	0800605f 	.word	0x0800605f
 8005fe0:	0800605f 	.word	0x0800605f
 8005fe4:	0800605f 	.word	0x0800605f
 8005fe8:	0800601b 	.word	0x0800601b
 8005fec:	08006045 	.word	0x08006045
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b03      	cmp	r3, #3
 8005ffa:	d107      	bne.n	800600c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005ffc:	f107 030a 	add.w	r3, r7, #10
 8006000:	2202      	movs	r2, #2
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 fd33 	bl	8007a70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800600a:	e032      	b.n	8006072 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f001 fcbd 	bl	800798e <USBD_CtlError>
            ret = USBD_FAIL;
 8006014:	2303      	movs	r3, #3
 8006016:	75fb      	strb	r3, [r7, #23]
          break;
 8006018:	e02b      	b.n	8006072 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b03      	cmp	r3, #3
 8006024:	d107      	bne.n	8006036 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006026:	f107 030d 	add.w	r3, r7, #13
 800602a:	2201      	movs	r2, #1
 800602c:	4619      	mov	r1, r3
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f001 fd1e 	bl	8007a70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006034:	e01d      	b.n	8006072 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006036:	6839      	ldr	r1, [r7, #0]
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f001 fca8 	bl	800798e <USBD_CtlError>
            ret = USBD_FAIL;
 800603e:	2303      	movs	r3, #3
 8006040:	75fb      	strb	r3, [r7, #23]
          break;
 8006042:	e016      	b.n	8006072 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b03      	cmp	r3, #3
 800604e:	d00f      	beq.n	8006070 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006050:	6839      	ldr	r1, [r7, #0]
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f001 fc9b 	bl	800798e <USBD_CtlError>
            ret = USBD_FAIL;
 8006058:	2303      	movs	r3, #3
 800605a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800605c:	e008      	b.n	8006070 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800605e:	6839      	ldr	r1, [r7, #0]
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f001 fc94 	bl	800798e <USBD_CtlError>
          ret = USBD_FAIL;
 8006066:	2303      	movs	r3, #3
 8006068:	75fb      	strb	r3, [r7, #23]
          break;
 800606a:	e002      	b.n	8006072 <USBD_CDC_Setup+0x19e>
          break;
 800606c:	bf00      	nop
 800606e:	e008      	b.n	8006082 <USBD_CDC_Setup+0x1ae>
          break;
 8006070:	bf00      	nop
      }
      break;
 8006072:	e006      	b.n	8006082 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006074:	6839      	ldr	r1, [r7, #0]
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f001 fc89 	bl	800798e <USBD_CtlError>
      ret = USBD_FAIL;
 800607c:	2303      	movs	r3, #3
 800607e:	75fb      	strb	r3, [r7, #23]
      break;
 8006080:	bf00      	nop
  }

  return (uint8_t)ret;
 8006082:	7dfb      	ldrb	r3, [r7, #23]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	460b      	mov	r3, r1
 8006096:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800609e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	32b0      	adds	r2, #176	; 0xb0
 80060aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e065      	b.n	8006182 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	32b0      	adds	r2, #176	; 0xb0
 80060c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80060c6:	78fb      	ldrb	r3, [r7, #3]
 80060c8:	f003 020f 	and.w	r2, r3, #15
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	4613      	mov	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	440b      	add	r3, r1
 80060d8:	3318      	adds	r3, #24
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d02f      	beq.n	8006140 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80060e0:	78fb      	ldrb	r3, [r7, #3]
 80060e2:	f003 020f 	and.w	r2, r3, #15
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	4613      	mov	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	440b      	add	r3, r1
 80060f2:	3318      	adds	r3, #24
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	78fb      	ldrb	r3, [r7, #3]
 80060f8:	f003 010f 	and.w	r1, r3, #15
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	460b      	mov	r3, r1
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	440b      	add	r3, r1
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4403      	add	r3, r0
 8006108:	3348      	adds	r3, #72	; 0x48
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006110:	fb01 f303 	mul.w	r3, r1, r3
 8006114:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006116:	2b00      	cmp	r3, #0
 8006118:	d112      	bne.n	8006140 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800611a:	78fb      	ldrb	r3, [r7, #3]
 800611c:	f003 020f 	and.w	r2, r3, #15
 8006120:	6879      	ldr	r1, [r7, #4]
 8006122:	4613      	mov	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	440b      	add	r3, r1
 800612c:	3318      	adds	r3, #24
 800612e:	2200      	movs	r2, #0
 8006130:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006132:	78f9      	ldrb	r1, [r7, #3]
 8006134:	2300      	movs	r3, #0
 8006136:	2200      	movs	r2, #0
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f002 f990 	bl	800845e <USBD_LL_Transmit>
 800613e:	e01f      	b.n	8006180 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2200      	movs	r2, #0
 8006144:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	33b0      	adds	r3, #176	; 0xb0
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d010      	beq.n	8006180 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	33b0      	adds	r3, #176	; 0xb0
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800617c:	78fa      	ldrb	r2, [r7, #3]
 800617e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	460b      	mov	r3, r1
 8006194:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	32b0      	adds	r2, #176	; 0xb0
 80061a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	32b0      	adds	r2, #176	; 0xb0
 80061b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e01a      	b.n	80061f2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80061bc:	78fb      	ldrb	r3, [r7, #3]
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f002 f98e 	bl	80084e2 <USBD_LL_GetRxDataSize>
 80061c6:	4602      	mov	r2, r0
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	33b0      	adds	r3, #176	; 0xb0
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80061ec:	4611      	mov	r1, r2
 80061ee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b084      	sub	sp, #16
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	32b0      	adds	r2, #176	; 0xb0
 800620c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006210:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006218:	2303      	movs	r3, #3
 800621a:	e025      	b.n	8006268 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	33b0      	adds	r3, #176	; 0xb0
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d01a      	beq.n	8006266 <USBD_CDC_EP0_RxReady+0x6c>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006236:	2bff      	cmp	r3, #255	; 0xff
 8006238:	d015      	beq.n	8006266 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	33b0      	adds	r3, #176	; 0xb0
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006252:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800625a:	b292      	uxth	r2, r2
 800625c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	22ff      	movs	r2, #255	; 0xff
 8006262:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006278:	2182      	movs	r1, #130	; 0x82
 800627a:	4818      	ldr	r0, [pc, #96]	; (80062dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800627c:	f000 fd4f 	bl	8006d1e <USBD_GetEpDesc>
 8006280:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006282:	2101      	movs	r1, #1
 8006284:	4815      	ldr	r0, [pc, #84]	; (80062dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006286:	f000 fd4a 	bl	8006d1e <USBD_GetEpDesc>
 800628a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800628c:	2181      	movs	r1, #129	; 0x81
 800628e:	4813      	ldr	r0, [pc, #76]	; (80062dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006290:	f000 fd45 	bl	8006d1e <USBD_GetEpDesc>
 8006294:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	2210      	movs	r2, #16
 80062a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d006      	beq.n	80062b6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062b0:	711a      	strb	r2, [r3, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d006      	beq.n	80062ca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062c4:	711a      	strb	r2, [r3, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2243      	movs	r2, #67	; 0x43
 80062ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80062d0:	4b02      	ldr	r3, [pc, #8]	; (80062dc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3718      	adds	r7, #24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20000060 	.word	0x20000060

080062e0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80062e8:	2182      	movs	r1, #130	; 0x82
 80062ea:	4818      	ldr	r0, [pc, #96]	; (800634c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80062ec:	f000 fd17 	bl	8006d1e <USBD_GetEpDesc>
 80062f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80062f2:	2101      	movs	r1, #1
 80062f4:	4815      	ldr	r0, [pc, #84]	; (800634c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80062f6:	f000 fd12 	bl	8006d1e <USBD_GetEpDesc>
 80062fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80062fc:	2181      	movs	r1, #129	; 0x81
 80062fe:	4813      	ldr	r0, [pc, #76]	; (800634c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006300:	f000 fd0d 	bl	8006d1e <USBD_GetEpDesc>
 8006304:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	2210      	movs	r2, #16
 8006310:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d006      	beq.n	8006326 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	2200      	movs	r2, #0
 800631c:	711a      	strb	r2, [r3, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f042 0202 	orr.w	r2, r2, #2
 8006324:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d006      	beq.n	800633a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	711a      	strb	r2, [r3, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f042 0202 	orr.w	r2, r2, #2
 8006338:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2243      	movs	r2, #67	; 0x43
 800633e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006340:	4b02      	ldr	r3, [pc, #8]	; (800634c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006342:	4618      	mov	r0, r3
 8006344:	3718      	adds	r7, #24
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	20000060 	.word	0x20000060

08006350 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006358:	2182      	movs	r1, #130	; 0x82
 800635a:	4818      	ldr	r0, [pc, #96]	; (80063bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800635c:	f000 fcdf 	bl	8006d1e <USBD_GetEpDesc>
 8006360:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006362:	2101      	movs	r1, #1
 8006364:	4815      	ldr	r0, [pc, #84]	; (80063bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006366:	f000 fcda 	bl	8006d1e <USBD_GetEpDesc>
 800636a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800636c:	2181      	movs	r1, #129	; 0x81
 800636e:	4813      	ldr	r0, [pc, #76]	; (80063bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006370:	f000 fcd5 	bl	8006d1e <USBD_GetEpDesc>
 8006374:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	2210      	movs	r2, #16
 8006380:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d006      	beq.n	8006396 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	2200      	movs	r2, #0
 800638c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006390:	711a      	strb	r2, [r3, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d006      	beq.n	80063aa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063a4:	711a      	strb	r2, [r3, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2243      	movs	r2, #67	; 0x43
 80063ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80063b0:	4b02      	ldr	r3, [pc, #8]	; (80063bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20000060 	.word	0x20000060

080063c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	220a      	movs	r2, #10
 80063cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80063ce:	4b03      	ldr	r3, [pc, #12]	; (80063dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	2000001c 	.word	0x2000001c

080063e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e009      	b.n	8006408 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	33b0      	adds	r3, #176	; 0xb0
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	32b0      	adds	r2, #176	; 0xb0
 800642a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800642e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006436:	2303      	movs	r3, #3
 8006438:	e008      	b.n	800644c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	371c      	adds	r7, #28
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	32b0      	adds	r2, #176	; 0xb0
 800646c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006470:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006478:	2303      	movs	r3, #3
 800647a:	e004      	b.n	8006486 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
	...

08006494 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	32b0      	adds	r2, #176	; 0xb0
 80064a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064aa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80064ac:	2301      	movs	r3, #1
 80064ae:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	32b0      	adds	r2, #176	; 0xb0
 80064ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e025      	b.n	8006512 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d11f      	bne.n	8006510 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80064d8:	4b10      	ldr	r3, [pc, #64]	; (800651c <USBD_CDC_TransmitPacket+0x88>)
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	f003 020f 	and.w	r2, r3, #15
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	4613      	mov	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4403      	add	r3, r0
 80064f2:	3318      	adds	r3, #24
 80064f4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80064f6:	4b09      	ldr	r3, [pc, #36]	; (800651c <USBD_CDC_TransmitPacket+0x88>)
 80064f8:	7819      	ldrb	r1, [r3, #0]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f001 ffa9 	bl	800845e <USBD_LL_Transmit>

    ret = USBD_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006510:	7bfb      	ldrb	r3, [r7, #15]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	200000a3 	.word	0x200000a3

08006520 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	32b0      	adds	r2, #176	; 0xb0
 8006532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006536:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	32b0      	adds	r2, #176	; 0xb0
 8006542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800654a:	2303      	movs	r3, #3
 800654c:	e018      	b.n	8006580 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	7c1b      	ldrb	r3, [r3, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10a      	bne.n	800656c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006556:	4b0c      	ldr	r3, [pc, #48]	; (8006588 <USBD_CDC_ReceivePacket+0x68>)
 8006558:	7819      	ldrb	r1, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f001 ff9b 	bl	80084a0 <USBD_LL_PrepareReceive>
 800656a:	e008      	b.n	800657e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800656c:	4b06      	ldr	r3, [pc, #24]	; (8006588 <USBD_CDC_ReceivePacket+0x68>)
 800656e:	7819      	ldrb	r1, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006576:	2340      	movs	r3, #64	; 0x40
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f001 ff91 	bl	80084a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	200000a4 	.word	0x200000a4

0800658c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	4613      	mov	r3, r2
 8006598:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e01f      	b.n	80065e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	79fa      	ldrb	r2, [r7, #7]
 80065d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f001 fe0b 	bl	80081f4 <USBD_LL_Init>
 80065de:	4603      	mov	r3, r0
 80065e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80065e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006600:	2303      	movs	r3, #3
 8006602:	e025      	b.n	8006650 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	32ae      	adds	r2, #174	; 0xae
 8006616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00f      	beq.n	8006640 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	32ae      	adds	r2, #174	; 0xae
 800662a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	f107 020e 	add.w	r2, r7, #14
 8006634:	4610      	mov	r0, r2
 8006636:	4798      	blx	r3
 8006638:	4602      	mov	r2, r0
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 fe13 	bl	800828c <USBD_LL_Start>
 8006666:	4603      	mov	r3, r0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006678:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800667a:	4618      	mov	r0, r3
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	460b      	mov	r3, r1
 8006690:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800669c:	2b00      	cmp	r3, #0
 800669e:	d009      	beq.n	80066b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	78fa      	ldrb	r2, [r7, #3]
 80066aa:	4611      	mov	r1, r2
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	4798      	blx	r3
 80066b0:	4603      	mov	r3, r0
 80066b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b084      	sub	sp, #16
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	460b      	mov	r3, r1
 80066c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	78fa      	ldrb	r2, [r7, #3]
 80066d8:	4611      	mov	r1, r2
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	4798      	blx	r3
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80066e4:	2303      	movs	r3, #3
 80066e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b084      	sub	sp, #16
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	4618      	mov	r0, r3
 8006706:	f001 f908 	bl	800791a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006718:	461a      	mov	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006726:	f003 031f 	and.w	r3, r3, #31
 800672a:	2b02      	cmp	r3, #2
 800672c:	d01a      	beq.n	8006764 <USBD_LL_SetupStage+0x72>
 800672e:	2b02      	cmp	r3, #2
 8006730:	d822      	bhi.n	8006778 <USBD_LL_SetupStage+0x86>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <USBD_LL_SetupStage+0x4a>
 8006736:	2b01      	cmp	r3, #1
 8006738:	d00a      	beq.n	8006750 <USBD_LL_SetupStage+0x5e>
 800673a:	e01d      	b.n	8006778 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006742:	4619      	mov	r1, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fb5f 	bl	8006e08 <USBD_StdDevReq>
 800674a:	4603      	mov	r3, r0
 800674c:	73fb      	strb	r3, [r7, #15]
      break;
 800674e:	e020      	b.n	8006792 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fbc7 	bl	8006eec <USBD_StdItfReq>
 800675e:	4603      	mov	r3, r0
 8006760:	73fb      	strb	r3, [r7, #15]
      break;
 8006762:	e016      	b.n	8006792 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800676a:	4619      	mov	r1, r3
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fc29 	bl	8006fc4 <USBD_StdEPReq>
 8006772:	4603      	mov	r3, r0
 8006774:	73fb      	strb	r3, [r7, #15]
      break;
 8006776:	e00c      	b.n	8006792 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800677e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006782:	b2db      	uxtb	r3, r3
 8006784:	4619      	mov	r1, r3
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f001 fde0 	bl	800834c <USBD_LL_StallEP>
 800678c:	4603      	mov	r3, r0
 800678e:	73fb      	strb	r3, [r7, #15]
      break;
 8006790:	bf00      	nop
  }

  return ret;
 8006792:	7bfb      	ldrb	r3, [r7, #15]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	460b      	mov	r3, r1
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80067ae:	7afb      	ldrb	r3, [r7, #11]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d16e      	bne.n	8006892 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80067ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067c2:	2b03      	cmp	r3, #3
 80067c4:	f040 8098 	bne.w	80068f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d913      	bls.n	80067fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	1ad2      	subs	r2, r2, r3
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	4293      	cmp	r3, r2
 80067ec:	bf28      	it	cs
 80067ee:	4613      	movcs	r3, r2
 80067f0:	461a      	mov	r2, r3
 80067f2:	6879      	ldr	r1, [r7, #4]
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f001 f984 	bl	8007b02 <USBD_CtlContinueRx>
 80067fa:	e07d      	b.n	80068f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006802:	f003 031f 	and.w	r3, r3, #31
 8006806:	2b02      	cmp	r3, #2
 8006808:	d014      	beq.n	8006834 <USBD_LL_DataOutStage+0x98>
 800680a:	2b02      	cmp	r3, #2
 800680c:	d81d      	bhi.n	800684a <USBD_LL_DataOutStage+0xae>
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <USBD_LL_DataOutStage+0x7c>
 8006812:	2b01      	cmp	r3, #1
 8006814:	d003      	beq.n	800681e <USBD_LL_DataOutStage+0x82>
 8006816:	e018      	b.n	800684a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	75bb      	strb	r3, [r7, #22]
            break;
 800681c:	e018      	b.n	8006850 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006824:	b2db      	uxtb	r3, r3
 8006826:	4619      	mov	r1, r3
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f000 fa5e 	bl	8006cea <USBD_CoreFindIF>
 800682e:	4603      	mov	r3, r0
 8006830:	75bb      	strb	r3, [r7, #22]
            break;
 8006832:	e00d      	b.n	8006850 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800683a:	b2db      	uxtb	r3, r3
 800683c:	4619      	mov	r1, r3
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f000 fa60 	bl	8006d04 <USBD_CoreFindEP>
 8006844:	4603      	mov	r3, r0
 8006846:	75bb      	strb	r3, [r7, #22]
            break;
 8006848:	e002      	b.n	8006850 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	75bb      	strb	r3, [r7, #22]
            break;
 800684e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006850:	7dbb      	ldrb	r3, [r7, #22]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d119      	bne.n	800688a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b03      	cmp	r3, #3
 8006860:	d113      	bne.n	800688a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006862:	7dba      	ldrb	r2, [r7, #22]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	32ae      	adds	r2, #174	; 0xae
 8006868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00b      	beq.n	800688a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006872:	7dba      	ldrb	r2, [r7, #22]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800687a:	7dba      	ldrb	r2, [r7, #22]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	32ae      	adds	r2, #174	; 0xae
 8006880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f001 f94a 	bl	8007b24 <USBD_CtlSendStatus>
 8006890:	e032      	b.n	80068f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006892:	7afb      	ldrb	r3, [r7, #11]
 8006894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006898:	b2db      	uxtb	r3, r3
 800689a:	4619      	mov	r1, r3
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 fa31 	bl	8006d04 <USBD_CoreFindEP>
 80068a2:	4603      	mov	r3, r0
 80068a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068a6:	7dbb      	ldrb	r3, [r7, #22]
 80068a8:	2bff      	cmp	r3, #255	; 0xff
 80068aa:	d025      	beq.n	80068f8 <USBD_LL_DataOutStage+0x15c>
 80068ac:	7dbb      	ldrb	r3, [r7, #22]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d122      	bne.n	80068f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d117      	bne.n	80068ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80068be:	7dba      	ldrb	r2, [r7, #22]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	32ae      	adds	r2, #174	; 0xae
 80068c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00f      	beq.n	80068ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80068ce:	7dba      	ldrb	r2, [r7, #22]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80068d6:	7dba      	ldrb	r2, [r7, #22]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	32ae      	adds	r2, #174	; 0xae
 80068dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	7afa      	ldrb	r2, [r7, #11]
 80068e4:	4611      	mov	r1, r2
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	4798      	blx	r3
 80068ea:	4603      	mov	r3, r0
 80068ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80068f4:	7dfb      	ldrb	r3, [r7, #23]
 80068f6:	e000      	b.n	80068fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b086      	sub	sp, #24
 8006906:	af00      	add	r7, sp, #0
 8006908:	60f8      	str	r0, [r7, #12]
 800690a:	460b      	mov	r3, r1
 800690c:	607a      	str	r2, [r7, #4]
 800690e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006910:	7afb      	ldrb	r3, [r7, #11]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d16f      	bne.n	80069f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	3314      	adds	r3, #20
 800691a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006922:	2b02      	cmp	r3, #2
 8006924:	d15a      	bne.n	80069dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	689a      	ldr	r2, [r3, #8]
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	429a      	cmp	r2, r3
 8006930:	d914      	bls.n	800695c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	689a      	ldr	r2, [r3, #8]
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	1ad2      	subs	r2, r2, r3
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	461a      	mov	r2, r3
 8006946:	6879      	ldr	r1, [r7, #4]
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f001 f8ac 	bl	8007aa6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800694e:	2300      	movs	r3, #0
 8006950:	2200      	movs	r2, #0
 8006952:	2100      	movs	r1, #0
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f001 fda3 	bl	80084a0 <USBD_LL_PrepareReceive>
 800695a:	e03f      	b.n	80069dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	68da      	ldr	r2, [r3, #12]
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	429a      	cmp	r2, r3
 8006966:	d11c      	bne.n	80069a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006970:	429a      	cmp	r2, r3
 8006972:	d316      	bcc.n	80069a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800697e:	429a      	cmp	r2, r3
 8006980:	d20f      	bcs.n	80069a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006982:	2200      	movs	r2, #0
 8006984:	2100      	movs	r1, #0
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f001 f88d 	bl	8007aa6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006994:	2300      	movs	r3, #0
 8006996:	2200      	movs	r2, #0
 8006998:	2100      	movs	r1, #0
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f001 fd80 	bl	80084a0 <USBD_LL_PrepareReceive>
 80069a0:	e01c      	b.n	80069dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b03      	cmp	r3, #3
 80069ac:	d10f      	bne.n	80069ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d009      	beq.n	80069ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80069ce:	2180      	movs	r1, #128	; 0x80
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f001 fcbb 	bl	800834c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f001 f8b7 	bl	8007b4a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d03a      	beq.n	8006a5c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f7ff fe42 	bl	8006670 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80069f4:	e032      	b.n	8006a5c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80069f6:	7afb      	ldrb	r3, [r7, #11]
 80069f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	4619      	mov	r1, r3
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 f97f 	bl	8006d04 <USBD_CoreFindEP>
 8006a06:	4603      	mov	r3, r0
 8006a08:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a0a:	7dfb      	ldrb	r3, [r7, #23]
 8006a0c:	2bff      	cmp	r3, #255	; 0xff
 8006a0e:	d025      	beq.n	8006a5c <USBD_LL_DataInStage+0x15a>
 8006a10:	7dfb      	ldrb	r3, [r7, #23]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d122      	bne.n	8006a5c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d11c      	bne.n	8006a5c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006a22:	7dfa      	ldrb	r2, [r7, #23]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	32ae      	adds	r2, #174	; 0xae
 8006a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d014      	beq.n	8006a5c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006a32:	7dfa      	ldrb	r2, [r7, #23]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006a3a:	7dfa      	ldrb	r2, [r7, #23]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	32ae      	adds	r2, #174	; 0xae
 8006a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	7afa      	ldrb	r2, [r7, #11]
 8006a48:	4611      	mov	r1, r2
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	4798      	blx	r3
 8006a4e:	4603      	mov	r3, r0
 8006a50:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006a52:	7dbb      	ldrb	r3, [r7, #22]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006a58:	7dbb      	ldrb	r3, [r7, #22]
 8006a5a:	e000      	b.n	8006a5e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b084      	sub	sp, #16
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d014      	beq.n	8006acc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00e      	beq.n	8006acc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6852      	ldr	r2, [r2, #4]
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	4611      	mov	r1, r2
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	4798      	blx	r3
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d001      	beq.n	8006acc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006acc:	2340      	movs	r3, #64	; 0x40
 8006ace:	2200      	movs	r2, #0
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f001 fbf5 	bl	80082c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2240      	movs	r2, #64	; 0x40
 8006ae4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ae8:	2340      	movs	r3, #64	; 0x40
 8006aea:	2200      	movs	r2, #0
 8006aec:	2180      	movs	r1, #128	; 0x80
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f001 fbe7 	bl	80082c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2240      	movs	r2, #64	; 0x40
 8006afe:	621a      	str	r2, [r3, #32]

  return ret;
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	460b      	mov	r3, r1
 8006b14:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	78fa      	ldrb	r2, [r7, #3]
 8006b1a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b083      	sub	sp, #12
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2204      	movs	r2, #4
 8006b44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b083      	sub	sp, #12
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d106      	bne.n	8006b78 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b03      	cmp	r3, #3
 8006b98:	d110      	bne.n	8006bbc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00b      	beq.n	8006bbc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b082      	sub	sp, #8
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	32ae      	adds	r2, #174	; 0xae
 8006bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e01c      	b.n	8006c22 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b03      	cmp	r3, #3
 8006bf2:	d115      	bne.n	8006c20 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	32ae      	adds	r2, #174	; 0xae
 8006bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00b      	beq.n	8006c20 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	32ae      	adds	r2, #174	; 0xae
 8006c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	78fa      	ldrb	r2, [r7, #3]
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b082      	sub	sp, #8
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	460b      	mov	r3, r1
 8006c34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	32ae      	adds	r2, #174	; 0xae
 8006c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e01c      	b.n	8006c86 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d115      	bne.n	8006c84 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	32ae      	adds	r2, #174	; 0xae
 8006c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00b      	beq.n	8006c84 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	32ae      	adds	r2, #174	; 0xae
 8006c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	78fa      	ldrb	r2, [r7, #3]
 8006c7e:	4611      	mov	r1, r2
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b083      	sub	sp, #12
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00e      	beq.n	8006ce0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	6852      	ldr	r2, [r2, #4]
 8006cce:	b2d2      	uxtb	r2, r2
 8006cd0:	4611      	mov	r1, r2
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	4798      	blx	r3
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006cf6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006d10:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b086      	sub	sp, #24
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	460b      	mov	r3, r1
 8006d28:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006d32:	2300      	movs	r3, #0
 8006d34:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	885b      	ldrh	r3, [r3, #2]
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d920      	bls.n	8006d88 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006d4e:	e013      	b.n	8006d78 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006d50:	f107 030a 	add.w	r3, r7, #10
 8006d54:	4619      	mov	r1, r3
 8006d56:	6978      	ldr	r0, [r7, #20]
 8006d58:	f000 f81b 	bl	8006d92 <USBD_GetNextDesc>
 8006d5c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	785b      	ldrb	r3, [r3, #1]
 8006d62:	2b05      	cmp	r3, #5
 8006d64:	d108      	bne.n	8006d78 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	789b      	ldrb	r3, [r3, #2]
 8006d6e:	78fa      	ldrb	r2, [r7, #3]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d008      	beq.n	8006d86 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	885b      	ldrh	r3, [r3, #2]
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	897b      	ldrh	r3, [r7, #10]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d8e5      	bhi.n	8006d50 <USBD_GetEpDesc+0x32>
 8006d84:	e000      	b.n	8006d88 <USBD_GetEpDesc+0x6a>
          break;
 8006d86:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006d88:	693b      	ldr	r3, [r7, #16]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3718      	adds	r7, #24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b085      	sub	sp, #20
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	881a      	ldrh	r2, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	4413      	add	r3, r2
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	461a      	mov	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4413      	add	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	3301      	adds	r3, #1
 8006de2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006dea:	8a3b      	ldrh	r3, [r7, #16]
 8006dec:	021b      	lsls	r3, r3, #8
 8006dee:	b21a      	sxth	r2, r3
 8006df0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	b21b      	sxth	r3, r3
 8006df8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006dfa:	89fb      	ldrh	r3, [r7, #14]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	371c      	adds	r7, #28
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e12:	2300      	movs	r3, #0
 8006e14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e1e:	2b40      	cmp	r3, #64	; 0x40
 8006e20:	d005      	beq.n	8006e2e <USBD_StdDevReq+0x26>
 8006e22:	2b40      	cmp	r3, #64	; 0x40
 8006e24:	d857      	bhi.n	8006ed6 <USBD_StdDevReq+0xce>
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00f      	beq.n	8006e4a <USBD_StdDevReq+0x42>
 8006e2a:	2b20      	cmp	r3, #32
 8006e2c:	d153      	bne.n	8006ed6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	32ae      	adds	r2, #174	; 0xae
 8006e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	4798      	blx	r3
 8006e44:	4603      	mov	r3, r0
 8006e46:	73fb      	strb	r3, [r7, #15]
      break;
 8006e48:	e04a      	b.n	8006ee0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	785b      	ldrb	r3, [r3, #1]
 8006e4e:	2b09      	cmp	r3, #9
 8006e50:	d83b      	bhi.n	8006eca <USBD_StdDevReq+0xc2>
 8006e52:	a201      	add	r2, pc, #4	; (adr r2, 8006e58 <USBD_StdDevReq+0x50>)
 8006e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e58:	08006ead 	.word	0x08006ead
 8006e5c:	08006ec1 	.word	0x08006ec1
 8006e60:	08006ecb 	.word	0x08006ecb
 8006e64:	08006eb7 	.word	0x08006eb7
 8006e68:	08006ecb 	.word	0x08006ecb
 8006e6c:	08006e8b 	.word	0x08006e8b
 8006e70:	08006e81 	.word	0x08006e81
 8006e74:	08006ecb 	.word	0x08006ecb
 8006e78:	08006ea3 	.word	0x08006ea3
 8006e7c:	08006e95 	.word	0x08006e95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fa3c 	bl	8007300 <USBD_GetDescriptor>
          break;
 8006e88:	e024      	b.n	8006ed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fba1 	bl	80075d4 <USBD_SetAddress>
          break;
 8006e92:	e01f      	b.n	8006ed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fbe0 	bl	800765c <USBD_SetConfig>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	73fb      	strb	r3, [r7, #15]
          break;
 8006ea0:	e018      	b.n	8006ed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fc83 	bl	80077b0 <USBD_GetConfig>
          break;
 8006eaa:	e013      	b.n	8006ed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fcb4 	bl	800781c <USBD_GetStatus>
          break;
 8006eb4:	e00e      	b.n	8006ed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006eb6:	6839      	ldr	r1, [r7, #0]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fce3 	bl	8007884 <USBD_SetFeature>
          break;
 8006ebe:	e009      	b.n	8006ed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fd07 	bl	80078d6 <USBD_ClrFeature>
          break;
 8006ec8:	e004      	b.n	8006ed4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fd5e 	bl	800798e <USBD_CtlError>
          break;
 8006ed2:	bf00      	nop
      }
      break;
 8006ed4:	e004      	b.n	8006ee0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006ed6:	6839      	ldr	r1, [r7, #0]
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fd58 	bl	800798e <USBD_CtlError>
      break;
 8006ede:	bf00      	nop
  }

  return ret;
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop

08006eec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f02:	2b40      	cmp	r3, #64	; 0x40
 8006f04:	d005      	beq.n	8006f12 <USBD_StdItfReq+0x26>
 8006f06:	2b40      	cmp	r3, #64	; 0x40
 8006f08:	d852      	bhi.n	8006fb0 <USBD_StdItfReq+0xc4>
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <USBD_StdItfReq+0x26>
 8006f0e:	2b20      	cmp	r3, #32
 8006f10:	d14e      	bne.n	8006fb0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d840      	bhi.n	8006fa2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	889b      	ldrh	r3, [r3, #4]
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d836      	bhi.n	8006f98 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	889b      	ldrh	r3, [r3, #4]
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7ff fed9 	bl	8006cea <USBD_CoreFindIF>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f3c:	7bbb      	ldrb	r3, [r7, #14]
 8006f3e:	2bff      	cmp	r3, #255	; 0xff
 8006f40:	d01d      	beq.n	8006f7e <USBD_StdItfReq+0x92>
 8006f42:	7bbb      	ldrb	r3, [r7, #14]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d11a      	bne.n	8006f7e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006f48:	7bba      	ldrb	r2, [r7, #14]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	32ae      	adds	r2, #174	; 0xae
 8006f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00f      	beq.n	8006f78 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006f58:	7bba      	ldrb	r2, [r7, #14]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f60:	7bba      	ldrb	r2, [r7, #14]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	32ae      	adds	r2, #174	; 0xae
 8006f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	4798      	blx	r3
 8006f72:	4603      	mov	r3, r0
 8006f74:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f76:	e004      	b.n	8006f82 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f7c:	e001      	b.n	8006f82 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	88db      	ldrh	r3, [r3, #6]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d110      	bne.n	8006fac <USBD_StdItfReq+0xc0>
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10d      	bne.n	8006fac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fdc7 	bl	8007b24 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f96:	e009      	b.n	8006fac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fcf7 	bl	800798e <USBD_CtlError>
          break;
 8006fa0:	e004      	b.n	8006fac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fcf2 	bl	800798e <USBD_CtlError>
          break;
 8006faa:	e000      	b.n	8006fae <USBD_StdItfReq+0xc2>
          break;
 8006fac:	bf00      	nop
      }
      break;
 8006fae:	e004      	b.n	8006fba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fceb 	bl	800798e <USBD_CtlError>
      break;
 8006fb8:	bf00      	nop
  }

  return ret;
 8006fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	889b      	ldrh	r3, [r3, #4]
 8006fd6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fe0:	2b40      	cmp	r3, #64	; 0x40
 8006fe2:	d007      	beq.n	8006ff4 <USBD_StdEPReq+0x30>
 8006fe4:	2b40      	cmp	r3, #64	; 0x40
 8006fe6:	f200 817f 	bhi.w	80072e8 <USBD_StdEPReq+0x324>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d02a      	beq.n	8007044 <USBD_StdEPReq+0x80>
 8006fee:	2b20      	cmp	r3, #32
 8006ff0:	f040 817a 	bne.w	80072e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7ff fe83 	bl	8006d04 <USBD_CoreFindEP>
 8006ffe:	4603      	mov	r3, r0
 8007000:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007002:	7b7b      	ldrb	r3, [r7, #13]
 8007004:	2bff      	cmp	r3, #255	; 0xff
 8007006:	f000 8174 	beq.w	80072f2 <USBD_StdEPReq+0x32e>
 800700a:	7b7b      	ldrb	r3, [r7, #13]
 800700c:	2b00      	cmp	r3, #0
 800700e:	f040 8170 	bne.w	80072f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007012:	7b7a      	ldrb	r2, [r7, #13]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800701a:	7b7a      	ldrb	r2, [r7, #13]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	32ae      	adds	r2, #174	; 0xae
 8007020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 8163 	beq.w	80072f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800702c:	7b7a      	ldrb	r2, [r7, #13]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	32ae      	adds	r2, #174	; 0xae
 8007032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	4798      	blx	r3
 800703e:	4603      	mov	r3, r0
 8007040:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007042:	e156      	b.n	80072f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	785b      	ldrb	r3, [r3, #1]
 8007048:	2b03      	cmp	r3, #3
 800704a:	d008      	beq.n	800705e <USBD_StdEPReq+0x9a>
 800704c:	2b03      	cmp	r3, #3
 800704e:	f300 8145 	bgt.w	80072dc <USBD_StdEPReq+0x318>
 8007052:	2b00      	cmp	r3, #0
 8007054:	f000 809b 	beq.w	800718e <USBD_StdEPReq+0x1ca>
 8007058:	2b01      	cmp	r3, #1
 800705a:	d03c      	beq.n	80070d6 <USBD_StdEPReq+0x112>
 800705c:	e13e      	b.n	80072dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b02      	cmp	r3, #2
 8007068:	d002      	beq.n	8007070 <USBD_StdEPReq+0xac>
 800706a:	2b03      	cmp	r3, #3
 800706c:	d016      	beq.n	800709c <USBD_StdEPReq+0xd8>
 800706e:	e02c      	b.n	80070ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00d      	beq.n	8007092 <USBD_StdEPReq+0xce>
 8007076:	7bbb      	ldrb	r3, [r7, #14]
 8007078:	2b80      	cmp	r3, #128	; 0x80
 800707a:	d00a      	beq.n	8007092 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800707c:	7bbb      	ldrb	r3, [r7, #14]
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f001 f963 	bl	800834c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007086:	2180      	movs	r1, #128	; 0x80
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 f95f 	bl	800834c <USBD_LL_StallEP>
 800708e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007090:	e020      	b.n	80070d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007092:	6839      	ldr	r1, [r7, #0]
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fc7a 	bl	800798e <USBD_CtlError>
              break;
 800709a:	e01b      	b.n	80070d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	885b      	ldrh	r3, [r3, #2]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10e      	bne.n	80070c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80070a4:	7bbb      	ldrb	r3, [r7, #14]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00b      	beq.n	80070c2 <USBD_StdEPReq+0xfe>
 80070aa:	7bbb      	ldrb	r3, [r7, #14]
 80070ac:	2b80      	cmp	r3, #128	; 0x80
 80070ae:	d008      	beq.n	80070c2 <USBD_StdEPReq+0xfe>
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	88db      	ldrh	r3, [r3, #6]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d104      	bne.n	80070c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f001 f945 	bl	800834c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fd2e 	bl	8007b24 <USBD_CtlSendStatus>

              break;
 80070c8:	e004      	b.n	80070d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fc5e 	bl	800798e <USBD_CtlError>
              break;
 80070d2:	bf00      	nop
          }
          break;
 80070d4:	e107      	b.n	80072e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d002      	beq.n	80070e8 <USBD_StdEPReq+0x124>
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d016      	beq.n	8007114 <USBD_StdEPReq+0x150>
 80070e6:	e04b      	b.n	8007180 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070e8:	7bbb      	ldrb	r3, [r7, #14]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00d      	beq.n	800710a <USBD_StdEPReq+0x146>
 80070ee:	7bbb      	ldrb	r3, [r7, #14]
 80070f0:	2b80      	cmp	r3, #128	; 0x80
 80070f2:	d00a      	beq.n	800710a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80070f4:	7bbb      	ldrb	r3, [r7, #14]
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 f927 	bl	800834c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80070fe:	2180      	movs	r1, #128	; 0x80
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f001 f923 	bl	800834c <USBD_LL_StallEP>
 8007106:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007108:	e040      	b.n	800718c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fc3e 	bl	800798e <USBD_CtlError>
              break;
 8007112:	e03b      	b.n	800718c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	885b      	ldrh	r3, [r3, #2]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d136      	bne.n	800718a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800711c:	7bbb      	ldrb	r3, [r7, #14]
 800711e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007122:	2b00      	cmp	r3, #0
 8007124:	d004      	beq.n	8007130 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f001 f92d 	bl	800838a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fcf7 	bl	8007b24 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff fde2 	bl	8006d04 <USBD_CoreFindEP>
 8007140:	4603      	mov	r3, r0
 8007142:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007144:	7b7b      	ldrb	r3, [r7, #13]
 8007146:	2bff      	cmp	r3, #255	; 0xff
 8007148:	d01f      	beq.n	800718a <USBD_StdEPReq+0x1c6>
 800714a:	7b7b      	ldrb	r3, [r7, #13]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d11c      	bne.n	800718a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007150:	7b7a      	ldrb	r2, [r7, #13]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007158:	7b7a      	ldrb	r2, [r7, #13]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	32ae      	adds	r2, #174	; 0xae
 800715e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d010      	beq.n	800718a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007168:	7b7a      	ldrb	r2, [r7, #13]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	32ae      	adds	r2, #174	; 0xae
 800716e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	4798      	blx	r3
 800717a:	4603      	mov	r3, r0
 800717c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800717e:	e004      	b.n	800718a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007180:	6839      	ldr	r1, [r7, #0]
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fc03 	bl	800798e <USBD_CtlError>
              break;
 8007188:	e000      	b.n	800718c <USBD_StdEPReq+0x1c8>
              break;
 800718a:	bf00      	nop
          }
          break;
 800718c:	e0ab      	b.n	80072e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b02      	cmp	r3, #2
 8007198:	d002      	beq.n	80071a0 <USBD_StdEPReq+0x1dc>
 800719a:	2b03      	cmp	r3, #3
 800719c:	d032      	beq.n	8007204 <USBD_StdEPReq+0x240>
 800719e:	e097      	b.n	80072d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d007      	beq.n	80071b6 <USBD_StdEPReq+0x1f2>
 80071a6:	7bbb      	ldrb	r3, [r7, #14]
 80071a8:	2b80      	cmp	r3, #128	; 0x80
 80071aa:	d004      	beq.n	80071b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80071ac:	6839      	ldr	r1, [r7, #0]
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fbed 	bl	800798e <USBD_CtlError>
                break;
 80071b4:	e091      	b.n	80072da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	da0b      	bge.n	80071d6 <USBD_StdEPReq+0x212>
 80071be:	7bbb      	ldrb	r3, [r7, #14]
 80071c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071c4:	4613      	mov	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	3310      	adds	r3, #16
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	4413      	add	r3, r2
 80071d2:	3304      	adds	r3, #4
 80071d4:	e00b      	b.n	80071ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80071d6:	7bbb      	ldrb	r3, [r7, #14]
 80071d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071dc:	4613      	mov	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	4413      	add	r3, r2
 80071ec:	3304      	adds	r3, #4
 80071ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2202      	movs	r2, #2
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fc37 	bl	8007a70 <USBD_CtlSendData>
              break;
 8007202:	e06a      	b.n	80072da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007204:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007208:	2b00      	cmp	r3, #0
 800720a:	da11      	bge.n	8007230 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800720c:	7bbb      	ldrb	r3, [r7, #14]
 800720e:	f003 020f 	and.w	r2, r3, #15
 8007212:	6879      	ldr	r1, [r7, #4]
 8007214:	4613      	mov	r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	440b      	add	r3, r1
 800721e:	3324      	adds	r3, #36	; 0x24
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d117      	bne.n	8007256 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fbb0 	bl	800798e <USBD_CtlError>
                  break;
 800722e:	e054      	b.n	80072da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007230:	7bbb      	ldrb	r3, [r7, #14]
 8007232:	f003 020f 	and.w	r2, r3, #15
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	4613      	mov	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	440b      	add	r3, r1
 8007242:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007246:	881b      	ldrh	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d104      	bne.n	8007256 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fb9d 	bl	800798e <USBD_CtlError>
                  break;
 8007254:	e041      	b.n	80072da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007256:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800725a:	2b00      	cmp	r3, #0
 800725c:	da0b      	bge.n	8007276 <USBD_StdEPReq+0x2b2>
 800725e:	7bbb      	ldrb	r3, [r7, #14]
 8007260:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007264:	4613      	mov	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	3310      	adds	r3, #16
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	4413      	add	r3, r2
 8007272:	3304      	adds	r3, #4
 8007274:	e00b      	b.n	800728e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007276:	7bbb      	ldrb	r3, [r7, #14]
 8007278:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800727c:	4613      	mov	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	4413      	add	r3, r2
 800728c:	3304      	adds	r3, #4
 800728e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007290:	7bbb      	ldrb	r3, [r7, #14]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <USBD_StdEPReq+0x2d8>
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	2b80      	cmp	r3, #128	; 0x80
 800729a:	d103      	bne.n	80072a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2200      	movs	r2, #0
 80072a0:	601a      	str	r2, [r3, #0]
 80072a2:	e00e      	b.n	80072c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80072a4:	7bbb      	ldrb	r3, [r7, #14]
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f001 f88d 	bl	80083c8 <USBD_LL_IsStallEP>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d003      	beq.n	80072bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2201      	movs	r2, #1
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	e002      	b.n	80072c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2200      	movs	r2, #0
 80072c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	2202      	movs	r2, #2
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fbd1 	bl	8007a70 <USBD_CtlSendData>
              break;
 80072ce:	e004      	b.n	80072da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fb5b 	bl	800798e <USBD_CtlError>
              break;
 80072d8:	bf00      	nop
          }
          break;
 80072da:	e004      	b.n	80072e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fb55 	bl	800798e <USBD_CtlError>
          break;
 80072e4:	bf00      	nop
      }
      break;
 80072e6:	e005      	b.n	80072f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fb4f 	bl	800798e <USBD_CtlError>
      break;
 80072f0:	e000      	b.n	80072f4 <USBD_StdEPReq+0x330>
      break;
 80072f2:	bf00      	nop
  }

  return ret;
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
	...

08007300 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800730a:	2300      	movs	r3, #0
 800730c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800730e:	2300      	movs	r3, #0
 8007310:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007312:	2300      	movs	r3, #0
 8007314:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	885b      	ldrh	r3, [r3, #2]
 800731a:	0a1b      	lsrs	r3, r3, #8
 800731c:	b29b      	uxth	r3, r3
 800731e:	3b01      	subs	r3, #1
 8007320:	2b06      	cmp	r3, #6
 8007322:	f200 8128 	bhi.w	8007576 <USBD_GetDescriptor+0x276>
 8007326:	a201      	add	r2, pc, #4	; (adr r2, 800732c <USBD_GetDescriptor+0x2c>)
 8007328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732c:	08007349 	.word	0x08007349
 8007330:	08007361 	.word	0x08007361
 8007334:	080073a1 	.word	0x080073a1
 8007338:	08007577 	.word	0x08007577
 800733c:	08007577 	.word	0x08007577
 8007340:	08007517 	.word	0x08007517
 8007344:	08007543 	.word	0x08007543
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	7c12      	ldrb	r2, [r2, #16]
 8007354:	f107 0108 	add.w	r1, r7, #8
 8007358:	4610      	mov	r0, r2
 800735a:	4798      	blx	r3
 800735c:	60f8      	str	r0, [r7, #12]
      break;
 800735e:	e112      	b.n	8007586 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	7c1b      	ldrb	r3, [r3, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10d      	bne.n	8007384 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800736e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007370:	f107 0208 	add.w	r2, r7, #8
 8007374:	4610      	mov	r0, r2
 8007376:	4798      	blx	r3
 8007378:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	3301      	adds	r3, #1
 800737e:	2202      	movs	r2, #2
 8007380:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007382:	e100      	b.n	8007586 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800738a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738c:	f107 0208 	add.w	r2, r7, #8
 8007390:	4610      	mov	r0, r2
 8007392:	4798      	blx	r3
 8007394:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	3301      	adds	r3, #1
 800739a:	2202      	movs	r2, #2
 800739c:	701a      	strb	r2, [r3, #0]
      break;
 800739e:	e0f2      	b.n	8007586 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	885b      	ldrh	r3, [r3, #2]
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b05      	cmp	r3, #5
 80073a8:	f200 80ac 	bhi.w	8007504 <USBD_GetDescriptor+0x204>
 80073ac:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <USBD_GetDescriptor+0xb4>)
 80073ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b2:	bf00      	nop
 80073b4:	080073cd 	.word	0x080073cd
 80073b8:	08007401 	.word	0x08007401
 80073bc:	08007435 	.word	0x08007435
 80073c0:	08007469 	.word	0x08007469
 80073c4:	0800749d 	.word	0x0800749d
 80073c8:	080074d1 	.word	0x080074d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00b      	beq.n	80073f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	7c12      	ldrb	r2, [r2, #16]
 80073e4:	f107 0108 	add.w	r1, r7, #8
 80073e8:	4610      	mov	r0, r2
 80073ea:	4798      	blx	r3
 80073ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073ee:	e091      	b.n	8007514 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 facb 	bl	800798e <USBD_CtlError>
            err++;
 80073f8:	7afb      	ldrb	r3, [r7, #11]
 80073fa:	3301      	adds	r3, #1
 80073fc:	72fb      	strb	r3, [r7, #11]
          break;
 80073fe:	e089      	b.n	8007514 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00b      	beq.n	8007424 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	7c12      	ldrb	r2, [r2, #16]
 8007418:	f107 0108 	add.w	r1, r7, #8
 800741c:	4610      	mov	r0, r2
 800741e:	4798      	blx	r3
 8007420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007422:	e077      	b.n	8007514 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fab1 	bl	800798e <USBD_CtlError>
            err++;
 800742c:	7afb      	ldrb	r3, [r7, #11]
 800742e:	3301      	adds	r3, #1
 8007430:	72fb      	strb	r3, [r7, #11]
          break;
 8007432:	e06f      	b.n	8007514 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00b      	beq.n	8007458 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	7c12      	ldrb	r2, [r2, #16]
 800744c:	f107 0108 	add.w	r1, r7, #8
 8007450:	4610      	mov	r0, r2
 8007452:	4798      	blx	r3
 8007454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007456:	e05d      	b.n	8007514 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007458:	6839      	ldr	r1, [r7, #0]
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fa97 	bl	800798e <USBD_CtlError>
            err++;
 8007460:	7afb      	ldrb	r3, [r7, #11]
 8007462:	3301      	adds	r3, #1
 8007464:	72fb      	strb	r3, [r7, #11]
          break;
 8007466:	e055      	b.n	8007514 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00b      	beq.n	800748c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	7c12      	ldrb	r2, [r2, #16]
 8007480:	f107 0108 	add.w	r1, r7, #8
 8007484:	4610      	mov	r0, r2
 8007486:	4798      	blx	r3
 8007488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800748a:	e043      	b.n	8007514 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fa7d 	bl	800798e <USBD_CtlError>
            err++;
 8007494:	7afb      	ldrb	r3, [r7, #11]
 8007496:	3301      	adds	r3, #1
 8007498:	72fb      	strb	r3, [r7, #11]
          break;
 800749a:	e03b      	b.n	8007514 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00b      	beq.n	80074c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	7c12      	ldrb	r2, [r2, #16]
 80074b4:	f107 0108 	add.w	r1, r7, #8
 80074b8:	4610      	mov	r0, r2
 80074ba:	4798      	blx	r3
 80074bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074be:	e029      	b.n	8007514 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074c0:	6839      	ldr	r1, [r7, #0]
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fa63 	bl	800798e <USBD_CtlError>
            err++;
 80074c8:	7afb      	ldrb	r3, [r7, #11]
 80074ca:	3301      	adds	r3, #1
 80074cc:	72fb      	strb	r3, [r7, #11]
          break;
 80074ce:	e021      	b.n	8007514 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00b      	beq.n	80074f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	7c12      	ldrb	r2, [r2, #16]
 80074e8:	f107 0108 	add.w	r1, r7, #8
 80074ec:	4610      	mov	r0, r2
 80074ee:	4798      	blx	r3
 80074f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074f2:	e00f      	b.n	8007514 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fa49 	bl	800798e <USBD_CtlError>
            err++;
 80074fc:	7afb      	ldrb	r3, [r7, #11]
 80074fe:	3301      	adds	r3, #1
 8007500:	72fb      	strb	r3, [r7, #11]
          break;
 8007502:	e007      	b.n	8007514 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fa41 	bl	800798e <USBD_CtlError>
          err++;
 800750c:	7afb      	ldrb	r3, [r7, #11]
 800750e:	3301      	adds	r3, #1
 8007510:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007512:	bf00      	nop
      }
      break;
 8007514:	e037      	b.n	8007586 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	7c1b      	ldrb	r3, [r3, #16]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d109      	bne.n	8007532 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007526:	f107 0208 	add.w	r2, r7, #8
 800752a:	4610      	mov	r0, r2
 800752c:	4798      	blx	r3
 800752e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007530:	e029      	b.n	8007586 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fa2a 	bl	800798e <USBD_CtlError>
        err++;
 800753a:	7afb      	ldrb	r3, [r7, #11]
 800753c:	3301      	adds	r3, #1
 800753e:	72fb      	strb	r3, [r7, #11]
      break;
 8007540:	e021      	b.n	8007586 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	7c1b      	ldrb	r3, [r3, #16]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10d      	bne.n	8007566 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007552:	f107 0208 	add.w	r2, r7, #8
 8007556:	4610      	mov	r0, r2
 8007558:	4798      	blx	r3
 800755a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	3301      	adds	r3, #1
 8007560:	2207      	movs	r2, #7
 8007562:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007564:	e00f      	b.n	8007586 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007566:	6839      	ldr	r1, [r7, #0]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fa10 	bl	800798e <USBD_CtlError>
        err++;
 800756e:	7afb      	ldrb	r3, [r7, #11]
 8007570:	3301      	adds	r3, #1
 8007572:	72fb      	strb	r3, [r7, #11]
      break;
 8007574:	e007      	b.n	8007586 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fa08 	bl	800798e <USBD_CtlError>
      err++;
 800757e:	7afb      	ldrb	r3, [r7, #11]
 8007580:	3301      	adds	r3, #1
 8007582:	72fb      	strb	r3, [r7, #11]
      break;
 8007584:	bf00      	nop
  }

  if (err != 0U)
 8007586:	7afb      	ldrb	r3, [r7, #11]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d11e      	bne.n	80075ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	88db      	ldrh	r3, [r3, #6]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d016      	beq.n	80075c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007594:	893b      	ldrh	r3, [r7, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00e      	beq.n	80075b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	88da      	ldrh	r2, [r3, #6]
 800759e:	893b      	ldrh	r3, [r7, #8]
 80075a0:	4293      	cmp	r3, r2
 80075a2:	bf28      	it	cs
 80075a4:	4613      	movcs	r3, r2
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80075aa:	893b      	ldrh	r3, [r7, #8]
 80075ac:	461a      	mov	r2, r3
 80075ae:	68f9      	ldr	r1, [r7, #12]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fa5d 	bl	8007a70 <USBD_CtlSendData>
 80075b6:	e009      	b.n	80075cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f9e7 	bl	800798e <USBD_CtlError>
 80075c0:	e004      	b.n	80075cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 faae 	bl	8007b24 <USBD_CtlSendStatus>
 80075c8:	e000      	b.n	80075cc <USBD_GetDescriptor+0x2cc>
    return;
 80075ca:	bf00      	nop
  }
}
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop

080075d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	889b      	ldrh	r3, [r3, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d131      	bne.n	800764a <USBD_SetAddress+0x76>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	88db      	ldrh	r3, [r3, #6]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d12d      	bne.n	800764a <USBD_SetAddress+0x76>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	885b      	ldrh	r3, [r3, #2]
 80075f2:	2b7f      	cmp	r3, #127	; 0x7f
 80075f4:	d829      	bhi.n	800764a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	885b      	ldrh	r3, [r3, #2]
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007600:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b03      	cmp	r3, #3
 800760c:	d104      	bne.n	8007618 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f9bc 	bl	800798e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007616:	e01d      	b.n	8007654 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	7bfa      	ldrb	r2, [r7, #15]
 800761c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007620:	7bfb      	ldrb	r3, [r7, #15]
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fefb 	bl	8008420 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fa7a 	bl	8007b24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007630:	7bfb      	ldrb	r3, [r7, #15]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d004      	beq.n	8007640 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2202      	movs	r2, #2
 800763a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800763e:	e009      	b.n	8007654 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007648:	e004      	b.n	8007654 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f99e 	bl	800798e <USBD_CtlError>
  }
}
 8007652:	bf00      	nop
 8007654:	bf00      	nop
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007666:	2300      	movs	r3, #0
 8007668:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	885b      	ldrh	r3, [r3, #2]
 800766e:	b2da      	uxtb	r2, r3
 8007670:	4b4e      	ldr	r3, [pc, #312]	; (80077ac <USBD_SetConfig+0x150>)
 8007672:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007674:	4b4d      	ldr	r3, [pc, #308]	; (80077ac <USBD_SetConfig+0x150>)
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d905      	bls.n	8007688 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f985 	bl	800798e <USBD_CtlError>
    return USBD_FAIL;
 8007684:	2303      	movs	r3, #3
 8007686:	e08c      	b.n	80077a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b02      	cmp	r3, #2
 8007692:	d002      	beq.n	800769a <USBD_SetConfig+0x3e>
 8007694:	2b03      	cmp	r3, #3
 8007696:	d029      	beq.n	80076ec <USBD_SetConfig+0x90>
 8007698:	e075      	b.n	8007786 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800769a:	4b44      	ldr	r3, [pc, #272]	; (80077ac <USBD_SetConfig+0x150>)
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d020      	beq.n	80076e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80076a2:	4b42      	ldr	r3, [pc, #264]	; (80077ac <USBD_SetConfig+0x150>)
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	461a      	mov	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80076ac:	4b3f      	ldr	r3, [pc, #252]	; (80077ac <USBD_SetConfig+0x150>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	4619      	mov	r1, r3
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f7fe ffe7 	bl	8006686 <USBD_SetClassConfig>
 80076b8:	4603      	mov	r3, r0
 80076ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d008      	beq.n	80076d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f962 	bl	800798e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2202      	movs	r2, #2
 80076ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80076d2:	e065      	b.n	80077a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fa25 	bl	8007b24 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2203      	movs	r2, #3
 80076de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80076e2:	e05d      	b.n	80077a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fa1d 	bl	8007b24 <USBD_CtlSendStatus>
      break;
 80076ea:	e059      	b.n	80077a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80076ec:	4b2f      	ldr	r3, [pc, #188]	; (80077ac <USBD_SetConfig+0x150>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d112      	bne.n	800771a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2202      	movs	r2, #2
 80076f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80076fc:	4b2b      	ldr	r3, [pc, #172]	; (80077ac <USBD_SetConfig+0x150>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	461a      	mov	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007706:	4b29      	ldr	r3, [pc, #164]	; (80077ac <USBD_SetConfig+0x150>)
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7fe ffd6 	bl	80066be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fa06 	bl	8007b24 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007718:	e042      	b.n	80077a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800771a:	4b24      	ldr	r3, [pc, #144]	; (80077ac <USBD_SetConfig+0x150>)
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	461a      	mov	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	429a      	cmp	r2, r3
 8007726:	d02a      	beq.n	800777e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	b2db      	uxtb	r3, r3
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f7fe ffc4 	bl	80066be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007736:	4b1d      	ldr	r3, [pc, #116]	; (80077ac <USBD_SetConfig+0x150>)
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	461a      	mov	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007740:	4b1a      	ldr	r3, [pc, #104]	; (80077ac <USBD_SetConfig+0x150>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7fe ff9d 	bl	8006686 <USBD_SetClassConfig>
 800774c:	4603      	mov	r3, r0
 800774e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007750:	7bfb      	ldrb	r3, [r7, #15]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00f      	beq.n	8007776 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f918 	bl	800798e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	b2db      	uxtb	r3, r3
 8007764:	4619      	mov	r1, r3
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7fe ffa9 	bl	80066be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2202      	movs	r2, #2
 8007770:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007774:	e014      	b.n	80077a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f9d4 	bl	8007b24 <USBD_CtlSendStatus>
      break;
 800777c:	e010      	b.n	80077a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f9d0 	bl	8007b24 <USBD_CtlSendStatus>
      break;
 8007784:	e00c      	b.n	80077a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f900 	bl	800798e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800778e:	4b07      	ldr	r3, [pc, #28]	; (80077ac <USBD_SetConfig+0x150>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f7fe ff92 	bl	80066be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800779a:	2303      	movs	r3, #3
 800779c:	73fb      	strb	r3, [r7, #15]
      break;
 800779e:	bf00      	nop
  }

  return ret;
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	20000284 	.word	0x20000284

080077b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	88db      	ldrh	r3, [r3, #6]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d004      	beq.n	80077cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f8e2 	bl	800798e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80077ca:	e023      	b.n	8007814 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	dc02      	bgt.n	80077de <USBD_GetConfig+0x2e>
 80077d8:	2b00      	cmp	r3, #0
 80077da:	dc03      	bgt.n	80077e4 <USBD_GetConfig+0x34>
 80077dc:	e015      	b.n	800780a <USBD_GetConfig+0x5a>
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d00b      	beq.n	80077fa <USBD_GetConfig+0x4a>
 80077e2:	e012      	b.n	800780a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	3308      	adds	r3, #8
 80077ee:	2201      	movs	r2, #1
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f93c 	bl	8007a70 <USBD_CtlSendData>
        break;
 80077f8:	e00c      	b.n	8007814 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	3304      	adds	r3, #4
 80077fe:	2201      	movs	r2, #1
 8007800:	4619      	mov	r1, r3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f934 	bl	8007a70 <USBD_CtlSendData>
        break;
 8007808:	e004      	b.n	8007814 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f8be 	bl	800798e <USBD_CtlError>
        break;
 8007812:	bf00      	nop
}
 8007814:	bf00      	nop
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800782c:	b2db      	uxtb	r3, r3
 800782e:	3b01      	subs	r3, #1
 8007830:	2b02      	cmp	r3, #2
 8007832:	d81e      	bhi.n	8007872 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	88db      	ldrh	r3, [r3, #6]
 8007838:	2b02      	cmp	r3, #2
 800783a:	d004      	beq.n	8007846 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f8a5 	bl	800798e <USBD_CtlError>
        break;
 8007844:	e01a      	b.n	800787c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007852:	2b00      	cmp	r3, #0
 8007854:	d005      	beq.n	8007862 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	f043 0202 	orr.w	r2, r3, #2
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	330c      	adds	r3, #12
 8007866:	2202      	movs	r2, #2
 8007868:	4619      	mov	r1, r3
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f900 	bl	8007a70 <USBD_CtlSendData>
      break;
 8007870:	e004      	b.n	800787c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f88a 	bl	800798e <USBD_CtlError>
      break;
 800787a:	bf00      	nop
  }
}
 800787c:	bf00      	nop
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	885b      	ldrh	r3, [r3, #2]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d107      	bne.n	80078a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f940 	bl	8007b24 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80078a4:	e013      	b.n	80078ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	885b      	ldrh	r3, [r3, #2]
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d10b      	bne.n	80078c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	889b      	ldrh	r3, [r3, #4]
 80078b2:	0a1b      	lsrs	r3, r3, #8
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f930 	bl	8007b24 <USBD_CtlSendStatus>
}
 80078c4:	e003      	b.n	80078ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f860 	bl	800798e <USBD_CtlError>
}
 80078ce:	bf00      	nop
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b082      	sub	sp, #8
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	3b01      	subs	r3, #1
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d80b      	bhi.n	8007906 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	885b      	ldrh	r3, [r3, #2]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d10c      	bne.n	8007910 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f910 	bl	8007b24 <USBD_CtlSendStatus>
      }
      break;
 8007904:	e004      	b.n	8007910 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f840 	bl	800798e <USBD_CtlError>
      break;
 800790e:	e000      	b.n	8007912 <USBD_ClrFeature+0x3c>
      break;
 8007910:	bf00      	nop
  }
}
 8007912:	bf00      	nop
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b084      	sub	sp, #16
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	781a      	ldrb	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	3301      	adds	r3, #1
 8007934:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	781a      	ldrb	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	3301      	adds	r3, #1
 8007942:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f7ff fa41 	bl	8006dcc <SWAPBYTE>
 800794a:	4603      	mov	r3, r0
 800794c:	461a      	mov	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	3301      	adds	r3, #1
 8007956:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	3301      	adds	r3, #1
 800795c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f7ff fa34 	bl	8006dcc <SWAPBYTE>
 8007964:	4603      	mov	r3, r0
 8007966:	461a      	mov	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	3301      	adds	r3, #1
 8007970:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	3301      	adds	r3, #1
 8007976:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f7ff fa27 	bl	8006dcc <SWAPBYTE>
 800797e:	4603      	mov	r3, r0
 8007980:	461a      	mov	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	80da      	strh	r2, [r3, #6]
}
 8007986:	bf00      	nop
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b082      	sub	sp, #8
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007998:	2180      	movs	r1, #128	; 0x80
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fcd6 	bl	800834c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80079a0:	2100      	movs	r1, #0
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fcd2 	bl	800834c <USBD_LL_StallEP>
}
 80079a8:	bf00      	nop
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80079bc:	2300      	movs	r3, #0
 80079be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d036      	beq.n	8007a34 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80079ca:	6938      	ldr	r0, [r7, #16]
 80079cc:	f000 f836 	bl	8007a3c <USBD_GetLen>
 80079d0:	4603      	mov	r3, r0
 80079d2:	3301      	adds	r3, #1
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	b29a      	uxth	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80079de:	7dfb      	ldrb	r3, [r7, #23]
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	4413      	add	r3, r2
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	7812      	ldrb	r2, [r2, #0]
 80079e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80079ea:	7dfb      	ldrb	r3, [r7, #23]
 80079ec:	3301      	adds	r3, #1
 80079ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80079f0:	7dfb      	ldrb	r3, [r7, #23]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	4413      	add	r3, r2
 80079f6:	2203      	movs	r2, #3
 80079f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80079fa:	7dfb      	ldrb	r3, [r7, #23]
 80079fc:	3301      	adds	r3, #1
 80079fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007a00:	e013      	b.n	8007a2a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007a02:	7dfb      	ldrb	r3, [r7, #23]
 8007a04:	68ba      	ldr	r2, [r7, #8]
 8007a06:	4413      	add	r3, r2
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	7812      	ldrb	r2, [r2, #0]
 8007a0c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	3301      	adds	r3, #1
 8007a12:	613b      	str	r3, [r7, #16]
    idx++;
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
 8007a16:	3301      	adds	r3, #1
 8007a18:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007a1a:	7dfb      	ldrb	r3, [r7, #23]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	4413      	add	r3, r2
 8007a20:	2200      	movs	r2, #0
 8007a22:	701a      	strb	r2, [r3, #0]
    idx++;
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
 8007a26:	3301      	adds	r3, #1
 8007a28:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1e7      	bne.n	8007a02 <USBD_GetString+0x52>
 8007a32:	e000      	b.n	8007a36 <USBD_GetString+0x86>
    return;
 8007a34:	bf00      	nop
  }
}
 8007a36:	3718      	adds	r7, #24
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007a44:	2300      	movs	r3, #0
 8007a46:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007a4c:	e005      	b.n	8007a5a <USBD_GetLen+0x1e>
  {
    len++;
 8007a4e:	7bfb      	ldrb	r3, [r7, #15]
 8007a50:	3301      	adds	r3, #1
 8007a52:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	3301      	adds	r3, #1
 8007a58:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1f5      	bne.n	8007a4e <USBD_GetLen+0x12>
  }

  return len;
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	2100      	movs	r1, #0
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 fce1 	bl	800845e <USBD_LL_Transmit>

  return USBD_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b084      	sub	sp, #16
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	60f8      	str	r0, [r7, #12]
 8007aae:	60b9      	str	r1, [r7, #8]
 8007ab0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 fcd0 	bl	800845e <USBD_LL_Transmit>

  return USBD_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2203      	movs	r2, #3
 8007ad8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	2100      	movs	r1, #0
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f000 fcd4 	bl	80084a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	60f8      	str	r0, [r7, #12]
 8007b0a:	60b9      	str	r1, [r7, #8]
 8007b0c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	2100      	movs	r1, #0
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 fcc3 	bl	80084a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2204      	movs	r2, #4
 8007b30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007b34:	2300      	movs	r3, #0
 8007b36:	2200      	movs	r2, #0
 8007b38:	2100      	movs	r1, #0
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fc8f 	bl	800845e <USBD_LL_Transmit>

  return USBD_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b082      	sub	sp, #8
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2205      	movs	r2, #5
 8007b56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2100      	movs	r1, #0
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fc9d 	bl	80084a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007b74:	2200      	movs	r2, #0
 8007b76:	4912      	ldr	r1, [pc, #72]	; (8007bc0 <MX_USB_DEVICE_Init+0x50>)
 8007b78:	4812      	ldr	r0, [pc, #72]	; (8007bc4 <MX_USB_DEVICE_Init+0x54>)
 8007b7a:	f7fe fd07 	bl	800658c <USBD_Init>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007b84:	f7f8 fe5c 	bl	8000840 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007b88:	490f      	ldr	r1, [pc, #60]	; (8007bc8 <MX_USB_DEVICE_Init+0x58>)
 8007b8a:	480e      	ldr	r0, [pc, #56]	; (8007bc4 <MX_USB_DEVICE_Init+0x54>)
 8007b8c:	f7fe fd2e 	bl	80065ec <USBD_RegisterClass>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b96:	f7f8 fe53 	bl	8000840 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007b9a:	490c      	ldr	r1, [pc, #48]	; (8007bcc <MX_USB_DEVICE_Init+0x5c>)
 8007b9c:	4809      	ldr	r0, [pc, #36]	; (8007bc4 <MX_USB_DEVICE_Init+0x54>)
 8007b9e:	f7fe fc1f 	bl	80063e0 <USBD_CDC_RegisterInterface>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007ba8:	f7f8 fe4a 	bl	8000840 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007bac:	4805      	ldr	r0, [pc, #20]	; (8007bc4 <MX_USB_DEVICE_Init+0x54>)
 8007bae:	f7fe fd53 	bl	8006658 <USBD_Start>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007bb8:	f7f8 fe42 	bl	8000840 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007bbc:	bf00      	nop
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	200000bc 	.word	0x200000bc
 8007bc4:	20000288 	.word	0x20000288
 8007bc8:	20000028 	.word	0x20000028
 8007bcc:	200000a8 	.word	0x200000a8

08007bd0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	4905      	ldr	r1, [pc, #20]	; (8007bec <CDC_Init_FS+0x1c>)
 8007bd8:	4805      	ldr	r0, [pc, #20]	; (8007bf0 <CDC_Init_FS+0x20>)
 8007bda:	f7fe fc1b 	bl	8006414 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007bde:	4905      	ldr	r1, [pc, #20]	; (8007bf4 <CDC_Init_FS+0x24>)
 8007be0:	4803      	ldr	r0, [pc, #12]	; (8007bf0 <CDC_Init_FS+0x20>)
 8007be2:	f7fe fc39 	bl	8006458 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 8007be6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	20000964 	.word	0x20000964
 8007bf0:	20000288 	.word	0x20000288
 8007bf4:	20000564 	.word	0x20000564

08007bf8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 8007bfc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	6039      	str	r1, [r7, #0]
 8007c12:	71fb      	strb	r3, [r7, #7]
 8007c14:	4613      	mov	r3, r2
 8007c16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 8007c18:	79fb      	ldrb	r3, [r7, #7]
 8007c1a:	2b23      	cmp	r3, #35	; 0x23
 8007c1c:	d84a      	bhi.n	8007cb4 <CDC_Control_FS+0xac>
 8007c1e:	a201      	add	r2, pc, #4	; (adr r2, 8007c24 <CDC_Control_FS+0x1c>)
 8007c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c24:	08007cb5 	.word	0x08007cb5
 8007c28:	08007cb5 	.word	0x08007cb5
 8007c2c:	08007cb5 	.word	0x08007cb5
 8007c30:	08007cb5 	.word	0x08007cb5
 8007c34:	08007cb5 	.word	0x08007cb5
 8007c38:	08007cb5 	.word	0x08007cb5
 8007c3c:	08007cb5 	.word	0x08007cb5
 8007c40:	08007cb5 	.word	0x08007cb5
 8007c44:	08007cb5 	.word	0x08007cb5
 8007c48:	08007cb5 	.word	0x08007cb5
 8007c4c:	08007cb5 	.word	0x08007cb5
 8007c50:	08007cb5 	.word	0x08007cb5
 8007c54:	08007cb5 	.word	0x08007cb5
 8007c58:	08007cb5 	.word	0x08007cb5
 8007c5c:	08007cb5 	.word	0x08007cb5
 8007c60:	08007cb5 	.word	0x08007cb5
 8007c64:	08007cb5 	.word	0x08007cb5
 8007c68:	08007cb5 	.word	0x08007cb5
 8007c6c:	08007cb5 	.word	0x08007cb5
 8007c70:	08007cb5 	.word	0x08007cb5
 8007c74:	08007cb5 	.word	0x08007cb5
 8007c78:	08007cb5 	.word	0x08007cb5
 8007c7c:	08007cb5 	.word	0x08007cb5
 8007c80:	08007cb5 	.word	0x08007cb5
 8007c84:	08007cb5 	.word	0x08007cb5
 8007c88:	08007cb5 	.word	0x08007cb5
 8007c8c:	08007cb5 	.word	0x08007cb5
 8007c90:	08007cb5 	.word	0x08007cb5
 8007c94:	08007cb5 	.word	0x08007cb5
 8007c98:	08007cb5 	.word	0x08007cb5
 8007c9c:	08007cb5 	.word	0x08007cb5
 8007ca0:	08007cb5 	.word	0x08007cb5
 8007ca4:	08007cb5 	.word	0x08007cb5
 8007ca8:	08007cb5 	.word	0x08007cb5
 8007cac:	08007cb5 	.word	0x08007cb5
 8007cb0:	08007cb5 	.word	0x08007cb5
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 8007cb4:	bf00      	nop
    }

    return (USBD_OK);
 8007cb6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007cce:	6879      	ldr	r1, [r7, #4]
 8007cd0:	4805      	ldr	r0, [pc, #20]	; (8007ce8 <CDC_Receive_FS+0x24>)
 8007cd2:	f7fe fbc1 	bl	8006458 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007cd6:	4804      	ldr	r0, [pc, #16]	; (8007ce8 <CDC_Receive_FS+0x24>)
 8007cd8:	f7fe fc22 	bl	8006520 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 8007cdc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20000288 	.word	0x20000288

08007cec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 8007cfc:	4b0d      	ldr	r3, [pc, #52]	; (8007d34 <CDC_Transmit_FS+0x48>)
 8007cfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d02:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d001      	beq.n	8007d12 <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e00b      	b.n	8007d2a <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007d12:	887b      	ldrh	r3, [r7, #2]
 8007d14:	461a      	mov	r2, r3
 8007d16:	6879      	ldr	r1, [r7, #4]
 8007d18:	4806      	ldr	r0, [pc, #24]	; (8007d34 <CDC_Transmit_FS+0x48>)
 8007d1a:	f7fe fb7b 	bl	8006414 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007d1e:	4805      	ldr	r0, [pc, #20]	; (8007d34 <CDC_Transmit_FS+0x48>)
 8007d20:	f7fe fbb8 	bl	8006494 <USBD_CDC_TransmitPacket>
 8007d24:	4603      	mov	r3, r0
 8007d26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	20000288 	.word	0x20000288

08007d38 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b087      	sub	sp, #28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	4613      	mov	r3, r2
 8007d44:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	371c      	adds	r7, #28
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
	...

08007d5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	4603      	mov	r3, r0
 8007d64:	6039      	str	r1, [r7, #0]
 8007d66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	2212      	movs	r2, #18
 8007d6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007d6e:	4b03      	ldr	r3, [pc, #12]	; (8007d7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	200000d8 	.word	0x200000d8

08007d80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	4603      	mov	r3, r0
 8007d88:	6039      	str	r1, [r7, #0]
 8007d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2204      	movs	r2, #4
 8007d90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d92:	4b03      	ldr	r3, [pc, #12]	; (8007da0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	200000ec 	.word	0x200000ec

08007da4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	4603      	mov	r3, r0
 8007dac:	6039      	str	r1, [r7, #0]
 8007dae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007db0:	79fb      	ldrb	r3, [r7, #7]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d105      	bne.n	8007dc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	4907      	ldr	r1, [pc, #28]	; (8007dd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007dba:	4808      	ldr	r0, [pc, #32]	; (8007ddc <USBD_FS_ProductStrDescriptor+0x38>)
 8007dbc:	f7ff fdf8 	bl	80079b0 <USBD_GetString>
 8007dc0:	e004      	b.n	8007dcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	4904      	ldr	r1, [pc, #16]	; (8007dd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007dc6:	4805      	ldr	r0, [pc, #20]	; (8007ddc <USBD_FS_ProductStrDescriptor+0x38>)
 8007dc8:	f7ff fdf2 	bl	80079b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007dcc:	4b02      	ldr	r3, [pc, #8]	; (8007dd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20000d64 	.word	0x20000d64
 8007ddc:	08008f24 	.word	0x08008f24

08007de0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	4603      	mov	r3, r0
 8007de8:	6039      	str	r1, [r7, #0]
 8007dea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	4904      	ldr	r1, [pc, #16]	; (8007e00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007df0:	4804      	ldr	r0, [pc, #16]	; (8007e04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007df2:	f7ff fddd 	bl	80079b0 <USBD_GetString>
  return USBD_StrDesc;
 8007df6:	4b02      	ldr	r3, [pc, #8]	; (8007e00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	20000d64 	.word	0x20000d64
 8007e04:	08008f3c 	.word	0x08008f3c

08007e08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	4603      	mov	r3, r0
 8007e10:	6039      	str	r1, [r7, #0]
 8007e12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	221a      	movs	r2, #26
 8007e18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007e1a:	f000 f843 	bl	8007ea4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007e1e:	4b02      	ldr	r3, [pc, #8]	; (8007e28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	200000f0 	.word	0x200000f0

08007e2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	4603      	mov	r3, r0
 8007e34:	6039      	str	r1, [r7, #0]
 8007e36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007e38:	79fb      	ldrb	r3, [r7, #7]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d105      	bne.n	8007e4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	4907      	ldr	r1, [pc, #28]	; (8007e60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e42:	4808      	ldr	r0, [pc, #32]	; (8007e64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e44:	f7ff fdb4 	bl	80079b0 <USBD_GetString>
 8007e48:	e004      	b.n	8007e54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	4904      	ldr	r1, [pc, #16]	; (8007e60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e4e:	4805      	ldr	r0, [pc, #20]	; (8007e64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e50:	f7ff fdae 	bl	80079b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e54:	4b02      	ldr	r3, [pc, #8]	; (8007e60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20000d64 	.word	0x20000d64
 8007e64:	08008f50 	.word	0x08008f50

08007e68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	6039      	str	r1, [r7, #0]
 8007e72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e74:	79fb      	ldrb	r3, [r7, #7]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d105      	bne.n	8007e86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	4907      	ldr	r1, [pc, #28]	; (8007e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e7e:	4808      	ldr	r0, [pc, #32]	; (8007ea0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e80:	f7ff fd96 	bl	80079b0 <USBD_GetString>
 8007e84:	e004      	b.n	8007e90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	4904      	ldr	r1, [pc, #16]	; (8007e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e8a:	4805      	ldr	r0, [pc, #20]	; (8007ea0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e8c:	f7ff fd90 	bl	80079b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e90:	4b02      	ldr	r3, [pc, #8]	; (8007e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	20000d64 	.word	0x20000d64
 8007ea0:	08008f5c 	.word	0x08008f5c

08007ea4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007eaa:	4b0f      	ldr	r3, [pc, #60]	; (8007ee8 <Get_SerialNum+0x44>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007eb0:	4b0e      	ldr	r3, [pc, #56]	; (8007eec <Get_SerialNum+0x48>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007eb6:	4b0e      	ldr	r3, [pc, #56]	; (8007ef0 <Get_SerialNum+0x4c>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d009      	beq.n	8007ede <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007eca:	2208      	movs	r2, #8
 8007ecc:	4909      	ldr	r1, [pc, #36]	; (8007ef4 <Get_SerialNum+0x50>)
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 f814 	bl	8007efc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ed4:	2204      	movs	r2, #4
 8007ed6:	4908      	ldr	r1, [pc, #32]	; (8007ef8 <Get_SerialNum+0x54>)
 8007ed8:	68b8      	ldr	r0, [r7, #8]
 8007eda:	f000 f80f 	bl	8007efc <IntToUnicode>
  }
}
 8007ede:	bf00      	nop
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	1fff7a10 	.word	0x1fff7a10
 8007eec:	1fff7a14 	.word	0x1fff7a14
 8007ef0:	1fff7a18 	.word	0x1fff7a18
 8007ef4:	200000f2 	.word	0x200000f2
 8007ef8:	20000102 	.word	0x20000102

08007efc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b087      	sub	sp, #28
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	4613      	mov	r3, r2
 8007f08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007f0e:	2300      	movs	r3, #0
 8007f10:	75fb      	strb	r3, [r7, #23]
 8007f12:	e027      	b.n	8007f64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	0f1b      	lsrs	r3, r3, #28
 8007f18:	2b09      	cmp	r3, #9
 8007f1a:	d80b      	bhi.n	8007f34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	0f1b      	lsrs	r3, r3, #28
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	7dfb      	ldrb	r3, [r7, #23]
 8007f24:	005b      	lsls	r3, r3, #1
 8007f26:	4619      	mov	r1, r3
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	440b      	add	r3, r1
 8007f2c:	3230      	adds	r2, #48	; 0x30
 8007f2e:	b2d2      	uxtb	r2, r2
 8007f30:	701a      	strb	r2, [r3, #0]
 8007f32:	e00a      	b.n	8007f4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	0f1b      	lsrs	r3, r3, #28
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	7dfb      	ldrb	r3, [r7, #23]
 8007f3c:	005b      	lsls	r3, r3, #1
 8007f3e:	4619      	mov	r1, r3
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	440b      	add	r3, r1
 8007f44:	3237      	adds	r2, #55	; 0x37
 8007f46:	b2d2      	uxtb	r2, r2
 8007f48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	011b      	lsls	r3, r3, #4
 8007f4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007f50:	7dfb      	ldrb	r3, [r7, #23]
 8007f52:	005b      	lsls	r3, r3, #1
 8007f54:	3301      	adds	r3, #1
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	4413      	add	r3, r2
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	3301      	adds	r3, #1
 8007f62:	75fb      	strb	r3, [r7, #23]
 8007f64:	7dfa      	ldrb	r2, [r7, #23]
 8007f66:	79fb      	ldrb	r3, [r7, #7]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d3d3      	bcc.n	8007f14 <IntToUnicode+0x18>
  }
}
 8007f6c:	bf00      	nop
 8007f6e:	bf00      	nop
 8007f70:	371c      	adds	r7, #28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
	...

08007f7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b08a      	sub	sp, #40	; 0x28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f84:	f107 0314 	add.w	r3, r7, #20
 8007f88:	2200      	movs	r2, #0
 8007f8a:	601a      	str	r2, [r3, #0]
 8007f8c:	605a      	str	r2, [r3, #4]
 8007f8e:	609a      	str	r2, [r3, #8]
 8007f90:	60da      	str	r2, [r3, #12]
 8007f92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f9c:	d13a      	bne.n	8008014 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	613b      	str	r3, [r7, #16]
 8007fa2:	4b1e      	ldr	r3, [pc, #120]	; (800801c <HAL_PCD_MspInit+0xa0>)
 8007fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa6:	4a1d      	ldr	r2, [pc, #116]	; (800801c <HAL_PCD_MspInit+0xa0>)
 8007fa8:	f043 0301 	orr.w	r3, r3, #1
 8007fac:	6313      	str	r3, [r2, #48]	; 0x30
 8007fae:	4b1b      	ldr	r3, [pc, #108]	; (800801c <HAL_PCD_MspInit+0xa0>)
 8007fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	613b      	str	r3, [r7, #16]
 8007fb8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007fba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007fcc:	230a      	movs	r3, #10
 8007fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fd0:	f107 0314 	add.w	r3, r7, #20
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	4812      	ldr	r0, [pc, #72]	; (8008020 <HAL_PCD_MspInit+0xa4>)
 8007fd8:	f7f9 fad8 	bl	800158c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007fdc:	4b0f      	ldr	r3, [pc, #60]	; (800801c <HAL_PCD_MspInit+0xa0>)
 8007fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe0:	4a0e      	ldr	r2, [pc, #56]	; (800801c <HAL_PCD_MspInit+0xa0>)
 8007fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe6:	6353      	str	r3, [r2, #52]	; 0x34
 8007fe8:	2300      	movs	r3, #0
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	4b0b      	ldr	r3, [pc, #44]	; (800801c <HAL_PCD_MspInit+0xa0>)
 8007fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff0:	4a0a      	ldr	r2, [pc, #40]	; (800801c <HAL_PCD_MspInit+0xa0>)
 8007ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ff6:	6453      	str	r3, [r2, #68]	; 0x44
 8007ff8:	4b08      	ldr	r3, [pc, #32]	; (800801c <HAL_PCD_MspInit+0xa0>)
 8007ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008000:	60fb      	str	r3, [r7, #12]
 8008002:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008004:	2200      	movs	r2, #0
 8008006:	2100      	movs	r1, #0
 8008008:	2043      	movs	r0, #67	; 0x43
 800800a:	f7f9 f8a2 	bl	8001152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800800e:	2043      	movs	r0, #67	; 0x43
 8008010:	f7f9 f8bb 	bl	800118a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008014:	bf00      	nop
 8008016:	3728      	adds	r7, #40	; 0x28
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	40023800 	.word	0x40023800
 8008020:	40020000 	.word	0x40020000

08008024 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008038:	4619      	mov	r1, r3
 800803a:	4610      	mov	r0, r2
 800803c:	f7fe fb59 	bl	80066f2 <USBD_LL_SetupStage>
}
 8008040:	bf00      	nop
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	460b      	mov	r3, r1
 8008052:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800805a:	78fa      	ldrb	r2, [r7, #3]
 800805c:	6879      	ldr	r1, [r7, #4]
 800805e:	4613      	mov	r3, r2
 8008060:	00db      	lsls	r3, r3, #3
 8008062:	4413      	add	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	440b      	add	r3, r1
 8008068:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	78fb      	ldrb	r3, [r7, #3]
 8008070:	4619      	mov	r1, r3
 8008072:	f7fe fb93 	bl	800679c <USBD_LL_DataOutStage>
}
 8008076:	bf00      	nop
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b082      	sub	sp, #8
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	460b      	mov	r3, r1
 8008088:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008090:	78fa      	ldrb	r2, [r7, #3]
 8008092:	6879      	ldr	r1, [r7, #4]
 8008094:	4613      	mov	r3, r2
 8008096:	00db      	lsls	r3, r3, #3
 8008098:	4413      	add	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	440b      	add	r3, r1
 800809e:	334c      	adds	r3, #76	; 0x4c
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	78fb      	ldrb	r3, [r7, #3]
 80080a4:	4619      	mov	r1, r3
 80080a6:	f7fe fc2c 	bl	8006902 <USBD_LL_DataInStage>
}
 80080aa:	bf00      	nop
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b082      	sub	sp, #8
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7fe fd60 	bl	8006b86 <USBD_LL_SOF>
}
 80080c6:	bf00      	nop
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80080d6:	2301      	movs	r3, #1
 80080d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d001      	beq.n	80080e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80080e2:	f7f8 fbad 	bl	8000840 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080ec:	7bfa      	ldrb	r2, [r7, #15]
 80080ee:	4611      	mov	r1, r2
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7fe fd0a 	bl	8006b0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7fe fcb2 	bl	8006a66 <USBD_LL_Reset>
}
 8008102:	bf00      	nop
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
	...

0800810c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800811a:	4618      	mov	r0, r3
 800811c:	f7fe fd05 	bl	8006b2a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	6812      	ldr	r2, [r2, #0]
 800812e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008132:	f043 0301 	orr.w	r3, r3, #1
 8008136:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d005      	beq.n	800814c <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008140:	4b04      	ldr	r3, [pc, #16]	; (8008154 <HAL_PCD_SuspendCallback+0x48>)
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	4a03      	ldr	r2, [pc, #12]	; (8008154 <HAL_PCD_SuspendCallback+0x48>)
 8008146:	f043 0306 	orr.w	r3, r3, #6
 800814a:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	e000ed00 	.word	0xe000ed00

08008158 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe fcf5 	bl	8006b56 <USBD_LL_Resume>
}
 800816c:	bf00      	nop
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	460b      	mov	r3, r1
 800817e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008186:	78fa      	ldrb	r2, [r7, #3]
 8008188:	4611      	mov	r1, r2
 800818a:	4618      	mov	r0, r3
 800818c:	f7fe fd4d 	bl	8006c2a <USBD_LL_IsoOUTIncomplete>
}
 8008190:	bf00      	nop
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	460b      	mov	r3, r1
 80081a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081aa:	78fa      	ldrb	r2, [r7, #3]
 80081ac:	4611      	mov	r1, r2
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fe fd09 	bl	8006bc6 <USBD_LL_IsoINIncomplete>
}
 80081b4:	bf00      	nop
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fe fd5f 	bl	8006c8e <USBD_LL_DevConnected>
}
 80081d0:	bf00      	nop
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fe fd5c 	bl	8006ca4 <USBD_LL_DevDisconnected>
}
 80081ec:	bf00      	nop
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d13c      	bne.n	800827e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008204:	4a20      	ldr	r2, [pc, #128]	; (8008288 <USBD_LL_Init+0x94>)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a1e      	ldr	r2, [pc, #120]	; (8008288 <USBD_LL_Init+0x94>)
 8008210:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008214:	4b1c      	ldr	r3, [pc, #112]	; (8008288 <USBD_LL_Init+0x94>)
 8008216:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800821a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800821c:	4b1a      	ldr	r3, [pc, #104]	; (8008288 <USBD_LL_Init+0x94>)
 800821e:	2204      	movs	r2, #4
 8008220:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008222:	4b19      	ldr	r3, [pc, #100]	; (8008288 <USBD_LL_Init+0x94>)
 8008224:	2202      	movs	r2, #2
 8008226:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008228:	4b17      	ldr	r3, [pc, #92]	; (8008288 <USBD_LL_Init+0x94>)
 800822a:	2200      	movs	r2, #0
 800822c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800822e:	4b16      	ldr	r3, [pc, #88]	; (8008288 <USBD_LL_Init+0x94>)
 8008230:	2202      	movs	r2, #2
 8008232:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008234:	4b14      	ldr	r3, [pc, #80]	; (8008288 <USBD_LL_Init+0x94>)
 8008236:	2200      	movs	r2, #0
 8008238:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800823a:	4b13      	ldr	r3, [pc, #76]	; (8008288 <USBD_LL_Init+0x94>)
 800823c:	2200      	movs	r2, #0
 800823e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008240:	4b11      	ldr	r3, [pc, #68]	; (8008288 <USBD_LL_Init+0x94>)
 8008242:	2200      	movs	r2, #0
 8008244:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008246:	4b10      	ldr	r3, [pc, #64]	; (8008288 <USBD_LL_Init+0x94>)
 8008248:	2200      	movs	r2, #0
 800824a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800824c:	4b0e      	ldr	r3, [pc, #56]	; (8008288 <USBD_LL_Init+0x94>)
 800824e:	2200      	movs	r2, #0
 8008250:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008252:	480d      	ldr	r0, [pc, #52]	; (8008288 <USBD_LL_Init+0x94>)
 8008254:	f7f9 fc62 	bl	8001b1c <HAL_PCD_Init>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800825e:	f7f8 faef 	bl	8000840 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008262:	2180      	movs	r1, #128	; 0x80
 8008264:	4808      	ldr	r0, [pc, #32]	; (8008288 <USBD_LL_Init+0x94>)
 8008266:	f7fa feba 	bl	8002fde <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800826a:	2240      	movs	r2, #64	; 0x40
 800826c:	2100      	movs	r1, #0
 800826e:	4806      	ldr	r0, [pc, #24]	; (8008288 <USBD_LL_Init+0x94>)
 8008270:	f7fa fe6e 	bl	8002f50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008274:	2280      	movs	r2, #128	; 0x80
 8008276:	2101      	movs	r1, #1
 8008278:	4803      	ldr	r0, [pc, #12]	; (8008288 <USBD_LL_Init+0x94>)
 800827a:	f7fa fe69 	bl	8002f50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	20000f64 	.word	0x20000f64

0800828c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7f9 fd57 	bl	8001d56 <HAL_PCD_Start>
 80082a8:	4603      	mov	r3, r0
 80082aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 f942 	bl	8008538 <USBD_Get_USB_Status>
 80082b4:	4603      	mov	r3, r0
 80082b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	4608      	mov	r0, r1
 80082cc:	4611      	mov	r1, r2
 80082ce:	461a      	mov	r2, r3
 80082d0:	4603      	mov	r3, r0
 80082d2:	70fb      	strb	r3, [r7, #3]
 80082d4:	460b      	mov	r3, r1
 80082d6:	70bb      	strb	r3, [r7, #2]
 80082d8:	4613      	mov	r3, r2
 80082da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082dc:	2300      	movs	r3, #0
 80082de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80082ea:	78bb      	ldrb	r3, [r7, #2]
 80082ec:	883a      	ldrh	r2, [r7, #0]
 80082ee:	78f9      	ldrb	r1, [r7, #3]
 80082f0:	f7fa fa28 	bl	8002744 <HAL_PCD_EP_Open>
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 f91c 	bl	8008538 <USBD_Get_USB_Status>
 8008300:	4603      	mov	r3, r0
 8008302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008304:	7bbb      	ldrb	r3, [r7, #14]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b084      	sub	sp, #16
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	460b      	mov	r3, r1
 8008318:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008328:	78fa      	ldrb	r2, [r7, #3]
 800832a:	4611      	mov	r1, r2
 800832c:	4618      	mov	r0, r3
 800832e:	f7fa fa71 	bl	8002814 <HAL_PCD_EP_Close>
 8008332:	4603      	mov	r3, r0
 8008334:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008336:	7bfb      	ldrb	r3, [r7, #15]
 8008338:	4618      	mov	r0, r3
 800833a:	f000 f8fd 	bl	8008538 <USBD_Get_USB_Status>
 800833e:	4603      	mov	r3, r0
 8008340:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008342:	7bbb      	ldrb	r3, [r7, #14]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	460b      	mov	r3, r1
 8008356:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008358:	2300      	movs	r3, #0
 800835a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800835c:	2300      	movs	r3, #0
 800835e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008366:	78fa      	ldrb	r2, [r7, #3]
 8008368:	4611      	mov	r1, r2
 800836a:	4618      	mov	r0, r3
 800836c:	f7fa fb49 	bl	8002a02 <HAL_PCD_EP_SetStall>
 8008370:	4603      	mov	r3, r0
 8008372:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008374:	7bfb      	ldrb	r3, [r7, #15]
 8008376:	4618      	mov	r0, r3
 8008378:	f000 f8de 	bl	8008538 <USBD_Get_USB_Status>
 800837c:	4603      	mov	r3, r0
 800837e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008380:	7bbb      	ldrb	r3, [r7, #14]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b084      	sub	sp, #16
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	460b      	mov	r3, r1
 8008394:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083a4:	78fa      	ldrb	r2, [r7, #3]
 80083a6:	4611      	mov	r1, r2
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7fa fb8e 	bl	8002aca <HAL_PCD_EP_ClrStall>
 80083ae:	4603      	mov	r3, r0
 80083b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 f8bf 	bl	8008538 <USBD_Get_USB_Status>
 80083ba:	4603      	mov	r3, r0
 80083bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083be:	7bbb      	ldrb	r3, [r7, #14]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80083dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	da0b      	bge.n	80083fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80083e4:	78fb      	ldrb	r3, [r7, #3]
 80083e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083ea:	68f9      	ldr	r1, [r7, #12]
 80083ec:	4613      	mov	r3, r2
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	4413      	add	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	440b      	add	r3, r1
 80083f6:	333e      	adds	r3, #62	; 0x3e
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	e00b      	b.n	8008414 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80083fc:	78fb      	ldrb	r3, [r7, #3]
 80083fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008402:	68f9      	ldr	r1, [r7, #12]
 8008404:	4613      	mov	r3, r2
 8008406:	00db      	lsls	r3, r3, #3
 8008408:	4413      	add	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	440b      	add	r3, r1
 800840e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008412:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008414:	4618      	mov	r0, r3
 8008416:	3714      	adds	r7, #20
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	460b      	mov	r3, r1
 800842a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008430:	2300      	movs	r3, #0
 8008432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800843a:	78fa      	ldrb	r2, [r7, #3]
 800843c:	4611      	mov	r1, r2
 800843e:	4618      	mov	r0, r3
 8008440:	f7fa f95b 	bl	80026fa <HAL_PCD_SetAddress>
 8008444:	4603      	mov	r3, r0
 8008446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008448:	7bfb      	ldrb	r3, [r7, #15]
 800844a:	4618      	mov	r0, r3
 800844c:	f000 f874 	bl	8008538 <USBD_Get_USB_Status>
 8008450:	4603      	mov	r3, r0
 8008452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008454:	7bbb      	ldrb	r3, [r7, #14]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b086      	sub	sp, #24
 8008462:	af00      	add	r7, sp, #0
 8008464:	60f8      	str	r0, [r7, #12]
 8008466:	607a      	str	r2, [r7, #4]
 8008468:	603b      	str	r3, [r7, #0]
 800846a:	460b      	mov	r3, r1
 800846c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008472:	2300      	movs	r3, #0
 8008474:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800847c:	7af9      	ldrb	r1, [r7, #11]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	f7fa fa74 	bl	800296e <HAL_PCD_EP_Transmit>
 8008486:	4603      	mov	r3, r0
 8008488:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800848a:	7dfb      	ldrb	r3, [r7, #23]
 800848c:	4618      	mov	r0, r3
 800848e:	f000 f853 	bl	8008538 <USBD_Get_USB_Status>
 8008492:	4603      	mov	r3, r0
 8008494:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008496:	7dbb      	ldrb	r3, [r7, #22]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3718      	adds	r7, #24
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	607a      	str	r2, [r7, #4]
 80084aa:	603b      	str	r3, [r7, #0]
 80084ac:	460b      	mov	r3, r1
 80084ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084b0:	2300      	movs	r3, #0
 80084b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084b4:	2300      	movs	r3, #0
 80084b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80084be:	7af9      	ldrb	r1, [r7, #11]
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	f7fa f9f0 	bl	80028a8 <HAL_PCD_EP_Receive>
 80084c8:	4603      	mov	r3, r0
 80084ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084cc:	7dfb      	ldrb	r3, [r7, #23]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f000 f832 	bl	8008538 <USBD_Get_USB_Status>
 80084d4:	4603      	mov	r3, r0
 80084d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3718      	adds	r7, #24
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b082      	sub	sp, #8
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	460b      	mov	r3, r1
 80084ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084f4:	78fa      	ldrb	r2, [r7, #3]
 80084f6:	4611      	mov	r1, r2
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7fa fa20 	bl	800293e <HAL_PCD_EP_GetRxCount>
 80084fe:	4603      	mov	r3, r0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008510:	4b03      	ldr	r3, [pc, #12]	; (8008520 <USBD_static_malloc+0x18>)
}
 8008512:	4618      	mov	r0, r3
 8008514:	370c      	adds	r7, #12
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	20001470 	.word	0x20001470

08008524 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]

}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	4603      	mov	r3, r0
 8008540:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008546:	79fb      	ldrb	r3, [r7, #7]
 8008548:	2b03      	cmp	r3, #3
 800854a:	d817      	bhi.n	800857c <USBD_Get_USB_Status+0x44>
 800854c:	a201      	add	r2, pc, #4	; (adr r2, 8008554 <USBD_Get_USB_Status+0x1c>)
 800854e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008552:	bf00      	nop
 8008554:	08008565 	.word	0x08008565
 8008558:	0800856b 	.word	0x0800856b
 800855c:	08008571 	.word	0x08008571
 8008560:	08008577 	.word	0x08008577
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	73fb      	strb	r3, [r7, #15]
    break;
 8008568:	e00b      	b.n	8008582 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800856a:	2303      	movs	r3, #3
 800856c:	73fb      	strb	r3, [r7, #15]
    break;
 800856e:	e008      	b.n	8008582 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008570:	2301      	movs	r3, #1
 8008572:	73fb      	strb	r3, [r7, #15]
    break;
 8008574:	e005      	b.n	8008582 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008576:	2303      	movs	r3, #3
 8008578:	73fb      	strb	r3, [r7, #15]
    break;
 800857a:	e002      	b.n	8008582 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800857c:	2303      	movs	r3, #3
 800857e:	73fb      	strb	r3, [r7, #15]
    break;
 8008580:	bf00      	nop
  }
  return usb_status;
 8008582:	7bfb      	ldrb	r3, [r7, #15]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3714      	adds	r7, #20
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <malloc>:
 8008590:	4b02      	ldr	r3, [pc, #8]	; (800859c <malloc+0xc>)
 8008592:	4601      	mov	r1, r0
 8008594:	6818      	ldr	r0, [r3, #0]
 8008596:	f000 b82b 	b.w	80085f0 <_malloc_r>
 800859a:	bf00      	nop
 800859c:	20000158 	.word	0x20000158

080085a0 <free>:
 80085a0:	4b02      	ldr	r3, [pc, #8]	; (80085ac <free+0xc>)
 80085a2:	4601      	mov	r1, r0
 80085a4:	6818      	ldr	r0, [r3, #0]
 80085a6:	f000 b913 	b.w	80087d0 <_free_r>
 80085aa:	bf00      	nop
 80085ac:	20000158 	.word	0x20000158

080085b0 <sbrk_aligned>:
 80085b0:	b570      	push	{r4, r5, r6, lr}
 80085b2:	4e0e      	ldr	r6, [pc, #56]	; (80085ec <sbrk_aligned+0x3c>)
 80085b4:	460c      	mov	r4, r1
 80085b6:	6831      	ldr	r1, [r6, #0]
 80085b8:	4605      	mov	r5, r0
 80085ba:	b911      	cbnz	r1, 80085c2 <sbrk_aligned+0x12>
 80085bc:	f000 f8cc 	bl	8008758 <_sbrk_r>
 80085c0:	6030      	str	r0, [r6, #0]
 80085c2:	4621      	mov	r1, r4
 80085c4:	4628      	mov	r0, r5
 80085c6:	f000 f8c7 	bl	8008758 <_sbrk_r>
 80085ca:	1c43      	adds	r3, r0, #1
 80085cc:	d00a      	beq.n	80085e4 <sbrk_aligned+0x34>
 80085ce:	1cc4      	adds	r4, r0, #3
 80085d0:	f024 0403 	bic.w	r4, r4, #3
 80085d4:	42a0      	cmp	r0, r4
 80085d6:	d007      	beq.n	80085e8 <sbrk_aligned+0x38>
 80085d8:	1a21      	subs	r1, r4, r0
 80085da:	4628      	mov	r0, r5
 80085dc:	f000 f8bc 	bl	8008758 <_sbrk_r>
 80085e0:	3001      	adds	r0, #1
 80085e2:	d101      	bne.n	80085e8 <sbrk_aligned+0x38>
 80085e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80085e8:	4620      	mov	r0, r4
 80085ea:	bd70      	pop	{r4, r5, r6, pc}
 80085ec:	20001694 	.word	0x20001694

080085f0 <_malloc_r>:
 80085f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f4:	1ccd      	adds	r5, r1, #3
 80085f6:	f025 0503 	bic.w	r5, r5, #3
 80085fa:	3508      	adds	r5, #8
 80085fc:	2d0c      	cmp	r5, #12
 80085fe:	bf38      	it	cc
 8008600:	250c      	movcc	r5, #12
 8008602:	2d00      	cmp	r5, #0
 8008604:	4607      	mov	r7, r0
 8008606:	db01      	blt.n	800860c <_malloc_r+0x1c>
 8008608:	42a9      	cmp	r1, r5
 800860a:	d905      	bls.n	8008618 <_malloc_r+0x28>
 800860c:	230c      	movs	r3, #12
 800860e:	603b      	str	r3, [r7, #0]
 8008610:	2600      	movs	r6, #0
 8008612:	4630      	mov	r0, r6
 8008614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008618:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80086ec <_malloc_r+0xfc>
 800861c:	f000 f868 	bl	80086f0 <__malloc_lock>
 8008620:	f8d8 3000 	ldr.w	r3, [r8]
 8008624:	461c      	mov	r4, r3
 8008626:	bb5c      	cbnz	r4, 8008680 <_malloc_r+0x90>
 8008628:	4629      	mov	r1, r5
 800862a:	4638      	mov	r0, r7
 800862c:	f7ff ffc0 	bl	80085b0 <sbrk_aligned>
 8008630:	1c43      	adds	r3, r0, #1
 8008632:	4604      	mov	r4, r0
 8008634:	d155      	bne.n	80086e2 <_malloc_r+0xf2>
 8008636:	f8d8 4000 	ldr.w	r4, [r8]
 800863a:	4626      	mov	r6, r4
 800863c:	2e00      	cmp	r6, #0
 800863e:	d145      	bne.n	80086cc <_malloc_r+0xdc>
 8008640:	2c00      	cmp	r4, #0
 8008642:	d048      	beq.n	80086d6 <_malloc_r+0xe6>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	4631      	mov	r1, r6
 8008648:	4638      	mov	r0, r7
 800864a:	eb04 0903 	add.w	r9, r4, r3
 800864e:	f000 f883 	bl	8008758 <_sbrk_r>
 8008652:	4581      	cmp	r9, r0
 8008654:	d13f      	bne.n	80086d6 <_malloc_r+0xe6>
 8008656:	6821      	ldr	r1, [r4, #0]
 8008658:	1a6d      	subs	r5, r5, r1
 800865a:	4629      	mov	r1, r5
 800865c:	4638      	mov	r0, r7
 800865e:	f7ff ffa7 	bl	80085b0 <sbrk_aligned>
 8008662:	3001      	adds	r0, #1
 8008664:	d037      	beq.n	80086d6 <_malloc_r+0xe6>
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	442b      	add	r3, r5
 800866a:	6023      	str	r3, [r4, #0]
 800866c:	f8d8 3000 	ldr.w	r3, [r8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d038      	beq.n	80086e6 <_malloc_r+0xf6>
 8008674:	685a      	ldr	r2, [r3, #4]
 8008676:	42a2      	cmp	r2, r4
 8008678:	d12b      	bne.n	80086d2 <_malloc_r+0xe2>
 800867a:	2200      	movs	r2, #0
 800867c:	605a      	str	r2, [r3, #4]
 800867e:	e00f      	b.n	80086a0 <_malloc_r+0xb0>
 8008680:	6822      	ldr	r2, [r4, #0]
 8008682:	1b52      	subs	r2, r2, r5
 8008684:	d41f      	bmi.n	80086c6 <_malloc_r+0xd6>
 8008686:	2a0b      	cmp	r2, #11
 8008688:	d917      	bls.n	80086ba <_malloc_r+0xca>
 800868a:	1961      	adds	r1, r4, r5
 800868c:	42a3      	cmp	r3, r4
 800868e:	6025      	str	r5, [r4, #0]
 8008690:	bf18      	it	ne
 8008692:	6059      	strne	r1, [r3, #4]
 8008694:	6863      	ldr	r3, [r4, #4]
 8008696:	bf08      	it	eq
 8008698:	f8c8 1000 	streq.w	r1, [r8]
 800869c:	5162      	str	r2, [r4, r5]
 800869e:	604b      	str	r3, [r1, #4]
 80086a0:	4638      	mov	r0, r7
 80086a2:	f104 060b 	add.w	r6, r4, #11
 80086a6:	f000 f829 	bl	80086fc <__malloc_unlock>
 80086aa:	f026 0607 	bic.w	r6, r6, #7
 80086ae:	1d23      	adds	r3, r4, #4
 80086b0:	1af2      	subs	r2, r6, r3
 80086b2:	d0ae      	beq.n	8008612 <_malloc_r+0x22>
 80086b4:	1b9b      	subs	r3, r3, r6
 80086b6:	50a3      	str	r3, [r4, r2]
 80086b8:	e7ab      	b.n	8008612 <_malloc_r+0x22>
 80086ba:	42a3      	cmp	r3, r4
 80086bc:	6862      	ldr	r2, [r4, #4]
 80086be:	d1dd      	bne.n	800867c <_malloc_r+0x8c>
 80086c0:	f8c8 2000 	str.w	r2, [r8]
 80086c4:	e7ec      	b.n	80086a0 <_malloc_r+0xb0>
 80086c6:	4623      	mov	r3, r4
 80086c8:	6864      	ldr	r4, [r4, #4]
 80086ca:	e7ac      	b.n	8008626 <_malloc_r+0x36>
 80086cc:	4634      	mov	r4, r6
 80086ce:	6876      	ldr	r6, [r6, #4]
 80086d0:	e7b4      	b.n	800863c <_malloc_r+0x4c>
 80086d2:	4613      	mov	r3, r2
 80086d4:	e7cc      	b.n	8008670 <_malloc_r+0x80>
 80086d6:	230c      	movs	r3, #12
 80086d8:	603b      	str	r3, [r7, #0]
 80086da:	4638      	mov	r0, r7
 80086dc:	f000 f80e 	bl	80086fc <__malloc_unlock>
 80086e0:	e797      	b.n	8008612 <_malloc_r+0x22>
 80086e2:	6025      	str	r5, [r4, #0]
 80086e4:	e7dc      	b.n	80086a0 <_malloc_r+0xb0>
 80086e6:	605b      	str	r3, [r3, #4]
 80086e8:	deff      	udf	#255	; 0xff
 80086ea:	bf00      	nop
 80086ec:	20001690 	.word	0x20001690

080086f0 <__malloc_lock>:
 80086f0:	4801      	ldr	r0, [pc, #4]	; (80086f8 <__malloc_lock+0x8>)
 80086f2:	f000 b86b 	b.w	80087cc <__retarget_lock_acquire_recursive>
 80086f6:	bf00      	nop
 80086f8:	200017d4 	.word	0x200017d4

080086fc <__malloc_unlock>:
 80086fc:	4801      	ldr	r0, [pc, #4]	; (8008704 <__malloc_unlock+0x8>)
 80086fe:	f000 b866 	b.w	80087ce <__retarget_lock_release_recursive>
 8008702:	bf00      	nop
 8008704:	200017d4 	.word	0x200017d4

08008708 <siprintf>:
 8008708:	b40e      	push	{r1, r2, r3}
 800870a:	b500      	push	{lr}
 800870c:	b09c      	sub	sp, #112	; 0x70
 800870e:	ab1d      	add	r3, sp, #116	; 0x74
 8008710:	9002      	str	r0, [sp, #8]
 8008712:	9006      	str	r0, [sp, #24]
 8008714:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008718:	4809      	ldr	r0, [pc, #36]	; (8008740 <siprintf+0x38>)
 800871a:	9107      	str	r1, [sp, #28]
 800871c:	9104      	str	r1, [sp, #16]
 800871e:	4909      	ldr	r1, [pc, #36]	; (8008744 <siprintf+0x3c>)
 8008720:	f853 2b04 	ldr.w	r2, [r3], #4
 8008724:	9105      	str	r1, [sp, #20]
 8008726:	6800      	ldr	r0, [r0, #0]
 8008728:	9301      	str	r3, [sp, #4]
 800872a:	a902      	add	r1, sp, #8
 800872c:	f000 f8f6 	bl	800891c <_svfiprintf_r>
 8008730:	9b02      	ldr	r3, [sp, #8]
 8008732:	2200      	movs	r2, #0
 8008734:	701a      	strb	r2, [r3, #0]
 8008736:	b01c      	add	sp, #112	; 0x70
 8008738:	f85d eb04 	ldr.w	lr, [sp], #4
 800873c:	b003      	add	sp, #12
 800873e:	4770      	bx	lr
 8008740:	20000158 	.word	0x20000158
 8008744:	ffff0208 	.word	0xffff0208

08008748 <memset>:
 8008748:	4402      	add	r2, r0
 800874a:	4603      	mov	r3, r0
 800874c:	4293      	cmp	r3, r2
 800874e:	d100      	bne.n	8008752 <memset+0xa>
 8008750:	4770      	bx	lr
 8008752:	f803 1b01 	strb.w	r1, [r3], #1
 8008756:	e7f9      	b.n	800874c <memset+0x4>

08008758 <_sbrk_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	4d06      	ldr	r5, [pc, #24]	; (8008774 <_sbrk_r+0x1c>)
 800875c:	2300      	movs	r3, #0
 800875e:	4604      	mov	r4, r0
 8008760:	4608      	mov	r0, r1
 8008762:	602b      	str	r3, [r5, #0]
 8008764:	f7f8 f992 	bl	8000a8c <_sbrk>
 8008768:	1c43      	adds	r3, r0, #1
 800876a:	d102      	bne.n	8008772 <_sbrk_r+0x1a>
 800876c:	682b      	ldr	r3, [r5, #0]
 800876e:	b103      	cbz	r3, 8008772 <_sbrk_r+0x1a>
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	bd38      	pop	{r3, r4, r5, pc}
 8008774:	200017d0 	.word	0x200017d0

08008778 <__errno>:
 8008778:	4b01      	ldr	r3, [pc, #4]	; (8008780 <__errno+0x8>)
 800877a:	6818      	ldr	r0, [r3, #0]
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	20000158 	.word	0x20000158

08008784 <__libc_init_array>:
 8008784:	b570      	push	{r4, r5, r6, lr}
 8008786:	4d0d      	ldr	r5, [pc, #52]	; (80087bc <__libc_init_array+0x38>)
 8008788:	4c0d      	ldr	r4, [pc, #52]	; (80087c0 <__libc_init_array+0x3c>)
 800878a:	1b64      	subs	r4, r4, r5
 800878c:	10a4      	asrs	r4, r4, #2
 800878e:	2600      	movs	r6, #0
 8008790:	42a6      	cmp	r6, r4
 8008792:	d109      	bne.n	80087a8 <__libc_init_array+0x24>
 8008794:	4d0b      	ldr	r5, [pc, #44]	; (80087c4 <__libc_init_array+0x40>)
 8008796:	4c0c      	ldr	r4, [pc, #48]	; (80087c8 <__libc_init_array+0x44>)
 8008798:	f000 fbae 	bl	8008ef8 <_init>
 800879c:	1b64      	subs	r4, r4, r5
 800879e:	10a4      	asrs	r4, r4, #2
 80087a0:	2600      	movs	r6, #0
 80087a2:	42a6      	cmp	r6, r4
 80087a4:	d105      	bne.n	80087b2 <__libc_init_array+0x2e>
 80087a6:	bd70      	pop	{r4, r5, r6, pc}
 80087a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ac:	4798      	blx	r3
 80087ae:	3601      	adds	r6, #1
 80087b0:	e7ee      	b.n	8008790 <__libc_init_array+0xc>
 80087b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80087b6:	4798      	blx	r3
 80087b8:	3601      	adds	r6, #1
 80087ba:	e7f2      	b.n	80087a2 <__libc_init_array+0x1e>
 80087bc:	08008fc8 	.word	0x08008fc8
 80087c0:	08008fc8 	.word	0x08008fc8
 80087c4:	08008fc8 	.word	0x08008fc8
 80087c8:	08008fcc 	.word	0x08008fcc

080087cc <__retarget_lock_acquire_recursive>:
 80087cc:	4770      	bx	lr

080087ce <__retarget_lock_release_recursive>:
 80087ce:	4770      	bx	lr

080087d0 <_free_r>:
 80087d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087d2:	2900      	cmp	r1, #0
 80087d4:	d044      	beq.n	8008860 <_free_r+0x90>
 80087d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087da:	9001      	str	r0, [sp, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f1a1 0404 	sub.w	r4, r1, #4
 80087e2:	bfb8      	it	lt
 80087e4:	18e4      	addlt	r4, r4, r3
 80087e6:	f7ff ff83 	bl	80086f0 <__malloc_lock>
 80087ea:	4a1e      	ldr	r2, [pc, #120]	; (8008864 <_free_r+0x94>)
 80087ec:	9801      	ldr	r0, [sp, #4]
 80087ee:	6813      	ldr	r3, [r2, #0]
 80087f0:	b933      	cbnz	r3, 8008800 <_free_r+0x30>
 80087f2:	6063      	str	r3, [r4, #4]
 80087f4:	6014      	str	r4, [r2, #0]
 80087f6:	b003      	add	sp, #12
 80087f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087fc:	f7ff bf7e 	b.w	80086fc <__malloc_unlock>
 8008800:	42a3      	cmp	r3, r4
 8008802:	d908      	bls.n	8008816 <_free_r+0x46>
 8008804:	6825      	ldr	r5, [r4, #0]
 8008806:	1961      	adds	r1, r4, r5
 8008808:	428b      	cmp	r3, r1
 800880a:	bf01      	itttt	eq
 800880c:	6819      	ldreq	r1, [r3, #0]
 800880e:	685b      	ldreq	r3, [r3, #4]
 8008810:	1949      	addeq	r1, r1, r5
 8008812:	6021      	streq	r1, [r4, #0]
 8008814:	e7ed      	b.n	80087f2 <_free_r+0x22>
 8008816:	461a      	mov	r2, r3
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	b10b      	cbz	r3, 8008820 <_free_r+0x50>
 800881c:	42a3      	cmp	r3, r4
 800881e:	d9fa      	bls.n	8008816 <_free_r+0x46>
 8008820:	6811      	ldr	r1, [r2, #0]
 8008822:	1855      	adds	r5, r2, r1
 8008824:	42a5      	cmp	r5, r4
 8008826:	d10b      	bne.n	8008840 <_free_r+0x70>
 8008828:	6824      	ldr	r4, [r4, #0]
 800882a:	4421      	add	r1, r4
 800882c:	1854      	adds	r4, r2, r1
 800882e:	42a3      	cmp	r3, r4
 8008830:	6011      	str	r1, [r2, #0]
 8008832:	d1e0      	bne.n	80087f6 <_free_r+0x26>
 8008834:	681c      	ldr	r4, [r3, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	6053      	str	r3, [r2, #4]
 800883a:	440c      	add	r4, r1
 800883c:	6014      	str	r4, [r2, #0]
 800883e:	e7da      	b.n	80087f6 <_free_r+0x26>
 8008840:	d902      	bls.n	8008848 <_free_r+0x78>
 8008842:	230c      	movs	r3, #12
 8008844:	6003      	str	r3, [r0, #0]
 8008846:	e7d6      	b.n	80087f6 <_free_r+0x26>
 8008848:	6825      	ldr	r5, [r4, #0]
 800884a:	1961      	adds	r1, r4, r5
 800884c:	428b      	cmp	r3, r1
 800884e:	bf04      	itt	eq
 8008850:	6819      	ldreq	r1, [r3, #0]
 8008852:	685b      	ldreq	r3, [r3, #4]
 8008854:	6063      	str	r3, [r4, #4]
 8008856:	bf04      	itt	eq
 8008858:	1949      	addeq	r1, r1, r5
 800885a:	6021      	streq	r1, [r4, #0]
 800885c:	6054      	str	r4, [r2, #4]
 800885e:	e7ca      	b.n	80087f6 <_free_r+0x26>
 8008860:	b003      	add	sp, #12
 8008862:	bd30      	pop	{r4, r5, pc}
 8008864:	20001690 	.word	0x20001690

08008868 <__ssputs_r>:
 8008868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800886c:	688e      	ldr	r6, [r1, #8]
 800886e:	461f      	mov	r7, r3
 8008870:	42be      	cmp	r6, r7
 8008872:	680b      	ldr	r3, [r1, #0]
 8008874:	4682      	mov	sl, r0
 8008876:	460c      	mov	r4, r1
 8008878:	4690      	mov	r8, r2
 800887a:	d82c      	bhi.n	80088d6 <__ssputs_r+0x6e>
 800887c:	898a      	ldrh	r2, [r1, #12]
 800887e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008882:	d026      	beq.n	80088d2 <__ssputs_r+0x6a>
 8008884:	6965      	ldr	r5, [r4, #20]
 8008886:	6909      	ldr	r1, [r1, #16]
 8008888:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800888c:	eba3 0901 	sub.w	r9, r3, r1
 8008890:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008894:	1c7b      	adds	r3, r7, #1
 8008896:	444b      	add	r3, r9
 8008898:	106d      	asrs	r5, r5, #1
 800889a:	429d      	cmp	r5, r3
 800889c:	bf38      	it	cc
 800889e:	461d      	movcc	r5, r3
 80088a0:	0553      	lsls	r3, r2, #21
 80088a2:	d527      	bpl.n	80088f4 <__ssputs_r+0x8c>
 80088a4:	4629      	mov	r1, r5
 80088a6:	f7ff fea3 	bl	80085f0 <_malloc_r>
 80088aa:	4606      	mov	r6, r0
 80088ac:	b360      	cbz	r0, 8008908 <__ssputs_r+0xa0>
 80088ae:	6921      	ldr	r1, [r4, #16]
 80088b0:	464a      	mov	r2, r9
 80088b2:	f000 fadb 	bl	8008e6c <memcpy>
 80088b6:	89a3      	ldrh	r3, [r4, #12]
 80088b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c0:	81a3      	strh	r3, [r4, #12]
 80088c2:	6126      	str	r6, [r4, #16]
 80088c4:	6165      	str	r5, [r4, #20]
 80088c6:	444e      	add	r6, r9
 80088c8:	eba5 0509 	sub.w	r5, r5, r9
 80088cc:	6026      	str	r6, [r4, #0]
 80088ce:	60a5      	str	r5, [r4, #8]
 80088d0:	463e      	mov	r6, r7
 80088d2:	42be      	cmp	r6, r7
 80088d4:	d900      	bls.n	80088d8 <__ssputs_r+0x70>
 80088d6:	463e      	mov	r6, r7
 80088d8:	6820      	ldr	r0, [r4, #0]
 80088da:	4632      	mov	r2, r6
 80088dc:	4641      	mov	r1, r8
 80088de:	f000 faab 	bl	8008e38 <memmove>
 80088e2:	68a3      	ldr	r3, [r4, #8]
 80088e4:	1b9b      	subs	r3, r3, r6
 80088e6:	60a3      	str	r3, [r4, #8]
 80088e8:	6823      	ldr	r3, [r4, #0]
 80088ea:	4433      	add	r3, r6
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	2000      	movs	r0, #0
 80088f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f4:	462a      	mov	r2, r5
 80088f6:	f000 fac7 	bl	8008e88 <_realloc_r>
 80088fa:	4606      	mov	r6, r0
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d1e0      	bne.n	80088c2 <__ssputs_r+0x5a>
 8008900:	6921      	ldr	r1, [r4, #16]
 8008902:	4650      	mov	r0, sl
 8008904:	f7ff ff64 	bl	80087d0 <_free_r>
 8008908:	230c      	movs	r3, #12
 800890a:	f8ca 3000 	str.w	r3, [sl]
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008914:	81a3      	strh	r3, [r4, #12]
 8008916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800891a:	e7e9      	b.n	80088f0 <__ssputs_r+0x88>

0800891c <_svfiprintf_r>:
 800891c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008920:	4698      	mov	r8, r3
 8008922:	898b      	ldrh	r3, [r1, #12]
 8008924:	061b      	lsls	r3, r3, #24
 8008926:	b09d      	sub	sp, #116	; 0x74
 8008928:	4607      	mov	r7, r0
 800892a:	460d      	mov	r5, r1
 800892c:	4614      	mov	r4, r2
 800892e:	d50e      	bpl.n	800894e <_svfiprintf_r+0x32>
 8008930:	690b      	ldr	r3, [r1, #16]
 8008932:	b963      	cbnz	r3, 800894e <_svfiprintf_r+0x32>
 8008934:	2140      	movs	r1, #64	; 0x40
 8008936:	f7ff fe5b 	bl	80085f0 <_malloc_r>
 800893a:	6028      	str	r0, [r5, #0]
 800893c:	6128      	str	r0, [r5, #16]
 800893e:	b920      	cbnz	r0, 800894a <_svfiprintf_r+0x2e>
 8008940:	230c      	movs	r3, #12
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008948:	e0d0      	b.n	8008aec <_svfiprintf_r+0x1d0>
 800894a:	2340      	movs	r3, #64	; 0x40
 800894c:	616b      	str	r3, [r5, #20]
 800894e:	2300      	movs	r3, #0
 8008950:	9309      	str	r3, [sp, #36]	; 0x24
 8008952:	2320      	movs	r3, #32
 8008954:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008958:	f8cd 800c 	str.w	r8, [sp, #12]
 800895c:	2330      	movs	r3, #48	; 0x30
 800895e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008b04 <_svfiprintf_r+0x1e8>
 8008962:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008966:	f04f 0901 	mov.w	r9, #1
 800896a:	4623      	mov	r3, r4
 800896c:	469a      	mov	sl, r3
 800896e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008972:	b10a      	cbz	r2, 8008978 <_svfiprintf_r+0x5c>
 8008974:	2a25      	cmp	r2, #37	; 0x25
 8008976:	d1f9      	bne.n	800896c <_svfiprintf_r+0x50>
 8008978:	ebba 0b04 	subs.w	fp, sl, r4
 800897c:	d00b      	beq.n	8008996 <_svfiprintf_r+0x7a>
 800897e:	465b      	mov	r3, fp
 8008980:	4622      	mov	r2, r4
 8008982:	4629      	mov	r1, r5
 8008984:	4638      	mov	r0, r7
 8008986:	f7ff ff6f 	bl	8008868 <__ssputs_r>
 800898a:	3001      	adds	r0, #1
 800898c:	f000 80a9 	beq.w	8008ae2 <_svfiprintf_r+0x1c6>
 8008990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008992:	445a      	add	r2, fp
 8008994:	9209      	str	r2, [sp, #36]	; 0x24
 8008996:	f89a 3000 	ldrb.w	r3, [sl]
 800899a:	2b00      	cmp	r3, #0
 800899c:	f000 80a1 	beq.w	8008ae2 <_svfiprintf_r+0x1c6>
 80089a0:	2300      	movs	r3, #0
 80089a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089aa:	f10a 0a01 	add.w	sl, sl, #1
 80089ae:	9304      	str	r3, [sp, #16]
 80089b0:	9307      	str	r3, [sp, #28]
 80089b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089b6:	931a      	str	r3, [sp, #104]	; 0x68
 80089b8:	4654      	mov	r4, sl
 80089ba:	2205      	movs	r2, #5
 80089bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089c0:	4850      	ldr	r0, [pc, #320]	; (8008b04 <_svfiprintf_r+0x1e8>)
 80089c2:	f7f7 fc15 	bl	80001f0 <memchr>
 80089c6:	9a04      	ldr	r2, [sp, #16]
 80089c8:	b9d8      	cbnz	r0, 8008a02 <_svfiprintf_r+0xe6>
 80089ca:	06d0      	lsls	r0, r2, #27
 80089cc:	bf44      	itt	mi
 80089ce:	2320      	movmi	r3, #32
 80089d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089d4:	0711      	lsls	r1, r2, #28
 80089d6:	bf44      	itt	mi
 80089d8:	232b      	movmi	r3, #43	; 0x2b
 80089da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089de:	f89a 3000 	ldrb.w	r3, [sl]
 80089e2:	2b2a      	cmp	r3, #42	; 0x2a
 80089e4:	d015      	beq.n	8008a12 <_svfiprintf_r+0xf6>
 80089e6:	9a07      	ldr	r2, [sp, #28]
 80089e8:	4654      	mov	r4, sl
 80089ea:	2000      	movs	r0, #0
 80089ec:	f04f 0c0a 	mov.w	ip, #10
 80089f0:	4621      	mov	r1, r4
 80089f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089f6:	3b30      	subs	r3, #48	; 0x30
 80089f8:	2b09      	cmp	r3, #9
 80089fa:	d94d      	bls.n	8008a98 <_svfiprintf_r+0x17c>
 80089fc:	b1b0      	cbz	r0, 8008a2c <_svfiprintf_r+0x110>
 80089fe:	9207      	str	r2, [sp, #28]
 8008a00:	e014      	b.n	8008a2c <_svfiprintf_r+0x110>
 8008a02:	eba0 0308 	sub.w	r3, r0, r8
 8008a06:	fa09 f303 	lsl.w	r3, r9, r3
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	9304      	str	r3, [sp, #16]
 8008a0e:	46a2      	mov	sl, r4
 8008a10:	e7d2      	b.n	80089b8 <_svfiprintf_r+0x9c>
 8008a12:	9b03      	ldr	r3, [sp, #12]
 8008a14:	1d19      	adds	r1, r3, #4
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	9103      	str	r1, [sp, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	bfbb      	ittet	lt
 8008a1e:	425b      	neglt	r3, r3
 8008a20:	f042 0202 	orrlt.w	r2, r2, #2
 8008a24:	9307      	strge	r3, [sp, #28]
 8008a26:	9307      	strlt	r3, [sp, #28]
 8008a28:	bfb8      	it	lt
 8008a2a:	9204      	strlt	r2, [sp, #16]
 8008a2c:	7823      	ldrb	r3, [r4, #0]
 8008a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8008a30:	d10c      	bne.n	8008a4c <_svfiprintf_r+0x130>
 8008a32:	7863      	ldrb	r3, [r4, #1]
 8008a34:	2b2a      	cmp	r3, #42	; 0x2a
 8008a36:	d134      	bne.n	8008aa2 <_svfiprintf_r+0x186>
 8008a38:	9b03      	ldr	r3, [sp, #12]
 8008a3a:	1d1a      	adds	r2, r3, #4
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	9203      	str	r2, [sp, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	bfb8      	it	lt
 8008a44:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008a48:	3402      	adds	r4, #2
 8008a4a:	9305      	str	r3, [sp, #20]
 8008a4c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008b14 <_svfiprintf_r+0x1f8>
 8008a50:	7821      	ldrb	r1, [r4, #0]
 8008a52:	2203      	movs	r2, #3
 8008a54:	4650      	mov	r0, sl
 8008a56:	f7f7 fbcb 	bl	80001f0 <memchr>
 8008a5a:	b138      	cbz	r0, 8008a6c <_svfiprintf_r+0x150>
 8008a5c:	9b04      	ldr	r3, [sp, #16]
 8008a5e:	eba0 000a 	sub.w	r0, r0, sl
 8008a62:	2240      	movs	r2, #64	; 0x40
 8008a64:	4082      	lsls	r2, r0
 8008a66:	4313      	orrs	r3, r2
 8008a68:	3401      	adds	r4, #1
 8008a6a:	9304      	str	r3, [sp, #16]
 8008a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a70:	4825      	ldr	r0, [pc, #148]	; (8008b08 <_svfiprintf_r+0x1ec>)
 8008a72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a76:	2206      	movs	r2, #6
 8008a78:	f7f7 fbba 	bl	80001f0 <memchr>
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	d038      	beq.n	8008af2 <_svfiprintf_r+0x1d6>
 8008a80:	4b22      	ldr	r3, [pc, #136]	; (8008b0c <_svfiprintf_r+0x1f0>)
 8008a82:	bb1b      	cbnz	r3, 8008acc <_svfiprintf_r+0x1b0>
 8008a84:	9b03      	ldr	r3, [sp, #12]
 8008a86:	3307      	adds	r3, #7
 8008a88:	f023 0307 	bic.w	r3, r3, #7
 8008a8c:	3308      	adds	r3, #8
 8008a8e:	9303      	str	r3, [sp, #12]
 8008a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a92:	4433      	add	r3, r6
 8008a94:	9309      	str	r3, [sp, #36]	; 0x24
 8008a96:	e768      	b.n	800896a <_svfiprintf_r+0x4e>
 8008a98:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a9c:	460c      	mov	r4, r1
 8008a9e:	2001      	movs	r0, #1
 8008aa0:	e7a6      	b.n	80089f0 <_svfiprintf_r+0xd4>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	3401      	adds	r4, #1
 8008aa6:	9305      	str	r3, [sp, #20]
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	f04f 0c0a 	mov.w	ip, #10
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ab4:	3a30      	subs	r2, #48	; 0x30
 8008ab6:	2a09      	cmp	r2, #9
 8008ab8:	d903      	bls.n	8008ac2 <_svfiprintf_r+0x1a6>
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d0c6      	beq.n	8008a4c <_svfiprintf_r+0x130>
 8008abe:	9105      	str	r1, [sp, #20]
 8008ac0:	e7c4      	b.n	8008a4c <_svfiprintf_r+0x130>
 8008ac2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e7f0      	b.n	8008aae <_svfiprintf_r+0x192>
 8008acc:	ab03      	add	r3, sp, #12
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	462a      	mov	r2, r5
 8008ad2:	4b0f      	ldr	r3, [pc, #60]	; (8008b10 <_svfiprintf_r+0x1f4>)
 8008ad4:	a904      	add	r1, sp, #16
 8008ad6:	4638      	mov	r0, r7
 8008ad8:	f3af 8000 	nop.w
 8008adc:	1c42      	adds	r2, r0, #1
 8008ade:	4606      	mov	r6, r0
 8008ae0:	d1d6      	bne.n	8008a90 <_svfiprintf_r+0x174>
 8008ae2:	89ab      	ldrh	r3, [r5, #12]
 8008ae4:	065b      	lsls	r3, r3, #25
 8008ae6:	f53f af2d 	bmi.w	8008944 <_svfiprintf_r+0x28>
 8008aea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008aec:	b01d      	add	sp, #116	; 0x74
 8008aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af2:	ab03      	add	r3, sp, #12
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	462a      	mov	r2, r5
 8008af8:	4b05      	ldr	r3, [pc, #20]	; (8008b10 <_svfiprintf_r+0x1f4>)
 8008afa:	a904      	add	r1, sp, #16
 8008afc:	4638      	mov	r0, r7
 8008afe:	f000 f879 	bl	8008bf4 <_printf_i>
 8008b02:	e7eb      	b.n	8008adc <_svfiprintf_r+0x1c0>
 8008b04:	08008f8c 	.word	0x08008f8c
 8008b08:	08008f96 	.word	0x08008f96
 8008b0c:	00000000 	.word	0x00000000
 8008b10:	08008869 	.word	0x08008869
 8008b14:	08008f92 	.word	0x08008f92

08008b18 <_printf_common>:
 8008b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b1c:	4616      	mov	r6, r2
 8008b1e:	4699      	mov	r9, r3
 8008b20:	688a      	ldr	r2, [r1, #8]
 8008b22:	690b      	ldr	r3, [r1, #16]
 8008b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	bfb8      	it	lt
 8008b2c:	4613      	movlt	r3, r2
 8008b2e:	6033      	str	r3, [r6, #0]
 8008b30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b34:	4607      	mov	r7, r0
 8008b36:	460c      	mov	r4, r1
 8008b38:	b10a      	cbz	r2, 8008b3e <_printf_common+0x26>
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	6033      	str	r3, [r6, #0]
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	0699      	lsls	r1, r3, #26
 8008b42:	bf42      	ittt	mi
 8008b44:	6833      	ldrmi	r3, [r6, #0]
 8008b46:	3302      	addmi	r3, #2
 8008b48:	6033      	strmi	r3, [r6, #0]
 8008b4a:	6825      	ldr	r5, [r4, #0]
 8008b4c:	f015 0506 	ands.w	r5, r5, #6
 8008b50:	d106      	bne.n	8008b60 <_printf_common+0x48>
 8008b52:	f104 0a19 	add.w	sl, r4, #25
 8008b56:	68e3      	ldr	r3, [r4, #12]
 8008b58:	6832      	ldr	r2, [r6, #0]
 8008b5a:	1a9b      	subs	r3, r3, r2
 8008b5c:	42ab      	cmp	r3, r5
 8008b5e:	dc26      	bgt.n	8008bae <_printf_common+0x96>
 8008b60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b64:	1e13      	subs	r3, r2, #0
 8008b66:	6822      	ldr	r2, [r4, #0]
 8008b68:	bf18      	it	ne
 8008b6a:	2301      	movne	r3, #1
 8008b6c:	0692      	lsls	r2, r2, #26
 8008b6e:	d42b      	bmi.n	8008bc8 <_printf_common+0xb0>
 8008b70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b74:	4649      	mov	r1, r9
 8008b76:	4638      	mov	r0, r7
 8008b78:	47c0      	blx	r8
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	d01e      	beq.n	8008bbc <_printf_common+0xa4>
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	6922      	ldr	r2, [r4, #16]
 8008b82:	f003 0306 	and.w	r3, r3, #6
 8008b86:	2b04      	cmp	r3, #4
 8008b88:	bf02      	ittt	eq
 8008b8a:	68e5      	ldreq	r5, [r4, #12]
 8008b8c:	6833      	ldreq	r3, [r6, #0]
 8008b8e:	1aed      	subeq	r5, r5, r3
 8008b90:	68a3      	ldr	r3, [r4, #8]
 8008b92:	bf0c      	ite	eq
 8008b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b98:	2500      	movne	r5, #0
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	bfc4      	itt	gt
 8008b9e:	1a9b      	subgt	r3, r3, r2
 8008ba0:	18ed      	addgt	r5, r5, r3
 8008ba2:	2600      	movs	r6, #0
 8008ba4:	341a      	adds	r4, #26
 8008ba6:	42b5      	cmp	r5, r6
 8008ba8:	d11a      	bne.n	8008be0 <_printf_common+0xc8>
 8008baa:	2000      	movs	r0, #0
 8008bac:	e008      	b.n	8008bc0 <_printf_common+0xa8>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	4652      	mov	r2, sl
 8008bb2:	4649      	mov	r1, r9
 8008bb4:	4638      	mov	r0, r7
 8008bb6:	47c0      	blx	r8
 8008bb8:	3001      	adds	r0, #1
 8008bba:	d103      	bne.n	8008bc4 <_printf_common+0xac>
 8008bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc4:	3501      	adds	r5, #1
 8008bc6:	e7c6      	b.n	8008b56 <_printf_common+0x3e>
 8008bc8:	18e1      	adds	r1, r4, r3
 8008bca:	1c5a      	adds	r2, r3, #1
 8008bcc:	2030      	movs	r0, #48	; 0x30
 8008bce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bd2:	4422      	add	r2, r4
 8008bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bdc:	3302      	adds	r3, #2
 8008bde:	e7c7      	b.n	8008b70 <_printf_common+0x58>
 8008be0:	2301      	movs	r3, #1
 8008be2:	4622      	mov	r2, r4
 8008be4:	4649      	mov	r1, r9
 8008be6:	4638      	mov	r0, r7
 8008be8:	47c0      	blx	r8
 8008bea:	3001      	adds	r0, #1
 8008bec:	d0e6      	beq.n	8008bbc <_printf_common+0xa4>
 8008bee:	3601      	adds	r6, #1
 8008bf0:	e7d9      	b.n	8008ba6 <_printf_common+0x8e>
	...

08008bf4 <_printf_i>:
 8008bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf8:	7e0f      	ldrb	r7, [r1, #24]
 8008bfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bfc:	2f78      	cmp	r7, #120	; 0x78
 8008bfe:	4691      	mov	r9, r2
 8008c00:	4680      	mov	r8, r0
 8008c02:	460c      	mov	r4, r1
 8008c04:	469a      	mov	sl, r3
 8008c06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c0a:	d807      	bhi.n	8008c1c <_printf_i+0x28>
 8008c0c:	2f62      	cmp	r7, #98	; 0x62
 8008c0e:	d80a      	bhi.n	8008c26 <_printf_i+0x32>
 8008c10:	2f00      	cmp	r7, #0
 8008c12:	f000 80d4 	beq.w	8008dbe <_printf_i+0x1ca>
 8008c16:	2f58      	cmp	r7, #88	; 0x58
 8008c18:	f000 80c0 	beq.w	8008d9c <_printf_i+0x1a8>
 8008c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c24:	e03a      	b.n	8008c9c <_printf_i+0xa8>
 8008c26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c2a:	2b15      	cmp	r3, #21
 8008c2c:	d8f6      	bhi.n	8008c1c <_printf_i+0x28>
 8008c2e:	a101      	add	r1, pc, #4	; (adr r1, 8008c34 <_printf_i+0x40>)
 8008c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c34:	08008c8d 	.word	0x08008c8d
 8008c38:	08008ca1 	.word	0x08008ca1
 8008c3c:	08008c1d 	.word	0x08008c1d
 8008c40:	08008c1d 	.word	0x08008c1d
 8008c44:	08008c1d 	.word	0x08008c1d
 8008c48:	08008c1d 	.word	0x08008c1d
 8008c4c:	08008ca1 	.word	0x08008ca1
 8008c50:	08008c1d 	.word	0x08008c1d
 8008c54:	08008c1d 	.word	0x08008c1d
 8008c58:	08008c1d 	.word	0x08008c1d
 8008c5c:	08008c1d 	.word	0x08008c1d
 8008c60:	08008da5 	.word	0x08008da5
 8008c64:	08008ccd 	.word	0x08008ccd
 8008c68:	08008d5f 	.word	0x08008d5f
 8008c6c:	08008c1d 	.word	0x08008c1d
 8008c70:	08008c1d 	.word	0x08008c1d
 8008c74:	08008dc7 	.word	0x08008dc7
 8008c78:	08008c1d 	.word	0x08008c1d
 8008c7c:	08008ccd 	.word	0x08008ccd
 8008c80:	08008c1d 	.word	0x08008c1d
 8008c84:	08008c1d 	.word	0x08008c1d
 8008c88:	08008d67 	.word	0x08008d67
 8008c8c:	682b      	ldr	r3, [r5, #0]
 8008c8e:	1d1a      	adds	r2, r3, #4
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	602a      	str	r2, [r5, #0]
 8008c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e09f      	b.n	8008de0 <_printf_i+0x1ec>
 8008ca0:	6820      	ldr	r0, [r4, #0]
 8008ca2:	682b      	ldr	r3, [r5, #0]
 8008ca4:	0607      	lsls	r7, r0, #24
 8008ca6:	f103 0104 	add.w	r1, r3, #4
 8008caa:	6029      	str	r1, [r5, #0]
 8008cac:	d501      	bpl.n	8008cb2 <_printf_i+0xbe>
 8008cae:	681e      	ldr	r6, [r3, #0]
 8008cb0:	e003      	b.n	8008cba <_printf_i+0xc6>
 8008cb2:	0646      	lsls	r6, r0, #25
 8008cb4:	d5fb      	bpl.n	8008cae <_printf_i+0xba>
 8008cb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008cba:	2e00      	cmp	r6, #0
 8008cbc:	da03      	bge.n	8008cc6 <_printf_i+0xd2>
 8008cbe:	232d      	movs	r3, #45	; 0x2d
 8008cc0:	4276      	negs	r6, r6
 8008cc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cc6:	485a      	ldr	r0, [pc, #360]	; (8008e30 <_printf_i+0x23c>)
 8008cc8:	230a      	movs	r3, #10
 8008cca:	e012      	b.n	8008cf2 <_printf_i+0xfe>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	6820      	ldr	r0, [r4, #0]
 8008cd0:	1d19      	adds	r1, r3, #4
 8008cd2:	6029      	str	r1, [r5, #0]
 8008cd4:	0605      	lsls	r5, r0, #24
 8008cd6:	d501      	bpl.n	8008cdc <_printf_i+0xe8>
 8008cd8:	681e      	ldr	r6, [r3, #0]
 8008cda:	e002      	b.n	8008ce2 <_printf_i+0xee>
 8008cdc:	0641      	lsls	r1, r0, #25
 8008cde:	d5fb      	bpl.n	8008cd8 <_printf_i+0xe4>
 8008ce0:	881e      	ldrh	r6, [r3, #0]
 8008ce2:	4853      	ldr	r0, [pc, #332]	; (8008e30 <_printf_i+0x23c>)
 8008ce4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ce6:	bf0c      	ite	eq
 8008ce8:	2308      	moveq	r3, #8
 8008cea:	230a      	movne	r3, #10
 8008cec:	2100      	movs	r1, #0
 8008cee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cf2:	6865      	ldr	r5, [r4, #4]
 8008cf4:	60a5      	str	r5, [r4, #8]
 8008cf6:	2d00      	cmp	r5, #0
 8008cf8:	bfa2      	ittt	ge
 8008cfa:	6821      	ldrge	r1, [r4, #0]
 8008cfc:	f021 0104 	bicge.w	r1, r1, #4
 8008d00:	6021      	strge	r1, [r4, #0]
 8008d02:	b90e      	cbnz	r6, 8008d08 <_printf_i+0x114>
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	d04b      	beq.n	8008da0 <_printf_i+0x1ac>
 8008d08:	4615      	mov	r5, r2
 8008d0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d0e:	fb03 6711 	mls	r7, r3, r1, r6
 8008d12:	5dc7      	ldrb	r7, [r0, r7]
 8008d14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d18:	4637      	mov	r7, r6
 8008d1a:	42bb      	cmp	r3, r7
 8008d1c:	460e      	mov	r6, r1
 8008d1e:	d9f4      	bls.n	8008d0a <_printf_i+0x116>
 8008d20:	2b08      	cmp	r3, #8
 8008d22:	d10b      	bne.n	8008d3c <_printf_i+0x148>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	07de      	lsls	r6, r3, #31
 8008d28:	d508      	bpl.n	8008d3c <_printf_i+0x148>
 8008d2a:	6923      	ldr	r3, [r4, #16]
 8008d2c:	6861      	ldr	r1, [r4, #4]
 8008d2e:	4299      	cmp	r1, r3
 8008d30:	bfde      	ittt	le
 8008d32:	2330      	movle	r3, #48	; 0x30
 8008d34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d38:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008d3c:	1b52      	subs	r2, r2, r5
 8008d3e:	6122      	str	r2, [r4, #16]
 8008d40:	f8cd a000 	str.w	sl, [sp]
 8008d44:	464b      	mov	r3, r9
 8008d46:	aa03      	add	r2, sp, #12
 8008d48:	4621      	mov	r1, r4
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	f7ff fee4 	bl	8008b18 <_printf_common>
 8008d50:	3001      	adds	r0, #1
 8008d52:	d14a      	bne.n	8008dea <_printf_i+0x1f6>
 8008d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d58:	b004      	add	sp, #16
 8008d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d5e:	6823      	ldr	r3, [r4, #0]
 8008d60:	f043 0320 	orr.w	r3, r3, #32
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	4833      	ldr	r0, [pc, #204]	; (8008e34 <_printf_i+0x240>)
 8008d68:	2778      	movs	r7, #120	; 0x78
 8008d6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d6e:	6823      	ldr	r3, [r4, #0]
 8008d70:	6829      	ldr	r1, [r5, #0]
 8008d72:	061f      	lsls	r7, r3, #24
 8008d74:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d78:	d402      	bmi.n	8008d80 <_printf_i+0x18c>
 8008d7a:	065f      	lsls	r7, r3, #25
 8008d7c:	bf48      	it	mi
 8008d7e:	b2b6      	uxthmi	r6, r6
 8008d80:	07df      	lsls	r7, r3, #31
 8008d82:	bf48      	it	mi
 8008d84:	f043 0320 	orrmi.w	r3, r3, #32
 8008d88:	6029      	str	r1, [r5, #0]
 8008d8a:	bf48      	it	mi
 8008d8c:	6023      	strmi	r3, [r4, #0]
 8008d8e:	b91e      	cbnz	r6, 8008d98 <_printf_i+0x1a4>
 8008d90:	6823      	ldr	r3, [r4, #0]
 8008d92:	f023 0320 	bic.w	r3, r3, #32
 8008d96:	6023      	str	r3, [r4, #0]
 8008d98:	2310      	movs	r3, #16
 8008d9a:	e7a7      	b.n	8008cec <_printf_i+0xf8>
 8008d9c:	4824      	ldr	r0, [pc, #144]	; (8008e30 <_printf_i+0x23c>)
 8008d9e:	e7e4      	b.n	8008d6a <_printf_i+0x176>
 8008da0:	4615      	mov	r5, r2
 8008da2:	e7bd      	b.n	8008d20 <_printf_i+0x12c>
 8008da4:	682b      	ldr	r3, [r5, #0]
 8008da6:	6826      	ldr	r6, [r4, #0]
 8008da8:	6961      	ldr	r1, [r4, #20]
 8008daa:	1d18      	adds	r0, r3, #4
 8008dac:	6028      	str	r0, [r5, #0]
 8008dae:	0635      	lsls	r5, r6, #24
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	d501      	bpl.n	8008db8 <_printf_i+0x1c4>
 8008db4:	6019      	str	r1, [r3, #0]
 8008db6:	e002      	b.n	8008dbe <_printf_i+0x1ca>
 8008db8:	0670      	lsls	r0, r6, #25
 8008dba:	d5fb      	bpl.n	8008db4 <_printf_i+0x1c0>
 8008dbc:	8019      	strh	r1, [r3, #0]
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	6123      	str	r3, [r4, #16]
 8008dc2:	4615      	mov	r5, r2
 8008dc4:	e7bc      	b.n	8008d40 <_printf_i+0x14c>
 8008dc6:	682b      	ldr	r3, [r5, #0]
 8008dc8:	1d1a      	adds	r2, r3, #4
 8008dca:	602a      	str	r2, [r5, #0]
 8008dcc:	681d      	ldr	r5, [r3, #0]
 8008dce:	6862      	ldr	r2, [r4, #4]
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	f7f7 fa0c 	bl	80001f0 <memchr>
 8008dd8:	b108      	cbz	r0, 8008dde <_printf_i+0x1ea>
 8008dda:	1b40      	subs	r0, r0, r5
 8008ddc:	6060      	str	r0, [r4, #4]
 8008dde:	6863      	ldr	r3, [r4, #4]
 8008de0:	6123      	str	r3, [r4, #16]
 8008de2:	2300      	movs	r3, #0
 8008de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008de8:	e7aa      	b.n	8008d40 <_printf_i+0x14c>
 8008dea:	6923      	ldr	r3, [r4, #16]
 8008dec:	462a      	mov	r2, r5
 8008dee:	4649      	mov	r1, r9
 8008df0:	4640      	mov	r0, r8
 8008df2:	47d0      	blx	sl
 8008df4:	3001      	adds	r0, #1
 8008df6:	d0ad      	beq.n	8008d54 <_printf_i+0x160>
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	079b      	lsls	r3, r3, #30
 8008dfc:	d413      	bmi.n	8008e26 <_printf_i+0x232>
 8008dfe:	68e0      	ldr	r0, [r4, #12]
 8008e00:	9b03      	ldr	r3, [sp, #12]
 8008e02:	4298      	cmp	r0, r3
 8008e04:	bfb8      	it	lt
 8008e06:	4618      	movlt	r0, r3
 8008e08:	e7a6      	b.n	8008d58 <_printf_i+0x164>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	4632      	mov	r2, r6
 8008e0e:	4649      	mov	r1, r9
 8008e10:	4640      	mov	r0, r8
 8008e12:	47d0      	blx	sl
 8008e14:	3001      	adds	r0, #1
 8008e16:	d09d      	beq.n	8008d54 <_printf_i+0x160>
 8008e18:	3501      	adds	r5, #1
 8008e1a:	68e3      	ldr	r3, [r4, #12]
 8008e1c:	9903      	ldr	r1, [sp, #12]
 8008e1e:	1a5b      	subs	r3, r3, r1
 8008e20:	42ab      	cmp	r3, r5
 8008e22:	dcf2      	bgt.n	8008e0a <_printf_i+0x216>
 8008e24:	e7eb      	b.n	8008dfe <_printf_i+0x20a>
 8008e26:	2500      	movs	r5, #0
 8008e28:	f104 0619 	add.w	r6, r4, #25
 8008e2c:	e7f5      	b.n	8008e1a <_printf_i+0x226>
 8008e2e:	bf00      	nop
 8008e30:	08008f9d 	.word	0x08008f9d
 8008e34:	08008fae 	.word	0x08008fae

08008e38 <memmove>:
 8008e38:	4288      	cmp	r0, r1
 8008e3a:	b510      	push	{r4, lr}
 8008e3c:	eb01 0402 	add.w	r4, r1, r2
 8008e40:	d902      	bls.n	8008e48 <memmove+0x10>
 8008e42:	4284      	cmp	r4, r0
 8008e44:	4623      	mov	r3, r4
 8008e46:	d807      	bhi.n	8008e58 <memmove+0x20>
 8008e48:	1e43      	subs	r3, r0, #1
 8008e4a:	42a1      	cmp	r1, r4
 8008e4c:	d008      	beq.n	8008e60 <memmove+0x28>
 8008e4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e56:	e7f8      	b.n	8008e4a <memmove+0x12>
 8008e58:	4402      	add	r2, r0
 8008e5a:	4601      	mov	r1, r0
 8008e5c:	428a      	cmp	r2, r1
 8008e5e:	d100      	bne.n	8008e62 <memmove+0x2a>
 8008e60:	bd10      	pop	{r4, pc}
 8008e62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e6a:	e7f7      	b.n	8008e5c <memmove+0x24>

08008e6c <memcpy>:
 8008e6c:	440a      	add	r2, r1
 8008e6e:	4291      	cmp	r1, r2
 8008e70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008e74:	d100      	bne.n	8008e78 <memcpy+0xc>
 8008e76:	4770      	bx	lr
 8008e78:	b510      	push	{r4, lr}
 8008e7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e82:	4291      	cmp	r1, r2
 8008e84:	d1f9      	bne.n	8008e7a <memcpy+0xe>
 8008e86:	bd10      	pop	{r4, pc}

08008e88 <_realloc_r>:
 8008e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e8c:	4680      	mov	r8, r0
 8008e8e:	4614      	mov	r4, r2
 8008e90:	460e      	mov	r6, r1
 8008e92:	b921      	cbnz	r1, 8008e9e <_realloc_r+0x16>
 8008e94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e98:	4611      	mov	r1, r2
 8008e9a:	f7ff bba9 	b.w	80085f0 <_malloc_r>
 8008e9e:	b92a      	cbnz	r2, 8008eac <_realloc_r+0x24>
 8008ea0:	f7ff fc96 	bl	80087d0 <_free_r>
 8008ea4:	4625      	mov	r5, r4
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eac:	f000 f81b 	bl	8008ee6 <_malloc_usable_size_r>
 8008eb0:	4284      	cmp	r4, r0
 8008eb2:	4607      	mov	r7, r0
 8008eb4:	d802      	bhi.n	8008ebc <_realloc_r+0x34>
 8008eb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008eba:	d812      	bhi.n	8008ee2 <_realloc_r+0x5a>
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	4640      	mov	r0, r8
 8008ec0:	f7ff fb96 	bl	80085f0 <_malloc_r>
 8008ec4:	4605      	mov	r5, r0
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	d0ed      	beq.n	8008ea6 <_realloc_r+0x1e>
 8008eca:	42bc      	cmp	r4, r7
 8008ecc:	4622      	mov	r2, r4
 8008ece:	4631      	mov	r1, r6
 8008ed0:	bf28      	it	cs
 8008ed2:	463a      	movcs	r2, r7
 8008ed4:	f7ff ffca 	bl	8008e6c <memcpy>
 8008ed8:	4631      	mov	r1, r6
 8008eda:	4640      	mov	r0, r8
 8008edc:	f7ff fc78 	bl	80087d0 <_free_r>
 8008ee0:	e7e1      	b.n	8008ea6 <_realloc_r+0x1e>
 8008ee2:	4635      	mov	r5, r6
 8008ee4:	e7df      	b.n	8008ea6 <_realloc_r+0x1e>

08008ee6 <_malloc_usable_size_r>:
 8008ee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eea:	1f18      	subs	r0, r3, #4
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	bfbc      	itt	lt
 8008ef0:	580b      	ldrlt	r3, [r1, r0]
 8008ef2:	18c0      	addlt	r0, r0, r3
 8008ef4:	4770      	bx	lr
	...

08008ef8 <_init>:
 8008ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efa:	bf00      	nop
 8008efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008efe:	bc08      	pop	{r3}
 8008f00:	469e      	mov	lr, r3
 8008f02:	4770      	bx	lr

08008f04 <_fini>:
 8008f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f06:	bf00      	nop
 8008f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f0a:	bc08      	pop	{r3}
 8008f0c:	469e      	mov	lr, r3
 8008f0e:	4770      	bx	lr
