
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011848  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000748  080119e8  080119e8  000129e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012130  08012130  000142f4  2**0
                  CONTENTS
  4 .ARM          00000008  08012130  08012130  00013130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012138  08012138  000142f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012138  08012138  00013138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801213c  0801213c  0001313c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f4  20000000  08012140  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad0  200002f4  08012434  000142f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dc4  08012434  00014dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000142f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026c8c  00000000  00000000  00014324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006151  00000000  00000000  0003afb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020b8  00000000  00000000  00041108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001937  00000000  00000000  000431c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211b5  00000000  00000000  00044af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002eace  00000000  00000000  00065cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae199  00000000  00000000  0009477a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142913  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097fc  00000000  00000000  00142958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0014c154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002f4 	.word	0x200002f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080119d0 	.word	0x080119d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002f8 	.word	0x200002f8
 80001dc:	080119d0 	.word	0x080119d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <FreeRTOS_CreateStartUpTasks>:
extern ADC_HandleTypeDef hadc1;

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
void FreeRTOS_CreateStartUpTasks(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task: FlightController_Startup */
    ret = xTaskCreate(FlightController_StartUp, "FlightController_StartUp", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_STARTUP_PRIORITY), &FlightController_StartUp_Handle);
 8000f4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000ffc <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000f50:	9301      	str	r3, [sp, #4]
 8000f52:	2302      	movs	r3, #2
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2300      	movs	r3, #0
 8000f58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f5c:	4928      	ldr	r1, [pc, #160]	@ (8001000 <FreeRTOS_CreateStartUpTasks+0xb8>)
 8000f5e:	4829      	ldr	r0, [pc, #164]	@ (8001004 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8000f60:	f00b fdbe 	bl	800cae0 <xTaskCreate>
 8000f64:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d00b      	beq.n	8000f84 <FreeRTOS_CreateStartUpTasks+0x3c>
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortRaiseBASEPRI(void) {
    uint32_t ulNewBASEPRI;

    __asm volatile("	mov %0, %1												\n"
 8000f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f70:	f383 8811 	msr	BASEPRI, r3
 8000f74:	f3bf 8f6f 	isb	sy
 8000f78:	f3bf 8f4f 	dsb	sy
 8000f7c:	60bb      	str	r3, [r7, #8]
                   "	isb														\n"
                   "	dsb														\n"
                   : "=r"(ulNewBASEPRI)
                   : "i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
                   : "memory");
}
 8000f7e:	bf00      	nop
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <FreeRTOS_CreateStartUpTasks+0x38>

    if (FlightController_StartUp_Handle == NULL) {
 8000f84:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d104      	bne.n	8000f96 <FreeRTOS_CreateStartUpTasks+0x4e>
        vTaskDelete(FlightController_StartUp_Handle);
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ffc <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00b fed7 	bl	800cd44 <vTaskDelete>
    }

    /* Task: FlightController_OnOffButton */
    ret = xTaskCreate(FlightController_OnOffButton, "FlightController_OnOffButton", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_ONOFFBUTTON_PRIORITY), &FlightController_OnOffButton_Handle);
 8000f96:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <FreeRTOS_CreateStartUpTasks+0xc0>)
 8000f98:	9301      	str	r3, [sp, #4]
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fa4:	4919      	ldr	r1, [pc, #100]	@ (800100c <FreeRTOS_CreateStartUpTasks+0xc4>)
 8000fa6:	481a      	ldr	r0, [pc, #104]	@ (8001010 <FreeRTOS_CreateStartUpTasks+0xc8>)
 8000fa8:	f00b fd9a 	bl	800cae0 <xTaskCreate>
 8000fac:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d00b      	beq.n	8000fcc <FreeRTOS_CreateStartUpTasks+0x84>
    __asm volatile("	mov %0, %1												\n"
 8000fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fb8:	f383 8811 	msr	BASEPRI, r3
 8000fbc:	f3bf 8f6f 	isb	sy
 8000fc0:	f3bf 8f4f 	dsb	sy
 8000fc4:	607b      	str	r3, [r7, #4]
}
 8000fc6:	bf00      	nop
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <FreeRTOS_CreateStartUpTasks+0x80>

    if (FlightController_OnOffButton_Handle == NULL) {
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <FreeRTOS_CreateStartUpTasks+0xc0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d104      	bne.n	8000fde <FreeRTOS_CreateStartUpTasks+0x96>
        vTaskDelete(FlightController_OnOffButton_Handle);
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <FreeRTOS_CreateStartUpTasks+0xc0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f00b feb3 	bl	800cd44 <vTaskDelete>
    }

    /* Timer1: OnOff_Button */
    Timer1_Handle = xTimerCreate("OnOff_Button", 100, pdTRUE, (void *)0, Timer1_Callback);
 8000fde:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <FreeRTOS_CreateStartUpTasks+0xcc>)
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2164      	movs	r1, #100	@ 0x64
 8000fe8:	480b      	ldr	r0, [pc, #44]	@ (8001018 <FreeRTOS_CreateStartUpTasks+0xd0>)
 8000fea:	f00c fd1f 	bl	800da2c <xTimerCreate>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800101c <FreeRTOS_CreateStartUpTasks+0xd4>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000314 	.word	0x20000314
 8001000:	080119e8 	.word	0x080119e8
 8001004:	08001301 	.word	0x08001301
 8001008:	20000320 	.word	0x20000320
 800100c:	08011a04 	.word	0x08011a04
 8001010:	08001441 	.word	0x08001441
 8001014:	08001999 	.word	0x08001999
 8001018:	08011a24 	.word	0x08011a24
 800101c:	20000334 	.word	0x20000334

08001020 <FreeRTOS_CreateTasks>:

void FreeRTOS_CreateTasks(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	@ 0x28
 8001024:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task 1: FlightController_ControlSystem */
    ret = xTaskCreate(FlightController_ControlSystem, "FlightController_ControlSystem", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_CONTROLSYSTEM_PRIORITY), &FlightController_ControlSystem_Handle);
 8001026:	4b6e      	ldr	r3, [pc, #440]	@ (80011e0 <FreeRTOS_CreateTasks+0x1c0>)
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	2302      	movs	r3, #2
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2300      	movs	r3, #0
 8001030:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001034:	496b      	ldr	r1, [pc, #428]	@ (80011e4 <FreeRTOS_CreateTasks+0x1c4>)
 8001036:	486c      	ldr	r0, [pc, #432]	@ (80011e8 <FreeRTOS_CreateTasks+0x1c8>)
 8001038:	f00b fd52 	bl	800cae0 <xTaskCreate>
 800103c:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d00b      	beq.n	800105c <FreeRTOS_CreateTasks+0x3c>
    __asm volatile("	mov %0, %1												\n"
 8001044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001048:	f383 8811 	msr	BASEPRI, r3
 800104c:	f3bf 8f6f 	isb	sy
 8001050:	f3bf 8f4f 	dsb	sy
 8001054:	61bb      	str	r3, [r7, #24]
}
 8001056:	bf00      	nop
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <FreeRTOS_CreateTasks+0x38>

    if (FlightController_ControlSystem_Handle == NULL) {
 800105c:	4b60      	ldr	r3, [pc, #384]	@ (80011e0 <FreeRTOS_CreateTasks+0x1c0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d104      	bne.n	800106e <FreeRTOS_CreateTasks+0x4e>
        vTaskDelete(FlightController_ControlSystem_Handle);
 8001064:	4b5e      	ldr	r3, [pc, #376]	@ (80011e0 <FreeRTOS_CreateTasks+0x1c0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f00b fe6b 	bl	800cd44 <vTaskDelete>
    }

    /* Task 2: FlightController_Data_Logging */
    ret = xTaskCreate(FlightController_Data_Logging, "FlightController_Data_Logging", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_DATA_LOGGING_PRIORITY), &FlightController_Data_Logging_Handle);
 800106e:	4b5f      	ldr	r3, [pc, #380]	@ (80011ec <FreeRTOS_CreateTasks+0x1cc>)
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	2302      	movs	r3, #2
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2300      	movs	r3, #0
 8001078:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800107c:	495c      	ldr	r1, [pc, #368]	@ (80011f0 <FreeRTOS_CreateTasks+0x1d0>)
 800107e:	485d      	ldr	r0, [pc, #372]	@ (80011f4 <FreeRTOS_CreateTasks+0x1d4>)
 8001080:	f00b fd2e 	bl	800cae0 <xTaskCreate>
 8001084:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d00b      	beq.n	80010a4 <FreeRTOS_CreateTasks+0x84>
    __asm volatile("	mov %0, %1												\n"
 800108c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001090:	f383 8811 	msr	BASEPRI, r3
 8001094:	f3bf 8f6f 	isb	sy
 8001098:	f3bf 8f4f 	dsb	sy
 800109c:	617b      	str	r3, [r7, #20]
}
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <FreeRTOS_CreateTasks+0x80>

    if (FlightController_Data_Logging_Handle == NULL) {
 80010a4:	4b51      	ldr	r3, [pc, #324]	@ (80011ec <FreeRTOS_CreateTasks+0x1cc>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d104      	bne.n	80010b6 <FreeRTOS_CreateTasks+0x96>
        vTaskDelete(FlightController_Data_Logging_Handle);
 80010ac:	4b4f      	ldr	r3, [pc, #316]	@ (80011ec <FreeRTOS_CreateTasks+0x1cc>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f00b fe47 	bl	800cd44 <vTaskDelete>
    }

    /* Task 3: FlightController_BatteryLevel */
    ret = xTaskCreate(FlightController_BatteryLevel, "FlightController_BatteryLevel", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_BATTERYLEVEL_PRIORITY), &FlightController_BatteryLevel_Handle);
 80010b6:	4b50      	ldr	r3, [pc, #320]	@ (80011f8 <FreeRTOS_CreateTasks+0x1d8>)
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	2302      	movs	r3, #2
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2300      	movs	r3, #0
 80010c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010c4:	494d      	ldr	r1, [pc, #308]	@ (80011fc <FreeRTOS_CreateTasks+0x1dc>)
 80010c6:	484e      	ldr	r0, [pc, #312]	@ (8001200 <FreeRTOS_CreateTasks+0x1e0>)
 80010c8:	f00b fd0a 	bl	800cae0 <xTaskCreate>
 80010cc:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d00b      	beq.n	80010ec <FreeRTOS_CreateTasks+0xcc>
    __asm volatile("	mov %0, %1												\n"
 80010d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010d8:	f383 8811 	msr	BASEPRI, r3
 80010dc:	f3bf 8f6f 	isb	sy
 80010e0:	f3bf 8f4f 	dsb	sy
 80010e4:	613b      	str	r3, [r7, #16]
}
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <FreeRTOS_CreateTasks+0xc8>

    if (FlightController_BatteryLevel_Handle == NULL) {
 80010ec:	4b42      	ldr	r3, [pc, #264]	@ (80011f8 <FreeRTOS_CreateTasks+0x1d8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d104      	bne.n	80010fe <FreeRTOS_CreateTasks+0xde>
        vTaskDelete(FlightController_BatteryLevel_Handle);
 80010f4:	4b40      	ldr	r3, [pc, #256]	@ (80011f8 <FreeRTOS_CreateTasks+0x1d8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f00b fe23 	bl	800cd44 <vTaskDelete>
    }

    /* Task 4: FlightController_BatteryAlarm */
    ret = xTaskCreate(FlightController_BatteryAlarm, "FlightController_BatteryAlarm", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_BATTERYALARM_PRIORITY), &FlightController_BatteryAlarm_Handle);
 80010fe:	4b41      	ldr	r3, [pc, #260]	@ (8001204 <FreeRTOS_CreateTasks+0x1e4>)
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	2302      	movs	r3, #2
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2300      	movs	r3, #0
 8001108:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800110c:	493e      	ldr	r1, [pc, #248]	@ (8001208 <FreeRTOS_CreateTasks+0x1e8>)
 800110e:	483f      	ldr	r0, [pc, #252]	@ (800120c <FreeRTOS_CreateTasks+0x1ec>)
 8001110:	f00b fce6 	bl	800cae0 <xTaskCreate>
 8001114:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d00b      	beq.n	8001134 <FreeRTOS_CreateTasks+0x114>
    __asm volatile("	mov %0, %1												\n"
 800111c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001120:	f383 8811 	msr	BASEPRI, r3
 8001124:	f3bf 8f6f 	isb	sy
 8001128:	f3bf 8f4f 	dsb	sy
 800112c:	60fb      	str	r3, [r7, #12]
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <FreeRTOS_CreateTasks+0x110>

    if (FlightController_BatteryAlarm_Handle == NULL) {
 8001134:	4b33      	ldr	r3, [pc, #204]	@ (8001204 <FreeRTOS_CreateTasks+0x1e4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d104      	bne.n	8001146 <FreeRTOS_CreateTasks+0x126>
        vTaskDelete(FlightController_BatteryAlarm_Handle);
 800113c:	4b31      	ldr	r3, [pc, #196]	@ (8001204 <FreeRTOS_CreateTasks+0x1e4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f00b fdff 	bl	800cd44 <vTaskDelete>
    }

    /* Task 5: FlightController_HeartbeatLight */
    ret = xTaskCreate(FlightController_HeartbeatLight, "FlightController_HeartbeatLight", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_HEARTBEATLIGHT_PRIORITY), &FlightController_HeartbeatLight_Handle);
 8001146:	4b32      	ldr	r3, [pc, #200]	@ (8001210 <FreeRTOS_CreateTasks+0x1f0>)
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	2302      	movs	r3, #2
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2300      	movs	r3, #0
 8001150:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001154:	492f      	ldr	r1, [pc, #188]	@ (8001214 <FreeRTOS_CreateTasks+0x1f4>)
 8001156:	4830      	ldr	r0, [pc, #192]	@ (8001218 <FreeRTOS_CreateTasks+0x1f8>)
 8001158:	f00b fcc2 	bl	800cae0 <xTaskCreate>
 800115c:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d00b      	beq.n	800117c <FreeRTOS_CreateTasks+0x15c>
    __asm volatile("	mov %0, %1												\n"
 8001164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001168:	f383 8811 	msr	BASEPRI, r3
 800116c:	f3bf 8f6f 	isb	sy
 8001170:	f3bf 8f4f 	dsb	sy
 8001174:	60bb      	str	r3, [r7, #8]
}
 8001176:	bf00      	nop
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <FreeRTOS_CreateTasks+0x158>

    if (FlightController_HeartbeatLight_Handle == NULL) {
 800117c:	4b24      	ldr	r3, [pc, #144]	@ (8001210 <FreeRTOS_CreateTasks+0x1f0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d104      	bne.n	800118e <FreeRTOS_CreateTasks+0x16e>
        vTaskDelete(FlightController_HeartbeatLight_Handle);
 8001184:	4b22      	ldr	r3, [pc, #136]	@ (8001210 <FreeRTOS_CreateTasks+0x1f0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f00b fddb 	bl	800cd44 <vTaskDelete>
    }

    /* Task 6: FlightController_FlightLights */
    ret = xTaskCreate(FlightController_FlightLights, "FlightController_FlightLights", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_FLIGHTLIGHTS_PRIORITY), &FlightController_FlightLights_Handle);
 800118e:	4b23      	ldr	r3, [pc, #140]	@ (800121c <FreeRTOS_CreateTasks+0x1fc>)
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	2302      	movs	r3, #2
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2300      	movs	r3, #0
 8001198:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800119c:	4920      	ldr	r1, [pc, #128]	@ (8001220 <FreeRTOS_CreateTasks+0x200>)
 800119e:	4821      	ldr	r0, [pc, #132]	@ (8001224 <FreeRTOS_CreateTasks+0x204>)
 80011a0:	f00b fc9e 	bl	800cae0 <xTaskCreate>
 80011a4:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d00b      	beq.n	80011c4 <FreeRTOS_CreateTasks+0x1a4>
    __asm volatile("	mov %0, %1												\n"
 80011ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011b0:	f383 8811 	msr	BASEPRI, r3
 80011b4:	f3bf 8f6f 	isb	sy
 80011b8:	f3bf 8f4f 	dsb	sy
 80011bc:	607b      	str	r3, [r7, #4]
}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <FreeRTOS_CreateTasks+0x1a0>

    if (FlightController_FlightLights_Handle == NULL) {
 80011c4:	4b15      	ldr	r3, [pc, #84]	@ (800121c <FreeRTOS_CreateTasks+0x1fc>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d104      	bne.n	80011d6 <FreeRTOS_CreateTasks+0x1b6>
        vTaskDelete(FlightController_FlightLights_Handle);
 80011cc:	4b13      	ldr	r3, [pc, #76]	@ (800121c <FreeRTOS_CreateTasks+0x1fc>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f00b fdb7 	bl	800cd44 <vTaskDelete>
    }
}
 80011d6:	bf00      	nop
 80011d8:	3720      	adds	r7, #32
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000318 	.word	0x20000318
 80011e4:	08011a34 	.word	0x08011a34
 80011e8:	08001385 	.word	0x08001385
 80011ec:	2000031c 	.word	0x2000031c
 80011f0:	08011a54 	.word	0x08011a54
 80011f4:	08001415 	.word	0x08001415
 80011f8:	20000324 	.word	0x20000324
 80011fc:	08011a74 	.word	0x08011a74
 8001200:	080014a1 	.word	0x080014a1
 8001204:	20000328 	.word	0x20000328
 8001208:	08011a94 	.word	0x08011a94
 800120c:	08001595 	.word	0x08001595
 8001210:	2000032c 	.word	0x2000032c
 8001214:	08011ab4 	.word	0x08011ab4
 8001218:	08001641 	.word	0x08001641
 800121c:	20000330 	.word	0x20000330
 8001220:	08011ad4 	.word	0x08011ad4
 8001224:	08001699 	.word	0x08001699

08001228 <FreeRTOS_CreateTimers>:

void FreeRTOS_CreateTimers(void) {
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b083      	sub	sp, #12
 800122c:	af02      	add	r7, sp, #8

    /* Timer2: BatteryLevelAlarm */
    Timer2_Handle = xTimerCreate("BatteryLevelAlarm", pdMS_TO_TICKS(200), pdTRUE, (void *)0, Timer2_Callback);
 800122e:	4b2b      	ldr	r3, [pc, #172]	@ (80012dc <FreeRTOS_CreateTimers+0xb4>)
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2300      	movs	r3, #0
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800123a:	4829      	ldr	r0, [pc, #164]	@ (80012e0 <FreeRTOS_CreateTimers+0xb8>)
 800123c:	f00c fbf6 	bl	800da2c <xTimerCreate>
 8001240:	4603      	mov	r3, r0
 8001242:	4a28      	ldr	r2, [pc, #160]	@ (80012e4 <FreeRTOS_CreateTimers+0xbc>)
 8001244:	6013      	str	r3, [r2, #0]
    if (NULL != Timer2_Handle) {
 8001246:	4b27      	ldr	r3, [pc, #156]	@ (80012e4 <FreeRTOS_CreateTimers+0xbc>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00b      	beq.n	8001266 <FreeRTOS_CreateTimers+0x3e>
        /* Start timer */
        xTimerStart(Timer2_Handle, 0);
 800124e:	4b25      	ldr	r3, [pc, #148]	@ (80012e4 <FreeRTOS_CreateTimers+0xbc>)
 8001250:	681c      	ldr	r4, [r3, #0]
 8001252:	f00b ffe5 	bl	800d220 <xTaskGetTickCount>
 8001256:	4602      	mov	r2, r0
 8001258:	2300      	movs	r3, #0
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2300      	movs	r3, #0
 800125e:	2101      	movs	r1, #1
 8001260:	4620      	mov	r0, r4
 8001262:	f00c fc41 	bl	800dae8 <xTimerGenericCommand>
    }

    /* Timer3: FlightLights */
    Timer3_Handle = xTimerCreate("FlightLights", pdMS_TO_TICKS(100), pdTRUE, (void *)0, Timer3_Callback);
 8001266:	4b20      	ldr	r3, [pc, #128]	@ (80012e8 <FreeRTOS_CreateTimers+0xc0>)
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2300      	movs	r3, #0
 800126c:	2201      	movs	r2, #1
 800126e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001272:	481e      	ldr	r0, [pc, #120]	@ (80012ec <FreeRTOS_CreateTimers+0xc4>)
 8001274:	f00c fbda 	bl	800da2c <xTimerCreate>
 8001278:	4603      	mov	r3, r0
 800127a:	4a1d      	ldr	r2, [pc, #116]	@ (80012f0 <FreeRTOS_CreateTimers+0xc8>)
 800127c:	6013      	str	r3, [r2, #0]
    if (NULL != Timer3_Handle) {
 800127e:	4b1c      	ldr	r3, [pc, #112]	@ (80012f0 <FreeRTOS_CreateTimers+0xc8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00b      	beq.n	800129e <FreeRTOS_CreateTimers+0x76>
        /* Start timer */
        xTimerStart(Timer3_Handle, 0);
 8001286:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <FreeRTOS_CreateTimers+0xc8>)
 8001288:	681c      	ldr	r4, [r3, #0]
 800128a:	f00b ffc9 	bl	800d220 <xTaskGetTickCount>
 800128e:	4602      	mov	r2, r0
 8001290:	2300      	movs	r3, #0
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2300      	movs	r3, #0
 8001296:	2101      	movs	r1, #1
 8001298:	4620      	mov	r0, r4
 800129a:	f00c fc25 	bl	800dae8 <xTimerGenericCommand>
    }

    /* Timer4: ControlSystem */
    Timer4_Handle = xTimerCreate("ControlSystem", pdMS_TO_TICKS(1), pdTRUE, (void *)0, Timer4_Callback);
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <FreeRTOS_CreateTimers+0xcc>)
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2300      	movs	r3, #0
 80012a4:	2201      	movs	r2, #1
 80012a6:	210a      	movs	r1, #10
 80012a8:	4813      	ldr	r0, [pc, #76]	@ (80012f8 <FreeRTOS_CreateTimers+0xd0>)
 80012aa:	f00c fbbf 	bl	800da2c <xTimerCreate>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4a12      	ldr	r2, [pc, #72]	@ (80012fc <FreeRTOS_CreateTimers+0xd4>)
 80012b2:	6013      	str	r3, [r2, #0]
    if (NULL != Timer4_Handle) {
 80012b4:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <FreeRTOS_CreateTimers+0xd4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00b      	beq.n	80012d4 <FreeRTOS_CreateTimers+0xac>
        /* Start timer */
        xTimerStart(Timer4_Handle, 0);
 80012bc:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <FreeRTOS_CreateTimers+0xd4>)
 80012be:	681c      	ldr	r4, [r3, #0]
 80012c0:	f00b ffae 	bl	800d220 <xTaskGetTickCount>
 80012c4:	4602      	mov	r2, r0
 80012c6:	2300      	movs	r3, #0
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2300      	movs	r3, #0
 80012cc:	2101      	movs	r1, #1
 80012ce:	4620      	mov	r0, r4
 80012d0:	f00c fc0a 	bl	800dae8 <xTimerGenericCommand>
    }
}
 80012d4:	bf00      	nop
 80012d6:	3704      	adds	r7, #4
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd90      	pop	{r4, r7, pc}
 80012dc:	08001a71 	.word	0x08001a71
 80012e0:	08011af4 	.word	0x08011af4
 80012e4:	20000338 	.word	0x20000338
 80012e8:	08001ae1 	.word	0x08001ae1
 80012ec:	08011b08 	.word	0x08011b08
 80012f0:	2000033c 	.word	0x2000033c
 80012f4:	08001b51 	.word	0x08001b51
 80012f8:	08011b18 	.word	0x08011b18
 80012fc:	20000340 	.word	0x20000340

08001300 <FlightController_StartUp>:

void FlightController_StartUp(void * ptr) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001308:	23c8      	movs	r3, #200	@ 0xc8
 800130a:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Turn on-board LED off */
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800130c:	2201      	movs	r2, #1
 800130e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001312:	4813      	ldr	r0, [pc, #76]	@ (8001360 <FlightController_StartUp+0x60>)
 8001314:	f003 f904 	bl	8004520 <HAL_GPIO_WritePin>

        /* Check if flight controller is already running */
        /* Create tasks and timers, and initialize drivers (only once) */
        if (FlightController_isRunning) {
 8001318:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <FlightController_StartUp+0x64>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d01a      	beq.n	8001356 <FlightController_StartUp+0x56>
#ifdef MAIN_APP_USE_LOGGING_STARTUP
            LOG((uint8_t *)"Initializing Flight Controller...\r\n\n", LOG_INFORMATION);
#endif

            /* Create system tasks */
            FreeRTOS_CreateTasks();
 8001320:	f7ff fe7e 	bl	8001020 <FreeRTOS_CreateTasks>

            /* Create system timers */
            FreeRTOS_CreateTimers();
 8001324:	f7ff ff80 	bl	8001228 <FreeRTOS_CreateTimers>

            /* Initialize drivers */
            rc_controller = FSA8S_Init(&huart2);
 8001328:	480f      	ldr	r0, [pc, #60]	@ (8001368 <FlightController_StartUp+0x68>)
 800132a:	f001 fbdf 	bl	8002aec <FSA8S_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	4a0e      	ldr	r2, [pc, #56]	@ (800136c <FlightController_StartUp+0x6c>)
 8001332:	6013      	str	r3, [r2, #0]
#ifdef MAIN_APP_USE_LOGGING_STARTUP
            LOG((uint8_t *)"FSA8S Radio Controller Initialized.\r\n\n", LOG_INFORMATION);
#endif

            hgy87 = GY87_Init(&hi2c1);
 8001334:	480e      	ldr	r0, [pc, #56]	@ (8001370 <FlightController_StartUp+0x70>)
 8001336:	f001 ff1d 	bl	8003174 <GY87_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	4a0d      	ldr	r2, [pc, #52]	@ (8001374 <FlightController_StartUp+0x74>)
 800133e:	6013      	str	r3, [r2, #0]
#ifdef MAIN_APP_USE_LOGGING_STARTUP
            LOG((uint8_t *)"GY-87 IMU Initialized.\r\n\n", LOG_INFORMATION);
#endif

            hesc = ESC_Init(&htim3);
 8001340:	480d      	ldr	r0, [pc, #52]	@ (8001378 <FlightController_StartUp+0x78>)
 8001342:	f001 faa3 	bl	800288c <ESC_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	4a0c      	ldr	r2, [pc, #48]	@ (800137c <FlightController_StartUp+0x7c>)
 800134a:	6013      	str	r3, [r2, #0]
#ifdef MAIN_APP_USE_LOGGING_STARTUP
            LOG((uint8_t *)"ESCs Initialized.\r\n\n", LOG_INFORMATION);
#endif

            /* Delete this task, as initialization must happen only once */
            vTaskDelete(FlightController_StartUp_Handle);
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <FlightController_StartUp+0x80>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f00b fcf7 	bl	800cd44 <vTaskDelete>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f00b fd84 	bl	800ce64 <vTaskDelay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800135c:	e7d6      	b.n	800130c <FlightController_StartUp+0xc>
 800135e:	bf00      	nop
 8001360:	40020800 	.word	0x40020800
 8001364:	20000310 	.word	0x20000310
 8001368:	20000b48 	.word	0x20000b48
 800136c:	20000348 	.word	0x20000348
 8001370:	20000aac 	.word	0x20000aac
 8001374:	2000034c 	.word	0x2000034c
 8001378:	20000b00 	.word	0x20000b00
 800137c:	20000350 	.word	0x20000350
 8001380:	20000314 	.word	0x20000314

08001384 <FlightController_ControlSystem>:
    }
}

void FlightController_ControlSystem(void * ptr) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(1);
 800138c:	230a      	movs	r3, #10
 800138e:	60fb      	str	r3, [r7, #12]
            if (false == accelerometerCalibrationIsDone) {
                accelerometerCalibrationIsDone = GY87_CalibrateAccelerometer(hgy87);
            }
        } else {

            gyroscopeCalibrationIsDone = true;
 8001390:	4b1b      	ldr	r3, [pc, #108]	@ (8001400 <FlightController_ControlSystem+0x7c>)
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
            accelerometerCalibrationIsDone = true;
 8001396:	4b1b      	ldr	r3, [pc, #108]	@ (8001404 <FlightController_ControlSystem+0x80>)
 8001398:	2201      	movs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
        }

        if (true == gyroscopeCalibrationIsDone && true == accelerometerCalibrationIsDone) {
 800139c:	4b18      	ldr	r3, [pc, #96]	@ (8001400 <FlightController_ControlSystem+0x7c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d007      	beq.n	80013b4 <FlightController_ControlSystem+0x30>
 80013a4:	4b17      	ldr	r3, [pc, #92]	@ (8001404 <FlightController_ControlSystem+0x80>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <FlightController_ControlSystem+0x30>
#ifdef MAIN_APP_USE_LOGGING_STARTUP
            vTaskDelay(pdMS_TO_TICKS(5));
            LOG((uint8_t *)"Flight Controller Initialized.\r\n\n", LOG_INFORMATION);
#endif
            FlightController_isInitialized = true;
 80013ac:	4b16      	ldr	r3, [pc, #88]	@ (8001408 <FlightController_ControlSystem+0x84>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
 80013b2:	e002      	b.n	80013ba <FlightController_ControlSystem+0x36>
        } else {

            FlightController_isInitialized = false;
 80013b4:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <FlightController_ControlSystem+0x84>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
        }

        /* Read flight lights controls */
        FSA8S_channelValues[7] = FSA8S_ReadChannel(rc_controller, CHANNEL_8);
 80013ba:	4b14      	ldr	r3, [pc, #80]	@ (800140c <FlightController_ControlSystem+0x88>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2108      	movs	r1, #8
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 fbed 	bl	8002ba0 <FSA8S_ReadChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <FlightController_ControlSystem+0x8c>)
 80013cc:	81da      	strh	r2, [r3, #14]
        FSA8S_channelValues[8] = FSA8S_ReadChannel(rc_controller, CHANNEL_9);
 80013ce:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <FlightController_ControlSystem+0x88>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2109      	movs	r1, #9
 80013d4:	4618      	mov	r0, r3
 80013d6:	f001 fbe3 	bl	8002ba0 <FSA8S_ReadChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <FlightController_ControlSystem+0x8c>)
 80013e0:	821a      	strh	r2, [r3, #16]
        FSA8S_channelValues[9] = FSA8S_ReadChannel(rc_controller, CHANNEL_10);
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <FlightController_ControlSystem+0x88>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	210a      	movs	r1, #10
 80013e8:	4618      	mov	r0, r3
 80013ea:	f001 fbd9 	bl	8002ba0 <FSA8S_ReadChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <FlightController_ControlSystem+0x8c>)
 80013f4:	825a      	strh	r2, [r3, #18]
                }
            }
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f00b fd34 	bl	800ce64 <vTaskDelay>
        if (1 == GY87_CALIBRATION_EN) {
 80013fc:	e7c8      	b.n	8001390 <FlightController_ControlSystem+0xc>
 80013fe:	bf00      	nop
 8001400:	20000368 	.word	0x20000368
 8001404:	20000369 	.word	0x20000369
 8001408:	20000311 	.word	0x20000311
 800140c:	20000348 	.word	0x20000348
 8001410:	20000354 	.word	0x20000354

08001414 <FlightController_Data_Logging>:
    }
}

void FlightController_Data_Logging(void * ptr) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b0aa      	sub	sp, #168	@ 0xa8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
 800141c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001420:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    uint8_t loggingStr[150] = {0};
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	2292      	movs	r2, #146	@ 0x92
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f00e fc52 	bl	800fcda <memset>
        sprintf((char *)loggingStr, (const char *)"Battery Level: %.2f [V]\r\n\n", FlightController_batteryLevelValue);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001436:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800143a:	f00b fd13 	bl	800ce64 <vTaskDelay>
 800143e:	e7fa      	b.n	8001436 <FlightController_Data_Logging+0x22>

08001440 <FlightController_OnOffButton>:
    }
}

void FlightController_OnOffButton(void * ptr) {
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b087      	sub	sp, #28
 8001444:	af02      	add	r7, sp, #8
 8001446:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001448:	23c8      	movs	r3, #200	@ 0xc8
 800144a:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Check On/Off Button status */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 800144c:	2120      	movs	r1, #32
 800144e:	4810      	ldr	r0, [pc, #64]	@ (8001490 <FlightController_OnOffButton+0x50>)
 8001450:	f003 f84e 	bl	80044f0 <HAL_GPIO_ReadPin>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d115      	bne.n	8001486 <FlightController_OnOffButton+0x46>
            /* User is trying to turn it on or off */
            if (!Timer1_running) {
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <FlightController_OnOffButton+0x54>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	f083 0301 	eor.w	r3, r3, #1
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00e      	beq.n	8001486 <FlightController_OnOffButton+0x46>

                xTimerStart(Timer1_Handle, 0);
 8001468:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <FlightController_OnOffButton+0x58>)
 800146a:	681c      	ldr	r4, [r3, #0]
 800146c:	f00b fed8 	bl	800d220 <xTaskGetTickCount>
 8001470:	4602      	mov	r2, r0
 8001472:	2300      	movs	r3, #0
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2300      	movs	r3, #0
 8001478:	2101      	movs	r1, #1
 800147a:	4620      	mov	r0, r4
 800147c:	f00c fb34 	bl	800dae8 <xTimerGenericCommand>
                Timer1_running = true;
 8001480:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <FlightController_OnOffButton+0x54>)
 8001482:	2201      	movs	r2, #1
 8001484:	701a      	strb	r2, [r3, #0]
            }
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f00b fcec 	bl	800ce64 <vTaskDelay>
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 800148c:	e7de      	b.n	800144c <FlightController_OnOffButton+0xc>
 800148e:	bf00      	nop
 8001490:	40020400 	.word	0x40020400
 8001494:	20000344 	.word	0x20000344
 8001498:	20000334 	.word	0x20000334
 800149c:	00000000 	.word	0x00000000

080014a0 <FlightController_BatteryLevel>:
    }
}

void FlightController_BatteryLevel(void * ptr) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

    uint16_t adcValue;

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(1000);
 80014a8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80014ac:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Start ADC Conversion */
        HAL_ADC_Start(&hadc1);
 80014ae:	4836      	ldr	r0, [pc, #216]	@ (8001588 <FlightController_BatteryLevel+0xe8>)
 80014b0:	f002 f81e 	bl	80034f0 <HAL_ADC_Start>

        /* Poll ADC peripheral */
        HAL_ADC_PollForConversion(&hadc1, 1);
 80014b4:	2101      	movs	r1, #1
 80014b6:	4834      	ldr	r0, [pc, #208]	@ (8001588 <FlightController_BatteryLevel+0xe8>)
 80014b8:	f002 f8ce 	bl	8003658 <HAL_ADC_PollForConversion>

        /* Read ADC value */
        adcValue = HAL_ADC_GetValue(&hadc1);
 80014bc:	4832      	ldr	r0, [pc, #200]	@ (8001588 <FlightController_BatteryLevel+0xe8>)
 80014be:	f002 f956 	bl	800376e <HAL_ADC_GetValue>
 80014c2:	4603      	mov	r3, r0
 80014c4:	817b      	strh	r3, [r7, #10]

        /* Convert ADC value to real value */
        FlightController_batteryLevelValue = (adcValue * 3.3) / 4096;
 80014c6:	897b      	ldrh	r3, [r7, #10]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f833 	bl	8000534 <__aeabi_i2d>
 80014ce:	a326      	add	r3, pc, #152	@ (adr r3, 8001568 <FlightController_BatteryLevel+0xc8>)
 80014d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d4:	f7ff f898 	bl	8000608 <__aeabi_dmul>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	4b29      	ldr	r3, [pc, #164]	@ (800158c <FlightController_BatteryLevel+0xec>)
 80014e6:	f7ff f9b9 	bl	800085c <__aeabi_ddiv>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f7ff fb61 	bl	8000bb8 <__aeabi_d2f>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4a25      	ldr	r2, [pc, #148]	@ (8001590 <FlightController_BatteryLevel+0xf0>)
 80014fa:	6013      	str	r3, [r2, #0]

        /* Correct real value, as when battery full, ADC input is not 3.3V */
        FlightController_batteryLevelValue = FlightController_batteryLevelValue * 1.046046;
 80014fc:	4b24      	ldr	r3, [pc, #144]	@ (8001590 <FlightController_BatteryLevel+0xf0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f829 	bl	8000558 <__aeabi_f2d>
 8001506:	a31a      	add	r3, pc, #104	@ (adr r3, 8001570 <FlightController_BatteryLevel+0xd0>)
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	f7ff f87c 	bl	8000608 <__aeabi_dmul>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fb4e 	bl	8000bb8 <__aeabi_d2f>
 800151c:	4603      	mov	r3, r0
 800151e:	4a1c      	ldr	r2, [pc, #112]	@ (8001590 <FlightController_BatteryLevel+0xf0>)
 8001520:	6013      	str	r3, [r2, #0]

        /* Map real value to battery levels */
        FlightController_batteryLevelValue = FlightController_batteryLevelValue * 3.363636 + BATTERY_LEVEL_CALIBRATION_OFFSET;
 8001522:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <FlightController_BatteryLevel+0xf0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f816 	bl	8000558 <__aeabi_f2d>
 800152c:	a312      	add	r3, pc, #72	@ (adr r3, 8001578 <FlightController_BatteryLevel+0xd8>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	f7ff f869 	bl	8000608 <__aeabi_dmul>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	a310      	add	r3, pc, #64	@ (adr r3, 8001580 <FlightController_BatteryLevel+0xe0>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7fe feaa 	bl	800029c <__adddf3>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f7ff fb32 	bl	8000bb8 <__aeabi_d2f>
 8001554:	4603      	mov	r3, r0
 8001556:	4a0e      	ldr	r2, [pc, #56]	@ (8001590 <FlightController_BatteryLevel+0xf0>)
 8001558:	6013      	str	r3, [r2, #0]

        /* Set task time delay */
        vTaskDelay(xDelay);
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f00b fc82 	bl	800ce64 <vTaskDelay>
        HAL_ADC_Start(&hadc1);
 8001560:	bf00      	nop
 8001562:	e7a4      	b.n	80014ae <FlightController_BatteryLevel+0xe>
 8001564:	f3af 8000 	nop.w
 8001568:	66666666 	.word	0x66666666
 800156c:	400a6666 	.word	0x400a6666
 8001570:	bb01c92e 	.word	0xbb01c92e
 8001574:	3ff0bc9a 	.word	0x3ff0bc9a
 8001578:	fdbd2fa1 	.word	0xfdbd2fa1
 800157c:	400ae8b9 	.word	0x400ae8b9
 8001580:	851eb852 	.word	0x851eb852
 8001584:	3fe851eb 	.word	0x3fe851eb
 8001588:	20000a64 	.word	0x20000a64
 800158c:	40b00000 	.word	0x40b00000
 8001590:	20000008 	.word	0x20000008

08001594 <FlightController_BatteryAlarm>:
    }
}

void FlightController_BatteryAlarm(void * ptr) {
 8001594:	b5b0      	push	{r4, r5, r7, lr}
 8001596:	b08e      	sub	sp, #56	@ 0x38
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

    uint8_t alarmSequence[] = {1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 800159c:	4b24      	ldr	r3, [pc, #144]	@ (8001630 <FlightController_BatteryAlarm+0x9c>)
 800159e:	f107 0408 	add.w	r4, r7, #8
 80015a2:	461d      	mov	r5, r3
 80015a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015b0:	e884 0003 	stmia.w	r4, {r0, r1}
    uint8_t alarmSequenceSize = sizeof(alarmSequence);
 80015b4:	2328      	movs	r3, #40	@ 0x28
 80015b6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    uint8_t alarmSequenceCursor = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80015c0:	23c8      	movs	r3, #200	@ 0xc8
 80015c2:	633b      	str	r3, [r7, #48]	@ 0x30

    while (1) {

        if (FlightController_batteryLevelValue < BATTERY_ALARM_THRESHOLD) {
 80015c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001634 <FlightController_BatteryAlarm+0xa0>)
 80015c6:	edd3 7a00 	vldr	s15, [r3]
 80015ca:	eeb2 7a03 	vmov.f32	s14, #35	@ 0x41180000  9.5
 80015ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d6:	d521      	bpl.n	800161c <FlightController_BatteryAlarm+0x88>

            if (Timer2_flag) {
 80015d8:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <FlightController_BatteryAlarm+0xa4>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d023      	beq.n	8001628 <FlightController_BatteryAlarm+0x94>
                /* If timer expired */

                /* Parse alarm sequence */
                alarmSequenceCursor++;
 80015e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80015e4:	3301      	adds	r3, #1
 80015e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                if (alarmSequenceSize <= alarmSequenceCursor) {
 80015ea:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80015ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d802      	bhi.n	80015fc <FlightController_BatteryAlarm+0x68>
                    alarmSequenceCursor = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                }

                /* Write to buzzer */
                HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, alarmSequence[alarmSequenceCursor]);
 80015fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001600:	3338      	adds	r3, #56	@ 0x38
 8001602:	443b      	add	r3, r7
 8001604:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001608:	461a      	mov	r2, r3
 800160a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800160e:	480b      	ldr	r0, [pc, #44]	@ (800163c <FlightController_BatteryAlarm+0xa8>)
 8001610:	f002 ff86 	bl	8004520 <HAL_GPIO_WritePin>

                /* Reset Timer2 flag */
                Timer2_flag = false;
 8001614:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <FlightController_BatteryAlarm+0xa4>)
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
 800161a:	e005      	b.n	8001628 <FlightController_BatteryAlarm+0x94>
            }

        } else {

            HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001622:	4806      	ldr	r0, [pc, #24]	@ (800163c <FlightController_BatteryAlarm+0xa8>)
 8001624:	f002 ff7c 	bl	8004520 <HAL_GPIO_WritePin>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001628:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800162a:	f00b fc1b 	bl	800ce64 <vTaskDelay>
        if (FlightController_batteryLevelValue < BATTERY_ALARM_THRESHOLD) {
 800162e:	e7c9      	b.n	80015c4 <FlightController_BatteryAlarm+0x30>
 8001630:	08011b28 	.word	0x08011b28
 8001634:	20000008 	.word	0x20000008
 8001638:	20000345 	.word	0x20000345
 800163c:	40020000 	.word	0x40020000

08001640 <FlightController_HeartbeatLight>:
    }
}

void FlightController_HeartbeatLight(void * ptr) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

    uint8_t ledState = GPIO_PIN_RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	73fb      	strb	r3, [r7, #15]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(HEARTBEAT_PERIOD / 2);
 800164c:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001650:	60bb      	str	r3, [r7, #8]

    while (1) {

        if (FlightController_isInitialized) {
 8001652:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <FlightController_HeartbeatLight+0x50>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00f      	beq.n	800167a <FlightController_HeartbeatLight+0x3a>
            HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	461a      	mov	r2, r3
 800165e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001662:	480c      	ldr	r0, [pc, #48]	@ (8001694 <FlightController_HeartbeatLight+0x54>)
 8001664:	f002 ff5c 	bl	8004520 <HAL_GPIO_WritePin>

            /* Change pin state */
            if (ledState == GPIO_PIN_RESET) {
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d102      	bne.n	8001674 <FlightController_HeartbeatLight+0x34>

                ledState = GPIO_PIN_SET;
 800166e:	2301      	movs	r3, #1
 8001670:	73fb      	strb	r3, [r7, #15]
 8001672:	e008      	b.n	8001686 <FlightController_HeartbeatLight+0x46>
            } else {

                ledState = GPIO_PIN_RESET;
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e005      	b.n	8001686 <FlightController_HeartbeatLight+0x46>
            }
        } else {
            HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001680:	4804      	ldr	r0, [pc, #16]	@ (8001694 <FlightController_HeartbeatLight+0x54>)
 8001682:	f002 ff4d 	bl	8004520 <HAL_GPIO_WritePin>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001686:	68b8      	ldr	r0, [r7, #8]
 8001688:	f00b fbec 	bl	800ce64 <vTaskDelay>
        if (FlightController_isInitialized) {
 800168c:	e7e1      	b.n	8001652 <FlightController_HeartbeatLight+0x12>
 800168e:	bf00      	nop
 8001690:	20000311 	.word	0x20000311
 8001694:	40020800 	.word	0x40020800

08001698 <FlightController_FlightLights>:
    }
}

void FlightController_FlightLights(void * ptr) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b09c      	sub	sp, #112	@ 0x70
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

    /* Define flight lights sequences */
    uint8_t flightLightsSequenceA1[] = {1, 0, 0, 0, 0, 0, 0, 0};
 80016a0:	4ab2      	ldr	r2, [pc, #712]	@ (800196c <FlightController_FlightLights+0x2d4>)
 80016a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80016a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016aa:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceA3[] = {1, 0, 0, 0, 0, 0, 0, 0};
 80016ae:	4aaf      	ldr	r2, [pc, #700]	@ (800196c <FlightController_FlightLights+0x2d4>)
 80016b0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80016b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016b8:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceA2[] = {0, 0, 1, 0, 0, 0, 0, 0};
 80016bc:	4aac      	ldr	r2, [pc, #688]	@ (8001970 <FlightController_FlightLights+0x2d8>)
 80016be:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80016c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016c6:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceA4[] = {0, 0, 1, 0, 0, 0, 0, 0};
 80016ca:	4aa9      	ldr	r2, [pc, #676]	@ (8001970 <FlightController_FlightLights+0x2d8>)
 80016cc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016d4:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t flightLightsSequenceB1[] = {1, 0, 1, 0, 0, 0, 0, 0};
 80016d8:	4aa6      	ldr	r2, [pc, #664]	@ (8001974 <FlightController_FlightLights+0x2dc>)
 80016da:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016e2:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceB3[] = {1, 0, 1, 0, 0, 0, 0, 0};
 80016e6:	4aa3      	ldr	r2, [pc, #652]	@ (8001974 <FlightController_FlightLights+0x2dc>)
 80016e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016f0:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceB2[] = {0, 0, 0, 0, 1, 0, 1, 0};
 80016f4:	4aa0      	ldr	r2, [pc, #640]	@ (8001978 <FlightController_FlightLights+0x2e0>)
 80016f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016fe:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceB4[] = {0, 0, 0, 0, 1, 0, 1, 0};
 8001702:	4a9d      	ldr	r2, [pc, #628]	@ (8001978 <FlightController_FlightLights+0x2e0>)
 8001704:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001708:	e892 0003 	ldmia.w	r2, {r0, r1}
 800170c:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t flightLightsSequenceC1[] = {1, 0, 1, 0, 0, 0, 0, 0};
 8001710:	4a98      	ldr	r2, [pc, #608]	@ (8001974 <FlightController_FlightLights+0x2dc>)
 8001712:	f107 0320 	add.w	r3, r7, #32
 8001716:	e892 0003 	ldmia.w	r2, {r0, r1}
 800171a:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceC3[] = {1, 0, 1, 0, 0, 0, 0, 0};
 800171e:	4a95      	ldr	r2, [pc, #596]	@ (8001974 <FlightController_FlightLights+0x2dc>)
 8001720:	f107 0318 	add.w	r3, r7, #24
 8001724:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001728:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceC2[] = {0, 0, 0, 0, 1, 0, 0, 0};
 800172c:	4a93      	ldr	r2, [pc, #588]	@ (800197c <FlightController_FlightLights+0x2e4>)
 800172e:	f107 0310 	add.w	r3, r7, #16
 8001732:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001736:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceC4[] = {0, 0, 0, 0, 1, 0, 0, 0};
 800173a:	4a90      	ldr	r2, [pc, #576]	@ (800197c <FlightController_FlightLights+0x2e4>)
 800173c:	f107 0308 	add.w	r3, r7, #8
 8001740:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001744:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t flightLightsSequence = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    uint8_t flightLightsSequenceSize = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
    uint8_t flightLightsSequenceCursor = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 800175a:	23c8      	movs	r3, #200	@ 0xc8
 800175c:	66bb      	str	r3, [r7, #104]	@ 0x68

    while (1) {

        /* Turn on/off flight lights (Switch D on radio controller) */
        if (500 <= FSA8S_channelValues[9]) {
 800175e:	4b88      	ldr	r3, [pc, #544]	@ (8001980 <FlightController_FlightLights+0x2e8>)
 8001760:	8a5b      	ldrh	r3, [r3, #18]
 8001762:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001766:	f0c0 80e5 	bcc.w	8001934 <FlightController_FlightLights+0x29c>

            /* Set flight light sequence (Switch C on radio controller) */
            if (250 >= FSA8S_channelValues[8]) {
 800176a:	4b85      	ldr	r3, [pc, #532]	@ (8001980 <FlightController_FlightLights+0x2e8>)
 800176c:	8a1b      	ldrh	r3, [r3, #16]
 800176e:	2bfa      	cmp	r3, #250	@ 0xfa
 8001770:	d803      	bhi.n	800177a <FlightController_FlightLights+0xe2>

                flightLightsSequence = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8001778:	e016      	b.n	80017a8 <FlightController_FlightLights+0x110>

            } else if (250 < FSA8S_channelValues[8] && 750 >= FSA8S_channelValues[8]) {
 800177a:	4b81      	ldr	r3, [pc, #516]	@ (8001980 <FlightController_FlightLights+0x2e8>)
 800177c:	8a1b      	ldrh	r3, [r3, #16]
 800177e:	2bfa      	cmp	r3, #250	@ 0xfa
 8001780:	d909      	bls.n	8001796 <FlightController_FlightLights+0xfe>
 8001782:	4b7f      	ldr	r3, [pc, #508]	@ (8001980 <FlightController_FlightLights+0x2e8>)
 8001784:	8a1b      	ldrh	r3, [r3, #16]
 8001786:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800178a:	4293      	cmp	r3, r2
 800178c:	d803      	bhi.n	8001796 <FlightController_FlightLights+0xfe>

                flightLightsSequence = 1;
 800178e:	2301      	movs	r3, #1
 8001790:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8001794:	e008      	b.n	80017a8 <FlightController_FlightLights+0x110>

            } else if (750 < FSA8S_channelValues[8]) {
 8001796:	4b7a      	ldr	r3, [pc, #488]	@ (8001980 <FlightController_FlightLights+0x2e8>)
 8001798:	8a1b      	ldrh	r3, [r3, #16]
 800179a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800179e:	4293      	cmp	r3, r2
 80017a0:	d902      	bls.n	80017a8 <FlightController_FlightLights+0x110>

                flightLightsSequence = 2;
 80017a2:	2302      	movs	r3, #2
 80017a4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
            }

            /* Set flight light sequence speed (Potentiometer B on radio controller) */
            Timer3_AutoReloadTime = 200 + FSA8S_channelValues[7] / 5;
 80017a8:	4b75      	ldr	r3, [pc, #468]	@ (8001980 <FlightController_FlightLights+0x2e8>)
 80017aa:	89db      	ldrh	r3, [r3, #14]
 80017ac:	4a75      	ldr	r2, [pc, #468]	@ (8001984 <FlightController_FlightLights+0x2ec>)
 80017ae:	fba2 2303 	umull	r2, r3, r2, r3
 80017b2:	089b      	lsrs	r3, r3, #2
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	33c8      	adds	r3, #200	@ 0xc8
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	4b73      	ldr	r3, [pc, #460]	@ (8001988 <FlightController_FlightLights+0x2f0>)
 80017bc:	801a      	strh	r2, [r3, #0]

            /* Check if timer has expired */
            if (Timer3_flag) {
 80017be:	4b73      	ldr	r3, [pc, #460]	@ (800198c <FlightController_FlightLights+0x2f4>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 80cd 	beq.w	8001962 <FlightController_FlightLights+0x2ca>

                /* Parse flight lights sequences */
                flightLightsSequenceCursor++;
 80017c8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80017cc:	3301      	adds	r3, #1
 80017ce:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
                if (flightLightsSequenceSize <= flightLightsSequenceCursor) {
 80017d2:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 80017d6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80017da:	429a      	cmp	r2, r3
 80017dc:	d802      	bhi.n	80017e4 <FlightController_FlightLights+0x14c>
                    flightLightsSequenceCursor = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
                }

                /* Write to flight lights */
                if (flightLightsSequence == 0) {
 80017e4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d132      	bne.n	8001852 <FlightController_FlightLights+0x1ba>

                    flightLightsSequenceSize = sizeof(flightLightsSequenceA1);
 80017ec:	2308      	movs	r3, #8
 80017ee:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

                    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, flightLightsSequenceA1[flightLightsSequenceCursor]);
 80017f2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80017f6:	3370      	adds	r3, #112	@ 0x70
 80017f8:	443b      	add	r3, r7
 80017fa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80017fe:	461a      	mov	r2, r3
 8001800:	2104      	movs	r1, #4
 8001802:	4863      	ldr	r0, [pc, #396]	@ (8001990 <FlightController_FlightLights+0x2f8>)
 8001804:	f002 fe8c 	bl	8004520 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, flightLightsSequenceA2[flightLightsSequenceCursor]);
 8001808:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800180c:	3370      	adds	r3, #112	@ 0x70
 800180e:	443b      	add	r3, r7
 8001810:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001814:	461a      	mov	r2, r3
 8001816:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800181a:	485d      	ldr	r0, [pc, #372]	@ (8001990 <FlightController_FlightLights+0x2f8>)
 800181c:	f002 fe80 	bl	8004520 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, flightLightsSequenceA3[flightLightsSequenceCursor]);
 8001820:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001824:	3370      	adds	r3, #112	@ 0x70
 8001826:	443b      	add	r3, r7
 8001828:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800182c:	461a      	mov	r2, r3
 800182e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001832:	4857      	ldr	r0, [pc, #348]	@ (8001990 <FlightController_FlightLights+0x2f8>)
 8001834:	f002 fe74 	bl	8004520 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, flightLightsSequenceA4[flightLightsSequenceCursor]);
 8001838:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800183c:	3370      	adds	r3, #112	@ 0x70
 800183e:	443b      	add	r3, r7
 8001840:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001844:	461a      	mov	r2, r3
 8001846:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800184a:	4852      	ldr	r0, [pc, #328]	@ (8001994 <FlightController_FlightLights+0x2fc>)
 800184c:	f002 fe68 	bl	8004520 <HAL_GPIO_WritePin>
 8001850:	e06c      	b.n	800192c <FlightController_FlightLights+0x294>

                } else if (flightLightsSequence == 1) {
 8001852:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001856:	2b01      	cmp	r3, #1
 8001858:	d132      	bne.n	80018c0 <FlightController_FlightLights+0x228>

                    flightLightsSequenceSize = sizeof(flightLightsSequenceB1);
 800185a:	2308      	movs	r3, #8
 800185c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

                    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, flightLightsSequenceB1[flightLightsSequenceCursor]);
 8001860:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001864:	3370      	adds	r3, #112	@ 0x70
 8001866:	443b      	add	r3, r7
 8001868:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800186c:	461a      	mov	r2, r3
 800186e:	2104      	movs	r1, #4
 8001870:	4847      	ldr	r0, [pc, #284]	@ (8001990 <FlightController_FlightLights+0x2f8>)
 8001872:	f002 fe55 	bl	8004520 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, flightLightsSequenceB2[flightLightsSequenceCursor]);
 8001876:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800187a:	3370      	adds	r3, #112	@ 0x70
 800187c:	443b      	add	r3, r7
 800187e:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8001882:	461a      	mov	r2, r3
 8001884:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001888:	4841      	ldr	r0, [pc, #260]	@ (8001990 <FlightController_FlightLights+0x2f8>)
 800188a:	f002 fe49 	bl	8004520 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, flightLightsSequenceB3[flightLightsSequenceCursor]);
 800188e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001892:	3370      	adds	r3, #112	@ 0x70
 8001894:	443b      	add	r3, r7
 8001896:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800189a:	461a      	mov	r2, r3
 800189c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018a0:	483b      	ldr	r0, [pc, #236]	@ (8001990 <FlightController_FlightLights+0x2f8>)
 80018a2:	f002 fe3d 	bl	8004520 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, flightLightsSequenceB4[flightLightsSequenceCursor]);
 80018a6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80018aa:	3370      	adds	r3, #112	@ 0x70
 80018ac:	443b      	add	r3, r7
 80018ae:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80018b2:	461a      	mov	r2, r3
 80018b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018b8:	4836      	ldr	r0, [pc, #216]	@ (8001994 <FlightController_FlightLights+0x2fc>)
 80018ba:	f002 fe31 	bl	8004520 <HAL_GPIO_WritePin>
 80018be:	e035      	b.n	800192c <FlightController_FlightLights+0x294>

                } else if (flightLightsSequence == 2) {
 80018c0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d131      	bne.n	800192c <FlightController_FlightLights+0x294>

                    flightLightsSequenceSize = sizeof(flightLightsSequenceC1);
 80018c8:	2308      	movs	r3, #8
 80018ca:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

                    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, flightLightsSequenceC1[flightLightsSequenceCursor]);
 80018ce:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80018d2:	3370      	adds	r3, #112	@ 0x70
 80018d4:	443b      	add	r3, r7
 80018d6:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 80018da:	461a      	mov	r2, r3
 80018dc:	2104      	movs	r1, #4
 80018de:	482c      	ldr	r0, [pc, #176]	@ (8001990 <FlightController_FlightLights+0x2f8>)
 80018e0:	f002 fe1e 	bl	8004520 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, flightLightsSequenceC2[flightLightsSequenceCursor]);
 80018e4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80018e8:	3370      	adds	r3, #112	@ 0x70
 80018ea:	443b      	add	r3, r7
 80018ec:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 80018f0:	461a      	mov	r2, r3
 80018f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018f6:	4826      	ldr	r0, [pc, #152]	@ (8001990 <FlightController_FlightLights+0x2f8>)
 80018f8:	f002 fe12 	bl	8004520 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, flightLightsSequenceC3[flightLightsSequenceCursor]);
 80018fc:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001900:	3370      	adds	r3, #112	@ 0x70
 8001902:	443b      	add	r3, r7
 8001904:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001908:	461a      	mov	r2, r3
 800190a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800190e:	4820      	ldr	r0, [pc, #128]	@ (8001990 <FlightController_FlightLights+0x2f8>)
 8001910:	f002 fe06 	bl	8004520 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, flightLightsSequenceC4[flightLightsSequenceCursor]);
 8001914:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001918:	3370      	adds	r3, #112	@ 0x70
 800191a:	443b      	add	r3, r7
 800191c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8001920:	461a      	mov	r2, r3
 8001922:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001926:	481b      	ldr	r0, [pc, #108]	@ (8001994 <FlightController_FlightLights+0x2fc>)
 8001928:	f002 fdfa 	bl	8004520 <HAL_GPIO_WritePin>
                }

                /* Reset Timer3 flag */
                Timer3_flag = false;
 800192c:	4b17      	ldr	r3, [pc, #92]	@ (800198c <FlightController_FlightLights+0x2f4>)
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
 8001932:	e016      	b.n	8001962 <FlightController_FlightLights+0x2ca>
            }

        } else {

            /* Turn off flight lights */
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2104      	movs	r1, #4
 8001938:	4815      	ldr	r0, [pc, #84]	@ (8001990 <FlightController_FlightLights+0x2f8>)
 800193a:	f002 fdf1 	bl	8004520 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001944:	4812      	ldr	r0, [pc, #72]	@ (8001990 <FlightController_FlightLights+0x2f8>)
 8001946:	f002 fdeb 	bl	8004520 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001950:	480f      	ldr	r0, [pc, #60]	@ (8001990 <FlightController_FlightLights+0x2f8>)
 8001952:	f002 fde5 	bl	8004520 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800195c:	480d      	ldr	r0, [pc, #52]	@ (8001994 <FlightController_FlightLights+0x2fc>)
 800195e:	f002 fddf 	bl	8004520 <HAL_GPIO_WritePin>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001962:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001964:	f00b fa7e 	bl	800ce64 <vTaskDelay>
        if (500 <= FSA8S_channelValues[9]) {
 8001968:	e6f9      	b.n	800175e <FlightController_FlightLights+0xc6>
 800196a:	bf00      	nop
 800196c:	08011b50 	.word	0x08011b50
 8001970:	08011b58 	.word	0x08011b58
 8001974:	08011b60 	.word	0x08011b60
 8001978:	08011b68 	.word	0x08011b68
 800197c:	08011b70 	.word	0x08011b70
 8001980:	20000354 	.word	0x20000354
 8001984:	cccccccd 	.word	0xcccccccd
 8001988:	20000004 	.word	0x20000004
 800198c:	20000346 	.word	0x20000346
 8001990:	40020400 	.word	0x40020400
 8001994:	40020800 	.word	0x40020800

08001998 <Timer1_Callback>:
    previousIterm_pitchRate = 0;
    previousIterm_yawRate = 0;
}

/* --- Private callback function implementation ------------------------------------------------ */
void Timer1_Callback(TimerHandle_t xTimer) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f00c fbb3 	bl	800e10c <pvTimerGetTimerID>
 80019a6:	4603      	mov	r3, r0
 80019a8:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f00c f8ea 	bl	800db84 <xTimerGetPeriod>
 80019b0:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	3301      	adds	r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (pdMS_TO_TICKS(Timer1_AutoReloadTime) / xTimerPeriod)) {
 80019b8:	4b26      	ldr	r3, [pc, #152]	@ (8001a54 <Timer1_Callback+0xbc>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	f242 7310 	movw	r3, #10000	@ 0x2710
 80019c2:	fb02 f303 	mul.w	r3, r2, r3
 80019c6:	4a24      	ldr	r2, [pc, #144]	@ (8001a58 <Timer1_Callback+0xc0>)
 80019c8:	fba2 2303 	umull	r2, r3, r2, r3
 80019cc:	099a      	lsrs	r2, r3, #6
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d333      	bcc.n	8001a42 <Timer1_Callback+0xaa>
        /* Check if On/Off Button is still pressed after 3 seconds */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 80019da:	2120      	movs	r1, #32
 80019dc:	481f      	ldr	r0, [pc, #124]	@ (8001a5c <Timer1_Callback+0xc4>)
 80019de:	f002 fd87 	bl	80044f0 <HAL_GPIO_ReadPin>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d124      	bne.n	8001a32 <Timer1_Callback+0x9a>

            if (!FlightController_isRunning) {
 80019e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <Timer1_Callback+0xc8>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	f083 0301 	eor.w	r3, r3, #1
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d008      	beq.n	8001a08 <Timer1_Callback+0x70>
                /* Flight controller was off */
                /* User turned it on */
                /* Turn on flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 1);
 80019f6:	2201      	movs	r2, #1
 80019f8:	2110      	movs	r1, #16
 80019fa:	4818      	ldr	r0, [pc, #96]	@ (8001a5c <Timer1_Callback+0xc4>)
 80019fc:	f002 fd90 	bl	8004520 <HAL_GPIO_WritePin>

                FlightController_isRunning = true;
 8001a00:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <Timer1_Callback+0xc8>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	701a      	strb	r2, [r3, #0]
 8001a06:	e014      	b.n	8001a32 <Timer1_Callback+0x9a>
            } else {
                /* Flight controller was on */
                /* User turned it off */
                /* Suspend HeartbeatLight task and turn on-board LED on */
                vTaskSuspend(FlightController_HeartbeatLight_Handle);
 8001a08:	4b16      	ldr	r3, [pc, #88]	@ (8001a64 <Timer1_Callback+0xcc>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f00b fa5f 	bl	800ced0 <vTaskSuspend>
                HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a18:	4813      	ldr	r0, [pc, #76]	@ (8001a68 <Timer1_Callback+0xd0>)
 8001a1a:	f002 fd81 	bl	8004520 <HAL_GPIO_WritePin>

                FlightController_isRunning = false;
 8001a1e:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <Timer1_Callback+0xc8>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]

                /* Turn off flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2110      	movs	r1, #16
 8001a28:	480c      	ldr	r0, [pc, #48]	@ (8001a5c <Timer1_Callback+0xc4>)
 8001a2a:	f002 fd79 	bl	8004520 <HAL_GPIO_WritePin>

                /* Next line will execute only if USB power is connected */
                /* Reset micro-controller */
                HAL_NVIC_SystemReset();
 8001a2e:	f002 f9e4 	bl	8003dfa <HAL_NVIC_SystemReset>
            }
        }

        /* Reset timer count */
        vTimerSetTimerID(xTimer, (void *)0);
 8001a32:	2100      	movs	r1, #0
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f00c fb8a 	bl	800e14e <vTimerSetTimerID>

        /* Reset running flag */
        Timer1_running = false;
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <Timer1_Callback+0xd4>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 8001a40:	e004      	b.n	8001a4c <Timer1_Callback+0xb4>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4619      	mov	r1, r3
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f00c fb81 	bl	800e14e <vTimerSetTimerID>
}
 8001a4c:	bf00      	nop
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000000 	.word	0x20000000
 8001a58:	10624dd3 	.word	0x10624dd3
 8001a5c:	40020400 	.word	0x40020400
 8001a60:	20000310 	.word	0x20000310
 8001a64:	2000032c 	.word	0x2000032c
 8001a68:	40020800 	.word	0x40020800
 8001a6c:	20000344 	.word	0x20000344

08001a70 <Timer2_Callback>:

void Timer2_Callback(TimerHandle_t xTimer) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f00c fb47 	bl	800e10c <pvTimerGetTimerID>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f00c f87e 	bl	800db84 <xTimerGetPeriod>
 8001a88:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (pdMS_TO_TICKS(Timer2_AutoReloadTime) / xTimerPeriod)) {
 8001a90:	4b10      	ldr	r3, [pc, #64]	@ (8001ad4 <Timer2_Callback+0x64>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001a9a:	fb02 f303 	mul.w	r3, r2, r3
 8001a9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ad8 <Timer2_Callback+0x68>)
 8001aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa4:	099a      	lsrs	r2, r3, #6
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d307      	bcc.n	8001ac2 <Timer2_Callback+0x52>

        /* Set Timer2 flag to true */
        Timer2_flag = true;
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8001adc <Timer2_Callback+0x6c>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]

        /* Reset timer count */
        vTimerSetTimerID(xTimer, (void *)0);
 8001ab8:	2100      	movs	r1, #0
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f00c fb47 	bl	800e14e <vTimerSetTimerID>

    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 8001ac0:	e004      	b.n	8001acc <Timer2_Callback+0x5c>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f00c fb41 	bl	800e14e <vTimerSetTimerID>
}
 8001acc:	bf00      	nop
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000002 	.word	0x20000002
 8001ad8:	10624dd3 	.word	0x10624dd3
 8001adc:	20000345 	.word	0x20000345

08001ae0 <Timer3_Callback>:

void Timer3_Callback(TimerHandle_t xTimer) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f00c fb0f 	bl	800e10c <pvTimerGetTimerID>
 8001aee:	4603      	mov	r3, r0
 8001af0:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f00c f846 	bl	800db84 <xTimerGetPeriod>
 8001af8:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	3301      	adds	r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (pdMS_TO_TICKS(Timer3_AutoReloadTime) / xTimerPeriod)) {
 8001b00:	4b10      	ldr	r3, [pc, #64]	@ (8001b44 <Timer3_Callback+0x64>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b48 <Timer3_Callback+0x68>)
 8001b10:	fba2 2303 	umull	r2, r3, r2, r3
 8001b14:	099a      	lsrs	r2, r3, #6
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d307      	bcc.n	8001b32 <Timer3_Callback+0x52>

        /* Set Timer3 flag to true */
        Timer3_flag = true;
 8001b22:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <Timer3_Callback+0x6c>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	701a      	strb	r2, [r3, #0]

        /* Reset timer count */
        vTimerSetTimerID(xTimer, (void *)0);
 8001b28:	2100      	movs	r1, #0
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f00c fb0f 	bl	800e14e <vTimerSetTimerID>

    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 8001b30:	e004      	b.n	8001b3c <Timer3_Callback+0x5c>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4619      	mov	r1, r3
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f00c fb09 	bl	800e14e <vTimerSetTimerID>
}
 8001b3c:	bf00      	nop
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000004 	.word	0x20000004
 8001b48:	10624dd3 	.word	0x10624dd3
 8001b4c:	20000346 	.word	0x20000346

08001b50 <Timer4_Callback>:

void Timer4_Callback(TimerHandle_t xTimer) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f00c fad7 	bl	800e10c <pvTimerGetTimerID>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f00c f80e 	bl	800db84 <xTimerGetPeriod>
 8001b68:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (pdMS_TO_TICKS(Timer4_AutoReloadTime) / xTimerPeriod)) {
 8001b70:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <Timer4_Callback+0x64>)
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001b7a:	fb02 f303 	mul.w	r3, r2, r3
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb8 <Timer4_Callback+0x68>)
 8001b80:	fba2 2303 	umull	r2, r3, r2, r3
 8001b84:	099a      	lsrs	r2, r3, #6
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d307      	bcc.n	8001ba2 <Timer4_Callback+0x52>

        /* Set Timer3 flag to true */
        Timer4_flag = true;
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <Timer4_Callback+0x6c>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]

        /* Reset timer count */
        vTimerSetTimerID(xTimer, (void *)0);
 8001b98:	2100      	movs	r1, #0
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f00c fad7 	bl	800e14e <vTimerSetTimerID>

    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 8001ba0:	e004      	b.n	8001bac <Timer4_Callback+0x5c>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f00c fad1 	bl	800e14e <vTimerSetTimerID>
}
 8001bac:	bf00      	nop
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000006 	.word	0x20000006
 8001bb8:	10624dd3 	.word	0x10624dd3
 8001bbc:	20000347 	.word	0x20000347

08001bc0 <FlightController_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
void FlightController_Init(void) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0

    /* Create start-up tasks and timers */
    FreeRTOS_CreateStartUpTasks();
 8001bc4:	f7ff f9c0 	bl	8000f48 <FreeRTOS_CreateStartUpTasks>
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <vApplicationGetIdleTaskMemory>:

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t ** ppxIdleTaskTCBBuffer, StackType_t ** ppxIdleTaskStackBuffer, uint32_t * pulIdleTaskStackSize) {
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4a07      	ldr	r2, [pc, #28]	@ (8001bf8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001bdc:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	4a06      	ldr	r2, [pc, #24]	@ (8001bfc <vApplicationGetIdleTaskMemory+0x30>)
 8001be2:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2280      	movs	r2, #128	@ 0x80
 8001be8:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	2000036c 	.word	0x2000036c
 8001bfc:	200003e8 	.word	0x200003e8

08001c00 <vApplicationGetTimerTaskMemory>:

/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t ** ppxTimerTaskTCBBuffer, StackType_t ** ppxTimerTaskStackBuffer, uint32_t * pulTimerTaskStackSize) {
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4a07      	ldr	r2, [pc, #28]	@ (8001c2c <vApplicationGetTimerTaskMemory+0x2c>)
 8001c10:	601a      	str	r2, [r3, #0]
    *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	4a06      	ldr	r2, [pc, #24]	@ (8001c30 <vApplicationGetTimerTaskMemory+0x30>)
 8001c16:	601a      	str	r2, [r3, #0]
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c1e:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	200005e8 	.word	0x200005e8
 8001c30:	20000664 	.word	0x20000664

08001c34 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001c34:	b5b0      	push	{r4, r5, r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001c3a:	f001 fb7f 	bl	800333c <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001c3e:	f000 f827 	bl	8001c90 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001c42:	f000 f9cd 	bl	8001fe0 <MX_GPIO_Init>
    MX_DMA_Init();
 8001c46:	f000 f9b1 	bl	8001fac <MX_DMA_Init>
    MX_USART2_UART_Init();
 8001c4a:	f000 f985 	bl	8001f58 <MX_USART2_UART_Init>
    MX_I2C1_Init();
 8001c4e:	f000 f8db 	bl	8001e08 <MX_I2C1_Init>
    MX_TIM3_Init();
 8001c52:	f000 f907 	bl	8001e64 <MX_TIM3_Init>
    MX_ADC1_Init();
 8001c56:	f000 f885 	bl	8001d64 <MX_ADC1_Init>
    /* USER CODE BEGIN 2 */

    // Initialize Flight Controller
    FlightController_Init();
 8001c5a:	f7ff ffb1 	bl	8001bc0 <FlightController_Init>
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* definition and creation of defaultTask */
    osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <main+0x54>)
 8001c60:	1d3c      	adds	r4, r7, #4
 8001c62:	461d      	mov	r5, r3
 8001c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f00a f8d4 	bl	800be22 <osThreadCreate>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4a03      	ldr	r2, [pc, #12]	@ (8001c8c <main+0x58>)
 8001c7e:	6013      	str	r3, [r2, #0]
    /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
    /* USER CODE END RTOS_THREADS */

    /* Start scheduler */
    osKernelStart();
 8001c80:	f00a f8c8 	bl	800be14 <osKernelStart>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    while (1) {
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <main+0x50>
 8001c88:	08011b84 	.word	0x08011b84
 8001c8c:	20000bec 	.word	0x20000bec

08001c90 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b094      	sub	sp, #80	@ 0x50
 8001c94:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c96:	f107 0320 	add.w	r3, r7, #32
 8001c9a:	2230      	movs	r2, #48	@ 0x30
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f00e f81b 	bl	800fcda <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	4b28      	ldr	r3, [pc, #160]	@ (8001d5c <SystemClock_Config+0xcc>)
 8001cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbc:	4a27      	ldr	r2, [pc, #156]	@ (8001d5c <SystemClock_Config+0xcc>)
 8001cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc4:	4b25      	ldr	r3, [pc, #148]	@ (8001d5c <SystemClock_Config+0xcc>)
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	4b22      	ldr	r3, [pc, #136]	@ (8001d60 <SystemClock_Config+0xd0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001cdc:	4a20      	ldr	r2, [pc, #128]	@ (8001d60 <SystemClock_Config+0xd0>)
 8001cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d60 <SystemClock_Config+0xd0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cf4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cfe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 25;
 8001d04:	2319      	movs	r3, #25
 8001d06:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 144;
 8001d08:	2390      	movs	r3, #144	@ 0x90
 8001d0a:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 3;
 8001d10:	2303      	movs	r3, #3
 8001d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001d14:	f107 0320 	add.w	r3, r7, #32
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f004 fe57 	bl	80069cc <HAL_RCC_OscConfig>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <SystemClock_Config+0x98>
        Error_Handler();
 8001d24:	f000 fa01 	bl	800212a <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d28:	230f      	movs	r3, #15
 8001d2a:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d38:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001d3e:	f107 030c 	add.w	r3, r7, #12
 8001d42:	2102      	movs	r1, #2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f005 f8b9 	bl	8006ebc <HAL_RCC_ClockConfig>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <SystemClock_Config+0xc4>
        Error_Handler();
 8001d50:	f000 f9eb 	bl	800212a <Error_Handler>
    }
}
 8001d54:	bf00      	nop
 8001d56:	3750      	adds	r7, #80	@ 0x50
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40007000 	.word	0x40007000

08001d64 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]

    /* USER CODE END ADC1_Init 1 */

    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 8001d76:	4b21      	ldr	r3, [pc, #132]	@ (8001dfc <MX_ADC1_Init+0x98>)
 8001d78:	4a21      	ldr	r2, [pc, #132]	@ (8001e00 <MX_ADC1_Init+0x9c>)
 8001d7a:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <MX_ADC1_Init+0x98>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d82:	4b1e      	ldr	r3, [pc, #120]	@ (8001dfc <MX_ADC1_Init+0x98>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 8001d88:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <MX_ADC1_Init+0x98>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8001d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dfc <MX_ADC1_Init+0x98>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d94:	4b19      	ldr	r3, [pc, #100]	@ (8001dfc <MX_ADC1_Init+0x98>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d9c:	4b17      	ldr	r3, [pc, #92]	@ (8001dfc <MX_ADC1_Init+0x98>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001da2:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <MX_ADC1_Init+0x98>)
 8001da4:	4a17      	ldr	r2, [pc, #92]	@ (8001e04 <MX_ADC1_Init+0xa0>)
 8001da6:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001da8:	4b14      	ldr	r3, [pc, #80]	@ (8001dfc <MX_ADC1_Init+0x98>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8001dae:	4b13      	ldr	r3, [pc, #76]	@ (8001dfc <MX_ADC1_Init+0x98>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001db4:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <MX_ADC1_Init+0x98>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001dfc <MX_ADC1_Init+0x98>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001dc2:	480e      	ldr	r0, [pc, #56]	@ (8001dfc <MX_ADC1_Init+0x98>)
 8001dc4:	f001 fb50 	bl	8003468 <HAL_ADC_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_ADC1_Init+0x6e>
        Error_Handler();
 8001dce:	f000 f9ac 	bl	800212a <Error_Handler>
    }

    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001dde:	463b      	mov	r3, r7
 8001de0:	4619      	mov	r1, r3
 8001de2:	4806      	ldr	r0, [pc, #24]	@ (8001dfc <MX_ADC1_Init+0x98>)
 8001de4:	f001 fcd0 	bl	8003788 <HAL_ADC_ConfigChannel>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_ADC1_Init+0x8e>
        Error_Handler();
 8001dee:	f000 f99c 	bl	800212a <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */
}
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000a64 	.word	0x20000a64
 8001e00:	40012000 	.word	0x40012000
 8001e04:	0f000001 	.word	0x0f000001

08001e08 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8001e0c:	4b12      	ldr	r3, [pc, #72]	@ (8001e58 <MX_I2C1_Init+0x50>)
 8001e0e:	4a13      	ldr	r2, [pc, #76]	@ (8001e5c <MX_I2C1_Init+0x54>)
 8001e10:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8001e12:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <MX_I2C1_Init+0x50>)
 8001e14:	4a12      	ldr	r2, [pc, #72]	@ (8001e60 <MX_I2C1_Init+0x58>)
 8001e16:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e18:	4b0f      	ldr	r3, [pc, #60]	@ (8001e58 <MX_I2C1_Init+0x50>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e58 <MX_I2C1_Init+0x50>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	@ (8001e58 <MX_I2C1_Init+0x50>)
 8001e26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e2a:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e58 <MX_I2C1_Init+0x50>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001e32:	4b09      	ldr	r3, [pc, #36]	@ (8001e58 <MX_I2C1_Init+0x50>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e38:	4b07      	ldr	r3, [pc, #28]	@ (8001e58 <MX_I2C1_Init+0x50>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e3e:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <MX_I2C1_Init+0x50>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001e44:	4804      	ldr	r0, [pc, #16]	@ (8001e58 <MX_I2C1_Init+0x50>)
 8001e46:	f002 fb85 	bl	8004554 <HAL_I2C_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_I2C1_Init+0x4c>
        Error_Handler();
 8001e50:	f000 f96b 	bl	800212a <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000aac 	.word	0x20000aac
 8001e5c:	40005400 	.word	0x40005400
 8001e60:	000186a0 	.word	0x000186a0

08001e64 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	@ 0x28
 8001e68:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e6a:	f107 0320 	add.w	r3, r7, #32
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
 8001e80:	611a      	str	r2, [r3, #16]
 8001e82:	615a      	str	r2, [r3, #20]
 8001e84:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8001e86:	4b32      	ldr	r3, [pc, #200]	@ (8001f50 <MX_TIM3_Init+0xec>)
 8001e88:	4a32      	ldr	r2, [pc, #200]	@ (8001f54 <MX_TIM3_Init+0xf0>)
 8001e8a:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 20;
 8001e8c:	4b30      	ldr	r3, [pc, #192]	@ (8001f50 <MX_TIM3_Init+0xec>)
 8001e8e:	2214      	movs	r2, #20
 8001e90:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e92:	4b2f      	ldr	r3, [pc, #188]	@ (8001f50 <MX_TIM3_Init+0xec>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 65535;
 8001e98:	4b2d      	ldr	r3, [pc, #180]	@ (8001f50 <MX_TIM3_Init+0xec>)
 8001e9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e9e:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f50 <MX_TIM3_Init+0xec>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f50 <MX_TIM3_Init+0xec>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001eac:	4828      	ldr	r0, [pc, #160]	@ (8001f50 <MX_TIM3_Init+0xec>)
 8001eae:	f005 f9e5 	bl	800727c <HAL_TIM_PWM_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM3_Init+0x58>
        Error_Handler();
 8001eb8:	f000 f937 	bl	800212a <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8001ec4:	f107 0320 	add.w	r3, r7, #32
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4821      	ldr	r0, [pc, #132]	@ (8001f50 <MX_TIM3_Init+0xec>)
 8001ecc:	f005 fdca 	bl	8007a64 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM3_Init+0x76>
        Error_Handler();
 8001ed6:	f000 f928 	bl	800212a <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eda:	2360      	movs	r3, #96	@ 0x60
 8001edc:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	2200      	movs	r2, #0
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4817      	ldr	r0, [pc, #92]	@ (8001f50 <MX_TIM3_Init+0xec>)
 8001ef2:	f005 fac3 	bl	800747c <HAL_TIM_PWM_ConfigChannel>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM3_Init+0x9c>
        Error_Handler();
 8001efc:	f000 f915 	bl	800212a <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	2204      	movs	r2, #4
 8001f04:	4619      	mov	r1, r3
 8001f06:	4812      	ldr	r0, [pc, #72]	@ (8001f50 <MX_TIM3_Init+0xec>)
 8001f08:	f005 fab8 	bl	800747c <HAL_TIM_PWM_ConfigChannel>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM3_Init+0xb2>
        Error_Handler();
 8001f12:	f000 f90a 	bl	800212a <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	2208      	movs	r2, #8
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	480c      	ldr	r0, [pc, #48]	@ (8001f50 <MX_TIM3_Init+0xec>)
 8001f1e:	f005 faad 	bl	800747c <HAL_TIM_PWM_ConfigChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM3_Init+0xc8>
        Error_Handler();
 8001f28:	f000 f8ff 	bl	800212a <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	220c      	movs	r2, #12
 8001f30:	4619      	mov	r1, r3
 8001f32:	4807      	ldr	r0, [pc, #28]	@ (8001f50 <MX_TIM3_Init+0xec>)
 8001f34:	f005 faa2 	bl	800747c <HAL_TIM_PWM_ConfigChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM3_Init+0xde>
        Error_Handler();
 8001f3e:	f000 f8f4 	bl	800212a <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
    HAL_TIM_MspPostInit(&htim3);
 8001f42:	4803      	ldr	r0, [pc, #12]	@ (8001f50 <MX_TIM3_Init+0xec>)
 8001f44:	f000 f9d2 	bl	80022ec <HAL_TIM_MspPostInit>
}
 8001f48:	bf00      	nop
 8001f4a:	3728      	adds	r7, #40	@ 0x28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000b00 	.word	0x20000b00
 8001f54:	40000400 	.word	0x40000400

08001f58 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART2_Init 0 */
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */
    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	@ (8001fa4 <MX_USART2_UART_Init+0x4c>)
 8001f5e:	4a12      	ldr	r2, [pc, #72]	@ (8001fa8 <MX_USART2_UART_Init+0x50>)
 8001f60:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8001f62:	4b10      	ldr	r3, [pc, #64]	@ (8001fa4 <MX_USART2_UART_Init+0x4c>)
 8001f64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f68:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa4 <MX_USART2_UART_Init+0x4c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001f70:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <MX_USART2_UART_Init+0x4c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001f76:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <MX_USART2_UART_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_RX;
 8001f7c:	4b09      	ldr	r3, [pc, #36]	@ (8001fa4 <MX_USART2_UART_Init+0x4c>)
 8001f7e:	2204      	movs	r2, #4
 8001f80:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f82:	4b08      	ldr	r3, [pc, #32]	@ (8001fa4 <MX_USART2_UART_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f88:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <MX_USART2_UART_Init+0x4c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001f8e:	4805      	ldr	r0, [pc, #20]	@ (8001fa4 <MX_USART2_UART_Init+0x4c>)
 8001f90:	f005 fdd6 	bl	8007b40 <HAL_UART_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_USART2_UART_Init+0x46>
        Error_Handler();
 8001f9a:	f000 f8c6 	bl	800212a <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */
    /* USER CODE END USART2_Init 2 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000b48 	.word	0x20000b48
 8001fa8:	40004400 	.word	0x40004400

08001fac <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <MX_DMA_Init+0x30>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	4a08      	ldr	r2, [pc, #32]	@ (8001fdc <MX_DMA_Init+0x30>)
 8001fbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc2:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <MX_DMA_Init+0x30>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800

08001fe0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	@ 0x28
 8001fe4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	4b42      	ldr	r3, [pc, #264]	@ (8002104 <MX_GPIO_Init+0x124>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	4a41      	ldr	r2, [pc, #260]	@ (8002104 <MX_GPIO_Init+0x124>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	6313      	str	r3, [r2, #48]	@ 0x30
 8002006:	4b3f      	ldr	r3, [pc, #252]	@ (8002104 <MX_GPIO_Init+0x124>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	4b3b      	ldr	r3, [pc, #236]	@ (8002104 <MX_GPIO_Init+0x124>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	4a3a      	ldr	r2, [pc, #232]	@ (8002104 <MX_GPIO_Init+0x124>)
 800201c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002020:	6313      	str	r3, [r2, #48]	@ 0x30
 8002022:	4b38      	ldr	r3, [pc, #224]	@ (8002104 <MX_GPIO_Init+0x124>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	4b34      	ldr	r3, [pc, #208]	@ (8002104 <MX_GPIO_Init+0x124>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	4a33      	ldr	r2, [pc, #204]	@ (8002104 <MX_GPIO_Init+0x124>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6313      	str	r3, [r2, #48]	@ 0x30
 800203e:	4b31      	ldr	r3, [pc, #196]	@ (8002104 <MX_GPIO_Init+0x124>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	4b2d      	ldr	r3, [pc, #180]	@ (8002104 <MX_GPIO_Init+0x124>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	4a2c      	ldr	r2, [pc, #176]	@ (8002104 <MX_GPIO_Init+0x124>)
 8002054:	f043 0302 	orr.w	r3, r3, #2
 8002058:	6313      	str	r3, [r2, #48]	@ 0x30
 800205a:	4b2a      	ldr	r3, [pc, #168]	@ (8002104 <MX_GPIO_Init+0x124>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, LED_Pin | LED4_Pin, GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800206c:	4826      	ldr	r0, [pc, #152]	@ (8002108 <MX_GPIO_Init+0x128>)
 800206e:	f002 fa57 	bl	8004520 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED3_Pin | PW_ON_OFF_DRIVER_OUTPUT_Pin | LED2_Pin, GPIO_PIN_RESET);
 8002072:	2200      	movs	r2, #0
 8002074:	f241 1114 	movw	r1, #4372	@ 0x1114
 8002078:	4824      	ldr	r0, [pc, #144]	@ (800210c <MX_GPIO_Init+0x12c>)
 800207a:	f002 fa51 	bl	8004520 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800207e:	2200      	movs	r2, #0
 8002080:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002084:	4822      	ldr	r0, [pc, #136]	@ (8002110 <MX_GPIO_Init+0x130>)
 8002086:	f002 fa4b 	bl	8004520 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : LED_Pin LED4_Pin */
    GPIO_InitStruct.Pin = LED_Pin | LED4_Pin;
 800208a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800208e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002090:	2301      	movs	r3, #1
 8002092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	4619      	mov	r1, r3
 80020a2:	4819      	ldr	r0, [pc, #100]	@ (8002108 <MX_GPIO_Init+0x128>)
 80020a4:	f002 f8a0 	bl	80041e8 <HAL_GPIO_Init>

    /*Configure GPIO pins : LED1_Pin LED3_Pin PW_ON_OFF_DRIVER_OUTPUT_Pin LED2_Pin */
    GPIO_InitStruct.Pin = LED1_Pin | LED3_Pin | PW_ON_OFF_DRIVER_OUTPUT_Pin | LED2_Pin;
 80020a8:	f241 1314 	movw	r3, #4372	@ 0x1114
 80020ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ae:	2301      	movs	r3, #1
 80020b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2300      	movs	r3, #0
 80020b8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	4812      	ldr	r0, [pc, #72]	@ (800210c <MX_GPIO_Init+0x12c>)
 80020c2:	f002 f891 	bl	80041e8 <HAL_GPIO_Init>

    /*Configure GPIO pin : BUZZER_Pin */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80020c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020cc:	2301      	movs	r3, #1
 80020ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d4:	2300      	movs	r3, #0
 80020d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	4619      	mov	r1, r3
 80020de:	480c      	ldr	r0, [pc, #48]	@ (8002110 <MX_GPIO_Init+0x130>)
 80020e0:	f002 f882 	bl	80041e8 <HAL_GPIO_Init>

    /*Configure GPIO pin : PW_ON_OFF_DRIVER_INPUT_Pin */
    GPIO_InitStruct.Pin = PW_ON_OFF_DRIVER_INPUT_Pin;
 80020e4:	2320      	movs	r3, #32
 80020e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, &GPIO_InitStruct);
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	4619      	mov	r1, r3
 80020f6:	4805      	ldr	r0, [pc, #20]	@ (800210c <MX_GPIO_Init+0x12c>)
 80020f8:	f002 f876 	bl	80041e8 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80020fc:	bf00      	nop
 80020fe:	3728      	adds	r7, #40	@ 0x28
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40023800 	.word	0x40023800
 8002108:	40020800 	.word	0x40020800
 800210c:	40020400 	.word	0x40020400
 8002110:	40020000 	.word	0x40020000

08002114 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
    /* init code for USB_DEVICE */
    MX_USB_DEVICE_Init();
 800211c:	f00c fab2 	bl	800e684 <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        osDelay(1000);
 8002120:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002124:	f009 fec9 	bl	800beba <osDelay>
 8002128:	e7fa      	b.n	8002120 <StartDefaultTask+0xc>

0800212a <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* USER CODE END Error_Handler_Debug */
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_MspInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef * htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	4b12      	ldr	r3, [pc, #72]	@ (800218c <HAL_MspInit+0x54>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002146:	4a11      	ldr	r2, [pc, #68]	@ (800218c <HAL_MspInit+0x54>)
 8002148:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800214c:	6453      	str	r3, [r2, #68]	@ 0x44
 800214e:	4b0f      	ldr	r3, [pc, #60]	@ (800218c <HAL_MspInit+0x54>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	603b      	str	r3, [r7, #0]
 800215e:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <HAL_MspInit+0x54>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	4a0a      	ldr	r2, [pc, #40]	@ (800218c <HAL_MspInit+0x54>)
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002168:	6413      	str	r3, [r2, #64]	@ 0x40
 800216a:	4b08      	ldr	r3, [pc, #32]	@ (800218c <HAL_MspInit+0x54>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	683b      	ldr	r3, [r7, #0]

    /* System interrupt init*/
    /* PendSV_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	210f      	movs	r1, #15
 800217a:	f06f 0001 	mvn.w	r0, #1
 800217e:	f001 fe12 	bl	8003da6 <HAL_NVIC_SetPriority>

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800

08002190 <HAL_ADC_MspInit>:
 * @brief ADC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hadc: ADC handle pointer
 * @retval None
 */
void HAL_ADC_MspInit(ADC_HandleTypeDef * hadc) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	@ 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
    if (hadc->Instance == ADC1) {
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a17      	ldr	r2, [pc, #92]	@ (800220c <HAL_ADC_MspInit+0x7c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d127      	bne.n	8002202 <HAL_ADC_MspInit+0x72>
        /* USER CODE BEGIN ADC1_MspInit 0 */

        /* USER CODE END ADC1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_ADC1_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	4b16      	ldr	r3, [pc, #88]	@ (8002210 <HAL_ADC_MspInit+0x80>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ba:	4a15      	ldr	r2, [pc, #84]	@ (8002210 <HAL_ADC_MspInit+0x80>)
 80021bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021c2:	4b13      	ldr	r3, [pc, #76]	@ (8002210 <HAL_ADC_MspInit+0x80>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002210 <HAL_ADC_MspInit+0x80>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002210 <HAL_ADC_MspInit+0x80>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021de:	4b0c      	ldr	r3, [pc, #48]	@ (8002210 <HAL_ADC_MspInit+0x80>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
        /**ADC1 GPIO Configuration
        PA0-WKUP     ------> ADC1_IN0
        */
        GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021ea:	2301      	movs	r3, #1
 80021ec:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ee:	2303      	movs	r3, #3
 80021f0:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	4619      	mov	r1, r3
 80021fc:	4805      	ldr	r0, [pc, #20]	@ (8002214 <HAL_ADC_MspInit+0x84>)
 80021fe:	f001 fff3 	bl	80041e8 <HAL_GPIO_Init>

        /* USER CODE BEGIN ADC1_MspInit 1 */

        /* USER CODE END ADC1_MspInit 1 */
    }
}
 8002202:	bf00      	nop
 8002204:	3728      	adds	r7, #40	@ 0x28
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40012000 	.word	0x40012000
 8002210:	40023800 	.word	0x40023800
 8002214:	40020000 	.word	0x40020000

08002218 <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef * hi2c) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b08a      	sub	sp, #40	@ 0x28
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
    if (hi2c->Instance == I2C1) {
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a19      	ldr	r2, [pc, #100]	@ (800229c <HAL_I2C_MspInit+0x84>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d12b      	bne.n	8002292 <HAL_I2C_MspInit+0x7a>
        /* USER CODE BEGIN I2C1_MspInit 0 */

        /* USER CODE END I2C1_MspInit 0 */

        __HAL_RCC_GPIOB_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	4b18      	ldr	r3, [pc, #96]	@ (80022a0 <HAL_I2C_MspInit+0x88>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	4a17      	ldr	r2, [pc, #92]	@ (80022a0 <HAL_I2C_MspInit+0x88>)
 8002244:	f043 0302 	orr.w	r3, r3, #2
 8002248:	6313      	str	r3, [r2, #48]	@ 0x30
 800224a:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <HAL_I2C_MspInit+0x88>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]
        /**I2C1 GPIO Configuration
        PB6     ------> I2C1_SCL
        PB7     ------> I2C1_SDA
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8002256:	23c0      	movs	r3, #192	@ 0xc0
 8002258:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800225a:	2312      	movs	r3, #18
 800225c:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002262:	2303      	movs	r3, #3
 8002264:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002266:	2304      	movs	r3, #4
 8002268:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	4619      	mov	r1, r3
 8002270:	480c      	ldr	r0, [pc, #48]	@ (80022a4 <HAL_I2C_MspInit+0x8c>)
 8002272:	f001 ffb9 	bl	80041e8 <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_I2C1_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b09      	ldr	r3, [pc, #36]	@ (80022a0 <HAL_I2C_MspInit+0x88>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	4a08      	ldr	r2, [pc, #32]	@ (80022a0 <HAL_I2C_MspInit+0x88>)
 8002280:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002284:	6413      	str	r3, [r2, #64]	@ 0x40
 8002286:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <HAL_I2C_MspInit+0x88>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN I2C1_MspInit 1 */

        /* USER CODE END I2C1_MspInit 1 */
    }
}
 8002292:	bf00      	nop
 8002294:	3728      	adds	r7, #40	@ 0x28
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40005400 	.word	0x40005400
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40020400 	.word	0x40020400

080022a8 <HAL_TIM_PWM_MspInit>:
 * @brief TIM_PWM MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_pwm: TIM_PWM handle pointer
 * @retval None
 */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef * htim_pwm) {
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
    if (htim_pwm->Instance == TIM3) {
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0b      	ldr	r2, [pc, #44]	@ (80022e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d10d      	bne.n	80022d6 <HAL_TIM_PWM_MspInit+0x2e>
        /* USER CODE BEGIN TIM3_MspInit 0 */

        /* USER CODE END TIM3_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_TIM3_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b0a      	ldr	r3, [pc, #40]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x40>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	4a09      	ldr	r2, [pc, #36]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x40>)
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ca:	4b07      	ldr	r3, [pc, #28]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x40>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN TIM3_MspInit 1 */

        /* USER CODE END TIM3_MspInit 1 */
    }
}
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40000400 	.word	0x40000400
 80022e8:	40023800 	.word	0x40023800

080022ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef * htim) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	@ 0x28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 0314 	add.w	r3, r7, #20
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
    if (htim->Instance == TIM3) {
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a21      	ldr	r2, [pc, #132]	@ (8002390 <HAL_TIM_MspPostInit+0xa4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d13b      	bne.n	8002386 <HAL_TIM_MspPostInit+0x9a>
        /* USER CODE BEGIN TIM3_MspPostInit 0 */

        /* USER CODE END TIM3_MspPostInit 0 */

        __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	4b20      	ldr	r3, [pc, #128]	@ (8002394 <HAL_TIM_MspPostInit+0xa8>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	4a1f      	ldr	r2, [pc, #124]	@ (8002394 <HAL_TIM_MspPostInit+0xa8>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6313      	str	r3, [r2, #48]	@ 0x30
 800231e:	4b1d      	ldr	r3, [pc, #116]	@ (8002394 <HAL_TIM_MspPostInit+0xa8>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	4b19      	ldr	r3, [pc, #100]	@ (8002394 <HAL_TIM_MspPostInit+0xa8>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	4a18      	ldr	r2, [pc, #96]	@ (8002394 <HAL_TIM_MspPostInit+0xa8>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	6313      	str	r3, [r2, #48]	@ 0x30
 800233a:	4b16      	ldr	r3, [pc, #88]	@ (8002394 <HAL_TIM_MspPostInit+0xa8>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
        PA6     ------> TIM3_CH1
        PA7     ------> TIM3_CH2
        PB0     ------> TIM3_CH3
        PB1     ------> TIM3_CH4
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8002346:	23c0      	movs	r3, #192	@ 0xc0
 8002348:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002356:	2302      	movs	r3, #2
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235a:	f107 0314 	add.w	r3, r7, #20
 800235e:	4619      	mov	r1, r3
 8002360:	480d      	ldr	r0, [pc, #52]	@ (8002398 <HAL_TIM_MspPostInit+0xac>)
 8002362:	f001 ff41 	bl	80041e8 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002366:	2303      	movs	r3, #3
 8002368:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	2300      	movs	r3, #0
 8002374:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002376:	2302      	movs	r3, #2
 8002378:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237a:	f107 0314 	add.w	r3, r7, #20
 800237e:	4619      	mov	r1, r3
 8002380:	4806      	ldr	r0, [pc, #24]	@ (800239c <HAL_TIM_MspPostInit+0xb0>)
 8002382:	f001 ff31 	bl	80041e8 <HAL_GPIO_Init>

        /* USER CODE BEGIN TIM3_MspPostInit 1 */

        /* USER CODE END TIM3_MspPostInit 1 */
    }
}
 8002386:	bf00      	nop
 8002388:	3728      	adds	r7, #40	@ 0x28
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40000400 	.word	0x40000400
 8002394:	40023800 	.word	0x40023800
 8002398:	40020000 	.word	0x40020000
 800239c:	40020400 	.word	0x40020400

080023a0 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef * huart) {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	@ 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
    if (huart->Instance == USART2) {
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a31      	ldr	r2, [pc, #196]	@ (8002484 <HAL_UART_MspInit+0xe4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d15b      	bne.n	800247a <HAL_UART_MspInit+0xda>
        /* USER CODE BEGIN USART2_MspInit 0 */

        /* USER CODE END USART2_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART2_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	4b30      	ldr	r3, [pc, #192]	@ (8002488 <HAL_UART_MspInit+0xe8>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	4a2f      	ldr	r2, [pc, #188]	@ (8002488 <HAL_UART_MspInit+0xe8>)
 80023cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002488 <HAL_UART_MspInit+0xe8>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b29      	ldr	r3, [pc, #164]	@ (8002488 <HAL_UART_MspInit+0xe8>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	4a28      	ldr	r2, [pc, #160]	@ (8002488 <HAL_UART_MspInit+0xe8>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ee:	4b26      	ldr	r3, [pc, #152]	@ (8002488 <HAL_UART_MspInit+0xe8>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
        /**USART2 GPIO Configuration
        PA2     ------> USART2_TX
        PA3     ------> USART2_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80023fa:	230c      	movs	r3, #12
 80023fc:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fe:	2302      	movs	r3, #2
 8002400:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002406:	2303      	movs	r3, #3
 8002408:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800240a:	2307      	movs	r3, #7
 800240c:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	4619      	mov	r1, r3
 8002414:	481d      	ldr	r0, [pc, #116]	@ (800248c <HAL_UART_MspInit+0xec>)
 8002416:	f001 fee7 	bl	80041e8 <HAL_GPIO_Init>

        /* USART2 DMA Init */
        /* USART2_RX Init */
        hdma_usart2_rx.Instance = DMA1_Stream5;
 800241a:	4b1d      	ldr	r3, [pc, #116]	@ (8002490 <HAL_UART_MspInit+0xf0>)
 800241c:	4a1d      	ldr	r2, [pc, #116]	@ (8002494 <HAL_UART_MspInit+0xf4>)
 800241e:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002420:	4b1b      	ldr	r3, [pc, #108]	@ (8002490 <HAL_UART_MspInit+0xf0>)
 8002422:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002426:	605a      	str	r2, [r3, #4]
        hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002428:	4b19      	ldr	r3, [pc, #100]	@ (8002490 <HAL_UART_MspInit+0xf0>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
        hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800242e:	4b18      	ldr	r3, [pc, #96]	@ (8002490 <HAL_UART_MspInit+0xf0>)
 8002430:	2200      	movs	r2, #0
 8002432:	60da      	str	r2, [r3, #12]
        hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002434:	4b16      	ldr	r3, [pc, #88]	@ (8002490 <HAL_UART_MspInit+0xf0>)
 8002436:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800243a:	611a      	str	r2, [r3, #16]
        hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800243c:	4b14      	ldr	r3, [pc, #80]	@ (8002490 <HAL_UART_MspInit+0xf0>)
 800243e:	2200      	movs	r2, #0
 8002440:	615a      	str	r2, [r3, #20]
        hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002442:	4b13      	ldr	r3, [pc, #76]	@ (8002490 <HAL_UART_MspInit+0xf0>)
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
        hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002448:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <HAL_UART_MspInit+0xf0>)
 800244a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800244e:	61da      	str	r2, [r3, #28]
        hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002450:	4b0f      	ldr	r3, [pc, #60]	@ (8002490 <HAL_UART_MspInit+0xf0>)
 8002452:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002456:	621a      	str	r2, [r3, #32]
        hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002458:	4b0d      	ldr	r3, [pc, #52]	@ (8002490 <HAL_UART_MspInit+0xf0>)
 800245a:	2200      	movs	r2, #0
 800245c:	625a      	str	r2, [r3, #36]	@ 0x24
        if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 800245e:	480c      	ldr	r0, [pc, #48]	@ (8002490 <HAL_UART_MspInit+0xf0>)
 8002460:	f001 fcdc 	bl	8003e1c <HAL_DMA_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_UART_MspInit+0xce>
            Error_Handler();
 800246a:	f7ff fe5e 	bl	800212a <Error_Handler>
        }

        __HAL_LINKDMA(huart, hdmarx, hdma_usart2_rx);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a07      	ldr	r2, [pc, #28]	@ (8002490 <HAL_UART_MspInit+0xf0>)
 8002472:	639a      	str	r2, [r3, #56]	@ 0x38
 8002474:	4a06      	ldr	r2, [pc, #24]	@ (8002490 <HAL_UART_MspInit+0xf0>)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6393      	str	r3, [r2, #56]	@ 0x38

        /* USER CODE BEGIN USART2_MspInit 1 */

        /* USER CODE END USART2_MspInit 1 */
    }
}
 800247a:	bf00      	nop
 800247c:	3728      	adds	r7, #40	@ 0x28
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40004400 	.word	0x40004400
 8002488:	40023800 	.word	0x40023800
 800248c:	40020000 	.word	0x40020000
 8002490:	20000b8c 	.word	0x20000b8c
 8002494:	40026088 	.word	0x40026088

08002498 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 800249c:	bf00      	nop
 800249e:	e7fd      	b.n	800249c <NMI_Handler+0x4>

080024a0 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1) {
 80024a4:	bf00      	nop
 80024a6:	e7fd      	b.n	80024a4 <HardFault_Handler+0x4>

080024a8 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1) {
 80024ac:	bf00      	nop
 80024ae:	e7fd      	b.n	80024ac <MemManage_Handler+0x4>

080024b0 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1) {
 80024b4:	bf00      	nop
 80024b6:	e7fd      	b.n	80024b4 <BusFault_Handler+0x4>

080024b8 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1) {
 80024bc:	bf00      	nop
 80024be:	e7fd      	b.n	80024bc <UsageFault_Handler+0x4>

080024c0 <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80024ce:	b580      	push	{r7, lr}
 80024d0:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 80024d2:	f000 ff85 	bl	80033e0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1)
    if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
#endif /* INCLUDE_xTaskGetSchedulerState */
        xPortSysTickHandler();
 80024d6:	f00c f81f 	bl	800e518 <xPortSysTickHandler>
    }
#endif /* INCLUDE_xTaskGetSchedulerState */
       /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <OTG_FS_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN OTG_FS_IRQn 0 */

    /* USER CODE END OTG_FS_IRQn 0 */
    HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80024e4:	4802      	ldr	r0, [pc, #8]	@ (80024f0 <OTG_FS_IRQHandler+0x10>)
 80024e6:	f003 f944 	bl	8005772 <HAL_PCD_IRQHandler>
    /* USER CODE BEGIN OTG_FS_IRQn 1 */

    /* USER CODE END OTG_FS_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	2000154c 	.word	0x2000154c

080024f4 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
    return 1;
 80024f8:	2301      	movs	r3, #1
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <_kill>:

int _kill(int pid, int sig) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 800250e:	f00d fc55 	bl	800fdbc <__errno>
 8002512:	4603      	mov	r3, r0
 8002514:	2216      	movs	r2, #22
 8002516:	601a      	str	r2, [r3, #0]
    return -1;
 8002518:	f04f 33ff 	mov.w	r3, #4294967295
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <_exit>:

void _exit(int status) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 800252c:	f04f 31ff 	mov.w	r1, #4294967295
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ffe7 	bl	8002504 <_kill>
    while (1) {
 8002536:	bf00      	nop
 8002538:	e7fd      	b.n	8002536 <_exit+0x12>

0800253a <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char * ptr, int len) {
 800253a:	b580      	push	{r7, lr}
 800253c:	b086      	sub	sp, #24
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	e00a      	b.n	8002562 <_read+0x28>
        *ptr++ = __io_getchar();
 800254c:	f3af 8000 	nop.w
 8002550:	4601      	mov	r1, r0
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	60ba      	str	r2, [r7, #8]
 8002558:	b2ca      	uxtb	r2, r1
 800255a:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	3301      	adds	r3, #1
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	429a      	cmp	r2, r3
 8002568:	dbf0      	blt.n	800254c <_read+0x12>
    }

    return len;
 800256a:	687b      	ldr	r3, [r7, #4]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <_write>:

__attribute__((weak)) int _write(int file, char * ptr, int len) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	e009      	b.n	800259a <_write+0x26>
        __io_putchar(*ptr++);
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	60ba      	str	r2, [r7, #8]
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3301      	adds	r3, #1
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	429a      	cmp	r2, r3
 80025a0:	dbf1      	blt.n	8002586 <_write+0x12>
    }
    return len;
 80025a2:	687b      	ldr	r3, [r7, #4]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <_close>:

int _close(int file) {
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 80025b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <_fstat>:

int _fstat(int file, struct stat * st) {
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025d4:	605a      	str	r2, [r3, #4]
    return 0;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_isatty>:

int _isatty(int file) {
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 80025ec:	2301      	movs	r3, #1
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80025fa:	b480      	push	{r7}
 80025fc:	b085      	sub	sp, #20
 80025fe:	af00      	add	r7, sp, #0
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800261c:	4a14      	ldr	r2, [pc, #80]	@ (8002670 <_sbrk+0x5c>)
 800261e:	4b15      	ldr	r3, [pc, #84]	@ (8002674 <_sbrk+0x60>)
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8002628:	4b13      	ldr	r3, [pc, #76]	@ (8002678 <_sbrk+0x64>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d102      	bne.n	8002636 <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8002630:	4b11      	ldr	r3, [pc, #68]	@ (8002678 <_sbrk+0x64>)
 8002632:	4a12      	ldr	r2, [pc, #72]	@ (800267c <_sbrk+0x68>)
 8002634:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8002636:	4b10      	ldr	r3, [pc, #64]	@ (8002678 <_sbrk+0x64>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	429a      	cmp	r2, r3
 8002642:	d207      	bcs.n	8002654 <_sbrk+0x40>
        errno = ENOMEM;
 8002644:	f00d fbba 	bl	800fdbc <__errno>
 8002648:	4603      	mov	r3, r0
 800264a:	220c      	movs	r2, #12
 800264c:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
 8002652:	e009      	b.n	8002668 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8002654:	4b08      	ldr	r3, [pc, #32]	@ (8002678 <_sbrk+0x64>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 800265a:	4b07      	ldr	r3, [pc, #28]	@ (8002678 <_sbrk+0x64>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	4a05      	ldr	r2, [pc, #20]	@ (8002678 <_sbrk+0x64>)
 8002664:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8002666:	68fb      	ldr	r3, [r7, #12]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20010000 	.word	0x20010000
 8002674:	00000400 	.word	0x00000400
 8002678:	20000bf0 	.word	0x20000bf0
 800267c:	20001dc8 	.word	0x20001dc8

08002680 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002684:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <SystemInit+0x20>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268a:	4a05      	ldr	r2, [pc, #20]	@ (80026a0 <SystemInit+0x20>)
 800268c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                                   /* USER_VECT_TAB_ADDRESS */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80026a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a8:	480d      	ldr	r0, [pc, #52]	@ (80026e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026aa:	490e      	ldr	r1, [pc, #56]	@ (80026e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026ac:	4a0e      	ldr	r2, [pc, #56]	@ (80026e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b0:	e002      	b.n	80026b8 <LoopCopyDataInit>

080026b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b6:	3304      	adds	r3, #4

080026b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026bc:	d3f9      	bcc.n	80026b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026be:	4a0b      	ldr	r2, [pc, #44]	@ (80026ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026c0:	4c0b      	ldr	r4, [pc, #44]	@ (80026f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c4:	e001      	b.n	80026ca <LoopFillZerobss>

080026c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c8:	3204      	adds	r2, #4

080026ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026cc:	d3fb      	bcc.n	80026c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026ce:	f7ff ffd7 	bl	8002680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026d2:	f00d fb79 	bl	800fdc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026d6:	f7ff faad 	bl	8001c34 <main>
  bx  lr
 80026da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80026e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e4:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 80026e8:	08012140 	.word	0x08012140
  ldr r2, =_sbss
 80026ec:	200002f4 	.word	0x200002f4
  ldr r4, =_ebss
 80026f0:	20001dc4 	.word	0x20001dc4

080026f4 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f4:	e7fe      	b.n	80026f4 <ADC_IRQHandler>

080026f6 <PWM_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t PWM_Init(ESC_HandleTypeDef_t * hesc) {
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]

    /* Check first parameter */
    if (NULL == hesc) {
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <PWM_Init+0x12>
        return false;
 8002704:	2300      	movs	r3, #0
 8002706:	e02c      	b.n	8002762 <PWM_Init+0x6c>
    }

    /* Start PWM signal generation */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_1)) {
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2100      	movs	r1, #0
 800270e:	4618      	mov	r0, r3
 8002710:	f004 fe04 	bl	800731c <HAL_TIM_PWM_Start>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <PWM_Init+0x28>
        /* END MODIFY 1 */
        return false;
 800271a:	2300      	movs	r3, #0
 800271c:	e021      	b.n	8002762 <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_2)) {
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2104      	movs	r1, #4
 8002724:	4618      	mov	r0, r3
 8002726:	f004 fdf9 	bl	800731c <HAL_TIM_PWM_Start>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <PWM_Init+0x3e>
        /* END MODIFY 2 */
        return false;
 8002730:	2300      	movs	r3, #0
 8002732:	e016      	b.n	8002762 <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 3 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_3)) {
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2108      	movs	r1, #8
 800273a:	4618      	mov	r0, r3
 800273c:	f004 fdee 	bl	800731c <HAL_TIM_PWM_Start>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <PWM_Init+0x54>
        /* END MODIFY 3 */
        return false;
 8002746:	2300      	movs	r3, #0
 8002748:	e00b      	b.n	8002762 <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 4 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_4)) {
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	210c      	movs	r1, #12
 8002750:	4618      	mov	r0, r3
 8002752:	f004 fde3 	bl	800731c <HAL_TIM_PWM_Start>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <PWM_Init+0x6a>
        /* END MODIFY 4 */
        return false;
 800275c:	2300      	movs	r3, #0
 800275e:	e000      	b.n	8002762 <PWM_Init+0x6c>
    }

    return true;
 8002760:	2301      	movs	r3, #1
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <PWM_SetDutyCycle>:
    }

    return true;
}

bool_t PWM_SetDutyCycle(ESC_HandleTypeDef_t * hesc, uint8_t channel, uint32_t dutyCycle) {
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	460b      	mov	r3, r1
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	72fb      	strb	r3, [r7, #11]

    /* Check parameters */
    if (NULL == hesc) {
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <PWM_SetDutyCycle+0x18>
        return false;
 8002780:	2300      	movs	r3, #0
 8002782:	e02d      	b.n	80027e0 <PWM_SetDutyCycle+0x74>
    }
    if (PWM_CHANNEL_1 != channel && PWM_CHANNEL_2 != channel && PWM_CHANNEL_3 != channel && PWM_CHANNEL_4 != channel) {
 8002784:	7afb      	ldrb	r3, [r7, #11]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d00a      	beq.n	80027a0 <PWM_SetDutyCycle+0x34>
 800278a:	7afb      	ldrb	r3, [r7, #11]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d007      	beq.n	80027a0 <PWM_SetDutyCycle+0x34>
 8002790:	7afb      	ldrb	r3, [r7, #11]
 8002792:	2b03      	cmp	r3, #3
 8002794:	d004      	beq.n	80027a0 <PWM_SetDutyCycle+0x34>
 8002796:	7afb      	ldrb	r3, [r7, #11]
 8002798:	2b04      	cmp	r3, #4
 800279a:	d001      	beq.n	80027a0 <PWM_SetDutyCycle+0x34>
        return false;
 800279c:	2300      	movs	r3, #0
 800279e:	e01f      	b.n	80027e0 <PWM_SetDutyCycle+0x74>
    }

    /* Set duty cycle */
    if (PWM_CHANNEL_1 == channel) {
 80027a0:	7afb      	ldrb	r3, [r7, #11]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d104      	bne.n	80027b0 <PWM_SetDutyCycle+0x44>
        /* BEGIN MODIFY 10 */
        TIM3->CCR1 = (uint16_t)dutyCycle;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	4b10      	ldr	r3, [pc, #64]	@ (80027ec <PWM_SetDutyCycle+0x80>)
 80027ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80027ae:	e016      	b.n	80027de <PWM_SetDutyCycle+0x72>
        /* END MODIFY 10 */
    } else if (PWM_CHANNEL_2 == channel) {
 80027b0:	7afb      	ldrb	r3, [r7, #11]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d104      	bne.n	80027c0 <PWM_SetDutyCycle+0x54>
        /* BEGIN MODIFY 11 */
        TIM3->CCR2 = (uint16_t)dutyCycle;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	4b0c      	ldr	r3, [pc, #48]	@ (80027ec <PWM_SetDutyCycle+0x80>)
 80027bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80027be:	e00e      	b.n	80027de <PWM_SetDutyCycle+0x72>
        /* END MODIFY 11 */
    } else if (PWM_CHANNEL_3 == channel) {
 80027c0:	7afb      	ldrb	r3, [r7, #11]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d104      	bne.n	80027d0 <PWM_SetDutyCycle+0x64>
        /* BEGIN MODIFY 12 */
        TIM3->CCR3 = (uint16_t)dutyCycle;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	4b08      	ldr	r3, [pc, #32]	@ (80027ec <PWM_SetDutyCycle+0x80>)
 80027cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027ce:	e006      	b.n	80027de <PWM_SetDutyCycle+0x72>
        /* END MODIFY 12 */
    } else if (PWM_CHANNEL_4 == channel) {
 80027d0:	7afb      	ldrb	r3, [r7, #11]
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d103      	bne.n	80027de <PWM_SetDutyCycle+0x72>
        /* BEGIN MODIFY 13 */
        TIM3->CCR4 = (uint16_t)dutyCycle;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	b29a      	uxth	r2, r3
 80027da:	4b04      	ldr	r3, [pc, #16]	@ (80027ec <PWM_SetDutyCycle+0x80>)
 80027dc:	641a      	str	r2, [r3, #64]	@ 0x40
        /* END MODIFY 13 */
    }

    return true;
 80027de:	2301      	movs	r3, #1
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	40000400 	.word	0x40000400

080027f0 <ESC_AutoCalibrate>:
    *pwmValue = (uint32_t)((MAX_ESC_SPEED - MIN_ESC_SPEED) * (float)(speed / 100) + MIN_ESC_SPEED);

    return true;
}

static bool_t ESC_AutoCalibrate(ESC_HandleTypeDef_t * hesc) {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == hesc) {
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <ESC_AutoCalibrate+0x12>
        return false;
 80027fe:	2300      	movs	r3, #0
 8002800:	e040      	b.n	8002884 <ESC_AutoCalibrate+0x94>
    //    if (false == PWM_SetDutyCycle(hesc, hesc->esc4, MAX_ESC_SPEED)) {
    //        return false;
    //    }

    /* Set ESC to minimum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->esc1, MIN_ESC_SPEED)) {
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	791b      	ldrb	r3, [r3, #4]
 8002806:	f640 42cc 	movw	r2, #3276	@ 0xccc
 800280a:	4619      	mov	r1, r3
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ffad 	bl	800276c <PWM_SetDutyCycle>
 8002812:	4603      	mov	r3, r0
 8002814:	f083 0301 	eor.w	r3, r3, #1
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <ESC_AutoCalibrate+0x32>
        return false;
 800281e:	2300      	movs	r3, #0
 8002820:	e030      	b.n	8002884 <ESC_AutoCalibrate+0x94>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc2, MIN_ESC_SPEED)) {
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	795b      	ldrb	r3, [r3, #5]
 8002826:	f640 42cc 	movw	r2, #3276	@ 0xccc
 800282a:	4619      	mov	r1, r3
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff ff9d 	bl	800276c <PWM_SetDutyCycle>
 8002832:	4603      	mov	r3, r0
 8002834:	f083 0301 	eor.w	r3, r3, #1
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <ESC_AutoCalibrate+0x52>
        return false;
 800283e:	2300      	movs	r3, #0
 8002840:	e020      	b.n	8002884 <ESC_AutoCalibrate+0x94>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc3, MIN_ESC_SPEED)) {
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	799b      	ldrb	r3, [r3, #6]
 8002846:	f640 42cc 	movw	r2, #3276	@ 0xccc
 800284a:	4619      	mov	r1, r3
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ff8d 	bl	800276c <PWM_SetDutyCycle>
 8002852:	4603      	mov	r3, r0
 8002854:	f083 0301 	eor.w	r3, r3, #1
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <ESC_AutoCalibrate+0x72>
        return false;
 800285e:	2300      	movs	r3, #0
 8002860:	e010      	b.n	8002884 <ESC_AutoCalibrate+0x94>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc4, MIN_ESC_SPEED)) {
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	79db      	ldrb	r3, [r3, #7]
 8002866:	f640 42cc 	movw	r2, #3276	@ 0xccc
 800286a:	4619      	mov	r1, r3
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff ff7d 	bl	800276c <PWM_SetDutyCycle>
 8002872:	4603      	mov	r3, r0
 8002874:	f083 0301 	eor.w	r3, r3, #1
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <ESC_AutoCalibrate+0x92>
        return false;
 800287e:	2300      	movs	r3, #0
 8002880:	e000      	b.n	8002884 <ESC_AutoCalibrate+0x94>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs auto-calibrated.\r\n\n", LOG_INFORMATION);
#endif

    return true;
 8002882:	2301      	movs	r3, #1
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <ESC_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
ESC_HandleTypeDef_t * ESC_Init(TIM_HandleTypeDef * htim) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == htim) {
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <ESC_Init+0x12>
        return NULL;
 800289a:	2300      	movs	r3, #0
 800289c:	e036      	b.n	800290c <ESC_Init+0x80>
    LOG((uint8_t *)"Initializing ESCs...\r\n\n", LOG_INFORMATION);
#endif

    /* Allocate dynamic memory for the ESC_HandleTypeDef_t structure */
#ifdef USE_FREERTOS
    ESC_HandleTypeDef_t * hesc = pvPortMalloc(sizeof(ESC_HandleTypeDef_t));
 800289e:	2008      	movs	r0, #8
 80028a0:	f00b fecc 	bl	800e63c <pvPortMalloc>
 80028a4:	60f8      	str	r0, [r7, #12]
#else
    ESC_HandleTypeDef_t * hesc = malloc(sizeof(ESC_HandleTypeDef_t));
#endif

    /* Initialize ESC_HandleTypeDef structure */
    if (hesc) {
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00f      	beq.n	80028cc <ESC_Init+0x40>
        hesc->htim = htim;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	601a      	str	r2, [r3, #0]
        hesc->esc1 = PWM_CHANNEL_1;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2201      	movs	r2, #1
 80028b6:	711a      	strb	r2, [r3, #4]
        hesc->esc2 = PWM_CHANNEL_2;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2202      	movs	r2, #2
 80028bc:	715a      	strb	r2, [r3, #5]
        hesc->esc3 = PWM_CHANNEL_3;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2203      	movs	r2, #3
 80028c2:	719a      	strb	r2, [r3, #6]
        hesc->esc4 = PWM_CHANNEL_4;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2204      	movs	r2, #4
 80028c8:	71da      	strb	r2, [r3, #7]
 80028ca:	e002      	b.n	80028d2 <ESC_Init+0x46>
    } else {
        /* Dynamic memory allocation was not successful */
        /* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f00b fec7 	bl	800e660 <vPortFree>
        free(hesc);
#endif
    }

    /* Start PWM signal generation */
    if (false == PWM_Init(hesc)) {
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f7ff ff0f 	bl	80026f6 <PWM_Init>
 80028d8:	4603      	mov	r3, r0
 80028da:	f083 0301 	eor.w	r3, r3, #1
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d004      	beq.n	80028ee <ESC_Init+0x62>
        LOG((uint8_t *)"ESCs  couldn't be initialized.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f00b febb 	bl	800e660 <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e00e      	b.n	800290c <ESC_Init+0x80>
    }

    /* Calibrate ESC */
    if (false == ESC_AutoCalibrate(hesc)) {
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f7ff ff7e 	bl	80027f0 <ESC_AutoCalibrate>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f083 0301 	eor.w	r3, r3, #1
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d004      	beq.n	800290a <ESC_Init+0x7e>
        LOG((uint8_t *)"ESCs couldn't be calibrated.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f00b fead 	bl	800e660 <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 8002906:	2300      	movs	r3, #0
 8002908:	e000      	b.n	800290c <ESC_Init+0x80>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs initialized.\r\n\n", LOG_INFORMATION);
#endif

    return hesc;
 800290a:	68fb      	ldr	r3, [r7, #12]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <IBUS_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t IBUS_Init(IBUS_HandleTypeDef_t * hibus) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <IBUS_Init+0x12>
        return false;
 8002922:	2300      	movs	r3, #0
 8002924:	e00e      	b.n	8002944 <IBUS_Init+0x30>
    }

    /* Initialize DMA reception */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize)) {
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6859      	ldr	r1, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	7a1b      	ldrb	r3, [r3, #8]
 8002932:	461a      	mov	r2, r3
 8002934:	f005 f951 	bl	8007bda <HAL_UART_Receive_DMA>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <IBUS_Init+0x2e>
        /* END MODIFY 1 */

        /* DMA initialization was unsuccessful */
        return false;
 800293e:	2300      	movs	r3, #0
 8002940:	e000      	b.n	8002944 <IBUS_Init+0x30>
    }

    /* iBus initialization was successful */
    return true;
 8002942:	2301      	movs	r3, #1
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <FSA8S_CheckFirstBytes>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t FSA8S_CheckFirstBytes(IBUS_HandleTypeDef_t * hibus) {
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <FSA8S_CheckFirstBytes+0x12>
        return false;
 800295a:	2300      	movs	r3, #0
 800295c:	e00d      	b.n	800297a <FSA8S_CheckFirstBytes+0x2e>
    }

    /* Check first bytes*/
    if (IBUS_BUFFER_LENGTH == hibus->buffer[0] && IBUS_COMMAND == hibus->buffer[1]) {
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b20      	cmp	r3, #32
 8002966:	d107      	bne.n	8002978 <FSA8S_CheckFirstBytes+0x2c>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	3301      	adds	r3, #1
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b40      	cmp	r3, #64	@ 0x40
 8002972:	d101      	bne.n	8002978 <FSA8S_CheckFirstBytes+0x2c>
        /* First two bytes are correct */
        return true;
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <FSA8S_CheckFirstBytes+0x2e>
    } else {
        /* First two bytes are not correct */
        return false;
 8002978:	2300      	movs	r3, #0
    }
}
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <FSA8S_Checksum>:

static bool_t FSA8S_Checksum(IBUS_HandleTypeDef_t * hibus) {
 8002986:	b480      	push	{r7}
 8002988:	b085      	sub	sp, #20
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]

    /* Declare variable for checksum value in data received */
    uint16_t sentChecksum;

    /* Define variable for checksum to calculate using the data received */
    uint16_t receivedChecksum = 0xFFFF;
 800298e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002992:	81fb      	strh	r3, [r7, #14]

    /* Check parameter */
    if (NULL == hibus) {
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <FSA8S_Checksum+0x18>
        return false;
 800299a:	2300      	movs	r3, #0
 800299c:	e02c      	b.n	80029f8 <FSA8S_Checksum+0x72>
    }

    /* Get received checksum value */
    sentChecksum = (hibus->buffer[hibus->bufferSize - 1] << 8) | (hibus->buffer[hibus->bufferSize - 2]);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	7a1b      	ldrb	r3, [r3, #8]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	021b      	lsls	r3, r3, #8
 80029ae:	b21a      	sxth	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6859      	ldr	r1, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	7a1b      	ldrb	r3, [r3, #8]
 80029b8:	3b02      	subs	r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	b21b      	sxth	r3, r3
 80029c0:	4313      	orrs	r3, r2
 80029c2:	b21b      	sxth	r3, r3
 80029c4:	817b      	strh	r3, [r7, #10]

    /* Calculate checksum */
    for (uint8_t i = 0; i < 30; i++) {
 80029c6:	2300      	movs	r3, #0
 80029c8:	737b      	strb	r3, [r7, #13]
 80029ca:	e00b      	b.n	80029e4 <FSA8S_Checksum+0x5e>
        receivedChecksum -= hibus->buffer[i];
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	7b7b      	ldrb	r3, [r7, #13]
 80029d2:	4413      	add	r3, r2
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	89fb      	ldrh	r3, [r7, #14]
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < 30; i++) {
 80029de:	7b7b      	ldrb	r3, [r7, #13]
 80029e0:	3301      	adds	r3, #1
 80029e2:	737b      	strb	r3, [r7, #13]
 80029e4:	7b7b      	ldrb	r3, [r7, #13]
 80029e6:	2b1d      	cmp	r3, #29
 80029e8:	d9f0      	bls.n	80029cc <FSA8S_Checksum+0x46>
    }

    /* Compare received checksum value with calculated one */
    if (sentChecksum == receivedChecksum) {
 80029ea:	897a      	ldrh	r2, [r7, #10]
 80029ec:	89fb      	ldrh	r3, [r7, #14]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d101      	bne.n	80029f6 <FSA8S_Checksum+0x70>
        /* Received data is correct */
        return true;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <FSA8S_Checksum+0x72>
    } else {
        /* Received data is corrupted */
        return false;
 80029f6:	2300      	movs	r3, #0
    }
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <FSA8S_AmendData>:

static void FSA8S_AmendData(IBUS_HandleTypeDef_t * hibus) {
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]

    /* Declare variable for channel value */
    uint16_t channelValue;

    /* Check parameter */
    if (NULL != hibus) {
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d061      	beq.n	8002ad6 <FSA8S_AmendData+0xd2>

        /* Amend data */
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 8002a12:	2302      	movs	r3, #2
 8002a14:	737b      	strb	r3, [r7, #13]
 8002a16:	e058      	b.n	8002aca <FSA8S_AmendData+0xc6>

            channelValue = IBUS_CHANNEL_VALUE_NULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	81fb      	strh	r3, [r7, #14]

            /* Swap channel bytes */
            channelValue = ((hibus->buffer[i + 1] << 8) | (hibus->buffer[i])) - calibrationValues[(i - 2) / 2];
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	7b7b      	ldrb	r3, [r7, #13]
 8002a22:	3301      	adds	r3, #1
 8002a24:	4413      	add	r3, r2
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	b21a      	sxth	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	7b7b      	ldrb	r3, [r7, #13]
 8002a32:	440b      	add	r3, r1
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	b21b      	sxth	r3, r3
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	b21b      	sxth	r3, r3
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	7b7b      	ldrb	r3, [r7, #13]
 8002a40:	3b02      	subs	r3, #2
 8002a42:	0fd9      	lsrs	r1, r3, #31
 8002a44:	440b      	add	r3, r1
 8002a46:	105b      	asrs	r3, r3, #1
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4b26      	ldr	r3, [pc, #152]	@ (8002ae4 <FSA8S_AmendData+0xe0>)
 8002a4c:	5c5b      	ldrb	r3, [r3, r1]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	81fb      	strh	r3, [r7, #14]

            /* Map channel value from 0 to IBUS_CHANNEL_MAX_VALUE */
            if ((IBUS_CHANNEL_MIN_RAW_VALUE <= channelValue) && (IBUS_CHANNEL_MAX_RAW_VALUE >= channelValue)) {
 8002a52:	89fb      	ldrh	r3, [r7, #14]
 8002a54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a58:	d308      	bcc.n	8002a6c <FSA8S_AmendData+0x68>
 8002a5a:	89fb      	ldrh	r3, [r7, #14]
 8002a5c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002a60:	d804      	bhi.n	8002a6c <FSA8S_AmendData+0x68>
                channelValue -= IBUS_CHANNEL_MIN_RAW_VALUE;
 8002a62:	89fb      	ldrh	r3, [r7, #14]
 8002a64:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002a68:	81fb      	strh	r3, [r7, #14]
 8002a6a:	e001      	b.n	8002a70 <FSA8S_AmendData+0x6c>
            } else {
                channelValue = IBUS_CHANNEL_VALUE_NULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	81fb      	strh	r3, [r7, #14]
            }

            /* Map channel value between minimum and maximum values and store it */
            hibus->data[(i - 2) / 2] = channelValue * ((float)(IBUS_CHANNEL_MAX_VALUE + (calibrationValues[(i - 2) / 2] * ((float)IBUS_CHANNEL_MAX_VALUE / IBUS_CHANNEL_MIN_RAW_VALUE))) / IBUS_CHANNEL_MIN_RAW_VALUE);
 8002a70:	89fb      	ldrh	r3, [r7, #14]
 8002a72:	ee07 3a90 	vmov	s15, r3
 8002a76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a7a:	7b7b      	ldrb	r3, [r7, #13]
 8002a7c:	3b02      	subs	r3, #2
 8002a7e:	0fda      	lsrs	r2, r3, #31
 8002a80:	4413      	add	r3, r2
 8002a82:	105b      	asrs	r3, r3, #1
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b17      	ldr	r3, [pc, #92]	@ (8002ae4 <FSA8S_AmendData+0xe0>)
 8002a88:	5c9b      	ldrb	r3, [r3, r2]
 8002a8a:	ee07 3a90 	vmov	s15, r3
 8002a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a92:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002ae8 <FSA8S_AmendData+0xe4>
 8002a96:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002a9a:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8002ae8 <FSA8S_AmendData+0xe4>
 8002a9e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	7b7b      	ldrb	r3, [r7, #13]
 8002aac:	3b02      	subs	r3, #2
 8002aae:	0fd9      	lsrs	r1, r3, #31
 8002ab0:	440b      	add	r3, r1
 8002ab2:	105b      	asrs	r3, r3, #1
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002abc:	ee17 2a90 	vmov	r2, s15
 8002ac0:	b292      	uxth	r2, r2
 8002ac2:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 8002ac4:	7b7b      	ldrb	r3, [r7, #13]
 8002ac6:	3302      	adds	r3, #2
 8002ac8:	737b      	strb	r3, [r7, #13]
 8002aca:	7b7a      	ldrb	r2, [r7, #13]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7a1b      	ldrb	r3, [r3, #8]
 8002ad0:	3b02      	subs	r3, #2
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	dba0      	blt.n	8002a18 <FSA8S_AmendData+0x14>
        }
    }
}
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20000010 	.word	0x20000010
 8002ae8:	447a0000 	.word	0x447a0000

08002aec <FSA8S_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
IBUS_HandleTypeDef_t * FSA8S_Init(UART_HandleTypeDef * huart) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

    /* Define variable to track number of initializations */
    static uint8_t alreadyInitialized = false;

    /* Check parameter */
    if (NULL == huart) {
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <FSA8S_Init+0x12>
        return NULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	e04a      	b.n	8002b94 <FSA8S_Init+0xa8>
    }

    /* Check if driver was already initialized */
    if (alreadyInitialized) {
 8002afe:	4b27      	ldr	r3, [pc, #156]	@ (8002b9c <FSA8S_Init+0xb0>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <FSA8S_Init+0x1e>
        return NULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	e044      	b.n	8002b94 <FSA8S_Init+0xa8>
    }

    /* Allocate dynamic memory for the IBUS_HandleTypeDef_t structure and for the buffer to receive
     * data */
#ifdef USE_FREERTOS
    IBUS_HandleTypeDef_t * hibus = (IBUS_HandleTypeDef_t *)pvPortMalloc(sizeof(IBUS_HandleTypeDef_t));
 8002b0a:	2014      	movs	r0, #20
 8002b0c:	f00b fd96 	bl	800e63c <pvPortMalloc>
 8002b10:	6178      	str	r0, [r7, #20]
    uint8_t * buffer = (uint8_t *)pvPortMalloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
 8002b12:	2020      	movs	r0, #32
 8002b14:	f00b fd92 	bl	800e63c <pvPortMalloc>
 8002b18:	6138      	str	r0, [r7, #16]
    uint16_t * data = (uint16_t *)pvPortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
 8002b1a:	201c      	movs	r0, #28
 8002b1c:	f00b fd8e 	bl	800e63c <pvPortMalloc>
 8002b20:	60f8      	str	r0, [r7, #12]
    uint8_t * buffer = (uint8_t *)malloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
    uint16_t * data = (uint16_t *)malloc(sizeof(uint16_t) * IBUS_CHANNELS);
#endif

    /* Initialize iBus_HandleTypeDef structure */
    if (hibus) {
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00f      	beq.n	8002b48 <FSA8S_Init+0x5c>
        hibus->huart = huart;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	601a      	str	r2, [r3, #0]
        hibus->buffer = buffer;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGTH;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2220      	movs	r2, #32
 8002b38:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	220e      	movs	r2, #14
 8002b44:	741a      	strb	r2, [r3, #16]
 8002b46:	e00c      	b.n	8002b62 <FSA8S_Init+0x76>
    } else {
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f00b fd87 	bl	800e660 <vPortFree>
        vPortFree(hibus->data);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f00b fd82 	bl	800e660 <vPortFree>
        vPortFree(hibus);
 8002b5c:	6978      	ldr	r0, [r7, #20]
 8002b5e:	f00b fd7f 	bl	800e660 <vPortFree>
        free(hibus);
#endif
    }

    /* Initialize iBus communication */
    if (IBUS_Init(hibus)) {
 8002b62:	6978      	ldr	r0, [r7, #20]
 8002b64:	f7ff fed6 	bl	8002914 <IBUS_Init>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d004      	beq.n	8002b78 <FSA8S_Init+0x8c>
        /* Initialization was successful */
        alreadyInitialized = true;
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b9c <FSA8S_Init+0xb0>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	701a      	strb	r2, [r3, #0]
        return hibus;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	e00d      	b.n	8002b94 <FSA8S_Init+0xa8>
    } else {
        /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f00b fd6f 	bl	800e660 <vPortFree>
        vPortFree(hibus->data);
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f00b fd6a 	bl	800e660 <vPortFree>
        vPortFree(hibus);
 8002b8c:	6978      	ldr	r0, [r7, #20]
 8002b8e:	f00b fd67 	bl	800e660 <vPortFree>
#else
        /* Free up dynamic allocated memory */
        free(hibus->buffer);
        free(hibus);
#endif
        return NULL;
 8002b92:	2300      	movs	r3, #0
    }
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20000bf4 	.word	0x20000bf4

08002ba0 <FSA8S_ReadChannel>:

uint16_t FSA8S_ReadChannel(IBUS_HandleTypeDef_t * hibus, FSA8S_CHANNEL_t channel) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	70fb      	strb	r3, [r7, #3]

    /* Check parameter */
    if (NULL == hibus) {
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <FSA8S_ReadChannel+0x16>
        return IBUS_CHANNEL_VALUE_NULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	e029      	b.n	8002c0a <FSA8S_ReadChannel+0x6a>
    }

    /* Check parameter */
    if (!(channel > 0 && channel <= IBUS_CHANNELS)) {
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <FSA8S_ReadChannel+0x22>
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	2b0e      	cmp	r3, #14
 8002bc0:	d901      	bls.n	8002bc6 <FSA8S_ReadChannel+0x26>

#ifdef FSA8S_USE_LOGGING
        LOG((uint8_t *)"FSA8S invalid channel to read.\r\n\n", LOG_ERROR);
#endif

        return IBUS_CHANNEL_VALUE_NULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e021      	b.n	8002c0a <FSA8S_ReadChannel+0x6a>
    }

    /* Check if first two bytes are IBUS_LENGTH and IBUS_COMMAND */
    while (1) {
        while (!FSA8S_CheckFirstBytes(hibus)) {
 8002bc6:	bf00      	nop
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff febf 	bl	800294c <FSA8S_CheckFirstBytes>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f083 0301 	eor.w	r3, r3, #1
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f6      	bne.n	8002bc8 <FSA8S_ReadChannel+0x28>
            /* Wait until a data frame with the right format is received */
        }

        /* Perform a checksum */
        if (!FSA8S_Checksum(hibus)) {
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff fed3 	bl	8002986 <FSA8S_Checksum>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f083 0301 	eor.w	r3, r3, #1
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <FSA8S_ReadChannel+0x50>
            /* Received data is corrupted */
            /* Wait another transaction and check first to bytes */
            continue;
 8002bec:	bf00      	nop
        while (!FSA8S_CheckFirstBytes(hibus)) {
 8002bee:	e7ea      	b.n	8002bc6 <FSA8S_ReadChannel+0x26>
        } else {
            /* Received data is correct */
            /* Quit outer while loop */
            break;
 8002bf0:	bf00      	nop
        }
    }

    /* Get channels data in little-endian */
    FSA8S_AmendData(hibus);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff ff06 	bl	8002a04 <FSA8S_AmendData>

    /* Return channel value */
    return hibus->data[channel - IBUS_CHANNEL_NUM_OFFSET];
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	78fb      	ldrb	r3, [r7, #3]
 8002bfe:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8002c02:	3b01      	subs	r3, #1
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	4413      	add	r3, r2
 8002c08:	881b      	ldrh	r3, [r3, #0]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <I2C_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t I2C_Init(GY87_HandleTypeDef_t * hgy87) {
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af02      	add	r7, sp, #8
 8002c18:	6078      	str	r0, [r7, #4]

    uint8_t who_am_I_value;

    /* Check parameter */
    if (NULL == hgy87) {
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <I2C_Init+0x12>
        return false;
 8002c20:	2300      	movs	r3, #0
 8002c22:	e010      	b.n	8002c46 <I2C_Init+0x34>
    }

    /* Read IMU device ID */
    I2C_Read(hgy87->hi2c, hgy87->address, MPU_6050_REG_WHO_AM_I, &who_am_I_value, 1);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6858      	ldr	r0, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	7a19      	ldrb	r1, [r3, #8]
 8002c2c:	f107 030f 	add.w	r3, r7, #15
 8002c30:	2201      	movs	r2, #1
 8002c32:	9200      	str	r2, [sp, #0]
 8002c34:	2275      	movs	r2, #117	@ 0x75
 8002c36:	f000 f80a 	bl	8002c4e <I2C_Read>

    /* Check IMU device ID */
    if (who_am_I_value == MPU_6050_BIT_WHO_AM_I) {
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	2b68      	cmp	r3, #104	@ 0x68
 8002c3e:	d101      	bne.n	8002c44 <I2C_Init+0x32>
        /* Right IMU device ID */
        return true;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <I2C_Init+0x34>
    } else {
        /* Wrong IMU device ID */
        return false;
 8002c44:	2300      	movs	r3, #0
    }
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <I2C_Read>:

bool_t I2C_Read(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b088      	sub	sp, #32
 8002c52:	af04      	add	r7, sp, #16
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	607b      	str	r3, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	72fb      	strb	r3, [r7, #11]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <I2C_Read+0x1c>
        return false;
 8002c66:	2300      	movs	r3, #0
 8002c68:	e019      	b.n	8002c9e <I2C_Read+0x50>
    }
    if (NULL == data) {
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <I2C_Read+0x26>
        return false;
 8002c70:	2300      	movs	r3, #0
 8002c72:	e014      	b.n	8002c9e <I2C_Read+0x50>
    }

    /* Read I2C device data by passing a data register */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_I2C_Mem_Read(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, dataSize, MPU_6050_I2C_READ_TIMEOUT)) {
 8002c74:	7afb      	ldrb	r3, [r7, #11]
 8002c76:	b299      	uxth	r1, r3
 8002c78:	7abb      	ldrb	r3, [r7, #10]
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	7e3b      	ldrb	r3, [r7, #24]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2064      	movs	r0, #100	@ 0x64
 8002c82:	9002      	str	r0, [sp, #8]
 8002c84:	9301      	str	r3, [sp, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f001 fe9f 	bl	80049d0 <HAL_I2C_Mem_Read>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <I2C_Read+0x4e>
        /* END MODIFY 1 */
        /* Data couldn't be read */
        return false;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e000      	b.n	8002c9e <I2C_Read+0x50>
    } else {
        /* Data read successfully */
        return true;
 8002c9c:	2301      	movs	r3, #1
    }
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <I2C_Write>:

bool_t I2C_Write(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b088      	sub	sp, #32
 8002caa:	af04      	add	r7, sp, #16
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	72fb      	strb	r3, [r7, #11]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <I2C_Write+0x1c>
        return false;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e018      	b.n	8002cf4 <I2C_Write+0x4e>
    }
    if (NULL == data) {
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <I2C_Write+0x26>
        return false;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	e013      	b.n	8002cf4 <I2C_Write+0x4e>
    }

    /* Write to I2C device register */
    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_I2C_Mem_Write(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, sizeof(*data), MPU_6050_I2C_WRITE_TIMEOUT)) {
 8002ccc:	7afb      	ldrb	r3, [r7, #11]
 8002cce:	b299      	uxth	r1, r3
 8002cd0:	7abb      	ldrb	r3, [r7, #10]
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	2364      	movs	r3, #100	@ 0x64
 8002cd6:	9302      	str	r3, [sp, #8]
 8002cd8:	2301      	movs	r3, #1
 8002cda:	9301      	str	r3, [sp, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f001 fd7a 	bl	80047dc <HAL_I2C_Mem_Write>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <I2C_Write+0x4c>
        /* END MODIFY 2 */
        /* Data couldn't be written */
        return false;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e000      	b.n	8002cf4 <I2C_Write+0x4e>
    } else {

        /* Data written successfully */
        return true;
 8002cf2:	2301      	movs	r3, #1
    }
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <GY87_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static GY87_HandleTypeDef_t * GY87_InstanceInit(I2C_HandleTypeDef * hi2c) {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]

#ifdef USE_FREERTOS
    /* Allocate dynamic memory for the GY87_HandleTypeDef_t structure */
    GY87_HandleTypeDef_t * hgy87 = pvPortMalloc(sizeof(GY87_HandleTypeDef_t));
 8002d04:	2014      	movs	r0, #20
 8002d06:	f00b fc99 	bl	800e63c <pvPortMalloc>
 8002d0a:	60f8      	str	r0, [r7, #12]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = pvPortMalloc(sizeof(1));
 8002d0c:	2004      	movs	r0, #4
 8002d0e:	f00b fc95 	bl	800e63c <pvPortMalloc>
 8002d12:	60b8      	str	r0, [r7, #8]
    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = malloc(sizeof(1));
#endif

    /* Check if dynamic memory allocation was successful */
    if (NULL == hgy87 || NULL == buffer) {
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <GY87_InstanceInit+0x24>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d109      	bne.n	8002d34 <GY87_InstanceInit+0x38>
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hgy87->buffer);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f00b fc9b 	bl	800e660 <vPortFree>
        vPortFree(hgy87);
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f00b fc98 	bl	800e660 <vPortFree>
        /* Free up dynamic allocated memory */
        hgy87->buffer = 0;
        free(hgy87->buffer);
        free(hgy87);
#endif
        return NULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e01b      	b.n	8002d6c <GY87_InstanceInit+0x70>
    } else {
        /* Dynamic memory allocation was successful */

        /* Initialize GY87_HandleTypeDef_t structure */
        if (instancesNumber == 0) {
 8002d34:	4b0f      	ldr	r3, [pc, #60]	@ (8002d74 <GY87_InstanceInit+0x78>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d106      	bne.n	8002d4a <GY87_InstanceInit+0x4e>
            hgy87->instance = 1;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	701a      	strb	r2, [r3, #0]
            hgy87->address = MPU6050_AUX_VAL_I2C_ADDR1;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	22d0      	movs	r2, #208	@ 0xd0
 8002d46:	721a      	strb	r2, [r3, #8]
 8002d48:	e009      	b.n	8002d5e <GY87_InstanceInit+0x62>
        } else if (instancesNumber == 1) {
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d74 <GY87_InstanceInit+0x78>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d105      	bne.n	8002d5e <GY87_InstanceInit+0x62>
            hgy87->instance = 2;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2202      	movs	r2, #2
 8002d56:	701a      	strb	r2, [r3, #0]
            hgy87->address = MPU6050_AUX_VAL_I2C_ADDR2;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	22d1      	movs	r2, #209	@ 0xd1
 8002d5c:	721a      	strb	r2, [r3, #8]
        }
        hgy87->hi2c = hi2c;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	605a      	str	r2, [r3, #4]
        hgy87->buffer = buffer;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	60da      	str	r2, [r3, #12]
    }

    /* Return created instance */
    return hgy87;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000bf5 	.word	0x20000bf5

08002d78 <MPU6050_WakeUpDevice>:

static void MPU6050_WakeUpDevice(GY87_HandleTypeDef_t * hgy87) {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	6078      	str	r0, [r7, #4]

    /* Wake up device */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_SLEEP;
 8002d80:	2340      	movs	r3, #64	@ 0x40
 8002d82:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_CLEAR_BIT);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6858      	ldr	r0, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	7a19      	ldrb	r1, [r3, #8]
 8002d8c:	f107 030f 	add.w	r3, r7, #15
 8002d90:	2200      	movs	r2, #0
 8002d92:	9200      	str	r2, [sp, #0]
 8002d94:	226b      	movs	r2, #107	@ 0x6b
 8002d96:	f000 f9b9 	bl	800310c <MPU6050_WriteRegisterBitmasked>
}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <MPU6050_SetClockSource>:

static void MPU6050_SetClockSource(GY87_HandleTypeDef_t * hgy87) {
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b086      	sub	sp, #24
 8002da6:	af02      	add	r7, sp, #8
 8002da8:	6078      	str	r0, [r7, #4]

    /* Set clock source */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_CLKSEL_1;
 8002daa:	2301      	movs	r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6858      	ldr	r0, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	7a19      	ldrb	r1, [r3, #8]
 8002db6:	f107 030f 	add.w	r3, r7, #15
 8002dba:	2201      	movs	r2, #1
 8002dbc:	9200      	str	r2, [sp, #0]
 8002dbe:	226b      	movs	r2, #107	@ 0x6b
 8002dc0:	f000 f9a4 	bl	800310c <MPU6050_WriteRegisterBitmasked>
}
 8002dc4:	bf00      	nop
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <MPU6050_SetSampleDivider>:

static void MPU6050_SetSampleDivider(GY87_HandleTypeDef_t * hgy87) {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	6078      	str	r0, [r7, #4]

    /* Set sample rate divider */
    uint8_t regData;

    regData = MPU_6050_BIT_SMPLRT_DIV;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_SMPLRT_DIV, &regData, MPU6050_SET_BIT);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6858      	ldr	r0, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	7a19      	ldrb	r1, [r3, #8]
 8002de0:	f107 030f 	add.w	r3, r7, #15
 8002de4:	2201      	movs	r2, #1
 8002de6:	9200      	str	r2, [sp, #0]
 8002de8:	2219      	movs	r2, #25
 8002dea:	f000 f98f 	bl	800310c <MPU6050_WriteRegisterBitmasked>
}
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <MPU6050_EnableDLPF>:

static void MPU6050_EnableDLPF(GY87_HandleTypeDef_t * hgy87) {
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b086      	sub	sp, #24
 8002dfa:	af02      	add	r7, sp, #8
 8002dfc:	6078      	str	r0, [r7, #4]

    /* Enable digital low pass filter */
    uint8_t regData;

    regData = MPU_6050_BIT_CONFIG_DLPF_CFG_3;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_CONFIG, &regData, MPU6050_SET_BIT);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6858      	ldr	r0, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	7a19      	ldrb	r1, [r3, #8]
 8002e0a:	f107 030f 	add.w	r3, r7, #15
 8002e0e:	2201      	movs	r2, #1
 8002e10:	9200      	str	r2, [sp, #0]
 8002e12:	221a      	movs	r2, #26
 8002e14:	f000 f97a 	bl	800310c <MPU6050_WriteRegisterBitmasked>
}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <MPU6050_SetGyroscopeRange>:

static void MPU6050_SetGyroscopeRange(GY87_HandleTypeDef_t * hgy87) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	6078      	str	r0, [r7, #4]

    /* Set gyroscope range */
    uint8_t regData;

    regData = MPU_6050_BIT_GYRO_CONFIG_FS_SEL_1; // Full range
 8002e28:	2308      	movs	r3, #8
 8002e2a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_CONFIG, &regData, MPU6050_SET_BIT);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6858      	ldr	r0, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	7a19      	ldrb	r1, [r3, #8]
 8002e34:	f107 030f 	add.w	r3, r7, #15
 8002e38:	2201      	movs	r2, #1
 8002e3a:	9200      	str	r2, [sp, #0]
 8002e3c:	221b      	movs	r2, #27
 8002e3e:	f000 f965 	bl	800310c <MPU6050_WriteRegisterBitmasked>
}
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <MPU6050_SetAccelerometerRange>:

static void MPU6050_SetAccelerometerRange(GY87_HandleTypeDef_t * hgy87) {
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b086      	sub	sp, #24
 8002e4e:	af02      	add	r7, sp, #8
 8002e50:	6078      	str	r0, [r7, #4]

    /* Set accelerometer range */
    uint8_t regData;

    regData = MPU_6050_BIT_ACCEL_CONFIG_FS_SEL_2; // Full range
 8002e52:	2310      	movs	r3, #16
 8002e54:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_CONFIG, &regData, MPU6050_SET_BIT);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6858      	ldr	r0, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	7a19      	ldrb	r1, [r3, #8]
 8002e5e:	f107 030f 	add.w	r3, r7, #15
 8002e62:	2201      	movs	r2, #1
 8002e64:	9200      	str	r2, [sp, #0]
 8002e66:	221c      	movs	r2, #28
 8002e68:	f000 f950 	bl	800310c <MPU6050_WriteRegisterBitmasked>
}
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <MPU6050_EnableI2CMasterMode>:

static void MPU6050_EnableI2CMasterMode(GY87_HandleTypeDef_t * hgy87) {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	6078      	str	r0, [r7, #4]

    /* Enable I2C Master mode */
    uint8_t regData;

    regData = MPU_6050_BIT_USER_CTRL_MST_EN;
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_SET_BIT);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6858      	ldr	r0, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	7a19      	ldrb	r1, [r3, #8]
 8002e88:	f107 030f 	add.w	r3, r7, #15
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	9200      	str	r2, [sp, #0]
 8002e90:	226a      	movs	r2, #106	@ 0x6a
 8002e92:	f000 f93b 	bl	800310c <MPU6050_WriteRegisterBitmasked>
}
 8002e96:	bf00      	nop
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <MPU6050_DisableI2CMasterMode>:

static void MPU6050_DisableI2CMasterMode(GY87_HandleTypeDef_t * hgy87) {
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b086      	sub	sp, #24
 8002ea2:	af02      	add	r7, sp, #8
 8002ea4:	6078      	str	r0, [r7, #4]

    /* Disable I2C Master mode */
    uint8_t regData;

    regData = MPU_6050_BIT_USER_CTRL_MST_EN;
 8002ea6:	2320      	movs	r3, #32
 8002ea8:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_CLEAR_BIT);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6858      	ldr	r0, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	7a19      	ldrb	r1, [r3, #8]
 8002eb2:	f107 030f 	add.w	r3, r7, #15
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	9200      	str	r2, [sp, #0]
 8002eba:	226a      	movs	r2, #106	@ 0x6a
 8002ebc:	f000 f926 	bl	800310c <MPU6050_WriteRegisterBitmasked>
}
 8002ec0:	bf00      	nop
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <MPU6050_EnableBypassMode>:

static void MPU6050_EnableBypassMode(GY87_HandleTypeDef_t * hgy87) {
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af02      	add	r7, sp, #8
 8002ece:	6078      	str	r0, [r7, #4]

    /* Enable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6858      	ldr	r0, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7a19      	ldrb	r1, [r3, #8]
 8002edc:	f107 030f 	add.w	r3, r7, #15
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	9200      	str	r2, [sp, #0]
 8002ee4:	2237      	movs	r2, #55	@ 0x37
 8002ee6:	f000 f911 	bl	800310c <MPU6050_WriteRegisterBitmasked>
}
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <MPU6050_DisableBypassMode>:

static void MPU6050_DisableBypassMode(GY87_HandleTypeDef_t * hgy87) {
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b086      	sub	sp, #24
 8002ef6:	af02      	add	r7, sp, #8
 8002ef8:	6078      	str	r0, [r7, #4]

    /* Disable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 8002efa:	2302      	movs	r3, #2
 8002efc:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6858      	ldr	r0, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	7a19      	ldrb	r1, [r3, #8]
 8002f06:	f107 030f 	add.w	r3, r7, #15
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	9200      	str	r2, [sp, #0]
 8002f0e:	2237      	movs	r2, #55	@ 0x37
 8002f10:	f000 f8fc 	bl	800310c <MPU6050_WriteRegisterBitmasked>
}
 8002f14:	bf00      	nop
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <MPU6050_SetMasterClock>:

static void MPU6050_SetMasterClock(GY87_HandleTypeDef_t * hgy87) {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	6078      	str	r0, [r7, #4]

    /* Set Master Clock */
    uint8_t regData;

    regData = MPU_6050_BIT_I2C_MST_CTRL_CLK_13;
 8002f24:	230d      	movs	r3, #13
 8002f26:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_MST_CTRL, &regData, MPU6050_SET_BIT);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6858      	ldr	r0, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	7a19      	ldrb	r1, [r3, #8]
 8002f30:	f107 030f 	add.w	r3, r7, #15
 8002f34:	2201      	movs	r2, #1
 8002f36:	9200      	str	r2, [sp, #0]
 8002f38:	2224      	movs	r2, #36	@ 0x24
 8002f3a:	f000 f8e7 	bl	800310c <MPU6050_WriteRegisterBitmasked>
}
 8002f3e:	bf00      	nop
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <MPU6050_Configure_QMC5883l>:

static void MPU6050_Configure_QMC5883l(GY87_HandleTypeDef_t * hgy87) {
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b086      	sub	sp, #24
 8002f4a:	af02      	add	r7, sp, #8
 8002f4c:	6078      	str	r0, [r7, #4]

    /* Configure slave QMC5883L magnetometer in MPU6050 */
    uint8_t regData;

    /* Set slave QMC5883L magnetometer device address */
    regData = 0x80 | QMC5883L_AUX_VAL_I2C_ADDR;
 8002f4e:	238d      	movs	r3, #141	@ 0x8d
 8002f50:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_ADDR, &regData, MPU6050_SET_BIT);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6858      	ldr	r0, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	7a19      	ldrb	r1, [r3, #8]
 8002f5a:	f107 030f 	add.w	r3, r7, #15
 8002f5e:	2201      	movs	r2, #1
 8002f60:	9200      	str	r2, [sp, #0]
 8002f62:	2225      	movs	r2, #37	@ 0x25
 8002f64:	f000 f8d2 	bl	800310c <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer registers addresses to read */
    regData = QMC5883L_REG_X_LSB;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_REG, &regData, MPU6050_SET_BIT);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6858      	ldr	r0, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	7a19      	ldrb	r1, [r3, #8]
 8002f74:	f107 030f 	add.w	r3, r7, #15
 8002f78:	2201      	movs	r2, #1
 8002f7a:	9200      	str	r2, [sp, #0]
 8002f7c:	2226      	movs	r2, #38	@ 0x26
 8002f7e:	f000 f8c5 	bl	800310c <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer number of registers to read*/
    regData = 0x80 | 0x06;
 8002f82:	2386      	movs	r3, #134	@ 0x86
 8002f84:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_CTRL, &regData, MPU6050_SET_BIT);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6858      	ldr	r0, [r3, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	7a19      	ldrb	r1, [r3, #8]
 8002f8e:	f107 030f 	add.w	r3, r7, #15
 8002f92:	2201      	movs	r2, #1
 8002f94:	9200      	str	r2, [sp, #0]
 8002f96:	2227      	movs	r2, #39	@ 0x27
 8002f98:	f000 f8b8 	bl	800310c <MPU6050_WriteRegisterBitmasked>
}
 8002f9c:	bf00      	nop
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <GY87_Configure>:

static bool_t GY87_Configure(GY87_HandleTypeDef_t * hgy87) {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]

    /* Configure MPU6050 device */

    /* Wake up device */
    MPU6050_WakeUpDevice(hgy87);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff fee3 	bl	8002d78 <MPU6050_WakeUpDevice>

    /* Set clock source */
    MPU6050_SetClockSource(hgy87);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff fef5 	bl	8002da2 <MPU6050_SetClockSource>

    /* Set sample rate divider */
    MPU6050_SetSampleDivider(hgy87);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff ff07 	bl	8002dcc <MPU6050_SetSampleDivider>

    /* Enable digital low pass filter */
    MPU6050_EnableDLPF(hgy87);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7ff ff19 	bl	8002df6 <MPU6050_EnableDLPF>

    /* Set gyroscope range */
    MPU6050_SetGyroscopeRange(hgy87);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff ff2b 	bl	8002e20 <MPU6050_SetGyroscopeRange>

    /* Set accelerometer range */
    MPU6050_SetAccelerometerRange(hgy87);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7ff ff3d 	bl	8002e4a <MPU6050_SetAccelerometerRange>

    /* Disable I2C Master mode */
    MPU6050_DisableI2CMasterMode(hgy87);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff ff64 	bl	8002e9e <MPU6050_DisableI2CMasterMode>

    /* Enable Bypass mode */
    MPU6050_EnableBypassMode(hgy87);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff ff76 	bl	8002ec8 <MPU6050_EnableBypassMode>

    /* Test QMC5883L magnetometer connection */
    if (!QMC5883L_TestConnection(hgy87)) {
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f829 	bl	8003034 <QMC5883L_TestConnection>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	f083 0301 	eor.w	r3, r3, #1
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <GY87_Configure+0x56>
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"QMC5883L magnetometer not detected.\r\n\n", LOG_ERROR);
 8002fee:	2103      	movs	r1, #3
 8002ff0:	480e      	ldr	r0, [pc, #56]	@ (800302c <GY87_Configure+0x88>)
 8002ff2:	f000 f91b 	bl	800322c <LOG>
#endif
        return false;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e013      	b.n	8003022 <GY87_Configure+0x7e>
    } else {
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"QMC5883L magnetometer detected.\r\n\n", LOG_INFORMATION);
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	480c      	ldr	r0, [pc, #48]	@ (8003030 <GY87_Configure+0x8c>)
 8002ffe:	f000 f915 	bl	800322c <LOG>
#endif
    }

    /* Configure QMC5883L magnetometer */
    QMC5883L_Configure(hgy87);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f82e 	bl	8003064 <QMC5883L_Configure>

    /* Disable Bypass */
    MPU6050_DisableBypassMode(hgy87);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff ff72 	bl	8002ef2 <MPU6050_DisableBypassMode>

    /* Enable I2C Master mode */
    MPU6050_EnableI2CMasterMode(hgy87);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff ff30 	bl	8002e74 <MPU6050_EnableI2CMasterMode>

    /* Set Master clock */
    MPU6050_SetMasterClock(hgy87);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff ff81 	bl	8002f1c <MPU6050_SetMasterClock>

    /* Configure slave QMC5883L magnetometer in MPU6050 */
    MPU6050_Configure_QMC5883l(hgy87);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff ff93 	bl	8002f46 <MPU6050_Configure_QMC5883l>

    return true;
 8003020:	2301      	movs	r3, #1
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	08011ba0 	.word	0x08011ba0
 8003030:	08011bc8 	.word	0x08011bc8

08003034 <QMC5883L_TestConnection>:

static bool_t QMC5883L_TestConnection(GY87_HandleTypeDef_t * hgy87) {
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af02      	add	r7, sp, #8
 800303a:	6078      	str	r0, [r7, #4]

    /* Test QMC5883L magnetometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CHIP_ID, &regData, sizeof(regData));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6858      	ldr	r0, [r3, #4]
 8003040:	f107 030f 	add.w	r3, r7, #15
 8003044:	2201      	movs	r2, #1
 8003046:	9200      	str	r2, [sp, #0]
 8003048:	220d      	movs	r2, #13
 800304a:	211a      	movs	r1, #26
 800304c:	f000 f836 	bl	80030bc <MPU6050_ReadRegister>

    if (QMC5883L_BIT_CHIP_ID != regData) {
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	2bff      	cmp	r3, #255	@ 0xff
 8003054:	d001      	beq.n	800305a <QMC5883L_TestConnection+0x26>
        return false;
 8003056:	2300      	movs	r3, #0
 8003058:	e000      	b.n	800305c <QMC5883L_TestConnection+0x28>
    } else {
        return true;
 800305a:	2301      	movs	r3, #1
    }
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <QMC5883L_Configure>:

static void QMC5883L_Configure(GY87_HandleTypeDef_t * hgy87) {
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af02      	add	r7, sp, #8
 800306a:	6078      	str	r0, [r7, #4]

    /* Configure QMC5883L magnetometer */
    uint8_t regData;

    /* Reset QMC5883L magnetometer */
    regData = 0b00000001;
 800306c:	2301      	movs	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_RESET, &regData, QMC5883L_SET_BIT);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6858      	ldr	r0, [r3, #4]
 8003074:	f107 030f 	add.w	r3, r7, #15
 8003078:	2201      	movs	r2, #1
 800307a:	9200      	str	r2, [sp, #0]
 800307c:	220b      	movs	r2, #11
 800307e:	211a      	movs	r1, #26
 8003080:	f000 f844 	bl	800310c <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 1 */
    regData = 0b00011101;
 8003084:	231d      	movs	r3, #29
 8003086:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG1, &regData, QMC5883L_SET_BIT);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6858      	ldr	r0, [r3, #4]
 800308c:	f107 030f 	add.w	r3, r7, #15
 8003090:	2201      	movs	r2, #1
 8003092:	9200      	str	r2, [sp, #0]
 8003094:	2209      	movs	r2, #9
 8003096:	211a      	movs	r1, #26
 8003098:	f000 f838 	bl	800310c <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 2 */
    regData = 0b00000000;
 800309c:	2300      	movs	r3, #0
 800309e:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG2, &regData, QMC5883L_SET_BIT);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6858      	ldr	r0, [r3, #4]
 80030a4:	f107 030f 	add.w	r3, r7, #15
 80030a8:	2201      	movs	r2, #1
 80030aa:	9200      	str	r2, [sp, #0]
 80030ac:	220a      	movs	r2, #10
 80030ae:	211a      	movs	r1, #26
 80030b0:	f000 f82c 	bl	800310c <MPU6050_WriteRegisterBitmasked>
}
 80030b4:	bf00      	nop
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <MPU6050_ReadRegister>:

static void MPU6050_ReadRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	607b      	str	r3, [r7, #4]
 80030c6:	460b      	mov	r3, r1
 80030c8:	72fb      	strb	r3, [r7, #11]
 80030ca:	4613      	mov	r3, r2
 80030cc:	72bb      	strb	r3, [r7, #10]

    /* Read register */
    I2C_Read(hi2c, address, reg, data, dataSize);
 80030ce:	7aba      	ldrb	r2, [r7, #10]
 80030d0:	7af9      	ldrb	r1, [r7, #11]
 80030d2:	7e3b      	ldrb	r3, [r7, #24]
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f7ff fdb8 	bl	8002c4e <I2C_Read>
}
 80030de:	bf00      	nop
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <MPU6050_WriteRegister>:

static void MPU6050_WriteRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	607b      	str	r3, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	72fb      	strb	r3, [r7, #11]
 80030f4:	4613      	mov	r3, r2
 80030f6:	72bb      	strb	r3, [r7, #10]

    /* Write register - ¡Destructive operation! */
    I2C_Write(hi2c, address, reg, data);
 80030f8:	7aba      	ldrb	r2, [r7, #10]
 80030fa:	7af9      	ldrb	r1, [r7, #11]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f7ff fdd1 	bl	8002ca6 <I2C_Write>
}
 8003104:	bf00      	nop
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <MPU6050_WriteRegisterBitmasked>:

static void MPU6050_WriteRegisterBitmasked(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t set) {
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	460b      	mov	r3, r1
 8003118:	72fb      	strb	r3, [r7, #11]
 800311a:	4613      	mov	r3, r2
 800311c:	72bb      	strb	r3, [r7, #10]
    uint8_t originalData;

    /* Declare variable for new data to write into register */
    uint8_t newData;

    MPU6050_ReadRegister(hi2c, address, reg, &originalData, sizeof(originalData));
 800311e:	f107 0317 	add.w	r3, r7, #23
 8003122:	7aba      	ldrb	r2, [r7, #10]
 8003124:	7af9      	ldrb	r1, [r7, #11]
 8003126:	2001      	movs	r0, #1
 8003128:	9000      	str	r0, [sp, #0]
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7ff ffc6 	bl	80030bc <MPU6050_ReadRegister>

    /* Apply mask to data to write */
    if (set) {
 8003130:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d006      	beq.n	8003146 <MPU6050_WriteRegisterBitmasked+0x3a>

        newData = originalData | *data;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	781a      	ldrb	r2, [r3, #0]
 800313c:	7dfb      	ldrb	r3, [r7, #23]
 800313e:	4313      	orrs	r3, r2
 8003140:	b2db      	uxtb	r3, r3
 8003142:	75bb      	strb	r3, [r7, #22]
 8003144:	e00a      	b.n	800315c <MPU6050_WriteRegisterBitmasked+0x50>
    } else {

        newData = originalData & (~*data);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	b25b      	sxtb	r3, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	b25a      	sxtb	r2, r3
 8003150:	7dfb      	ldrb	r3, [r7, #23]
 8003152:	b25b      	sxtb	r3, r3
 8003154:	4013      	ands	r3, r2
 8003156:	b25b      	sxtb	r3, r3
 8003158:	b2db      	uxtb	r3, r3
 800315a:	75bb      	strb	r3, [r7, #22]
    }

    MPU6050_WriteRegister(hi2c, address, reg, &newData);
 800315c:	f107 0316 	add.w	r3, r7, #22
 8003160:	7aba      	ldrb	r2, [r7, #10]
 8003162:	7af9      	ldrb	r1, [r7, #11]
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f7ff ffbe 	bl	80030e6 <MPU6050_WriteRegister>
}
 800316a:	bf00      	nop
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <GY87_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
GY87_HandleTypeDef_t * GY87_Init(I2C_HandleTypeDef * hi2c) {
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hi2c) {
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <GY87_Init+0x12>
        return NULL;
 8003182:	2300      	movs	r3, #0
 8003184:	e034      	b.n	80031f0 <GY87_Init+0x7c>
    }

    /* Check if driver was already once or twice initialized */
    if (GY87_MAX_NUMBER_INSTANCES == instancesNumber) {
 8003186:	4b1c      	ldr	r3, [pc, #112]	@ (80031f8 <GY87_Init+0x84>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d101      	bne.n	8003192 <GY87_Init+0x1e>
        return NULL;
 800318e:	2300      	movs	r3, #0
 8003190:	e02e      	b.n	80031f0 <GY87_Init+0x7c>
    }

    /* Create an instance of the MPU6050_IMU device */
    GY87_HandleTypeDef_t * hgy87 = GY87_InstanceInit(hi2c);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff fdb2 	bl	8002cfc <GY87_InstanceInit>
 8003198:	60f8      	str	r0, [r7, #12]

    /* Check if instance was successfully created */
    if (NULL != hgy87) {
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d022      	beq.n	80031e6 <GY87_Init+0x72>
        /* Instance was successfully created */

        /* Initialize I2C communication */
        if (I2C_Init(hgy87)) {
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f7ff fd36 	bl	8002c12 <I2C_Init>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00e      	beq.n	80031ca <GY87_Init+0x56>

            /* Initialization was successful */
#ifdef GY87_USE_LOGGING
            LOG((uint8_t *)"MPU6050 IMU detected.\r\n\n", LOG_INFORMATION);
 80031ac:	2100      	movs	r1, #0
 80031ae:	4813      	ldr	r0, [pc, #76]	@ (80031fc <GY87_Init+0x88>)
 80031b0:	f000 f83c 	bl	800322c <LOG>
#endif

            /* Configure device */
            GY87_Configure(hgy87);
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f7ff fef5 	bl	8002fa4 <GY87_Configure>

            instancesNumber++;
 80031ba:	4b0f      	ldr	r3, [pc, #60]	@ (80031f8 <GY87_Init+0x84>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	3301      	adds	r3, #1
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	4b0d      	ldr	r3, [pc, #52]	@ (80031f8 <GY87_Init+0x84>)
 80031c4:	701a      	strb	r2, [r3, #0]

            return hgy87;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	e012      	b.n	80031f0 <GY87_Init+0x7c>
        } else {

            /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
            /* Free up dynamic allocated memory */
            vPortFree(hgy87->buffer);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f00b fa46 	bl	800e660 <vPortFree>
            vPortFree(hgy87);
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f00b fa43 	bl	800e660 <vPortFree>
            free(hgy87->buffer);
            free(hgy87);
#endif

#ifdef GY87_USE_LOGGING
            LOG((uint8_t *)"GY87 IMU not detected.\r\n\n", LOG_ERROR);
 80031da:	2103      	movs	r1, #3
 80031dc:	4808      	ldr	r0, [pc, #32]	@ (8003200 <GY87_Init+0x8c>)
 80031de:	f000 f825 	bl	800322c <LOG>
#endif
            return NULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e004      	b.n	80031f0 <GY87_Init+0x7c>
        }
    } else {

        /* Instance couldn't be created */
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"GY87 IMU couldn't be initialized.\r\n\n", LOG_ERROR);
 80031e6:	2103      	movs	r1, #3
 80031e8:	4806      	ldr	r0, [pc, #24]	@ (8003204 <GY87_Init+0x90>)
 80031ea:	f000 f81f 	bl	800322c <LOG>
#endif
        return NULL;
 80031ee:	2300      	movs	r3, #0
    }
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	20000bf5 	.word	0x20000bf5
 80031fc:	08011bec 	.word	0x08011bec
 8003200:	08011c08 	.word	0x08011c08
 8003204:	08011c24 	.word	0x08011c24

08003208 <USB_Write>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void USB_Write(uint8_t * string) {
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]

    /* BEGIN MODIFY 1 */
    CDC_Transmit_FS(string, strlen((const char *)string));
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7fd f835 	bl	8000280 <strlen>
 8003216:	4603      	mov	r3, r0
 8003218:	b29b      	uxth	r3, r3
 800321a:	4619      	mov	r1, r3
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f00b faef 	bl	800e800 <CDC_Transmit_FS>
    /* END MODIFY 1 */
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <LOG>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t LOG(uint8_t * message, LOGGING_TYPE_t logType) {
 800322c:	b580      	push	{r7, lr}
 800322e:	b0c2      	sub	sp, #264	@ 0x108
 8003230:	af00      	add	r7, sp, #0
 8003232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003236:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800323a:	6018      	str	r0, [r3, #0]
 800323c:	460a      	mov	r2, r1
 800323e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003242:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8003246:	701a      	strb	r2, [r3, #0]

    /* Check parameters */
    if (NULL == message) {
 8003248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800324c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <LOG+0x2e>
        return false;
 8003256:	2300      	movs	r3, #0
 8003258:	e063      	b.n	8003322 <LOG+0xf6>
    }

    if (LOG_INFORMATION < 0 || logType > LOG_ERROR) {
 800325a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800325e:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b03      	cmp	r3, #3
 8003266:	d901      	bls.n	800326c <LOG+0x40>
        return false;
 8003268:	2300      	movs	r3, #0
 800326a:	e05a      	b.n	8003322 <LOG+0xf6>
    }

    /* Build log message */
    uint8_t logMessage[LOG_MESSAGE_MAX_LENGTH] = {0};
 800326c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003270:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	3304      	adds	r3, #4
 800327a:	22fc      	movs	r2, #252	@ 0xfc
 800327c:	2100      	movs	r1, #0
 800327e:	4618      	mov	r0, r3
 8003280:	f00c fd2b 	bl	800fcda <memset>

    if (LOG_INFORMATION == logType) {
 8003284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003288:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d108      	bne.n	80032a4 <LOG+0x78>

        strcat((char *)logMessage, (char *)informationTypeLabel);
 8003292:	4b26      	ldr	r3, [pc, #152]	@ (800332c <LOG+0x100>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	f107 0308 	add.w	r3, r7, #8
 800329a:	4611      	mov	r1, r2
 800329c:	4618      	mov	r0, r3
 800329e:	f00c fd24 	bl	800fcea <strcat>
 80032a2:	e02e      	b.n	8003302 <LOG+0xd6>
    } else if (LOG_DEBUGGING == logType) {
 80032a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032a8:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d108      	bne.n	80032c4 <LOG+0x98>

        strcat((char *)logMessage, (char *)debuggingTypeLabel);
 80032b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003330 <LOG+0x104>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	f107 0308 	add.w	r3, r7, #8
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f00c fd14 	bl	800fcea <strcat>
 80032c2:	e01e      	b.n	8003302 <LOG+0xd6>
    } else if (LOG_WARNING == logType) {
 80032c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032c8:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d108      	bne.n	80032e4 <LOG+0xb8>

        strcat((char *)logMessage, (char *)warningTypeLabel);
 80032d2:	4b18      	ldr	r3, [pc, #96]	@ (8003334 <LOG+0x108>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	f107 0308 	add.w	r3, r7, #8
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f00c fd04 	bl	800fcea <strcat>
 80032e2:	e00e      	b.n	8003302 <LOG+0xd6>
    } else if (LOG_ERROR == logType) {
 80032e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032e8:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d107      	bne.n	8003302 <LOG+0xd6>

        strcat((char *)logMessage, (char *)errorTypeLabel);
 80032f2:	4b11      	ldr	r3, [pc, #68]	@ (8003338 <LOG+0x10c>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	f107 0308 	add.w	r3, r7, #8
 80032fa:	4611      	mov	r1, r2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f00c fcf4 	bl	800fcea <strcat>
    }

    strcat((char *)logMessage, (char *)message);
 8003302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003306:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800330a:	f107 0208 	add.w	r2, r7, #8
 800330e:	6819      	ldr	r1, [r3, #0]
 8003310:	4610      	mov	r0, r2
 8003312:	f00c fcea 	bl	800fcea <strcat>

    /* Send message through USB port */
    USB_Write(logMessage);
 8003316:	f107 0308 	add.w	r3, r7, #8
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff ff74 	bl	8003208 <USB_Write>

    return true;
 8003320:	2301      	movs	r3, #1
}
 8003322:	4618      	mov	r0, r3
 8003324:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20000020 	.word	0x20000020
 8003330:	20000024 	.word	0x20000024
 8003334:	20000028 	.word	0x20000028
 8003338:	2000002c 	.word	0x2000002c

0800333c <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
    /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003340:	4b0e      	ldr	r3, [pc, #56]	@ (800337c <HAL_Init+0x40>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a0d      	ldr	r2, [pc, #52]	@ (800337c <HAL_Init+0x40>)
 8003346:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800334a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800334c:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <HAL_Init+0x40>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a0a      	ldr	r2, [pc, #40]	@ (800337c <HAL_Init+0x40>)
 8003352:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003356:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003358:	4b08      	ldr	r3, [pc, #32]	@ (800337c <HAL_Init+0x40>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a07      	ldr	r2, [pc, #28]	@ (800337c <HAL_Init+0x40>)
 800335e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

    /* Set Interrupt Group Priority */
    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003364:	2003      	movs	r0, #3
 8003366:	f000 fd13 	bl	8003d90 <HAL_NVIC_SetPriorityGrouping>

    /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
    HAL_InitTick(TICK_INT_PRIORITY);
 800336a:	200f      	movs	r0, #15
 800336c:	f000 f808 	bl	8003380 <HAL_InitTick>

    /* Init the low level hardware */
    HAL_MspInit();
 8003370:	f7fe fee2 	bl	8002138 <HAL_MspInit>

    /* Return function status */
    return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40023c00 	.word	0x40023c00

08003380 <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8003388:	4b12      	ldr	r3, [pc, #72]	@ (80033d4 <HAL_InitTick+0x54>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4b12      	ldr	r3, [pc, #72]	@ (80033d8 <HAL_InitTick+0x58>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	4619      	mov	r1, r3
 8003392:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003396:	fbb3 f3f1 	udiv	r3, r3, r1
 800339a:	fbb2 f3f3 	udiv	r3, r2, r3
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fd2f 	bl	8003e02 <HAL_SYSTICK_Config>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_InitTick+0x2e>
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e00e      	b.n	80033cc <HAL_InitTick+0x4c>
    }

    /* Configure the SysTick IRQ priority */
    if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b0f      	cmp	r3, #15
 80033b2:	d80a      	bhi.n	80033ca <HAL_InitTick+0x4a>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033b4:	2200      	movs	r2, #0
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	f04f 30ff 	mov.w	r0, #4294967295
 80033bc:	f000 fcf3 	bl	8003da6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033c0:	4a06      	ldr	r2, [pc, #24]	@ (80033dc <HAL_InitTick+0x5c>)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6013      	str	r3, [r2, #0]
    } else {
        return HAL_ERROR;
    }

    /* Return function status */
    return HAL_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	e000      	b.n	80033cc <HAL_InitTick+0x4c>
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	2000000c 	.word	0x2000000c
 80033d8:	20000034 	.word	0x20000034
 80033dc:	20000030 	.word	0x20000030

080033e0 <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
    uwTick += uwTickFreq;
 80033e4:	4b06      	ldr	r3, [pc, #24]	@ (8003400 <HAL_IncTick+0x20>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	4b06      	ldr	r3, [pc, #24]	@ (8003404 <HAL_IncTick+0x24>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4413      	add	r3, r2
 80033f0:	4a04      	ldr	r2, [pc, #16]	@ (8003404 <HAL_IncTick+0x24>)
 80033f2:	6013      	str	r3, [r2, #0]
}
 80033f4:	bf00      	nop
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20000034 	.word	0x20000034
 8003404:	20000bf8 	.word	0x20000bf8

08003408 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
    return uwTick;
 800340c:	4b03      	ldr	r3, [pc, #12]	@ (800341c <HAL_GetTick+0x14>)
 800340e:	681b      	ldr	r3, [r3, #0]
}
 8003410:	4618      	mov	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	20000bf8 	.word	0x20000bf8

08003420 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8003428:	f7ff ffee 	bl	8003408 <HAL_GetTick>
 800342c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	60fb      	str	r3, [r7, #12]

    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY) {
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003438:	d005      	beq.n	8003446 <HAL_Delay+0x26>
        wait += (uint32_t)(uwTickFreq);
 800343a:	4b0a      	ldr	r3, [pc, #40]	@ (8003464 <HAL_Delay+0x44>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4413      	add	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]
    }

    while ((HAL_GetTick() - tickstart) < wait) {
 8003446:	bf00      	nop
 8003448:	f7ff ffde 	bl	8003408 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	429a      	cmp	r2, r3
 8003456:	d8f7      	bhi.n	8003448 <HAL_Delay+0x28>
    }
}
 8003458:	bf00      	nop
 800345a:	bf00      	nop
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000034 	.word	0x20000034

08003468 <HAL_ADC_Init>:
 *
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef * hadc) {
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	73fb      	strb	r3, [r7, #15]

    /* Check ADC handle */
    if (hadc == NULL) {
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_ADC_Init+0x16>
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e033      	b.n	80034e6 <HAL_ADC_Init+0x7e>

    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
        assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
    }

    if (hadc->State == HAL_ADC_STATE_RESET) {
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <HAL_ADC_Init+0x32>

        /* Init the low level hardware */
        hadc->MspInitCallback(hadc);
#else
        /* Init the low level hardware */
        HAL_ADC_MspInit(hadc);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fe fe82 	bl	8002190 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

        /* Initialize ADC error code */
        ADC_CLEAR_ERRORCODE(hadc);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Allocate lock resource and initialize it */
        hadc->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    /* Configuration of ADC parameters if previous preliminary actions are      */
    /* correctly completed.                                                     */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)) {
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	f003 0310 	and.w	r3, r3, #16
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d118      	bne.n	80034d8 <HAL_ADC_Init+0x70>
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80034ae:	f023 0302 	bic.w	r3, r3, #2
 80034b2:	f043 0202 	orr.w	r2, r3, #2
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set ADC parameters */
        ADC_Init(hadc);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fa86 	bl	80039cc <ADC_Init>

        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ca:	f023 0303 	bic.w	r3, r3, #3
 80034ce:	f043 0201 	orr.w	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80034d6:	e001      	b.n	80034dc <HAL_ADC_Init+0x74>
    } else {
        tmp_hal_status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	73fb      	strb	r3, [r7, #15]
    }

    /* Release Lock */
    __HAL_UNLOCK(hadc);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return function status */
    return tmp_hal_status;
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <HAL_ADC_Start>:
 * @brief  Enables ADC and starts conversion of the regular channels.
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef * hadc) {
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
    __IO uint32_t counter = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60bb      	str	r3, [r7, #8]
    /* Check the parameters */
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

    /* Process locked */
    __HAL_LOCK(hadc);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_ADC_Start+0x1a>
 8003506:	2302      	movs	r3, #2
 8003508:	e097      	b.n	800363a <HAL_ADC_Start+0x14a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the ADC peripheral */
    /* Check if ADC peripheral is disabled in order to enable it and wait during
    Tstab time the ADC's stabilization */
    if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b01      	cmp	r3, #1
 800351e:	d018      	beq.n	8003552 <HAL_ADC_Start+0x62>
        /* Enable the Peripheral */
        __HAL_ADC_ENABLE(hadc);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	609a      	str	r2, [r3, #8]

        /* Delay for ADC stabilization time */
        /* Compute number of CPU cycles to wait for */
        counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003530:	4b45      	ldr	r3, [pc, #276]	@ (8003648 <HAL_ADC_Start+0x158>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a45      	ldr	r2, [pc, #276]	@ (800364c <HAL_ADC_Start+0x15c>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	0c9a      	lsrs	r2, r3, #18
 800353c:	4613      	mov	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	60bb      	str	r3, [r7, #8]
        while (counter != 0U) {
 8003544:	e002      	b.n	800354c <HAL_ADC_Start+0x5c>
            counter--;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	3b01      	subs	r3, #1
 800354a:	60bb      	str	r3, [r7, #8]
        while (counter != 0U) {
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f9      	bne.n	8003546 <HAL_ADC_Start+0x56>
        }
    }

    /* Start conversion if ADC is effectively enabled */
    if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	d15f      	bne.n	8003620 <HAL_ADC_Start+0x130>
        /* Set ADC state                                                          */
        /* - Clear state bitfield related to regular group conversion results     */
        /* - Set state bitfield related to regular group operation                */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR, HAL_ADC_STATE_REG_BUSY);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003564:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003568:	f023 0301 	bic.w	r3, r3, #1
 800356c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	641a      	str	r2, [r3, #64]	@ 0x40

        /* If conversions on group regular are also triggering group injected,    */
        /* update ADC state.                                                      */
        if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800357e:	2b00      	cmp	r3, #0
 8003580:	d007      	beq.n	8003592 <HAL_ADC_Start+0xa2>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800358a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	641a      	str	r2, [r3, #64]	@ 0x40
        }

        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003596:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800359a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800359e:	d106      	bne.n	80035ae <HAL_ADC_Start+0xbe>
            /* Reset ADC error code fields related to conversions on group regular */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a4:	f023 0206 	bic.w	r2, r3, #6
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	645a      	str	r2, [r3, #68]	@ 0x44
 80035ac:	e002      	b.n	80035b4 <HAL_ADC_Start+0xc4>
        } else {
            /* Reset ADC all error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential           */
        /* interruption, to let the process to ADC IRQ Handler.                   */
        __HAL_UNLOCK(hadc);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Pointer to the common control register to which is belonging hadc    */
        /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
        /* control register)                                                    */
        tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035bc:	4b24      	ldr	r3, [pc, #144]	@ (8003650 <HAL_ADC_Start+0x160>)
 80035be:	60fb      	str	r3, [r7, #12]

        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC operations) */
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80035c8:	601a      	str	r2, [r3, #0]

        /* Check if Multimode enabled */
        if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI)) {
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f003 031f 	and.w	r3, r3, #31
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10f      	bne.n	80035f6 <HAL_ADC_Start+0x106>
#if defined(ADC2) && defined(ADC3)
            if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4))) {
#endif /* ADC2 || ADC3 */
                /* if no external trigger present enable software conversion of regular channels */
                if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d129      	bne.n	8003638 <HAL_ADC_Start+0x148>
                    /* Enable the selected ADC software conversion for regular group */
                    hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80035f2:	609a      	str	r2, [r3, #8]
 80035f4:	e020      	b.n	8003638 <HAL_ADC_Start+0x148>
#if defined(ADC2) && defined(ADC3)
            }
#endif /* ADC2 || ADC3 */
        } else {
            /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
            if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)) {
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a16      	ldr	r2, [pc, #88]	@ (8003654 <HAL_ADC_Start+0x164>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d11b      	bne.n	8003638 <HAL_ADC_Start+0x148>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d114      	bne.n	8003638 <HAL_ADC_Start+0x148>
                /* Enable the selected ADC software conversion for regular group */
                hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800361c:	609a      	str	r2, [r3, #8]
 800361e:	e00b      	b.n	8003638 <HAL_ADC_Start+0x148>
            }
        }
    } else {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003624:	f043 0210 	orr.w	r2, r3, #16
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003630:	f043 0201 	orr.w	r2, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Return function status */
    return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	2000000c 	.word	0x2000000c
 800364c:	431bde83 	.word	0x431bde83
 8003650:	40012300 	.word	0x40012300
 8003654:	40012000 	.word	0x40012000

08003658 <HAL_ADC_PollForConversion>:
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @param  Timeout Timeout value in millisecond.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef * hadc, uint32_t Timeout) {
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
    uint32_t tickstart = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and polling for end of each conversion.     */
    if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) && HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)) {
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003674:	d113      	bne.n	800369e <HAL_ADC_PollForConversion+0x46>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003680:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003684:	d10b      	bne.n	800369e <HAL_ADC_PollForConversion+0x46>
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368a:	f043 0220 	orr.w	r2, r3, #32
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e063      	b.n	8003766 <HAL_ADC_PollForConversion+0x10e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800369e:	f7ff feb3 	bl	8003408 <HAL_GetTick>
 80036a2:	60f8      	str	r0, [r7, #12]

    /* Check End of conversion flag */
    while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))) {
 80036a4:	e021      	b.n	80036ea <HAL_ADC_PollForConversion+0x92>
        /* Check if timeout is disabled (set to infinite wait) */
        if (Timeout != HAL_MAX_DELAY) {
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ac:	d01d      	beq.n	80036ea <HAL_ADC_PollForConversion+0x92>
            if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout)) {
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d007      	beq.n	80036c4 <HAL_ADC_PollForConversion+0x6c>
 80036b4:	f7ff fea8 	bl	8003408 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d212      	bcs.n	80036ea <HAL_ADC_PollForConversion+0x92>
                /* New check to avoid false timeout detection in case of preemption */
                if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))) {
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d00b      	beq.n	80036ea <HAL_ADC_PollForConversion+0x92>
                    /* Update ADC state machine to timeout */
                    SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	f043 0204 	orr.w	r2, r3, #4
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	641a      	str	r2, [r3, #64]	@ 0x40

                    /* Process unlocked */
                    __HAL_UNLOCK(hadc);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

                    return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e03d      	b.n	8003766 <HAL_ADC_PollForConversion+0x10e>
    while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))) {
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d1d6      	bne.n	80036a6 <HAL_ADC_PollForConversion+0x4e>
            }
        }
    }

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0212 	mvn.w	r2, #18
 8003700:	601a      	str	r2, [r3, #0]

    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.          */
    /* Note: On STM32F4, there is no independent flag of end of sequence.       */
    /*       The test of scan sequence on going is done either with scan        */
    /*       sequence disabled or with end of conversion flag set to            */
    /*       of end of sequence.                                                */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc) && (hadc->Init.ContinuousConvMode == DISABLE) && (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS))) {
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d123      	bne.n	8003764 <HAL_ADC_PollForConversion+0x10c>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	7e1b      	ldrb	r3, [r3, #24]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d11f      	bne.n	8003764 <HAL_ADC_PollForConversion+0x10c>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d006      	beq.n	8003740 <HAL_ADC_PollForConversion+0xe8>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800373c:	2b00      	cmp	r3, #0
 800373e:	d111      	bne.n	8003764 <HAL_ADC_PollForConversion+0x10c>
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	641a      	str	r2, [r3, #64]	@ 0x40

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d105      	bne.n	8003764 <HAL_ADC_PollForConversion+0x10c>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	f043 0201 	orr.w	r2, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	@ 0x40
        }
    }

    /* Return ADC state */
    return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_ADC_GetValue>:
 * @brief  Gets the converted value from data register of regular channel.
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval Converted value
 */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef * hadc) {
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
    /* Return the selected ADC converted value */
    return hadc->Instance->DR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_ADC_ConfigChannel>:
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @param  sConfig ADC configuration structure.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef * hadc, ADC_ChannelConfTypeDef * sConfig) {
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
    __IO uint32_t counter = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

    /* Process locked */
    __HAL_LOCK(hadc);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x1c>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e105      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x228>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
    if (sConfig->Channel > ADC_CHANNEL_9) {
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b09      	cmp	r3, #9
 80037b2:	d925      	bls.n	8003800 <HAL_ADC_ConfigChannel+0x78>
        /* Clear the old sample time */
        hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68d9      	ldr	r1, [r3, #12]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	461a      	mov	r2, r3
 80037c2:	4613      	mov	r3, r2
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	4413      	add	r3, r2
 80037c8:	3b1e      	subs	r3, #30
 80037ca:	2207      	movs	r2, #7
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43da      	mvns	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	400a      	ands	r2, r1
 80037d8:	60da      	str	r2, [r3, #12]

        /* Set the new sample time */
        hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68d9      	ldr	r1, [r3, #12]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	4618      	mov	r0, r3
 80037ec:	4603      	mov	r3, r0
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	4403      	add	r3, r0
 80037f2:	3b1e      	subs	r3, #30
 80037f4:	409a      	lsls	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	60da      	str	r2, [r3, #12]
 80037fe:	e022      	b.n	8003846 <HAL_ADC_ConfigChannel+0xbe>
    } else /* ADC_Channel include in ADC_Channel_[0..9] */
    {
        /* Clear the old sample time */
        hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6919      	ldr	r1, [r3, #16]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	b29b      	uxth	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	4613      	mov	r3, r2
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	4413      	add	r3, r2
 8003814:	2207      	movs	r2, #7
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43da      	mvns	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	400a      	ands	r2, r1
 8003822:	611a      	str	r2, [r3, #16]

        /* Set the new sample time */
        hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6919      	ldr	r1, [r3, #16]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	b29b      	uxth	r3, r3
 8003834:	4618      	mov	r0, r3
 8003836:	4603      	mov	r3, r0
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	4403      	add	r3, r0
 800383c:	409a      	lsls	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	611a      	str	r2, [r3, #16]
    }

    /* For Rank 1 to 6 */
    if (sConfig->Rank < 7U) {
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b06      	cmp	r3, #6
 800384c:	d824      	bhi.n	8003898 <HAL_ADC_ConfigChannel+0x110>
        /* Clear the old SQx bits for the selected rank */
        hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	3b05      	subs	r3, #5
 8003860:	221f      	movs	r2, #31
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	43da      	mvns	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	400a      	ands	r2, r1
 800386e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the SQx bits for the selected rank */
        hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	b29b      	uxth	r3, r3
 800387c:	4618      	mov	r0, r3
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	3b05      	subs	r3, #5
 800388a:	fa00 f203 	lsl.w	r2, r0, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	635a      	str	r2, [r3, #52]	@ 0x34
 8003896:	e04c      	b.n	8003932 <HAL_ADC_ConfigChannel+0x1aa>
    }
    /* For Rank 7 to 12 */
    else if (sConfig->Rank < 13U) {
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b0c      	cmp	r3, #12
 800389e:	d824      	bhi.n	80038ea <HAL_ADC_ConfigChannel+0x162>
        /* Clear the old SQx bits for the selected rank */
        hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	3b23      	subs	r3, #35	@ 0x23
 80038b2:	221f      	movs	r2, #31
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43da      	mvns	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	400a      	ands	r2, r1
 80038c0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the SQx bits for the selected rank */
        hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	4618      	mov	r0, r3
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	3b23      	subs	r3, #35	@ 0x23
 80038dc:	fa00 f203 	lsl.w	r2, r0, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80038e8:	e023      	b.n	8003932 <HAL_ADC_ConfigChannel+0x1aa>
    }
    /* For Rank 13 to 16 */
    else {
        /* Clear the old SQx bits for the selected rank */
        hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	3b41      	subs	r3, #65	@ 0x41
 80038fc:	221f      	movs	r2, #31
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43da      	mvns	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	400a      	ands	r2, r1
 800390a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the SQx bits for the selected rank */
        hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	b29b      	uxth	r3, r3
 8003918:	4618      	mov	r0, r3
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	3b41      	subs	r3, #65	@ 0x41
 8003926:	fa00 f203 	lsl.w	r2, r0, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003932:	4b22      	ldr	r3, [pc, #136]	@ (80039bc <HAL_ADC_ConfigChannel+0x234>)
 8003934:	60fb      	str	r3, [r7, #12]

    /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
    if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT)) {
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a21      	ldr	r2, [pc, #132]	@ (80039c0 <HAL_ADC_ConfigChannel+0x238>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d109      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x1cc>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b12      	cmp	r3, #18
 8003946:	d105      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x1cc>
        /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
        if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT) {
            tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
        }
        /* Enable the VBAT channel*/
        tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	605a      	str	r2, [r3, #4]
    }

    /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
       Channel_17 is selected for VREFINT enable TSVREFE */
    if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT))) {
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a19      	ldr	r2, [pc, #100]	@ (80039c0 <HAL_ADC_ConfigChannel+0x238>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d123      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x21e>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b10      	cmp	r3, #16
 8003964:	d003      	beq.n	800396e <HAL_ADC_ConfigChannel+0x1e6>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b11      	cmp	r3, #17
 800396c:	d11b      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x21e>
        /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
        if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT) {
            tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
        }
        /* Enable the Temperature sensor and VREFINT channel*/
        tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	605a      	str	r2, [r3, #4]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) {
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b10      	cmp	r3, #16
 8003980:	d111      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x21e>
            /* Delay for temperature sensor stabilization time */
            /* Compute number of CPU cycles to wait for */
            counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003982:	4b10      	ldr	r3, [pc, #64]	@ (80039c4 <HAL_ADC_ConfigChannel+0x23c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a10      	ldr	r2, [pc, #64]	@ (80039c8 <HAL_ADC_ConfigChannel+0x240>)
 8003988:	fba2 2303 	umull	r2, r3, r2, r3
 800398c:	0c9a      	lsrs	r2, r3, #18
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	60bb      	str	r3, [r7, #8]
            while (counter != 0U) {
 8003998:	e002      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x218>
                counter--;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	3b01      	subs	r3, #1
 800399e:	60bb      	str	r3, [r7, #8]
            while (counter != 0U) {
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f9      	bne.n	800399a <HAL_ADC_ConfigChannel+0x212>
            }
        }
    }

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return function status */
    return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	40012300 	.word	0x40012300
 80039c0:	40012000 	.word	0x40012000
 80039c4:	2000000c 	.word	0x2000000c
 80039c8:	431bde83 	.word	0x431bde83

080039cc <ADC_Init>:
 *         in the ADC_InitStruct without initializing the ADC MSP.
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval None
 */
static void ADC_Init(ADC_HandleTypeDef * hadc) {
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]

    /* Set ADC parameters */
    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039d4:	4b79      	ldr	r3, [pc, #484]	@ (8003bbc <ADC_Init+0x1f0>)
 80039d6:	60fb      	str	r3, [r7, #12]

    /* Set the ADC clock prescaler */
    tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= hadc->Init.ClockPrescaler;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	605a      	str	r2, [r3, #4]

    /* Set ADC scan mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a00:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |= ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6859      	ldr	r1, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	021a      	lsls	r2, r3, #8
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]

    /* Set ADC resolution */
    hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003a24:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |= hadc->Init.Resolution;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6859      	ldr	r1, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	605a      	str	r2, [r3, #4]

    /* Set ADC data alignment */
    hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6899      	ldr	r1, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	609a      	str	r2, [r3, #8]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5e:	4a58      	ldr	r2, [pc, #352]	@ (8003bc0 <ADC_Init+0x1f4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d022      	beq.n	8003aaa <ADC_Init+0xde>
        /* Select external trigger to start conversion */
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a72:	609a      	str	r2, [r3, #8]
        hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6899      	ldr	r1, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	609a      	str	r2, [r3, #8]

        /* Select external trigger polarity */
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003a94:	609a      	str	r2, [r3, #8]
        hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6899      	ldr	r1, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	e00f      	b.n	8003aca <ADC_Init+0xfe>
    } else {
        /* Reset the external trigger */
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ab8:	609a      	str	r2, [r3, #8]
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ac8:	609a      	str	r2, [r3, #8]
    }

    /* Enable or disable ADC continuous conversion mode */
    hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0202 	bic.w	r2, r2, #2
 8003ad8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6899      	ldr	r1, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	7e1b      	ldrb	r3, [r3, #24]
 8003ae4:	005a      	lsls	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	609a      	str	r2, [r3, #8]

    if (hadc->Init.DiscontinuousConvMode != DISABLE) {
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d01b      	beq.n	8003b30 <ADC_Init+0x164>
        assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

        /* Enable the selected ADC regular discontinuous mode */
        hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b06:	605a      	str	r2, [r3, #4]

        /* Set the number of channels to be converted in discontinuous mode */
        hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003b16:	605a      	str	r2, [r3, #4]
        hadc->Instance->CR1 |= ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6859      	ldr	r1, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b22:	3b01      	subs	r3, #1
 8003b24:	035a      	lsls	r2, r3, #13
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
 8003b2e:	e007      	b.n	8003b40 <ADC_Init+0x174>
    } else {
        /* Disable the selected ADC regular discontinuous mode */
        hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b3e:	605a      	str	r2, [r3, #4]
    }

    /* Set ADC number of conversion */
    hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	051a      	lsls	r2, r3, #20
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable or disable ADC DMA continuous request */
    hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003b74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6899      	ldr	r1, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003b82:	025a      	lsls	r2, r3, #9
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	609a      	str	r2, [r3, #8]

    /* Enable or disable ADC end of conversion selection */
    hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6899      	ldr	r1, [r3, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	029a      	lsls	r2, r3, #10
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	609a      	str	r2, [r3, #8]
}
 8003bb0:	bf00      	nop
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	40012300 	.word	0x40012300
 8003bc0:	0f000001 	.word	0x0f000001

08003bc4 <__NVIC_SetPriorityGrouping>:
           Only values from 0..7 are used.
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
    uint32_t reg_value;
    uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL); /* only values 0..7 are used          */
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	60fb      	str	r3, [r7, #12]

    reg_value = SCB->AIRCR;                                                                                                /* read old register configuration    */
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c08 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	60bb      	str	r3, [r7, #8]
    reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));                                            /* clear bits to change               */
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003be0:	4013      	ands	r3, r2
 8003be2:	60bb      	str	r3, [r7, #8]
    reg_value = (reg_value | ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) | (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	021a      	lsls	r2, r3, #8
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bf4:	60bb      	str	r3, [r7, #8]
    SCB->AIRCR = reg_value;
 8003bf6:	4a04      	ldr	r2, [pc, #16]	@ (8003c08 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	60d3      	str	r3, [r2, #12]
}
 8003bfc:	bf00      	nop
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	e000ed00 	.word	0xe000ed00

08003c0c <__NVIC_GetPriorityGrouping>:
/**
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void) {
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
    return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c10:	4b04      	ldr	r3, [pc, #16]	@ (8003c24 <__NVIC_GetPriorityGrouping+0x18>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	0a1b      	lsrs	r3, r3, #8
 8003c16:	f003 0307 	and.w	r3, r3, #7
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <__NVIC_EnableIRQ>:
  \brief   Enable Interrupt
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn) {
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71fb      	strb	r3, [r7, #7]
    if ((int32_t)(IRQn) >= 0) {
 8003c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	db0b      	blt.n	8003c52 <__NVIC_EnableIRQ+0x2a>
        NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	f003 021f 	and.w	r2, r3, #31
 8003c40:	4907      	ldr	r1, [pc, #28]	@ (8003c60 <__NVIC_EnableIRQ+0x38>)
 8003c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	2001      	movs	r0, #1
 8003c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	e000e100 	.word	0xe000e100

08003c64 <__NVIC_SetPriority>:
           or negative to specify a processor exception.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	6039      	str	r1, [r7, #0]
 8003c6e:	71fb      	strb	r3, [r7, #7]
    if ((int32_t)(IRQn) >= 0) {
 8003c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	db0a      	blt.n	8003c8e <__NVIC_SetPriority+0x2a>
        NVIC->IP[((uint32_t)IRQn)] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	490c      	ldr	r1, [pc, #48]	@ (8003cb0 <__NVIC_SetPriority+0x4c>)
 8003c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c82:	0112      	lsls	r2, r2, #4
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	440b      	add	r3, r1
 8003c88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
    } else {
        SCB->SHP[(((uint32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    }
}
 8003c8c:	e00a      	b.n	8003ca4 <__NVIC_SetPriority+0x40>
        SCB->SHP[(((uint32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	4908      	ldr	r1, [pc, #32]	@ (8003cb4 <__NVIC_SetPriority+0x50>)
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	3b04      	subs	r3, #4
 8003c9c:	0112      	lsls	r2, r2, #4
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	761a      	strb	r2, [r3, #24]
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	e000e100 	.word	0xe000e100
 8003cb4:	e000ed00 	.word	0xe000ed00

08003cb8 <NVIC_EncodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority(uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority) {
 8003cb8:	b480      	push	{r7}
 8003cba:	b089      	sub	sp, #36	@ 0x24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
    uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL); /* only values 0..7 are used          */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	61fb      	str	r3, [r7, #28]
    uint32_t PreemptPriorityBits;
    uint32_t SubPriorityBits;

    PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f1c3 0307 	rsb	r3, r3, #7
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	bf28      	it	cs
 8003cd6:	2304      	movcs	r3, #4
 8003cd8:	61bb      	str	r3, [r7, #24]
    SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	2b06      	cmp	r3, #6
 8003ce0:	d902      	bls.n	8003ce8 <NVIC_EncodePriority+0x30>
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	3b03      	subs	r3, #3
 8003ce6:	e000      	b.n	8003cea <NVIC_EncodePriority+0x32>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]

    return (((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) | ((SubPriority & (uint32_t)((1UL << (SubPriorityBits)) - 1UL))));
 8003cec:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43da      	mvns	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	409a      	lsls	r2, r3
 8003d00:	f04f 31ff 	mov.w	r1, #4294967295
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0a:	43d9      	mvns	r1, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	400b      	ands	r3, r1
 8003d10:	4313      	orrs	r3, r2
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3724      	adds	r7, #36	@ 0x24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <__NVIC_SystemReset>:

/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void) {
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  \brief   Data Synchronization Barrier
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void) {
    __ASM volatile("dsb 0xF" ::: "memory");
 8003d24:	f3bf 8f4f 	dsb	sy
}
 8003d28:	bf00      	nop
    __DSB();                                                                                                                         /* Ensure all outstanding memory accesses included
                                                                                                                                        buffered write are completed before reset */
    SCB->AIRCR = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) | (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) | SCB_AIRCR_SYSRESETREQ_Msk); /* Keep priority group unchanged */
 8003d2a:	4b06      	ldr	r3, [pc, #24]	@ (8003d44 <__NVIC_SystemReset+0x24>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003d32:	4904      	ldr	r1, [pc, #16]	@ (8003d44 <__NVIC_SystemReset+0x24>)
 8003d34:	4b04      	ldr	r3, [pc, #16]	@ (8003d48 <__NVIC_SystemReset+0x28>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60cb      	str	r3, [r1, #12]
    __ASM volatile("dsb 0xF" ::: "memory");
 8003d3a:	f3bf 8f4f 	dsb	sy
}
 8003d3e:	bf00      	nop
    __DSB();                                                                                                                         /* Ensure completion of memory access */

    for (;;) /* wait until reset */
    {
        __NOP();
 8003d40:	bf00      	nop
 8003d42:	e7fd      	b.n	8003d40 <__NVIC_SystemReset+0x20>
 8003d44:	e000ed00 	.word	0xe000ed00
 8003d48:	05fa0004 	.word	0x05fa0004

08003d4c <SysTick_Config>:
  \return          1  Function failed.
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks) {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
    if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) {
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d5c:	d301      	bcc.n	8003d62 <SysTick_Config+0x16>
        return (1UL); /* Reload value impossible */
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e00f      	b.n	8003d82 <SysTick_Config+0x36>
    }

    SysTick->LOAD = (uint32_t)(ticks - 1UL);                                                         /* set reload register */
 8003d62:	4a0a      	ldr	r2, [pc, #40]	@ (8003d8c <SysTick_Config+0x40>)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	6053      	str	r3, [r2, #4]
    NVIC_SetPriority(SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL);                                 /* set Priority for Systick Interrupt */
 8003d6a:	210f      	movs	r1, #15
 8003d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d70:	f7ff ff78 	bl	8003c64 <__NVIC_SetPriority>
    SysTick->VAL = 0UL;                                                                              /* Load the SysTick Counter Value */
 8003d74:	4b05      	ldr	r3, [pc, #20]	@ (8003d8c <SysTick_Config+0x40>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk; /* Enable SysTick IRQ and SysTick Timer */
 8003d7a:	4b04      	ldr	r3, [pc, #16]	@ (8003d8c <SysTick_Config+0x40>)
 8003d7c:	2207      	movs	r2, #7
 8003d7e:	601a      	str	r2, [r3, #0]
    return (0UL);                                                                                    /* Function successful */
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	e000e010 	.word	0xe000e010

08003d90 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
 *         The pending IRQ priority will be managed only by the subpriority.
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
    /* Check the parameters */
    assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

    /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
    NVIC_SetPriorityGrouping(PriorityGroup);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff ff13 	bl	8003bc4 <__NVIC_SetPriorityGrouping>
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_NVIC_SetPriority>:
 * @param  SubPriority the subpriority level for the IRQ channel.
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority) {
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b086      	sub	sp, #24
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	4603      	mov	r3, r0
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
 8003db2:	73fb      	strb	r3, [r7, #15]
    uint32_t prioritygroup = 0x00U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
    assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

    prioritygroup = NVIC_GetPriorityGrouping();
 8003db8:	f7ff ff28 	bl	8003c0c <__NVIC_GetPriorityGrouping>
 8003dbc:	6178      	str	r0, [r7, #20]

    NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	6978      	ldr	r0, [r7, #20]
 8003dc4:	f7ff ff78 	bl	8003cb8 <NVIC_EncodePriority>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dce:	4611      	mov	r1, r2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff ff47 	bl	8003c64 <__NVIC_SetPriority>
}
 8003dd6:	bf00      	nop
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	4603      	mov	r3, r0
 8003de6:	71fb      	strb	r3, [r7, #7]
    /* Check the parameters */
    assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

    /* Enable interrupt */
    NVIC_EnableIRQ(IRQn);
 8003de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff ff1b 	bl	8003c28 <__NVIC_EnableIRQ>
}
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_NVIC_SystemReset>:

/**
 * @brief  Initiates a system reset request to reset the MCU.
 * @retval None
 */
void HAL_NVIC_SystemReset(void) {
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	af00      	add	r7, sp, #0
    /* System Reset */
    NVIC_SystemReset();
 8003dfe:	f7ff ff8f 	bl	8003d20 <__NVIC_SystemReset>

08003e02 <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
    return SysTick_Config(TicksNumb);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff ff9e 	bl	8003d4c <SysTick_Config>
 8003e10:	4603      	mov	r3, r0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <HAL_DMA_Init>:
 *         parameters in the DMA_InitTypeDef and create the associated handle.
 * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA Stream.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef * hdma) {
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
    uint32_t tmp = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]
    uint32_t tickstart = HAL_GetTick();
 8003e28:	f7ff faee 	bl	8003408 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]
    DMA_Base_Registers * regs;

    /* Check the DMA peripheral state */
    if (hdma == NULL) {
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_DMA_Init+0x1c>
        return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e099      	b.n	8003f6c <HAL_DMA_Init+0x150>
        assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
        assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0201 	bic.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET) {
 8003e58:	e00f      	b.n	8003e7a <HAL_DMA_Init+0x5e>
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT) {
 8003e5a:	f7ff fad5 	bl	8003408 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b05      	cmp	r3, #5
 8003e66:	d908      	bls.n	8003e7a <HAL_DMA_Init+0x5e>
            /* Update error code */
            hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2203      	movs	r2, #3
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e078      	b.n	8003f6c <HAL_DMA_Init+0x150>
    while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET) {
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e8      	bne.n	8003e5a <HAL_DMA_Init+0x3e>
        }
    }

    /* Get the CR register value */
    tmp = hdma->Instance->CR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    tmp &= ((uint32_t) ~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | DMA_SxCR_DIR | DMA_SxCR_CT | DMA_SxCR_DBM));
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4b38      	ldr	r3, [pc, #224]	@ (8003f74 <HAL_DMA_Init+0x158>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream configuration */
    tmp |= hdma->Init.Channel | hdma->Init.Direction | hdma->Init.PeriphInc | hdma->Init.MemInc | hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment | hdma->Init.Mode | hdma->Init.Priority;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d107      	bne.n	8003ee4 <HAL_DMA_Init+0xc8>
        /* Get memory burst and peripheral burst */
        tmp |= hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003edc:	4313      	orrs	r3, r2
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    hdma->Instance->CR = tmp;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    tmp = hdma->Instance->FCR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    tmp &= (uint32_t) ~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f023 0307 	bic.w	r3, r3, #7
 8003efa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    tmp |= hdma->Init.FIFOMode;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]

    /* The FIFO threshold is not used when the FIFO mode is disabled */
    if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d117      	bne.n	8003f3e <HAL_DMA_Init+0x122>
        /* Get the FIFO threshold */
        tmp |= hdma->Init.FIFOThreshold;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]

        /* Check compatibility between FIFO threshold level and size of the memory burst */
        /* for INCR4, INCR8, INCR16 bursts */
        if (hdma->Init.MemBurst != DMA_MBURST_SINGLE) {
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00e      	beq.n	8003f3e <HAL_DMA_Init+0x122>
            if (DMA_CheckFifoParam(hdma) != HAL_OK) {
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f8e5 	bl	80040f0 <DMA_CheckFifoParam>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_DMA_Init+0x122>
                /* Update error code */
                hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2240      	movs	r2, #64	@ 0x40
 8003f30:	655a      	str	r2, [r3, #84]	@ 0x54

                /* Change the DMA state */
                hdma->State = HAL_DMA_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

                return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e016      	b.n	8003f6c <HAL_DMA_Init+0x150>
            }
        }
    }

    /* Write to DMA Stream FCR */
    hdma->Instance->FCR = tmp;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f89c 	bl	8004084 <DMA_CalcBaseAndBitshift>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f54:	223f      	movs	r2, #63	@ 0x3f
 8003f56:	409a      	lsls	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Initialize the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	f010803f 	.word	0xf010803f

08003f78 <HAL_DMA_Start_IT>:
 * @param  SrcAddress The source memory Buffer address
 * @param  DstAddress The destination memory Buffer address
 * @param  DataLength The length of data to be transferred from source to destination
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef * hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength) {
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	603b      	str	r3, [r7, #0]
    HAL_StatusTypeDef status = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	75fb      	strb	r3, [r7, #23]

    /* calculate DMA base and stream number */
    DMA_Base_Registers * regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8e:	613b      	str	r3, [r7, #16]

    /* Check the parameters */
    assert_param(IS_DMA_BUFFER_SIZE(DataLength));

    /* Process locked */
    __HAL_LOCK(hdma);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_DMA_Start_IT+0x26>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e040      	b.n	8004020 <HAL_DMA_Start_IT+0xa8>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    if (HAL_DMA_STATE_READY == hdma->State) {
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d12f      	bne.n	8004012 <HAL_DMA_Start_IT+0x9a>
        /* Change DMA peripheral state */
        hdma->State = HAL_DMA_STATE_BUSY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Initialize the error code */
        hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Configure the source, destination address and the data length */
        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	68b9      	ldr	r1, [r7, #8]
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 f82e 	bl	8004028 <DMA_SetConfig>

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd0:	223f      	movs	r2, #63	@ 0x3f
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	609a      	str	r2, [r3, #8]

        /* Enable Common interrupts*/
        hdma->Instance->CR |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0216 	orr.w	r2, r2, #22
 8003fe6:	601a      	str	r2, [r3, #0]

        if (hdma->XferHalfCpltCallback != NULL) {
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d007      	beq.n	8004000 <HAL_DMA_Start_IT+0x88>
            hdma->Instance->CR |= DMA_IT_HT;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0208 	orr.w	r2, r2, #8
 8003ffe:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral */
        __HAL_DMA_ENABLE(hdma);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0201 	orr.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	e005      	b.n	800401e <HAL_DMA_Start_IT+0xa6>
    } else {
        /* Process unlocked */
        __HAL_UNLOCK(hdma);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Return error status */
        status = HAL_BUSY;
 800401a:	2302      	movs	r3, #2
 800401c:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 800401e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <DMA_SetConfig>:
 * @param  SrcAddress The source memory Buffer address
 * @param  DstAddress The destination memory Buffer address
 * @param  DataLength The length of data to be transferred from source to destination
 * @retval HAL status
 */
static void DMA_SetConfig(DMA_HandleTypeDef * hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength) {
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
    /* Clear DBM bit */
    hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004044:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    hdma->Instance->NDTR = DataLength;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	605a      	str	r2, [r3, #4]

    /* Memory to Peripheral */
    if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH) {
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b40      	cmp	r3, #64	@ 0x40
 8004054:	d108      	bne.n	8004068 <DMA_SetConfig+0x40>
        /* Configure DMA Stream destination address */
        hdma->Instance->PAR = DstAddress;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	609a      	str	r2, [r3, #8]

        /* Configure DMA Stream source address */
        hdma->Instance->M0AR = SrcAddress;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	60da      	str	r2, [r3, #12]
        hdma->Instance->PAR = SrcAddress;

        /* Configure DMA Stream destination address */
        hdma->Instance->M0AR = DstAddress;
    }
}
 8004066:	e007      	b.n	8004078 <DMA_SetConfig+0x50>
        hdma->Instance->PAR = SrcAddress;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	609a      	str	r2, [r3, #8]
        hdma->Instance->M0AR = DstAddress;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	60da      	str	r2, [r3, #12]
}
 8004078:	bf00      	nop
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <DMA_CalcBaseAndBitshift>:
 * @brief  Returns the DMA Stream base address depending on stream number
 * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
 *                     the configuration information for the specified DMA Stream.
 * @retval Stream base address
 */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef * hdma) {
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
    uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	3b10      	subs	r3, #16
 8004094:	4a14      	ldr	r2, [pc, #80]	@ (80040e8 <DMA_CalcBaseAndBitshift+0x64>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	091b      	lsrs	r3, r3, #4
 800409c:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800409e:	4a13      	ldr	r2, [pc, #76]	@ (80040ec <DMA_CalcBaseAndBitshift+0x68>)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4413      	add	r3, r2
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U) {
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d909      	bls.n	80040c6 <DMA_CalcBaseAndBitshift+0x42>
        /* return pointer to HISR and HIFCR */
        hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80040ba:	f023 0303 	bic.w	r3, r3, #3
 80040be:	1d1a      	adds	r2, r3, #4
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80040c4:	e007      	b.n	80040d6 <DMA_CalcBaseAndBitshift+0x52>
    } else {
        /* return pointer to LISR and LIFCR */
        hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80040ce:	f023 0303 	bic.w	r3, r3, #3
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }

    return hdma->StreamBaseAddress;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	aaaaaaab 	.word	0xaaaaaaab
 80040ec:	08011db8 	.word	0x08011db8

080040f0 <DMA_CheckFifoParam>:
 * @brief  Check compatibility between FIFO threshold level and size of the memory burst
 * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
 *                     the configuration information for the specified DMA Stream.
 * @retval HAL status
 */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef * hdma) {
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	73fb      	strb	r3, [r7, #15]
    uint32_t tmp = hdma->Init.FIFOThreshold;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004100:	60bb      	str	r3, [r7, #8]

    /* Memory Data size equal to Byte */
    if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE) {
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d11f      	bne.n	800414a <DMA_CheckFifoParam+0x5a>
        switch (tmp) {
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b03      	cmp	r3, #3
 800410e:	d856      	bhi.n	80041be <DMA_CheckFifoParam+0xce>
 8004110:	a201      	add	r2, pc, #4	@ (adr r2, 8004118 <DMA_CheckFifoParam+0x28>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	08004129 	.word	0x08004129
 800411c:	0800413b 	.word	0x0800413b
 8004120:	08004129 	.word	0x08004129
 8004124:	080041bf 	.word	0x080041bf
        case DMA_FIFO_THRESHOLD_1QUARTERFULL:
        case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
            if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d046      	beq.n	80041c2 <DMA_CheckFifoParam+0xd2>
                status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8004138:	e043      	b.n	80041c2 <DMA_CheckFifoParam+0xd2>
        case DMA_FIFO_THRESHOLD_HALFFULL:
            if (hdma->Init.MemBurst == DMA_MBURST_INC16) {
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004142:	d140      	bne.n	80041c6 <DMA_CheckFifoParam+0xd6>
                status = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8004148:	e03d      	b.n	80041c6 <DMA_CheckFifoParam+0xd6>
            break;
        }
    }

    /* Memory Data size equal to Half-Word */
    else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD) {
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004152:	d121      	bne.n	8004198 <DMA_CheckFifoParam+0xa8>
        switch (tmp) {
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b03      	cmp	r3, #3
 8004158:	d837      	bhi.n	80041ca <DMA_CheckFifoParam+0xda>
 800415a:	a201      	add	r2, pc, #4	@ (adr r2, 8004160 <DMA_CheckFifoParam+0x70>)
 800415c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004160:	08004171 	.word	0x08004171
 8004164:	08004177 	.word	0x08004177
 8004168:	08004171 	.word	0x08004171
 800416c:	08004189 	.word	0x08004189
        case DMA_FIFO_THRESHOLD_1QUARTERFULL:
        case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
            status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
            break;
 8004174:	e030      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
        case DMA_FIFO_THRESHOLD_HALFFULL:
            if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d025      	beq.n	80041ce <DMA_CheckFifoParam+0xde>
                status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8004186:	e022      	b.n	80041ce <DMA_CheckFifoParam+0xde>
        case DMA_FIFO_THRESHOLD_FULL:
            if (hdma->Init.MemBurst == DMA_MBURST_INC16) {
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004190:	d11f      	bne.n	80041d2 <DMA_CheckFifoParam+0xe2>
                status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8004196:	e01c      	b.n	80041d2 <DMA_CheckFifoParam+0xe2>
        }
    }

    /* Memory Data size equal to Word */
    else {
        switch (tmp) {
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d903      	bls.n	80041a6 <DMA_CheckFifoParam+0xb6>
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d003      	beq.n	80041ac <DMA_CheckFifoParam+0xbc>
            if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
                status = HAL_ERROR;
            }
            break;
        default:
            break;
 80041a4:	e018      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
            status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	73fb      	strb	r3, [r7, #15]
            break;
 80041aa:	e015      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
            if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00e      	beq.n	80041d6 <DMA_CheckFifoParam+0xe6>
                status = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	73fb      	strb	r3, [r7, #15]
            break;
 80041bc:	e00b      	b.n	80041d6 <DMA_CheckFifoParam+0xe6>
            break;
 80041be:	bf00      	nop
 80041c0:	e00a      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
            break;
 80041c2:	bf00      	nop
 80041c4:	e008      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
            break;
 80041c6:	bf00      	nop
 80041c8:	e006      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
            break;
 80041ca:	bf00      	nop
 80041cc:	e004      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
            break;
 80041ce:	bf00      	nop
 80041d0:	e002      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
            break;
 80041d2:	bf00      	nop
 80041d4:	e000      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
            break;
 80041d6:	bf00      	nop
        }
    }

    return status;
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop

080041e8 <HAL_GPIO_Init>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef * GPIOx, GPIO_InitTypeDef * GPIO_Init) {
 80041e8:	b480      	push	{r7}
 80041ea:	b089      	sub	sp, #36	@ 0x24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
    uint32_t position;
    uint32_t ioposition = 0x00U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
    uint32_t iocurrent = 0x00U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	613b      	str	r3, [r7, #16]
    uint32_t temp = 0x00U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61bb      	str	r3, [r7, #24]
    assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
    assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
    assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

    /* Configure the port pins */
    for (position = 0U; position < GPIO_NUMBER; position++) {
 80041fe:	2300      	movs	r3, #0
 8004200:	61fb      	str	r3, [r7, #28]
 8004202:	e159      	b.n	80044b8 <HAL_GPIO_Init+0x2d0>
        /* Get the IO position */
        ioposition = 0x01U << position;
 8004204:	2201      	movs	r2, #1
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	617b      	str	r3, [r7, #20]
        /* Get the current IO position */
        iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4013      	ands	r3, r2
 8004216:	613b      	str	r3, [r7, #16]

        if (iocurrent == ioposition) {
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	429a      	cmp	r2, r3
 800421e:	f040 8148 	bne.w	80044b2 <HAL_GPIO_Init+0x2ca>
            /*--------------------- GPIO Mode Configuration ------------------------*/
            /* In case of Output or Alternate function mode selection */
            if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || (GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	2b01      	cmp	r3, #1
 800422c:	d005      	beq.n	800423a <HAL_GPIO_Init+0x52>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d130      	bne.n	800429c <HAL_GPIO_Init+0xb4>
                /* Check the Speed parameter */
                assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
                /* Configure the IO Speed */
                temp = GPIOx->OSPEEDR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	2203      	movs	r2, #3
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
                temp |= (GPIO_Init->Speed << (position * 2U));
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4313      	orrs	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
                GPIOx->OSPEEDR = temp;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	609a      	str	r2, [r3, #8]

                /* Configure the IO Output Type */
                temp = GPIOx->OTYPER;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_OTYPER_OT_0 << position);
 8004270:	2201      	movs	r2, #1
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	43db      	mvns	r3, r3
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	4013      	ands	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
                temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	091b      	lsrs	r3, r3, #4
 8004286:	f003 0201 	and.w	r2, r3, #1
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	4313      	orrs	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
                GPIOx->OTYPER = temp;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	605a      	str	r2, [r3, #4]
            }

            if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f003 0303 	and.w	r3, r3, #3
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d017      	beq.n	80042d8 <HAL_GPIO_Init+0xf0>
                /* Check the parameters */
                assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

                /* Activate the Pull-up or Pull down resistor for the current IO */
                temp = GPIOx->PUPDR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	2203      	movs	r2, #3
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	43db      	mvns	r3, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4013      	ands	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
                temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
                GPIOx->PUPDR = temp;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	60da      	str	r2, [r3, #12]
            }

            /* In case of Alternate function mode selection */
            if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f003 0303 	and.w	r3, r3, #3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d123      	bne.n	800432c <HAL_GPIO_Init+0x144>
                /* Check the Alternate function parameter */
                assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
                /* Configure Alternate function mapped with the current IO */
                temp = GPIOx->AFR[position >> 3U];
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	08da      	lsrs	r2, r3, #3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3208      	adds	r2, #8
 80042ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042f0:	61bb      	str	r3, [r7, #24]
                temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U));
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	220f      	movs	r2, #15
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	43db      	mvns	r3, r3
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	4013      	ands	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
                temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4313      	orrs	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
                GPIOx->AFR[position >> 3U] = temp;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	08da      	lsrs	r2, r3, #3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3208      	adds	r2, #8
 8004326:	69b9      	ldr	r1, [r7, #24]
 8004328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            }

            /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
            temp = GPIOx->MODER;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	61bb      	str	r3, [r7, #24]
            temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	2203      	movs	r2, #3
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	43db      	mvns	r3, r3
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4013      	ands	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
            temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f003 0203 	and.w	r2, r3, #3
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	4313      	orrs	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
            GPIOx->MODER = temp;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	601a      	str	r2, [r3, #0]

            /*--------------------- EXTI Mode Configuration ------------------------*/
            /* Configure the External Interrupt or event for the current IO */
            if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U) {
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80a2 	beq.w	80044b2 <HAL_GPIO_Init+0x2ca>
                /* Enable SYSCFG Clock */
                __HAL_RCC_SYSCFG_CLK_ENABLE();
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	4b57      	ldr	r3, [pc, #348]	@ (80044d0 <HAL_GPIO_Init+0x2e8>)
 8004374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004376:	4a56      	ldr	r2, [pc, #344]	@ (80044d0 <HAL_GPIO_Init+0x2e8>)
 8004378:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800437c:	6453      	str	r3, [r2, #68]	@ 0x44
 800437e:	4b54      	ldr	r3, [pc, #336]	@ (80044d0 <HAL_GPIO_Init+0x2e8>)
 8004380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]

                temp = SYSCFG->EXTICR[position >> 2U];
 800438a:	4a52      	ldr	r2, [pc, #328]	@ (80044d4 <HAL_GPIO_Init+0x2ec>)
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	089b      	lsrs	r3, r3, #2
 8004390:	3302      	adds	r3, #2
 8004392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004396:	61bb      	str	r3, [r7, #24]
                temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	220f      	movs	r2, #15
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43db      	mvns	r3, r3
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4013      	ands	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
                temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a49      	ldr	r2, [pc, #292]	@ (80044d8 <HAL_GPIO_Init+0x2f0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d019      	beq.n	80043ea <HAL_GPIO_Init+0x202>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a48      	ldr	r2, [pc, #288]	@ (80044dc <HAL_GPIO_Init+0x2f4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d013      	beq.n	80043e6 <HAL_GPIO_Init+0x1fe>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a47      	ldr	r2, [pc, #284]	@ (80044e0 <HAL_GPIO_Init+0x2f8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00d      	beq.n	80043e2 <HAL_GPIO_Init+0x1fa>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a46      	ldr	r2, [pc, #280]	@ (80044e4 <HAL_GPIO_Init+0x2fc>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d007      	beq.n	80043de <HAL_GPIO_Init+0x1f6>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a45      	ldr	r2, [pc, #276]	@ (80044e8 <HAL_GPIO_Init+0x300>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d101      	bne.n	80043da <HAL_GPIO_Init+0x1f2>
 80043d6:	2304      	movs	r3, #4
 80043d8:	e008      	b.n	80043ec <HAL_GPIO_Init+0x204>
 80043da:	2307      	movs	r3, #7
 80043dc:	e006      	b.n	80043ec <HAL_GPIO_Init+0x204>
 80043de:	2303      	movs	r3, #3
 80043e0:	e004      	b.n	80043ec <HAL_GPIO_Init+0x204>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e002      	b.n	80043ec <HAL_GPIO_Init+0x204>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <HAL_GPIO_Init+0x204>
 80043ea:	2300      	movs	r3, #0
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	f002 0203 	and.w	r2, r2, #3
 80043f2:	0092      	lsls	r2, r2, #2
 80043f4:	4093      	lsls	r3, r2
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
                SYSCFG->EXTICR[position >> 2U] = temp;
 80043fc:	4935      	ldr	r1, [pc, #212]	@ (80044d4 <HAL_GPIO_Init+0x2ec>)
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	089b      	lsrs	r3, r3, #2
 8004402:	3302      	adds	r3, #2
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                /* Clear Rising Falling edge configuration */
                temp = EXTI->RTSR;
 800440a:	4b38      	ldr	r3, [pc, #224]	@ (80044ec <HAL_GPIO_Init+0x304>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t)iocurrent);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	43db      	mvns	r3, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4013      	ands	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U) {
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_GPIO_Init+0x246>
                    temp |= iocurrent;
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
                }
                EXTI->RTSR = temp;
 800442e:	4a2f      	ldr	r2, [pc, #188]	@ (80044ec <HAL_GPIO_Init+0x304>)
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	6093      	str	r3, [r2, #8]

                temp = EXTI->FTSR;
 8004434:	4b2d      	ldr	r3, [pc, #180]	@ (80044ec <HAL_GPIO_Init+0x304>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t)iocurrent);
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	43db      	mvns	r3, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4013      	ands	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U) {
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_GPIO_Init+0x270>
                    temp |= iocurrent;
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
                }
                EXTI->FTSR = temp;
 8004458:	4a24      	ldr	r2, [pc, #144]	@ (80044ec <HAL_GPIO_Init+0x304>)
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	60d3      	str	r3, [r2, #12]

                temp = EXTI->EMR;
 800445e:	4b23      	ldr	r3, [pc, #140]	@ (80044ec <HAL_GPIO_Init+0x304>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t)iocurrent);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	43db      	mvns	r3, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4013      	ands	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U) {
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_GPIO_Init+0x29a>
                    temp |= iocurrent;
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
                }
                EXTI->EMR = temp;
 8004482:	4a1a      	ldr	r2, [pc, #104]	@ (80044ec <HAL_GPIO_Init+0x304>)
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	6053      	str	r3, [r2, #4]

                /* Clear EXTI line configuration */
                temp = EXTI->IMR;
 8004488:	4b18      	ldr	r3, [pc, #96]	@ (80044ec <HAL_GPIO_Init+0x304>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t)iocurrent);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	43db      	mvns	r3, r3
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4013      	ands	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & EXTI_IT) != 0x00U) {
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_GPIO_Init+0x2c4>
                    temp |= iocurrent;
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]
                }
                EXTI->IMR = temp;
 80044ac:	4a0f      	ldr	r2, [pc, #60]	@ (80044ec <HAL_GPIO_Init+0x304>)
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	6013      	str	r3, [r2, #0]
    for (position = 0U; position < GPIO_NUMBER; position++) {
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	3301      	adds	r3, #1
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2b0f      	cmp	r3, #15
 80044bc:	f67f aea2 	bls.w	8004204 <HAL_GPIO_Init+0x1c>
            }
        }
    }
}
 80044c0:	bf00      	nop
 80044c2:	bf00      	nop
 80044c4:	3724      	adds	r7, #36	@ 0x24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40023800 	.word	0x40023800
 80044d4:	40013800 	.word	0x40013800
 80044d8:	40020000 	.word	0x40020000
 80044dc:	40020400 	.word	0x40020400
 80044e0:	40020800 	.word	0x40020800
 80044e4:	40020c00 	.word	0x40020c00
 80044e8:	40021000 	.word	0x40021000
 80044ec:	40013c00 	.word	0x40013c00

080044f0 <HAL_GPIO_ReadPin>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Pin specifies the port bit to read.
 *         This parameter can be GPIO_PIN_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin) {
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	807b      	strh	r3, [r7, #2]
    GPIO_PinState bitstatus;

    /* Check the parameters */
    assert_param(IS_GPIO_PIN(GPIO_Pin));

    if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET) {
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	887b      	ldrh	r3, [r7, #2]
 8004502:	4013      	ands	r3, r2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <HAL_GPIO_ReadPin+0x1e>
        bitstatus = GPIO_PIN_SET;
 8004508:	2301      	movs	r3, #1
 800450a:	73fb      	strb	r3, [r7, #15]
 800450c:	e001      	b.n	8004512 <HAL_GPIO_ReadPin+0x22>
    } else {
        bitstatus = GPIO_PIN_RESET;
 800450e:	2300      	movs	r3, #0
 8004510:	73fb      	strb	r3, [r7, #15]
    }
    return bitstatus;
 8004512:	7bfb      	ldrb	r3, [r7, #15]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_GPIO_WritePin>:
 *          This parameter can be one of the GPIO_PinState enum values:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState) {
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	807b      	strh	r3, [r7, #2]
 800452c:	4613      	mov	r3, r2
 800452e:	707b      	strb	r3, [r7, #1]
    /* Check the parameters */
    assert_param(IS_GPIO_PIN(GPIO_Pin));
    assert_param(IS_GPIO_PIN_ACTION(PinState));

    if (PinState != GPIO_PIN_RESET) {
 8004530:	787b      	ldrb	r3, [r7, #1]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_GPIO_WritePin+0x1e>
        GPIOx->BSRR = GPIO_Pin;
 8004536:	887a      	ldrh	r2, [r7, #2]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	619a      	str	r2, [r3, #24]
    } else {
        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
    }
}
 800453c:	e003      	b.n	8004546 <HAL_GPIO_WritePin+0x26>
        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800453e:	887b      	ldrh	r3, [r7, #2]
 8004540:	041a      	lsls	r2, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	619a      	str	r2, [r3, #24]
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
	...

08004554 <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef * hi2c) {
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
    uint32_t freqrange;
    uint32_t pclk1;

    /* Check the I2C handle allocation */
    if (hi2c == NULL) {
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_I2C_Init+0x12>
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e12b      	b.n	80047be <HAL_I2C_Init+0x26a>
    assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
    assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
    assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
    assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

    if (hi2c->State == HAL_I2C_STATE_RESET) {
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <HAL_I2C_Init+0x2c>
        /* Allocate lock resource and initialize it */
        hi2c->Lock = HAL_UNLOCKED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        hi2c->MspInitCallback(hi2c);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        HAL_I2C_MspInit(hi2c);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fd fe4c 	bl	8002218 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2224      	movs	r2, #36	@ 0x24
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0201 	bic.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]

    /*Reset I2C*/
    hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045a6:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045b6:	601a      	str	r2, [r3, #0]

    /* Get PCLK1 frequency */
    pclk1 = HAL_RCC_GetPCLK1Freq();
 80045b8:	f002 fe38 	bl	800722c <HAL_RCC_GetPCLK1Freq>
 80045bc:	60f8      	str	r0, [r7, #12]

    /* Check the minimum allowed PCLK1 frequency */
    if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	4a81      	ldr	r2, [pc, #516]	@ (80047c8 <HAL_I2C_Init+0x274>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d807      	bhi.n	80045d8 <HAL_I2C_Init+0x84>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4a80      	ldr	r2, [pc, #512]	@ (80047cc <HAL_I2C_Init+0x278>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	bf94      	ite	ls
 80045d0:	2301      	movls	r3, #1
 80045d2:	2300      	movhi	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	e006      	b.n	80045e6 <HAL_I2C_Init+0x92>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4a7d      	ldr	r2, [pc, #500]	@ (80047d0 <HAL_I2C_Init+0x27c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	bf94      	ite	ls
 80045e0:	2301      	movls	r3, #1
 80045e2:	2300      	movhi	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <HAL_I2C_Init+0x9a>
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e0e7      	b.n	80047be <HAL_I2C_Init+0x26a>
    }

    /* Calculate frequency range */
    freqrange = I2C_FREQRANGE(pclk1);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4a78      	ldr	r2, [pc, #480]	@ (80047d4 <HAL_I2C_Init+0x280>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	0c9b      	lsrs	r3, r3, #18
 80045f8:	60bb      	str	r3, [r7, #8]

    /*---------------------------- I2Cx CR2 Configuration ----------------------*/
    /* Configure I2Cx: Frequency range */
    MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]

    /*---------------------------- I2Cx TRISE Configuration --------------------*/
    /* Configure I2Cx: Rise Time */
    MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	4a6a      	ldr	r2, [pc, #424]	@ (80047c8 <HAL_I2C_Init+0x274>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d802      	bhi.n	8004628 <HAL_I2C_Init+0xd4>
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	3301      	adds	r3, #1
 8004626:	e009      	b.n	800463c <HAL_I2C_Init+0xe8>
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800462e:	fb02 f303 	mul.w	r3, r2, r3
 8004632:	4a69      	ldr	r2, [pc, #420]	@ (80047d8 <HAL_I2C_Init+0x284>)
 8004634:	fba2 2303 	umull	r2, r3, r2, r3
 8004638:	099b      	lsrs	r3, r3, #6
 800463a:	3301      	adds	r3, #1
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	430b      	orrs	r3, r1
 8004642:	6213      	str	r3, [r2, #32]

    /*---------------------------- I2Cx CCR Configuration ----------------------*/
    /* Configure I2Cx: Speed */
    MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800464e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	495c      	ldr	r1, [pc, #368]	@ (80047c8 <HAL_I2C_Init+0x274>)
 8004658:	428b      	cmp	r3, r1
 800465a:	d819      	bhi.n	8004690 <HAL_I2C_Init+0x13c>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	1e59      	subs	r1, r3, #1
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	fbb1 f3f3 	udiv	r3, r1, r3
 800466a:	1c59      	adds	r1, r3, #1
 800466c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004670:	400b      	ands	r3, r1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <HAL_I2C_Init+0x138>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1e59      	subs	r1, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	fbb1 f3f3 	udiv	r3, r1, r3
 8004684:	3301      	adds	r3, #1
 8004686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800468a:	e051      	b.n	8004730 <HAL_I2C_Init+0x1dc>
 800468c:	2304      	movs	r3, #4
 800468e:	e04f      	b.n	8004730 <HAL_I2C_Init+0x1dc>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d111      	bne.n	80046bc <HAL_I2C_Init+0x168>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	1e58      	subs	r0, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6859      	ldr	r1, [r3, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	440b      	add	r3, r1
 80046a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046aa:	3301      	adds	r3, #1
 80046ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	bf0c      	ite	eq
 80046b4:	2301      	moveq	r3, #1
 80046b6:	2300      	movne	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	e012      	b.n	80046e2 <HAL_I2C_Init+0x18e>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	1e58      	subs	r0, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6859      	ldr	r1, [r3, #4]
 80046c4:	460b      	mov	r3, r1
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	0099      	lsls	r1, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80046d2:	3301      	adds	r3, #1
 80046d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d8:	2b00      	cmp	r3, #0
 80046da:	bf0c      	ite	eq
 80046dc:	2301      	moveq	r3, #1
 80046de:	2300      	movne	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_I2C_Init+0x196>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e022      	b.n	8004730 <HAL_I2C_Init+0x1dc>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10e      	bne.n	8004710 <HAL_I2C_Init+0x1bc>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1e58      	subs	r0, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6859      	ldr	r1, [r3, #4]
 80046fa:	460b      	mov	r3, r1
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	440b      	add	r3, r1
 8004700:	fbb0 f3f3 	udiv	r3, r0, r3
 8004704:	3301      	adds	r3, #1
 8004706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800470e:	e00f      	b.n	8004730 <HAL_I2C_Init+0x1dc>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	1e58      	subs	r0, r3, #1
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6859      	ldr	r1, [r3, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	0099      	lsls	r1, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	fbb0 f3f3 	udiv	r3, r0, r3
 8004726:	3301      	adds	r3, #1
 8004728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800472c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	6809      	ldr	r1, [r1, #0]
 8004734:	4313      	orrs	r3, r2
 8004736:	61cb      	str	r3, [r1, #28]

    /*---------------------------- I2Cx CR1 Configuration ----------------------*/
    /* Configure I2Cx: Generalcall and NoStretch mode */
    MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69da      	ldr	r2, [r3, #28]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	601a      	str	r2, [r3, #0]

    /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
    /* Configure I2Cx: Own Address1 and addressing mode */
    MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800475e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6911      	ldr	r1, [r2, #16]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68d2      	ldr	r2, [r2, #12]
 800476a:	4311      	orrs	r1, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6812      	ldr	r2, [r2, #0]
 8004770:	430b      	orrs	r3, r1
 8004772:	6093      	str	r3, [r2, #8]

    /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
    /* Configure I2Cx: Dual mode and Own Address2 */
    MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695a      	ldr	r2, [r3, #20]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	60da      	str	r2, [r3, #12]

    /* Enable the selected I2C peripheral */
    __HAL_I2C_ENABLE(hi2c);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0201 	orr.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]

    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2220      	movs	r2, #32
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	000186a0 	.word	0x000186a0
 80047cc:	001e847f 	.word	0x001e847f
 80047d0:	003d08ff 	.word	0x003d08ff
 80047d4:	431bde83 	.word	0x431bde83
 80047d8:	10624dd3 	.word	0x10624dd3

080047dc <HAL_I2C_Mem_Write>:
 * @param  pData Pointer to data buffer
 * @param  Size Amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t Size, uint32_t Timeout) {
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	4608      	mov	r0, r1
 80047e6:	4611      	mov	r1, r2
 80047e8:	461a      	mov	r2, r3
 80047ea:	4603      	mov	r3, r0
 80047ec:	817b      	strh	r3, [r7, #10]
 80047ee:	460b      	mov	r3, r1
 80047f0:	813b      	strh	r3, [r7, #8]
 80047f2:	4613      	mov	r3, r2
 80047f4:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 80047f6:	f7fe fe07 	bl	8003408 <HAL_GetTick>
 80047fa:	6178      	str	r0, [r7, #20]

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b20      	cmp	r3, #32
 8004806:	f040 80d9 	bne.w	80049bc <HAL_I2C_Mem_Write+0x1e0>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	2319      	movs	r3, #25
 8004810:	2201      	movs	r2, #1
 8004812:	496d      	ldr	r1, [pc, #436]	@ (80049c8 <HAL_I2C_Mem_Write+0x1ec>)
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 fc7f 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <HAL_I2C_Mem_Write+0x48>
            return HAL_BUSY;
 8004820:	2302      	movs	r3, #2
 8004822:	e0cc      	b.n	80049be <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800482a:	2b01      	cmp	r3, #1
 800482c:	d101      	bne.n	8004832 <HAL_I2C_Mem_Write+0x56>
 800482e:	2302      	movs	r3, #2
 8004830:	e0c5      	b.n	80049be <HAL_I2C_Mem_Write+0x1e2>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b01      	cmp	r3, #1
 8004846:	d007      	beq.n	8004858 <HAL_I2C_Mem_Write+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004866:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2221      	movs	r2, #33	@ 0x21
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2240      	movs	r2, #64	@ 0x40
 8004874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6a3a      	ldr	r2, [r7, #32]
 8004882:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount = Size;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004888:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize = hi2c->XferCount;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4a4d      	ldr	r2, [pc, #308]	@ (80049cc <HAL_I2C_Mem_Write+0x1f0>)
 8004898:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK) {
 800489a:	88f8      	ldrh	r0, [r7, #6]
 800489c:	893a      	ldrh	r2, [r7, #8]
 800489e:	8979      	ldrh	r1, [r7, #10]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	9301      	str	r3, [sp, #4]
 80048a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	4603      	mov	r3, r0
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 fab6 	bl	8004e1c <I2C_RequestMemoryWrite>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d052      	beq.n	800495c <HAL_I2C_Mem_Write+0x180>
            return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e081      	b.n	80049be <HAL_I2C_Mem_Write+0x1e2>
        }

        while (hi2c->XferSize > 0U) {
            /* Wait until TXE flag is set */
            if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 fd00 	bl	80052c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00d      	beq.n	80048e6 <HAL_I2C_Mem_Write+0x10a>
                if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d107      	bne.n	80048e2 <HAL_I2C_Mem_Write+0x106>
                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048e0:	601a      	str	r2, [r3, #0]
                }
                return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e06b      	b.n	80049be <HAL_I2C_Mem_Write+0x1e2>
            }

            /* Write data to DR */
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ea:	781a      	ldrb	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	611a      	str	r2, [r3, #16]

            /* Increment Buffer pointer */
            hi2c->pBuffPtr++;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Update counter */
            hi2c->XferSize--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004900:	3b01      	subs	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	851a      	strh	r2, [r3, #40]	@ 0x28
            hi2c->XferCount--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800490c:	b29b      	uxth	r3, r3
 800490e:	3b01      	subs	r3, #1
 8004910:	b29a      	uxth	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	855a      	strh	r2, [r3, #42]	@ 0x2a

            if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b04      	cmp	r3, #4
 8004922:	d11b      	bne.n	800495c <HAL_I2C_Mem_Write+0x180>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004928:	2b00      	cmp	r3, #0
 800492a:	d017      	beq.n	800495c <HAL_I2C_Mem_Write+0x180>
                /* Write data to DR */
                hi2c->Instance->DR = *hi2c->pBuffPtr;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004930:	781a      	ldrb	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	611a      	str	r2, [r3, #16]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	625a      	str	r2, [r3, #36]	@ 0x24

                /* Update counter */
                hi2c->XferSize--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	851a      	strh	r2, [r3, #40]	@ 0x28
                hi2c->XferCount--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        while (hi2c->XferSize > 0U) {
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1aa      	bne.n	80048ba <HAL_I2C_Mem_Write+0xde>
            }
        }

        /* Wait until BTF flag is set */
        if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 fcec 	bl	8005346 <I2C_WaitOnBTFFlagUntilTimeout>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00d      	beq.n	8004990 <HAL_I2C_Mem_Write+0x1b4>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004978:	2b04      	cmp	r3, #4
 800497a:	d107      	bne.n	800498c <HAL_I2C_Mem_Write+0x1b0>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800498a:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e016      	b.n	80049be <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800499e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	e000      	b.n	80049be <HAL_I2C_Mem_Write+0x1e2>
    } else {
        return HAL_BUSY;
 80049bc:	2302      	movs	r3, #2
    }
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	00100002 	.word	0x00100002
 80049cc:	ffff0000 	.word	0xffff0000

080049d0 <HAL_I2C_Mem_Read>:
 * @param  pData Pointer to data buffer
 * @param  Size Amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t Size, uint32_t Timeout) {
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08c      	sub	sp, #48	@ 0x30
 80049d4:	af02      	add	r7, sp, #8
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	4608      	mov	r0, r1
 80049da:	4611      	mov	r1, r2
 80049dc:	461a      	mov	r2, r3
 80049de:	4603      	mov	r3, r0
 80049e0:	817b      	strh	r3, [r7, #10]
 80049e2:	460b      	mov	r3, r1
 80049e4:	813b      	strh	r3, [r7, #8]
 80049e6:	4613      	mov	r3, r2
 80049e8:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 80049ea:	f7fe fd0d 	bl	8003408 <HAL_GetTick>
 80049ee:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	f040 8208 	bne.w	8004e0e <HAL_I2C_Mem_Read+0x43e>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 80049fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	2319      	movs	r3, #25
 8004a04:	2201      	movs	r2, #1
 8004a06:	497b      	ldr	r1, [pc, #492]	@ (8004bf4 <HAL_I2C_Mem_Read+0x224>)
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 fb85 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <HAL_I2C_Mem_Read+0x48>
            return HAL_BUSY;
 8004a14:	2302      	movs	r3, #2
 8004a16:	e1fb      	b.n	8004e10 <HAL_I2C_Mem_Read+0x440>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <HAL_I2C_Mem_Read+0x56>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e1f4      	b.n	8004e10 <HAL_I2C_Mem_Read+0x440>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d007      	beq.n	8004a4c <HAL_I2C_Mem_Read+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a5a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2222      	movs	r2, #34	@ 0x22
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2240      	movs	r2, #64	@ 0x40
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a76:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount = Size;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004a7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize = hi2c->XferCount;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4a5b      	ldr	r2, [pc, #364]	@ (8004bf8 <HAL_I2C_Mem_Read+0x228>)
 8004a8c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK) {
 8004a8e:	88f8      	ldrh	r0, [r7, #6]
 8004a90:	893a      	ldrh	r2, [r7, #8]
 8004a92:	8979      	ldrh	r1, [r7, #10]
 8004a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a96:	9301      	str	r3, [sp, #4]
 8004a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 fa52 	bl	8004f48 <I2C_RequestMemoryRead>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_I2C_Mem_Read+0xde>
            return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e1b0      	b.n	8004e10 <HAL_I2C_Mem_Read+0x440>
        }

        if (hi2c->XferSize == 0U) {
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d113      	bne.n	8004ade <HAL_I2C_Mem_Read+0x10e>
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	623b      	str	r3, [r7, #32]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	623b      	str	r3, [r7, #32]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	623b      	str	r3, [r7, #32]
 8004aca:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	e184      	b.n	8004de8 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 1U) {
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d11b      	bne.n	8004b1e <HAL_I2C_Mem_Read+0x14e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004af4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004af6:	2300      	movs	r3, #0
 8004af8:	61fb      	str	r3, [r7, #28]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	61fb      	str	r3, [r7, #28]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	61fb      	str	r3, [r7, #28]
 8004b0a:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	e164      	b.n	8004de8 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 2U) {
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d11b      	bne.n	8004b5e <HAL_I2C_Mem_Read+0x18e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b34:	601a      	str	r2, [r3, #0]

            /* Enable Pos */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b44:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b46:	2300      	movs	r3, #0
 8004b48:	61bb      	str	r3, [r7, #24]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	61bb      	str	r3, [r7, #24]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	e144      	b.n	8004de8 <HAL_I2C_Mem_Read+0x418>
        } else {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b5e:	2300      	movs	r3, #0
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	617b      	str	r3, [r7, #20]
 8004b72:	697b      	ldr	r3, [r7, #20]
        }

        while (hi2c->XferSize > 0U) {
 8004b74:	e138      	b.n	8004de8 <HAL_I2C_Mem_Read+0x418>
            if (hi2c->XferSize <= 3U) {
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	f200 80f1 	bhi.w	8004d62 <HAL_I2C_Mem_Read+0x392>
                /* One byte */
                if (hi2c->XferSize == 1U) {
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d123      	bne.n	8004bd0 <HAL_I2C_Mem_Read+0x200>
                    /* Wait until RXNE flag is set */
                    if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8004b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 fc1b 	bl	80053c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <HAL_I2C_Mem_Read+0x1cc>
                        return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e139      	b.n	8004e10 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691a      	ldr	r2, [r3, #16]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004bce:	e10b      	b.n	8004de8 <HAL_I2C_Mem_Read+0x418>
                }
                /* Two bytes */
                else if (hi2c->XferSize == 2U) {
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d14e      	bne.n	8004c76 <HAL_I2C_Mem_Read+0x2a6>
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bde:	2200      	movs	r2, #0
 8004be0:	4906      	ldr	r1, [pc, #24]	@ (8004bfc <HAL_I2C_Mem_Read+0x22c>)
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 fa98 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d008      	beq.n	8004c00 <HAL_I2C_Mem_Read+0x230>
                        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e10e      	b.n	8004e10 <HAL_I2C_Mem_Read+0x440>
 8004bf2:	bf00      	nop
 8004bf4:	00100002 	.word	0x00100002
 8004bf8:	ffff0000 	.word	0xffff0000
 8004bfc:	00010004 	.word	0x00010004
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c0e:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	855a      	strh	r2, [r3, #42]	@ 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c74:	e0b8      	b.n	8004de8 <HAL_I2C_Mem_Read+0x418>
                }
                /* 3 Last bytes */
                else {
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8004c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	4966      	ldr	r1, [pc, #408]	@ (8004e18 <HAL_I2C_Mem_Read+0x448>)
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 fa49 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_I2C_Mem_Read+0x2c0>
                        return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e0bf      	b.n	8004e10 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Disable Acknowledge */
                    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c9e:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691a      	ldr	r2, [r3, #16]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd8:	2200      	movs	r2, #0
 8004cda:	494f      	ldr	r1, [pc, #316]	@ (8004e18 <HAL_I2C_Mem_Read+0x448>)
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 fa1b 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <HAL_I2C_Mem_Read+0x31c>
                        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e091      	b.n	8004e10 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cfa:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691a      	ldr	r2, [r3, #16]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d60:	e042      	b.n	8004de8 <HAL_I2C_Mem_Read+0x418>
                }
            } else {
                /* Wait until RXNE flag is set */
                if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8004d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d64:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 fb2e 	bl	80053c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_I2C_Mem_Read+0x3a6>
                    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e04c      	b.n	8004e10 <HAL_I2C_Mem_Read+0x440>
                }

                /* Read data from DR */
                *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	701a      	strb	r2, [r3, #0]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	625a      	str	r2, [r3, #36]	@ 0x24

                /* Update counter */
                hi2c->XferSize--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	851a      	strh	r2, [r3, #40]	@ 0x28
                hi2c->XferCount--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	855a      	strh	r2, [r3, #42]	@ 0x2a

                if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	f003 0304 	and.w	r3, r3, #4
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d118      	bne.n	8004de8 <HAL_I2C_Mem_Read+0x418>
                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        while (hi2c->XferSize > 0U) {
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f47f aec2 	bne.w	8004b76 <HAL_I2C_Mem_Read+0x1a6>
                }
            }
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2220      	movs	r2, #32
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	e000      	b.n	8004e10 <HAL_I2C_Mem_Read+0x440>
    } else {
        return HAL_BUSY;
 8004e0e:	2302      	movs	r3, #2
    }
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3728      	adds	r7, #40	@ 0x28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	00010004 	.word	0x00010004

08004e1c <I2C_RequestMemoryWrite>:
 * @param  MemAddSize Size of internal memory address
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart) {
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	4608      	mov	r0, r1
 8004e26:	4611      	mov	r1, r2
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	817b      	strh	r3, [r7, #10]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	813b      	strh	r3, [r7, #8]
 8004e32:	4613      	mov	r3, r2
 8004e34:	80fb      	strh	r3, [r7, #6]
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e44:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8004e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 f960 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00d      	beq.n	8004e7a <I2C_RequestMemoryWrite+0x5e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e6c:	d103      	bne.n	8004e76 <I2C_RequestMemoryWrite+0x5a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e74:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e05f      	b.n	8004f3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e7a:	897b      	ldrh	r3, [r7, #10]
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e88:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8c:	6a3a      	ldr	r2, [r7, #32]
 8004e8e:	492d      	ldr	r1, [pc, #180]	@ (8004f44 <I2C_RequestMemoryWrite+0x128>)
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 f998 	bl	80051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <I2C_RequestMemoryWrite+0x84>
        return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e04c      	b.n	8004f3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8004eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eb8:	6a39      	ldr	r1, [r7, #32]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 fa02 	bl	80052c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00d      	beq.n	8004ee2 <I2C_RequestMemoryWrite+0xc6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d107      	bne.n	8004ede <I2C_RequestMemoryWrite+0xc2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004edc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e02b      	b.n	8004f3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 8004ee2:	88fb      	ldrh	r3, [r7, #6]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d105      	bne.n	8004ef4 <I2C_RequestMemoryWrite+0xd8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ee8:	893b      	ldrh	r3, [r7, #8]
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	611a      	str	r2, [r3, #16]
 8004ef2:	e021      	b.n	8004f38 <I2C_RequestMemoryWrite+0x11c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ef4:	893b      	ldrh	r3, [r7, #8]
 8004ef6:	0a1b      	lsrs	r3, r3, #8
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8004f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f04:	6a39      	ldr	r1, [r7, #32]
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f9dc 	bl	80052c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00d      	beq.n	8004f2e <I2C_RequestMemoryWrite+0x112>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d107      	bne.n	8004f2a <I2C_RequestMemoryWrite+0x10e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f28:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e005      	b.n	8004f3a <I2C_RequestMemoryWrite+0x11e>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f2e:	893b      	ldrh	r3, [r7, #8]
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	611a      	str	r2, [r3, #16]
    }

    return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	00010002 	.word	0x00010002

08004f48 <I2C_RequestMemoryRead>:
 * @param  MemAddSize Size of internal memory address
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart) {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	4608      	mov	r0, r1
 8004f52:	4611      	mov	r1, r2
 8004f54:	461a      	mov	r2, r3
 8004f56:	4603      	mov	r3, r0
 8004f58:	817b      	strh	r3, [r7, #10]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	813b      	strh	r3, [r7, #8]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	80fb      	strh	r3, [r7, #6]
    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f70:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f80:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8004f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 f8c2 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00d      	beq.n	8004fb6 <I2C_RequestMemoryRead+0x6e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fa8:	d103      	bne.n	8004fb2 <I2C_RequestMemoryRead+0x6a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fb0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e0aa      	b.n	800510c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fb6:	897b      	ldrh	r3, [r7, #10]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fc4:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc8:	6a3a      	ldr	r2, [r7, #32]
 8004fca:	4952      	ldr	r1, [pc, #328]	@ (8005114 <I2C_RequestMemoryRead+0x1cc>)
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 f8fa 	bl	80051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <I2C_RequestMemoryRead+0x94>
        return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e097      	b.n	800510c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fdc:	2300      	movs	r3, #0
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8004ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ff4:	6a39      	ldr	r1, [r7, #32]
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 f964 	bl	80052c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00d      	beq.n	800501e <I2C_RequestMemoryRead+0xd6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	2b04      	cmp	r3, #4
 8005008:	d107      	bne.n	800501a <I2C_RequestMemoryRead+0xd2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005018:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e076      	b.n	800510c <I2C_RequestMemoryRead+0x1c4>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 800501e:	88fb      	ldrh	r3, [r7, #6]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d105      	bne.n	8005030 <I2C_RequestMemoryRead+0xe8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005024:	893b      	ldrh	r3, [r7, #8]
 8005026:	b2da      	uxtb	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	611a      	str	r2, [r3, #16]
 800502e:	e021      	b.n	8005074 <I2C_RequestMemoryRead+0x12c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005030:	893b      	ldrh	r3, [r7, #8]
 8005032:	0a1b      	lsrs	r3, r3, #8
 8005034:	b29b      	uxth	r3, r3
 8005036:	b2da      	uxtb	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800503e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005040:	6a39      	ldr	r1, [r7, #32]
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 f93e 	bl	80052c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00d      	beq.n	800506a <I2C_RequestMemoryRead+0x122>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005052:	2b04      	cmp	r3, #4
 8005054:	d107      	bne.n	8005066 <I2C_RequestMemoryRead+0x11e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005064:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e050      	b.n	800510c <I2C_RequestMemoryRead+0x1c4>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800506a:	893b      	ldrh	r3, [r7, #8]
 800506c:	b2da      	uxtb	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	611a      	str	r2, [r3, #16]
    }

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8005074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005076:	6a39      	ldr	r1, [r7, #32]
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 f923 	bl	80052c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00d      	beq.n	80050a0 <I2C_RequestMemoryRead+0x158>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005088:	2b04      	cmp	r3, #4
 800508a:	d107      	bne.n	800509c <I2C_RequestMemoryRead+0x154>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800509a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e035      	b.n	800510c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050ae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 80050b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f82b 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00d      	beq.n	80050e4 <I2C_RequestMemoryRead+0x19c>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050d6:	d103      	bne.n	80050e0 <I2C_RequestMemoryRead+0x198>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050de:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e013      	b.n	800510c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050e4:	897b      	ldrh	r3, [r7, #10]
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 80050f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f6:	6a3a      	ldr	r2, [r7, #32]
 80050f8:	4906      	ldr	r1, [pc, #24]	@ (8005114 <I2C_RequestMemoryRead+0x1cc>)
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 f863 	bl	80051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <I2C_RequestMemoryRead+0x1c2>
        return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e000      	b.n	800510c <I2C_RequestMemoryRead+0x1c4>
    }

    return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	00010002 	.word	0x00010002

08005118 <I2C_WaitOnFlagUntilTimeout>:
 * @param  Status The new Flag status (SET or RESET).
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart) {
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	4613      	mov	r3, r2
 8005126:	71fb      	strb	r3, [r7, #7]
    /* Wait until flag is set */
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 8005128:	e025      	b.n	8005176 <I2C_WaitOnFlagUntilTimeout+0x5e>
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d021      	beq.n	8005176 <I2C_WaitOnFlagUntilTimeout+0x5e>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8005132:	f7fe f969 	bl	8003408 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d302      	bcc.n	8005148 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d116      	bne.n	8005176 <I2C_WaitOnFlagUntilTimeout+0x5e>
                hi2c->PreviousState = I2C_STATE_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	631a      	str	r2, [r3, #48]	@ 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2220      	movs	r2, #32
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005162:	f043 0220 	orr.w	r2, r3, #32
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	641a      	str	r2, [r3, #64]	@ 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

                return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e023      	b.n	80051be <I2C_WaitOnFlagUntilTimeout+0xa6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	0c1b      	lsrs	r3, r3, #16
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b01      	cmp	r3, #1
 800517e:	d10d      	bne.n	800519c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	43da      	mvns	r2, r3
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4013      	ands	r3, r2
 800518c:	b29b      	uxth	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	bf0c      	ite	eq
 8005192:	2301      	moveq	r3, #1
 8005194:	2300      	movne	r3, #0
 8005196:	b2db      	uxtb	r3, r3
 8005198:	461a      	mov	r2, r3
 800519a:	e00c      	b.n	80051b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	43da      	mvns	r2, r3
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	4013      	ands	r3, r2
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bf0c      	ite	eq
 80051ae:	2301      	moveq	r3, #1
 80051b0:	2300      	movne	r3, #0
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d0b6      	beq.n	800512a <I2C_WaitOnFlagUntilTimeout+0x12>
            }
        }
    }
    return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 * @param  Flag specifies the I2C flag to check.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart) {
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	60f8      	str	r0, [r7, #12]
 80051ce:	60b9      	str	r1, [r7, #8]
 80051d0:	607a      	str	r2, [r7, #4]
 80051d2:	603b      	str	r3, [r7, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 80051d4:	e051      	b.n	800527a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051e4:	d123      	bne.n	800522e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051f4:	601a      	str	r2, [r3, #0]

            /* Clear AF Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80051fe:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	631a      	str	r2, [r3, #48]	@ 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521a:	f043 0204 	orr.w	r2, r3, #4
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e046      	b.n	80052bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005234:	d021      	beq.n	800527a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8005236:	f7fe f8e7 	bl	8003408 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	429a      	cmp	r2, r3
 8005244:	d302      	bcc.n	800524c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d116      	bne.n	800527a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
                hi2c->PreviousState = I2C_STATE_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	631a      	str	r2, [r3, #48]	@ 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005266:	f043 0220 	orr.w	r2, r3, #32
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	641a      	str	r2, [r3, #64]	@ 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

                return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e020      	b.n	80052bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	0c1b      	lsrs	r3, r3, #16
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b01      	cmp	r3, #1
 8005282:	d10c      	bne.n	800529e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	43da      	mvns	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4013      	ands	r3, r2
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	bf14      	ite	ne
 8005296:	2301      	movne	r3, #1
 8005298:	2300      	moveq	r3, #0
 800529a:	b2db      	uxtb	r3, r3
 800529c:	e00b      	b.n	80052b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	43da      	mvns	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4013      	ands	r3, r2
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	bf14      	ite	ne
 80052b0:	2301      	movne	r3, #1
 80052b2:	2300      	moveq	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d18d      	bne.n	80051d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
            }
        }
    }
    return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <I2C_WaitOnTXEFlagUntilTimeout>:
 *                the configuration information for the specified I2C.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout, uint32_t Tickstart) {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 80052d0:	e02d      	b.n	800532e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 f8ce 	bl	8005474 <I2C_IsAcknowledgeFailed>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e02d      	b.n	800533e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e8:	d021      	beq.n	800532e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80052ea:	f7fe f88d 	bl	8003408 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d302      	bcc.n	8005300 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d116      	bne.n	800532e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	631a      	str	r2, [r3, #48]	@ 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2220      	movs	r2, #32
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531a:	f043 0220 	orr.w	r2, r3, #32
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	641a      	str	r2, [r3, #64]	@ 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

                return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e007      	b.n	800533e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005338:	2b80      	cmp	r3, #128	@ 0x80
 800533a:	d1ca      	bne.n	80052d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <I2C_WaitOnBTFFlagUntilTimeout>:
 *                the configuration information for the specified I2C.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout, uint32_t Tickstart) {
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 8005352:	e02d      	b.n	80053b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 f88d 	bl	8005474 <I2C_IsAcknowledgeFailed>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e02d      	b.n	80053c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536a:	d021      	beq.n	80053b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 800536c:	f7fe f84c 	bl	8003408 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	429a      	cmp	r2, r3
 800537a:	d302      	bcc.n	8005382 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d116      	bne.n	80053b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	631a      	str	r2, [r3, #48]	@ 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539c:	f043 0220 	orr.w	r2, r3, #32
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	641a      	str	r2, [r3, #64]	@ 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

                return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e007      	b.n	80053c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	f003 0304 	and.w	r3, r3, #4
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d1ca      	bne.n	8005354 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
 *                the configuration information for the specified I2C.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout, uint32_t Tickstart) {
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]

    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 80053d4:	e042      	b.n	800545c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
        /* Check if a STOPF is detected */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) {
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b10      	cmp	r3, #16
 80053e2:	d119      	bne.n	8005418 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0210 	mvn.w	r2, #16
 80053ec:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	@ 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_NONE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e029      	b.n	800546c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
        }

        /* Check for the Timeout */
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8005418:	f7fd fff6 	bl	8003408 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	429a      	cmp	r2, r3
 8005426:	d302      	bcc.n	800542e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d116      	bne.n	800545c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
            hi2c->PreviousState = I2C_STATE_NONE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	631a      	str	r2, [r3, #48]	@ 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2220      	movs	r2, #32
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005448:	f043 0220 	orr.w	r2, r3, #32
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e007      	b.n	800546c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005466:	2b40      	cmp	r3, #64	@ 0x40
 8005468:	d1b5      	bne.n	80053d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
        }
    }
    return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <I2C_IsAcknowledgeFailed>:
 * @brief  This function handles Acknowledge failed detection during an I2C Communication.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef * hi2c) {
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800548a:	d11b      	bne.n	80054c4 <I2C_IsAcknowledgeFailed+0x50>
        /* Clear NACKF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005494:	615a      	str	r2, [r3, #20]

        hi2c->PreviousState = I2C_STATE_NONE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b0:	f043 0204 	orr.w	r2, r3, #4
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e000      	b.n	80054c6 <I2C_IsAcknowledgeFailed+0x52>
    }
    return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_PCD_Init>:
 * @brief  Initializes the PCD according to the specified
 *         parameters in the PCD_InitTypeDef and initialize the associated handle.
 * @param  hpcd PCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef * hpcd) {
 80054d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054d4:	b08f      	sub	sp, #60	@ 0x3c
 80054d6:	af0a      	add	r7, sp, #40	@ 0x28
 80054d8:	6078      	str	r0, [r7, #4]
    USB_OTG_GlobalTypeDef * USBx;
    uint8_t i;

    /* Check the PCD handle allocation */
    if (hpcd == NULL) {
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <HAL_PCD_Init+0x12>
        return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e10f      	b.n	8005704 <HAL_PCD_Init+0x232>
    }

    /* Check the parameters */
    assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

    USBx = hpcd->Instance;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60bb      	str	r3, [r7, #8]

    if (hpcd->State == HAL_PCD_STATE_RESET) {
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d106      	bne.n	8005504 <HAL_PCD_Init+0x32>
        /* Allocate lock resource and initialize it */
        hpcd->Lock = HAL_UNLOCKED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

        /* Init the low level hardware */
        hpcd->MspInitCallback(hpcd);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC... */
        HAL_PCD_MspInit(hpcd);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f009 fac6 	bl	800ea90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
    }

    hpcd->State = HAL_PCD_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2203      	movs	r2, #3
 8005508:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

    /* Disable DMA mode for FS instance */
    if ((USBx->CID & (0x1U << 8)) == 0U) {
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005514:	2b00      	cmp	r3, #0
 8005516:	d102      	bne.n	800551e <HAL_PCD_Init+0x4c>
        hpcd->Init.dma_enable = 0U;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	611a      	str	r2, [r3, #16]
    }

    /* Disable the Interrupts */
    __HAL_PCD_DISABLE(hpcd);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4618      	mov	r0, r3
 8005524:	f003 f95f 	bl	80087e6 <USB_DisableGlobalInt>

    /*Init the Core (common init.) */
    if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK) {
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	603b      	str	r3, [r7, #0]
 800552e:	687e      	ldr	r6, [r7, #4]
 8005530:	466d      	mov	r5, sp
 8005532:	f106 0410 	add.w	r4, r6, #16
 8005536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800553a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800553c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800553e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005542:	e885 0003 	stmia.w	r5, {r0, r1}
 8005546:	1d33      	adds	r3, r6, #4
 8005548:	cb0e      	ldmia	r3, {r1, r2, r3}
 800554a:	6838      	ldr	r0, [r7, #0]
 800554c:	f003 f836 	bl	80085bc <USB_CoreInit>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d005      	beq.n	8005562 <HAL_PCD_Init+0x90>
        hpcd->State = HAL_PCD_STATE_ERROR;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2202      	movs	r2, #2
 800555a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e0d0      	b.n	8005704 <HAL_PCD_Init+0x232>
    }

    /* Force Device Mode*/
    (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2100      	movs	r1, #0
 8005568:	4618      	mov	r0, r3
 800556a:	f003 f94d 	bl	8008808 <USB_SetCurrentMode>

    /* Init endpoints structures */
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 800556e:	2300      	movs	r3, #0
 8005570:	73fb      	strb	r3, [r7, #15]
 8005572:	e04a      	b.n	800560a <HAL_PCD_Init+0x138>
        /* Init ep structure */
        hpcd->IN_ep[i].is_in = 1U;
 8005574:	7bfa      	ldrb	r2, [r7, #15]
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	4613      	mov	r3, r2
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	4413      	add	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	333d      	adds	r3, #61	@ 0x3d
 8005584:	2201      	movs	r2, #1
 8005586:	701a      	strb	r2, [r3, #0]
        hpcd->IN_ep[i].num = i;
 8005588:	7bfa      	ldrb	r2, [r7, #15]
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	4613      	mov	r3, r2
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	440b      	add	r3, r1
 8005596:	333c      	adds	r3, #60	@ 0x3c
 8005598:	7bfa      	ldrb	r2, [r7, #15]
 800559a:	701a      	strb	r2, [r3, #0]
        hpcd->IN_ep[i].tx_fifo_num = i;
 800559c:	7bfa      	ldrb	r2, [r7, #15]
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	b298      	uxth	r0, r3
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	4613      	mov	r3, r2
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	4413      	add	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	3344      	adds	r3, #68	@ 0x44
 80055b0:	4602      	mov	r2, r0
 80055b2:	801a      	strh	r2, [r3, #0]
        /* Control until ep is activated */
        hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80055b4:	7bfa      	ldrb	r2, [r7, #15]
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	3340      	adds	r3, #64	@ 0x40
 80055c4:	2200      	movs	r2, #0
 80055c6:	701a      	strb	r2, [r3, #0]
        hpcd->IN_ep[i].maxpacket = 0U;
 80055c8:	7bfa      	ldrb	r2, [r7, #15]
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	4613      	mov	r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	4413      	add	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	3348      	adds	r3, #72	@ 0x48
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
        hpcd->IN_ep[i].xfer_buff = 0U;
 80055dc:	7bfa      	ldrb	r2, [r7, #15]
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	4613      	mov	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	4413      	add	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	440b      	add	r3, r1
 80055ea:	334c      	adds	r3, #76	@ 0x4c
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
        hpcd->IN_ep[i].xfer_len = 0U;
 80055f0:	7bfa      	ldrb	r2, [r7, #15]
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	4613      	mov	r3, r2
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	4413      	add	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	440b      	add	r3, r1
 80055fe:	3354      	adds	r3, #84	@ 0x54
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	3301      	adds	r3, #1
 8005608:	73fb      	strb	r3, [r7, #15]
 800560a:	7bfa      	ldrb	r2, [r7, #15]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	429a      	cmp	r2, r3
 8005612:	d3af      	bcc.n	8005574 <HAL_PCD_Init+0xa2>
    }

    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8005614:	2300      	movs	r3, #0
 8005616:	73fb      	strb	r3, [r7, #15]
 8005618:	e044      	b.n	80056a4 <HAL_PCD_Init+0x1d2>
        hpcd->OUT_ep[i].is_in = 0U;
 800561a:	7bfa      	ldrb	r2, [r7, #15]
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	4613      	mov	r3, r2
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	4413      	add	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	440b      	add	r3, r1
 8005628:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800562c:	2200      	movs	r2, #0
 800562e:	701a      	strb	r2, [r3, #0]
        hpcd->OUT_ep[i].num = i;
 8005630:	7bfa      	ldrb	r2, [r7, #15]
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	4613      	mov	r3, r2
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	4413      	add	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8005642:	7bfa      	ldrb	r2, [r7, #15]
 8005644:	701a      	strb	r2, [r3, #0]
        /* Control until ep is activated */
        hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005646:	7bfa      	ldrb	r2, [r7, #15]
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	00db      	lsls	r3, r3, #3
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8005658:	2200      	movs	r2, #0
 800565a:	701a      	strb	r2, [r3, #0]
        hpcd->OUT_ep[i].maxpacket = 0U;
 800565c:	7bfa      	ldrb	r2, [r7, #15]
 800565e:	6879      	ldr	r1, [r7, #4]
 8005660:	4613      	mov	r3, r2
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	4413      	add	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	440b      	add	r3, r1
 800566a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]
        hpcd->OUT_ep[i].xfer_buff = 0U;
 8005672:	7bfa      	ldrb	r2, [r7, #15]
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	4613      	mov	r3, r2
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	4413      	add	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	440b      	add	r3, r1
 8005680:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]
        hpcd->OUT_ep[i].xfer_len = 0U;
 8005688:	7bfa      	ldrb	r2, [r7, #15]
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	4613      	mov	r3, r2
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	4413      	add	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	440b      	add	r3, r1
 8005696:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800569a:	2200      	movs	r2, #0
 800569c:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 800569e:	7bfb      	ldrb	r3, [r7, #15]
 80056a0:	3301      	adds	r3, #1
 80056a2:	73fb      	strb	r3, [r7, #15]
 80056a4:	7bfa      	ldrb	r2, [r7, #15]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d3b5      	bcc.n	800561a <HAL_PCD_Init+0x148>
    }

    /* Init Device */
    if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK) {
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	687e      	ldr	r6, [r7, #4]
 80056b6:	466d      	mov	r5, sp
 80056b8:	f106 0410 	add.w	r4, r6, #16
 80056bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80056c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80056cc:	1d33      	adds	r3, r6, #4
 80056ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056d0:	6838      	ldr	r0, [r7, #0]
 80056d2:	f003 f8e5 	bl	80088a0 <USB_DevInit>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_PCD_Init+0x216>
        hpcd->State = HAL_PCD_STATE_ERROR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
        return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e00d      	b.n	8005704 <HAL_PCD_Init+0x232>
    }

    hpcd->USB_Address = 0U;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    hpcd->State = HAL_PCD_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    /* Activate LPM */
    if (hpcd->Init.lpm_enable == 1U) {
        (void)HAL_PCDEx_ActivateLPM(hpcd);
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    (void)USB_DevDisconnect(hpcd->Instance);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f004 fa34 	bl	8009b6a <USB_DevDisconnect>

    return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800570c <HAL_PCD_Start>:
/**
 * @brief  Start the USB device
 * @param  hpcd PCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef * hpcd) {
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	60fb      	str	r3, [r7, #12]

    __HAL_LOCK(hpcd);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_PCD_Start+0x1c>
 8005724:	2302      	movs	r3, #2
 8005726:	e020      	b.n	800576a <HAL_PCD_Start+0x5e>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    if ((hpcd->Init.battery_charging_enable == 1U) && (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY)) {
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005734:	2b01      	cmp	r3, #1
 8005736:	d109      	bne.n	800574c <HAL_PCD_Start+0x40>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d005      	beq.n	800574c <HAL_PCD_Start+0x40>
        /* Enable USB Transceiver */
        USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005744:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    __HAL_PCD_ENABLE(hpcd);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4618      	mov	r0, r3
 8005752:	f003 f837 	bl	80087c4 <USB_EnableGlobalInt>
    (void)USB_DevConnect(hpcd->Instance);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f004 f9e4 	bl	8009b28 <USB_DevConnect>
    __HAL_UNLOCK(hpcd);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <HAL_PCD_IRQHandler>:
/**
 * @brief  Handles PCD interrupt request.
 * @param  hpcd PCD handle
 * @retval HAL status
 */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef * hpcd) {
 8005772:	b590      	push	{r4, r7, lr}
 8005774:	b08d      	sub	sp, #52	@ 0x34
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	623b      	str	r3, [r7, #32]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	61fb      	str	r3, [r7, #28]
    uint32_t epnum;
    uint32_t fifoemptymsk;
    uint32_t RegVal;

    /* ensure that we are in device mode */
    if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE) {
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4618      	mov	r0, r3
 800578a:	f004 faa2 	bl	8009cd2 <USB_GetMode>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	f040 848a 	bne.w	80060aa <HAL_PCD_IRQHandler+0x938>
        /* avoid spurious interrupt */
        if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) {
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4618      	mov	r0, r3
 800579c:	f004 fa06 	bl	8009bac <USB_ReadInterrupts>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 8480 	beq.w	80060a8 <HAL_PCD_IRQHandler+0x936>
            return;
        }

        /* store current frame number */
        hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	0a1b      	lsrs	r3, r3, #8
 80057b2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS)) {
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f004 f9f3 	bl	8009bac <USB_ReadInterrupts>
 80057c6:	4603      	mov	r3, r0
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d107      	bne.n	80057e0 <HAL_PCD_IRQHandler+0x6e>
            /* incorrect mode, acknowledge the interrupt */
            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695a      	ldr	r2, [r3, #20]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f002 0202 	and.w	r2, r2, #2
 80057de:	615a      	str	r2, [r3, #20]
        }

        /* Handle RxQLevel Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL)) {
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f004 f9e1 	bl	8009bac <USB_ReadInterrupts>
 80057ea:	4603      	mov	r3, r0
 80057ec:	f003 0310 	and.w	r3, r3, #16
 80057f0:	2b10      	cmp	r3, #16
 80057f2:	d161      	bne.n	80058b8 <HAL_PCD_IRQHandler+0x146>
            USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0210 	bic.w	r2, r2, #16
 8005802:	619a      	str	r2, [r3, #24]

            RegVal = USBx->GRXSTSP;
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	61bb      	str	r3, [r7, #24]

            ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	f003 020f 	and.w	r2, r3, #15
 8005810:	4613      	mov	r3, r2
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	4413      	add	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	4413      	add	r3, r2
 8005820:	3304      	adds	r3, #4
 8005822:	617b      	str	r3, [r7, #20]

            if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_DATA_UPDT) {
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	0c5b      	lsrs	r3, r3, #17
 8005828:	f003 030f 	and.w	r3, r3, #15
 800582c:	2b02      	cmp	r3, #2
 800582e:	d124      	bne.n	800587a <HAL_PCD_IRQHandler+0x108>
                if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U) {
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005836:	4013      	ands	r3, r2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d035      	beq.n	80058a8 <HAL_PCD_IRQHandler+0x136>
                    (void)USB_ReadPacket(USBx, ep->xfer_buff, (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	6919      	ldr	r1, [r3, #16]
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	091b      	lsrs	r3, r3, #4
 8005844:	b29b      	uxth	r3, r3
 8005846:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800584a:	b29b      	uxth	r3, r3
 800584c:	461a      	mov	r2, r3
 800584e:	6a38      	ldr	r0, [r7, #32]
 8005850:	f004 f818 	bl	8009884 <USB_ReadPacket>

                    ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	091b      	lsrs	r3, r3, #4
 800585c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005860:	441a      	add	r2, r3
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	611a      	str	r2, [r3, #16]
                    ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	6a1a      	ldr	r2, [r3, #32]
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	091b      	lsrs	r3, r3, #4
 800586e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005872:	441a      	add	r2, r3
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	621a      	str	r2, [r3, #32]
 8005878:	e016      	b.n	80058a8 <HAL_PCD_IRQHandler+0x136>
                }
            } else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT) {
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	0c5b      	lsrs	r3, r3, #17
 800587e:	f003 030f 	and.w	r3, r3, #15
 8005882:	2b06      	cmp	r3, #6
 8005884:	d110      	bne.n	80058a8 <HAL_PCD_IRQHandler+0x136>
                (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800588c:	2208      	movs	r2, #8
 800588e:	4619      	mov	r1, r3
 8005890:	6a38      	ldr	r0, [r7, #32]
 8005892:	f003 fff7 	bl	8009884 <USB_ReadPacket>
                ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	6a1a      	ldr	r2, [r3, #32]
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	091b      	lsrs	r3, r3, #4
 800589e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058a2:	441a      	add	r2, r3
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	621a      	str	r2, [r3, #32]
            } else {
                /* ... */
            }

            USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0210 	orr.w	r2, r2, #16
 80058b6:	619a      	str	r2, [r3, #24]
        }

        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT)) {
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4618      	mov	r0, r3
 80058be:	f004 f975 	bl	8009bac <USB_ReadInterrupts>
 80058c2:	4603      	mov	r3, r0
 80058c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058c8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80058cc:	f040 80a7 	bne.w	8005a1e <HAL_PCD_IRQHandler+0x2ac>
            epnum = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Read in the device interrupt bits */
            ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4618      	mov	r0, r3
 80058da:	f004 f97a 	bl	8009bd2 <USB_ReadDevAllOutEpInterrupt>
 80058de:	62b8      	str	r0, [r7, #40]	@ 0x28

            while (ep_intr != 0U) {
 80058e0:	e099      	b.n	8005a16 <HAL_PCD_IRQHandler+0x2a4>
                if ((ep_intr & 0x1U) != 0U) {
 80058e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 808e 	beq.w	8005a0a <HAL_PCD_IRQHandler+0x298>
                    epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	4611      	mov	r1, r2
 80058f8:	4618      	mov	r0, r3
 80058fa:	f004 f99e 	bl	8009c3a <USB_ReadDevOutEPInterrupt>
 80058fe:	6138      	str	r0, [r7, #16]

                    if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC) {
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00c      	beq.n	8005924 <HAL_PCD_IRQHandler+0x1b2>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005916:	461a      	mov	r2, r3
 8005918:	2301      	movs	r3, #1
 800591a:	6093      	str	r3, [r2, #8]
                        (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800591c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 fec2 	bl	80066a8 <PCD_EP_OutXfrComplete_int>
                    }

                    if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) {
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00c      	beq.n	8005948 <HAL_PCD_IRQHandler+0x1d6>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800592e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	4413      	add	r3, r2
 8005936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800593a:	461a      	mov	r2, r3
 800593c:	2308      	movs	r3, #8
 800593e:	6093      	str	r3, [r2, #8]
                        /* Class B setup phase done for previous decoded setup */
                        (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005940:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 ff98 	bl	8006878 <PCD_EP_OutSetupPacket_int>
                    }

                    if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS) {
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f003 0310 	and.w	r3, r3, #16
 800594e:	2b00      	cmp	r3, #0
 8005950:	d008      	beq.n	8005964 <HAL_PCD_IRQHandler+0x1f2>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800595e:	461a      	mov	r2, r3
 8005960:	2310      	movs	r3, #16
 8005962:	6093      	str	r3, [r2, #8]
                    }

                    /* Clear OUT Endpoint disable interrupt */
                    if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD) {
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d030      	beq.n	80059d0 <HAL_PCD_IRQHandler+0x25e>
                        if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF) {
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005976:	2b80      	cmp	r3, #128	@ 0x80
 8005978:	d109      	bne.n	800598e <HAL_PCD_IRQHandler+0x21c>
                            USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	69fa      	ldr	r2, [r7, #28]
 8005984:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005988:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800598c:	6053      	str	r3, [r2, #4]
                        }

                        ep = &hpcd->OUT_ep[epnum];
 800598e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005990:	4613      	mov	r3, r2
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	4413      	add	r3, r2
 80059a0:	3304      	adds	r3, #4
 80059a2:	617b      	str	r3, [r7, #20]

                        if (ep->is_iso_incomplete == 1U) {
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	78db      	ldrb	r3, [r3, #3]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d108      	bne.n	80059be <HAL_PCD_IRQHandler+0x24c>
                            ep->is_iso_incomplete = 0U;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2200      	movs	r2, #0
 80059b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                            hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
                            HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80059b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	4619      	mov	r1, r3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f009 f965 	bl	800ec88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
                        }

                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80059be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ca:	461a      	mov	r2, r3
 80059cc:	2302      	movs	r3, #2
 80059ce:	6093      	str	r3, [r2, #8]
                    }

                    /* Clear Status Phase Received interrupt */
                    if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) {
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f003 0320 	and.w	r3, r3, #32
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d008      	beq.n	80059ec <HAL_PCD_IRQHandler+0x27a>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80059da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059e6:	461a      	mov	r2, r3
 80059e8:	2320      	movs	r3, #32
 80059ea:	6093      	str	r3, [r2, #8]
                    }

                    /* Clear OUT NAK interrupt */
                    if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK) {
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d009      	beq.n	8005a0a <HAL_PCD_IRQHandler+0x298>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80059f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a02:	461a      	mov	r2, r3
 8005a04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005a08:	6093      	str	r3, [r2, #8]
                    }
                }
                epnum++;
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	627b      	str	r3, [r7, #36]	@ 0x24
                ep_intr >>= 1U;
 8005a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a12:	085b      	lsrs	r3, r3, #1
 8005a14:	62bb      	str	r3, [r7, #40]	@ 0x28
            while (ep_intr != 0U) {
 8005a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f47f af62 	bne.w	80058e2 <HAL_PCD_IRQHandler+0x170>
            }
        }

        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT)) {
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f004 f8c2 	bl	8009bac <USB_ReadInterrupts>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a2e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a32:	f040 80db 	bne.w	8005bec <HAL_PCD_IRQHandler+0x47a>
            /* Read in the device interrupt bits */
            ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f004 f8e3 	bl	8009c06 <USB_ReadDevAllInEpInterrupt>
 8005a40:	62b8      	str	r0, [r7, #40]	@ 0x28

            epnum = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	627b      	str	r3, [r7, #36]	@ 0x24

            while (ep_intr != 0U) {
 8005a46:	e0cd      	b.n	8005be4 <HAL_PCD_IRQHandler+0x472>
                if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 80c2 	beq.w	8005bd8 <HAL_PCD_IRQHandler+0x466>
                {
                    epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f004 f909 	bl	8009c76 <USB_ReadDevInEPInterrupt>
 8005a64:	6138      	str	r0, [r7, #16]

                    if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC) {
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d057      	beq.n	8005b20 <HAL_PCD_IRQHandler+0x3ae>
                        fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	2201      	movs	r2, #1
 8005a78:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7c:	60fb      	str	r3, [r7, #12]
                        USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	43db      	mvns	r3, r3
 8005a8a:	69f9      	ldr	r1, [r7, #28]
 8005a8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a90:	4013      	ands	r3, r2
 8005a92:	634b      	str	r3, [r1, #52]	@ 0x34

                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	6093      	str	r3, [r2, #8]

                        if (hpcd->Init.dma_enable == 1U) {
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d132      	bne.n	8005b14 <HAL_PCD_IRQHandler+0x3a2>
                            hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	334c      	adds	r3, #76	@ 0x4c
 8005abe:	6819      	ldr	r1, [r3, #0]
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	4413      	add	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4403      	add	r3, r0
 8005ace:	3348      	adds	r3, #72	@ 0x48
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4419      	add	r1, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ad8:	4613      	mov	r3, r2
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	4413      	add	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4403      	add	r3, r0
 8005ae2:	334c      	adds	r3, #76	@ 0x4c
 8005ae4:	6019      	str	r1, [r3, #0]

                            /* this is ZLP, so prepare EP0 for next setup */
                            if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U)) {
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d113      	bne.n	8005b14 <HAL_PCD_IRQHandler+0x3a2>
 8005aec:	6879      	ldr	r1, [r7, #4]
 8005aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af0:	4613      	mov	r3, r2
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	4413      	add	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	440b      	add	r3, r1
 8005afa:	3354      	adds	r3, #84	@ 0x54
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d108      	bne.n	8005b14 <HAL_PCD_IRQHandler+0x3a2>
                                /* prepare to rx more setup packets */
                                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6818      	ldr	r0, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	2101      	movs	r1, #1
 8005b10:	f004 f910 	bl	8009d34 <USB_EP0_OutStart>
                        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                        hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
                        HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	4619      	mov	r1, r3
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f009 f839 	bl	800eb92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
                    }
                    if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC) {
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d008      	beq.n	8005b3c <HAL_PCD_IRQHandler+0x3ca>
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b36:	461a      	mov	r2, r3
 8005b38:	2308      	movs	r3, #8
 8005b3a:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE) {
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f003 0310 	and.w	r3, r3, #16
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d008      	beq.n	8005b58 <HAL_PCD_IRQHandler+0x3e6>
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b52:	461a      	mov	r2, r3
 8005b54:	2310      	movs	r3, #16
 8005b56:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE) {
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d008      	beq.n	8005b74 <HAL_PCD_IRQHandler+0x402>
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b6e:	461a      	mov	r2, r3
 8005b70:	2340      	movs	r3, #64	@ 0x40
 8005b72:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD) {
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d023      	beq.n	8005bc6 <HAL_PCD_IRQHandler+0x454>
                        (void)USB_FlushTxFifo(USBx, epnum);
 8005b7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b80:	6a38      	ldr	r0, [r7, #32]
 8005b82:	f002 fff1 	bl	8008b68 <USB_FlushTxFifo>

                        ep = &hpcd->IN_ep[epnum];
 8005b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b88:	4613      	mov	r3, r2
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	3338      	adds	r3, #56	@ 0x38
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	4413      	add	r3, r2
 8005b96:	3304      	adds	r3, #4
 8005b98:	617b      	str	r3, [r7, #20]

                        if (ep->is_iso_incomplete == 1U) {
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	78db      	ldrb	r3, [r3, #3]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d108      	bne.n	8005bb4 <HAL_PCD_IRQHandler+0x442>
                            ep->is_iso_incomplete = 0U;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                            hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
                            HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f009 f87c 	bl	800ecac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
                        }

                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE) {
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <HAL_PCD_IRQHandler+0x466>
                        (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005bd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fcdb 	bl	800658e <PCD_WriteEmptyTxFifo>
                    }
                }
                epnum++;
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bda:	3301      	adds	r3, #1
 8005bdc:	627b      	str	r3, [r7, #36]	@ 0x24
                ep_intr >>= 1U;
 8005bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be0:	085b      	lsrs	r3, r3, #1
 8005be2:	62bb      	str	r3, [r7, #40]	@ 0x28
            while (ep_intr != 0U) {
 8005be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f47f af2e 	bne.w	8005a48 <HAL_PCD_IRQHandler+0x2d6>
            }
        }

        /* Handle Resume Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT)) {
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f003 ffdb 	bl	8009bac <USB_ReadInterrupts>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c00:	d122      	bne.n	8005c48 <HAL_PCD_IRQHandler+0x4d6>
            /* Clear the Remote Wake-up Signaling */
            USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c10:	f023 0301 	bic.w	r3, r3, #1
 8005c14:	6053      	str	r3, [r2, #4]

            if (hpcd->LPM_State == LPM_L1) {
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d108      	bne.n	8005c32 <HAL_PCD_IRQHandler+0x4c0>
                hpcd->LPM_State = LPM_L0;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
                HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005c28:	2100      	movs	r1, #0
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fec2 	bl	80069b4 <HAL_PCDEx_LPM_Callback>
 8005c30:	e002      	b.n	8005c38 <HAL_PCD_IRQHandler+0x4c6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            } else {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->ResumeCallback(hpcd);
#else
                HAL_PCD_ResumeCallback(hpcd);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f009 f81a 	bl	800ec6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	695a      	ldr	r2, [r3, #20]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005c46:	615a      	str	r2, [r3, #20]
        }

        /* Handle Suspend Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP)) {
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f003 ffad 	bl	8009bac <USB_ReadInterrupts>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c5c:	d112      	bne.n	8005c84 <HAL_PCD_IRQHandler+0x512>
            if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS) {
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d102      	bne.n	8005c74 <HAL_PCD_IRQHandler+0x502>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->SuspendCallback(hpcd);
#else
                HAL_PCD_SuspendCallback(hpcd);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f008 ffd6 	bl	800ec20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	695a      	ldr	r2, [r3, #20]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005c82:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
        }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
        /* Handle Reset Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST)) {
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f003 ff8f 	bl	8009bac <USB_ReadInterrupts>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c98:	f040 80b7 	bne.w	8005e0a <HAL_PCD_IRQHandler+0x698>
            USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005caa:	f023 0301 	bic.w	r3, r3, #1
 8005cae:	6053      	str	r3, [r2, #4]
            (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2110      	movs	r1, #16
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f002 ff56 	bl	8008b68 <USB_FlushTxFifo>

            for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cc0:	e046      	b.n	8005d50 <HAL_PCD_IRQHandler+0x5de>
                USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005cd4:	6093      	str	r3, [r2, #8]
                USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ce6:	0151      	lsls	r1, r2, #5
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	440a      	add	r2, r1
 8005cec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cf0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005cf4:	6013      	str	r3, [r2, #0]
                USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d02:	461a      	mov	r2, r3
 8005d04:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d08:	6093      	str	r3, [r2, #8]
                USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d1a:	0151      	lsls	r1, r2, #5
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	440a      	add	r2, r1
 8005d20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d24:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d28:	6013      	str	r3, [r2, #0]
                USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d3a:	0151      	lsls	r1, r2, #5
 8005d3c:	69fa      	ldr	r2, [r7, #28]
 8005d3e:	440a      	add	r2, r1
 8005d40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d44:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d48:	6013      	str	r3, [r2, #0]
            for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8005d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d3b3      	bcc.n	8005cc2 <HAL_PCD_IRQHandler+0x550>
            }
            USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	69fa      	ldr	r2, [r7, #28]
 8005d64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d68:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005d6c:	61d3      	str	r3, [r2, #28]

            if (hpcd->Init.use_dedicated_ep1 != 0U) {
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d016      	beq.n	8005da4 <HAL_PCD_IRQHandler+0x632>
                USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM;
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d80:	69fa      	ldr	r2, [r7, #28]
 8005d82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d86:	f043 030b 	orr.w	r3, r3, #11
 8005d8a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

                USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM;
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d9c:	f043 030b 	orr.w	r3, r3, #11
 8005da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8005da2:	e015      	b.n	8005dd0 <HAL_PCD_IRQHandler+0x65e>
            } else {
                USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM | USB_OTG_DOEPMSK_NAKM;
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	69fa      	ldr	r2, [r7, #28]
 8005dae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005db2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005db6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005dba:	6153      	str	r3, [r2, #20]

                USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM;
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	69fa      	ldr	r2, [r7, #28]
 8005dc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005dca:	f043 030b 	orr.w	r3, r3, #11
 8005dce:	6113      	str	r3, [r2, #16]
            }

            /* Set Default Address to 0 */
            USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005dde:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005de2:	6013      	str	r3, [r2, #0]

            /* setup EP0 to receive SETUP packets */
            (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6818      	ldr	r0, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	b2d9      	uxtb	r1, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005df4:	461a      	mov	r2, r3
 8005df6:	f003 ff9d 	bl	8009d34 <USB_EP0_OutStart>

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	695a      	ldr	r2, [r3, #20]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005e08:	615a      	str	r2, [r3, #20]
        }

        /* Handle Enumeration done Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE)) {
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f003 fecc 	bl	8009bac <USB_ReadInterrupts>
 8005e14:	4603      	mov	r3, r0
 8005e16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e1e:	d124      	bne.n	8005e6a <HAL_PCD_IRQHandler+0x6f8>
            (void)USB_ActivateSetup(hpcd->Instance);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f003 ff62 	bl	8009cee <USB_ActivateSetup>
            hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f002 ff17 	bl	8008c62 <USB_GetDevSpeed>
 8005e34:	4603      	mov	r3, r0
 8005e36:	461a      	mov	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	60da      	str	r2, [r3, #12]

            /* Set USB Turnaround time */
            (void)USB_SetTurnaroundTime(hpcd->Instance, HAL_RCC_GetHCLKFreq(), (uint8_t)hpcd->Init.speed);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681c      	ldr	r4, [r3, #0]
 8005e40:	f001 f9e8 	bl	8007214 <HAL_RCC_GetHCLKFreq>
 8005e44:	4601      	mov	r1, r0
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f002 fc16 	bl	8008680 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->ResetCallback(hpcd);
#else
            HAL_PCD_ResetCallback(hpcd);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f008 fec4 	bl	800ebe2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695a      	ldr	r2, [r3, #20]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005e68:	615a      	str	r2, [r3, #20]
        }

        /* Handle SOF Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF)) {
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f003 fe9c 	bl	8009bac <USB_ReadInterrupts>
 8005e74:	4603      	mov	r3, r0
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b08      	cmp	r3, #8
 8005e7c:	d10a      	bne.n	8005e94 <HAL_PCD_IRQHandler+0x722>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->SOFCallback(hpcd);
#else
            HAL_PCD_SOFCallback(hpcd);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f008 fea1 	bl	800ebc6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	695a      	ldr	r2, [r3, #20]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f002 0208 	and.w	r2, r2, #8
 8005e92:	615a      	str	r2, [r3, #20]
        }

        /* Handle Global OUT NAK effective Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF)) {
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f003 fe87 	bl	8009bac <USB_ReadInterrupts>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ea4:	2b80      	cmp	r3, #128	@ 0x80
 8005ea6:	d122      	bne.n	8005eee <HAL_PCD_IRQHandler+0x77c>
            USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	619a      	str	r2, [r3, #24]

            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eb8:	e014      	b.n	8005ee4 <HAL_PCD_IRQHandler+0x772>
                if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U) {
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	4413      	add	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	440b      	add	r3, r1
 8005ec8:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d105      	bne.n	8005ede <HAL_PCD_IRQHandler+0x76c>
                    /* Abort current transaction and disable the EP */
                    (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fb27 	bl	800652c <HAL_PCD_EP_Abort>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8005ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d3e5      	bcc.n	8005eba <HAL_PCD_IRQHandler+0x748>
                }
            }
        }

        /* Handle Incomplete ISO IN Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR)) {
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f003 fe5a 	bl	8009bac <USB_ReadInterrupts>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005efe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f02:	d13b      	bne.n	8005f7c <HAL_PCD_IRQHandler+0x80a>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8005f04:	2301      	movs	r3, #1
 8005f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f08:	e02b      	b.n	8005f62 <HAL_PCD_IRQHandler+0x7f0>
                RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	61bb      	str	r3, [r7, #24]

                if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) && ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)) {
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f1e:	4613      	mov	r3, r2
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	4413      	add	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	440b      	add	r3, r1
 8005f28:	3340      	adds	r3, #64	@ 0x40
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d115      	bne.n	8005f5c <HAL_PCD_IRQHandler+0x7ea>
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	da12      	bge.n	8005f5c <HAL_PCD_IRQHandler+0x7ea>
                    hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	4413      	add	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	440b      	add	r3, r1
 8005f44:	333f      	adds	r3, #63	@ 0x3f
 8005f46:	2201      	movs	r2, #1
 8005f48:	701a      	strb	r2, [r3, #0]

                    /* Abort current transaction and disable the EP */
                    (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	4619      	mov	r1, r3
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fae8 	bl	800652c <HAL_PCD_EP_Abort>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5e:	3301      	adds	r3, #1
 8005f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d3ce      	bcc.n	8005f0a <HAL_PCD_IRQHandler+0x798>
                }
            }

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695a      	ldr	r2, [r3, #20]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005f7a:	615a      	str	r2, [r3, #20]
        }

        /* Handle Incomplete ISO OUT Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT)) {
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f003 fe13 	bl	8009bac <USB_ReadInterrupts>
 8005f86:	4603      	mov	r3, r0
 8005f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f90:	d155      	bne.n	800603e <HAL_PCD_IRQHandler+0x8cc>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8005f92:	2301      	movs	r3, #1
 8005f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f96:	e045      	b.n	8006024 <HAL_PCD_IRQHandler+0x8b2>
                RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	61bb      	str	r3, [r7, #24]

                if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) && ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) && ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U))) {
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fac:	4613      	mov	r3, r2
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	440b      	add	r3, r1
 8005fb6:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d12e      	bne.n	800601e <HAL_PCD_IRQHandler+0x8ac>
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	da2b      	bge.n	800601e <HAL_PCD_IRQHandler+0x8ac>
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d121      	bne.n	800601e <HAL_PCD_IRQHandler+0x8ac>
                    hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005fda:	6879      	ldr	r1, [r7, #4]
 8005fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fde:	4613      	mov	r3, r2
 8005fe0:	00db      	lsls	r3, r3, #3
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	440b      	add	r3, r1
 8005fe8:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8005fec:	2201      	movs	r2, #1
 8005fee:	701a      	strb	r2, [r3, #0]

                    USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	619a      	str	r2, [r3, #24]

                    if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U) {
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10a      	bne.n	800601e <HAL_PCD_IRQHandler+0x8ac>
                        USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006016:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800601a:	6053      	str	r3, [r2, #4]
                        break;
 800601c:	e007      	b.n	800602e <HAL_PCD_IRQHandler+0x8bc>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 800601e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006020:	3301      	adds	r3, #1
 8006022:	627b      	str	r3, [r7, #36]	@ 0x24
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800602a:	429a      	cmp	r2, r3
 800602c:	d3b4      	bcc.n	8005f98 <HAL_PCD_IRQHandler+0x826>
                    }
                }
            }

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	695a      	ldr	r2, [r3, #20]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800603c:	615a      	str	r2, [r3, #20]
        }

        /* Handle Connection event Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT)) {
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4618      	mov	r0, r3
 8006044:	f003 fdb2 	bl	8009bac <USB_ReadInterrupts>
 8006048:	4603      	mov	r3, r0
 800604a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800604e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006052:	d10a      	bne.n	800606a <HAL_PCD_IRQHandler+0x8f8>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->ConnectCallback(hpcd);
#else
            HAL_PCD_ConnectCallback(hpcd);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f008 fe3b 	bl	800ecd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	695a      	ldr	r2, [r3, #20]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006068:	615a      	str	r2, [r3, #20]
        }

        /* Handle Disconnection event Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT)) {
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4618      	mov	r0, r3
 8006070:	f003 fd9c 	bl	8009bac <USB_ReadInterrupts>
 8006074:	4603      	mov	r3, r0
 8006076:	f003 0304 	and.w	r3, r3, #4
 800607a:	2b04      	cmp	r3, #4
 800607c:	d115      	bne.n	80060aa <HAL_PCD_IRQHandler+0x938>
            RegVal = hpcd->Instance->GOTGINT;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	61bb      	str	r3, [r7, #24]

            if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET) {
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	f003 0304 	and.w	r3, r3, #4
 800608c:	2b00      	cmp	r3, #0
 800608e:	d002      	beq.n	8006096 <HAL_PCD_IRQHandler+0x924>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->DisconnectCallback(hpcd);
#else
                HAL_PCD_DisconnectCallback(hpcd);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f008 fe2b 	bl	800ecec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            hpcd->Instance->GOTGINT |= RegVal;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6859      	ldr	r1, [r3, #4]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	605a      	str	r2, [r3, #4]
 80060a6:	e000      	b.n	80060aa <HAL_PCD_IRQHandler+0x938>
            return;
 80060a8:	bf00      	nop
        }
    }
}
 80060aa:	3734      	adds	r7, #52	@ 0x34
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd90      	pop	{r4, r7, pc}

080060b0 <HAL_PCD_SetAddress>:
 * @brief  Set the USB Device address.
 * @param  hpcd PCD handle
 * @param  address new device address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef * hpcd, uint8_t address) {
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	70fb      	strb	r3, [r7, #3]
    __HAL_LOCK(hpcd);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d101      	bne.n	80060ca <HAL_PCD_SetAddress+0x1a>
 80060c6:	2302      	movs	r3, #2
 80060c8:	e013      	b.n	80060f2 <HAL_PCD_SetAddress+0x42>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    hpcd->USB_Address = address;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	78fa      	ldrb	r2, [r7, #3]
 80060d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    (void)USB_SetDevAddress(hpcd->Instance, address);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	78fa      	ldrb	r2, [r7, #3]
 80060e0:	4611      	mov	r1, r2
 80060e2:	4618      	mov	r0, r3
 80060e4:	f003 fcfa 	bl	8009adc <USB_SetDevAddress>
    __HAL_UNLOCK(hpcd);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_PCD_EP_Open>:
 * @param  ep_addr endpoint address
 * @param  ep_mps endpoint max packet size
 * @param  ep_type endpoint type
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef * hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type) {
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	4608      	mov	r0, r1
 8006104:	4611      	mov	r1, r2
 8006106:	461a      	mov	r2, r3
 8006108:	4603      	mov	r3, r0
 800610a:	70fb      	strb	r3, [r7, #3]
 800610c:	460b      	mov	r3, r1
 800610e:	803b      	strh	r3, [r7, #0]
 8006110:	4613      	mov	r3, r2
 8006112:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef ret = HAL_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	72fb      	strb	r3, [r7, #11]
    PCD_EPTypeDef * ep;

    if ((ep_addr & 0x80U) == 0x80U) {
 8006118:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800611c:	2b00      	cmp	r3, #0
 800611e:	da0f      	bge.n	8006140 <HAL_PCD_EP_Open+0x46>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006120:	78fb      	ldrb	r3, [r7, #3]
 8006122:	f003 020f 	and.w	r2, r3, #15
 8006126:	4613      	mov	r3, r2
 8006128:	00db      	lsls	r3, r3, #3
 800612a:	4413      	add	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	3338      	adds	r3, #56	@ 0x38
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	4413      	add	r3, r2
 8006134:	3304      	adds	r3, #4
 8006136:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2201      	movs	r2, #1
 800613c:	705a      	strb	r2, [r3, #1]
 800613e:	e00f      	b.n	8006160 <HAL_PCD_EP_Open+0x66>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	f003 020f 	and.w	r2, r3, #15
 8006146:	4613      	mov	r3, r2
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	4413      	add	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	4413      	add	r3, r2
 8006156:	3304      	adds	r3, #4
 8006158:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	705a      	strb	r2, [r3, #1]
    }

    ep->num = ep_addr & EP_ADDR_MSK;
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	f003 030f 	and.w	r3, r3, #15
 8006166:	b2da      	uxtb	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	701a      	strb	r2, [r3, #0]
    ep->maxpacket = ep_mps;
 800616c:	883a      	ldrh	r2, [r7, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	60da      	str	r2, [r3, #12]
    ep->type = ep_type;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	78ba      	ldrb	r2, [r7, #2]
 8006176:	711a      	strb	r2, [r3, #4]

    if (ep->is_in != 0U) {
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	785b      	ldrb	r3, [r3, #1]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d004      	beq.n	800618a <HAL_PCD_EP_Open+0x90>
        /* Assign a Tx FIFO */
        ep->tx_fifo_num = ep->num;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	811a      	strh	r2, [r3, #8]
    }
    /* Set initial data PID. */
    if (ep_type == EP_TYPE_BULK) {
 800618a:	78bb      	ldrb	r3, [r7, #2]
 800618c:	2b02      	cmp	r3, #2
 800618e:	d102      	bne.n	8006196 <HAL_PCD_EP_Open+0x9c>
        ep->data_pid_start = 0U;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	715a      	strb	r2, [r3, #5]
    }

    __HAL_LOCK(hpcd);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800619c:	2b01      	cmp	r3, #1
 800619e:	d101      	bne.n	80061a4 <HAL_PCD_EP_Open+0xaa>
 80061a0:	2302      	movs	r3, #2
 80061a2:	e00e      	b.n	80061c2 <HAL_PCD_EP_Open+0xc8>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68f9      	ldr	r1, [r7, #12]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f002 fd7a 	bl	8008cac <USB_ActivateEndpoint>
    __HAL_UNLOCK(hpcd);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    return ret;
 80061c0:	7afb      	ldrb	r3, [r7, #11]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <HAL_PCD_EP_Close>:
 * @brief  Deactivate an endpoint.
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b084      	sub	sp, #16
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	460b      	mov	r3, r1
 80061d4:	70fb      	strb	r3, [r7, #3]
    PCD_EPTypeDef * ep;

    if ((ep_addr & 0x80U) == 0x80U) {
 80061d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	da0f      	bge.n	80061fe <HAL_PCD_EP_Close+0x34>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061de:	78fb      	ldrb	r3, [r7, #3]
 80061e0:	f003 020f 	and.w	r2, r3, #15
 80061e4:	4613      	mov	r3, r2
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	4413      	add	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	3338      	adds	r3, #56	@ 0x38
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	4413      	add	r3, r2
 80061f2:	3304      	adds	r3, #4
 80061f4:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2201      	movs	r2, #1
 80061fa:	705a      	strb	r2, [r3, #1]
 80061fc:	e00f      	b.n	800621e <HAL_PCD_EP_Close+0x54>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061fe:	78fb      	ldrb	r3, [r7, #3]
 8006200:	f003 020f 	and.w	r2, r3, #15
 8006204:	4613      	mov	r3, r2
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	4413      	add	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	4413      	add	r3, r2
 8006214:	3304      	adds	r3, #4
 8006216:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	705a      	strb	r2, [r3, #1]
    }
    ep->num = ep_addr & EP_ADDR_MSK;
 800621e:	78fb      	ldrb	r3, [r7, #3]
 8006220:	f003 030f 	and.w	r3, r3, #15
 8006224:	b2da      	uxtb	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	701a      	strb	r2, [r3, #0]

    __HAL_LOCK(hpcd);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8006230:	2b01      	cmp	r3, #1
 8006232:	d101      	bne.n	8006238 <HAL_PCD_EP_Close+0x6e>
 8006234:	2302      	movs	r3, #2
 8006236:	e00e      	b.n	8006256 <HAL_PCD_EP_Close+0x8c>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68f9      	ldr	r1, [r7, #12]
 8006246:	4618      	mov	r0, r3
 8006248:	f002 fdb8 	bl	8008dbc <USB_DeactivateEndpoint>
    __HAL_UNLOCK(hpcd);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <HAL_PCD_EP_Receive>:
 * @param  ep_addr endpoint address
 * @param  pBuf pointer to the reception buffer
 * @param  len amount of data to be received
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef * hpcd, uint8_t ep_addr, uint8_t * pBuf, uint32_t len) {
 800625e:	b580      	push	{r7, lr}
 8006260:	b086      	sub	sp, #24
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	607a      	str	r2, [r7, #4]
 8006268:	603b      	str	r3, [r7, #0]
 800626a:	460b      	mov	r3, r1
 800626c:	72fb      	strb	r3, [r7, #11]
    PCD_EPTypeDef * ep;

    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800626e:	7afb      	ldrb	r3, [r7, #11]
 8006270:	f003 020f 	and.w	r2, r3, #15
 8006274:	4613      	mov	r3, r2
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	4413      	add	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4413      	add	r3, r2
 8006284:	3304      	adds	r3, #4
 8006286:	617b      	str	r3, [r7, #20]

    /*setup and start the Xfer */
    ep->xfer_buff = pBuf;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	611a      	str	r2, [r3, #16]
    ep->xfer_len = len;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	619a      	str	r2, [r3, #24]
    ep->xfer_count = 0U;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2200      	movs	r2, #0
 8006298:	621a      	str	r2, [r3, #32]
    ep->is_in = 0U;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2200      	movs	r2, #0
 800629e:	705a      	strb	r2, [r3, #1]
    ep->num = ep_addr & EP_ADDR_MSK;
 80062a0:	7afb      	ldrb	r3, [r7, #11]
 80062a2:	f003 030f 	and.w	r3, r3, #15
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	701a      	strb	r2, [r3, #0]

    if (hpcd->Init.dma_enable == 1U) {
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d102      	bne.n	80062ba <HAL_PCD_EP_Receive+0x5c>
        ep->dma_addr = (uint32_t)pBuf;
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	615a      	str	r2, [r3, #20]
    }

    if ((ep_addr & EP_ADDR_MSK) == 0U) {
 80062ba:	7afb      	ldrb	r3, [r7, #11]
 80062bc:	f003 030f 	and.w	r3, r3, #15
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d109      	bne.n	80062d8 <HAL_PCD_EP_Receive+0x7a>
        (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6818      	ldr	r0, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	461a      	mov	r2, r3
 80062d0:	6979      	ldr	r1, [r7, #20]
 80062d2:	f003 f897 	bl	8009404 <USB_EP0StartXfer>
 80062d6:	e008      	b.n	80062ea <HAL_PCD_EP_Receive+0x8c>
    } else {
        (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6818      	ldr	r0, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	461a      	mov	r2, r3
 80062e4:	6979      	ldr	r1, [r7, #20]
 80062e6:	f002 fe45 	bl	8008f74 <USB_EPStartXfer>
    }

    return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_PCD_EP_GetRxCount>:
 * @brief  Get Received Data Size
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval Data Size
 */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	460b      	mov	r3, r1
 80062fe:	70fb      	strb	r3, [r7, #3]
    return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006300:	78fb      	ldrb	r3, [r7, #3]
 8006302:	f003 020f 	and.w	r2, r3, #15
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	4613      	mov	r3, r2
 800630a:	00db      	lsls	r3, r3, #3
 800630c:	4413      	add	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	440b      	add	r3, r1
 8006312:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8006316:	681b      	ldr	r3, [r3, #0]
}
 8006318:	4618      	mov	r0, r3
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <HAL_PCD_EP_Transmit>:
 * @param  ep_addr endpoint address
 * @param  pBuf pointer to the transmission buffer
 * @param  len amount of data to be sent
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef * hpcd, uint8_t ep_addr, uint8_t * pBuf, uint32_t len) {
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	607a      	str	r2, [r7, #4]
 800632e:	603b      	str	r3, [r7, #0]
 8006330:	460b      	mov	r3, r1
 8006332:	72fb      	strb	r3, [r7, #11]
    PCD_EPTypeDef * ep;

    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006334:	7afb      	ldrb	r3, [r7, #11]
 8006336:	f003 020f 	and.w	r2, r3, #15
 800633a:	4613      	mov	r3, r2
 800633c:	00db      	lsls	r3, r3, #3
 800633e:	4413      	add	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	3338      	adds	r3, #56	@ 0x38
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	3304      	adds	r3, #4
 800634a:	617b      	str	r3, [r7, #20]

    /*setup and start the Xfer */
    ep->xfer_buff = pBuf;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	611a      	str	r2, [r3, #16]
    ep->xfer_len = len;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	619a      	str	r2, [r3, #24]
    ep->xfer_count = 0U;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	2200      	movs	r2, #0
 800635c:	621a      	str	r2, [r3, #32]
    ep->is_in = 1U;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2201      	movs	r2, #1
 8006362:	705a      	strb	r2, [r3, #1]
    ep->num = ep_addr & EP_ADDR_MSK;
 8006364:	7afb      	ldrb	r3, [r7, #11]
 8006366:	f003 030f 	and.w	r3, r3, #15
 800636a:	b2da      	uxtb	r2, r3
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	701a      	strb	r2, [r3, #0]

    if (hpcd->Init.dma_enable == 1U) {
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d102      	bne.n	800637e <HAL_PCD_EP_Transmit+0x5a>
        ep->dma_addr = (uint32_t)pBuf;
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	615a      	str	r2, [r3, #20]
    }

    if ((ep_addr & EP_ADDR_MSK) == 0U) {
 800637e:	7afb      	ldrb	r3, [r7, #11]
 8006380:	f003 030f 	and.w	r3, r3, #15
 8006384:	2b00      	cmp	r3, #0
 8006386:	d109      	bne.n	800639c <HAL_PCD_EP_Transmit+0x78>
        (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	b2db      	uxtb	r3, r3
 8006392:	461a      	mov	r2, r3
 8006394:	6979      	ldr	r1, [r7, #20]
 8006396:	f003 f835 	bl	8009404 <USB_EP0StartXfer>
 800639a:	e008      	b.n	80063ae <HAL_PCD_EP_Transmit+0x8a>
    } else {
        (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6818      	ldr	r0, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	461a      	mov	r2, r3
 80063a8:	6979      	ldr	r1, [r7, #20]
 80063aa:	f002 fde3 	bl	8008f74 <USB_EPStartXfer>
    }

    return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_PCD_EP_SetStall>:
 * @brief  Set a STALL condition over an endpoint
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	460b      	mov	r3, r1
 80063c2:	70fb      	strb	r3, [r7, #3]
    PCD_EPTypeDef * ep;

    if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints) {
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	f003 020f 	and.w	r2, r3, #15
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d901      	bls.n	80063d6 <HAL_PCD_EP_SetStall+0x1e>
        return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e050      	b.n	8006478 <HAL_PCD_EP_SetStall+0xc0>
    }

    if ((0x80U & ep_addr) == 0x80U) {
 80063d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	da0f      	bge.n	80063fe <HAL_PCD_EP_SetStall+0x46>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063de:	78fb      	ldrb	r3, [r7, #3]
 80063e0:	f003 020f 	and.w	r2, r3, #15
 80063e4:	4613      	mov	r3, r2
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	4413      	add	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	3338      	adds	r3, #56	@ 0x38
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	4413      	add	r3, r2
 80063f2:	3304      	adds	r3, #4
 80063f4:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2201      	movs	r2, #1
 80063fa:	705a      	strb	r2, [r3, #1]
 80063fc:	e00d      	b.n	800641a <HAL_PCD_EP_SetStall+0x62>
    } else {
        ep = &hpcd->OUT_ep[ep_addr];
 80063fe:	78fa      	ldrb	r2, [r7, #3]
 8006400:	4613      	mov	r3, r2
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	4413      	add	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	4413      	add	r3, r2
 8006410:	3304      	adds	r3, #4
 8006412:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	705a      	strb	r2, [r3, #1]
    }

    ep->is_stall = 1U;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2201      	movs	r2, #1
 800641e:	709a      	strb	r2, [r3, #2]
    ep->num = ep_addr & EP_ADDR_MSK;
 8006420:	78fb      	ldrb	r3, [r7, #3]
 8006422:	f003 030f 	and.w	r3, r3, #15
 8006426:	b2da      	uxtb	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	701a      	strb	r2, [r3, #0]

    __HAL_LOCK(hpcd);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8006432:	2b01      	cmp	r3, #1
 8006434:	d101      	bne.n	800643a <HAL_PCD_EP_SetStall+0x82>
 8006436:	2302      	movs	r3, #2
 8006438:	e01e      	b.n	8006478 <HAL_PCD_EP_SetStall+0xc0>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    (void)USB_EPSetStall(hpcd->Instance, ep);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68f9      	ldr	r1, [r7, #12]
 8006448:	4618      	mov	r0, r3
 800644a:	f003 fa73 	bl	8009934 <USB_EPSetStall>

    if ((ep_addr & EP_ADDR_MSK) == 0U) {
 800644e:	78fb      	ldrb	r3, [r7, #3]
 8006450:	f003 030f 	and.w	r3, r3, #15
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10a      	bne.n	800646e <HAL_PCD_EP_SetStall+0xb6>
        (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6818      	ldr	r0, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	b2d9      	uxtb	r1, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006468:	461a      	mov	r2, r3
 800646a:	f003 fc63 	bl	8009d34 <USB_EP0_OutStart>
    }

    __HAL_UNLOCK(hpcd);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <HAL_PCD_EP_ClrStall>:
 * @brief  Clear a STALL condition over in an endpoint
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
    PCD_EPTypeDef * ep;

    if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints) {
 800648c:	78fb      	ldrb	r3, [r7, #3]
 800648e:	f003 020f 	and.w	r2, r3, #15
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	429a      	cmp	r2, r3
 8006498:	d901      	bls.n	800649e <HAL_PCD_EP_ClrStall+0x1e>
        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e042      	b.n	8006524 <HAL_PCD_EP_ClrStall+0xa4>
    }

    if ((0x80U & ep_addr) == 0x80U) {
 800649e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	da0f      	bge.n	80064c6 <HAL_PCD_EP_ClrStall+0x46>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064a6:	78fb      	ldrb	r3, [r7, #3]
 80064a8:	f003 020f 	and.w	r2, r3, #15
 80064ac:	4613      	mov	r3, r2
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	4413      	add	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	3338      	adds	r3, #56	@ 0x38
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	4413      	add	r3, r2
 80064ba:	3304      	adds	r3, #4
 80064bc:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	705a      	strb	r2, [r3, #1]
 80064c4:	e00f      	b.n	80064e6 <HAL_PCD_EP_ClrStall+0x66>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064c6:	78fb      	ldrb	r3, [r7, #3]
 80064c8:	f003 020f 	and.w	r2, r3, #15
 80064cc:	4613      	mov	r3, r2
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	4413      	add	r3, r2
 80064dc:	3304      	adds	r3, #4
 80064de:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	705a      	strb	r2, [r3, #1]
    }

    ep->is_stall = 0U;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	709a      	strb	r2, [r3, #2]
    ep->num = ep_addr & EP_ADDR_MSK;
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	f003 030f 	and.w	r3, r3, #15
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	701a      	strb	r2, [r3, #0]

    __HAL_LOCK(hpcd);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d101      	bne.n	8006506 <HAL_PCD_EP_ClrStall+0x86>
 8006502:	2302      	movs	r3, #2
 8006504:	e00e      	b.n	8006524 <HAL_PCD_EP_ClrStall+0xa4>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    (void)USB_EPClearStall(hpcd->Instance, ep);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68f9      	ldr	r1, [r7, #12]
 8006514:	4618      	mov	r0, r3
 8006516:	f003 fa7b 	bl	8009a10 <USB_EPClearStall>
    __HAL_UNLOCK(hpcd);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_PCD_EP_Abort>:
 * @brief  Abort an USB EP transaction.
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	460b      	mov	r3, r1
 8006536:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef ret;
    PCD_EPTypeDef * ep;

    if ((0x80U & ep_addr) == 0x80U) {
 8006538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800653c:	2b00      	cmp	r3, #0
 800653e:	da0c      	bge.n	800655a <HAL_PCD_EP_Abort+0x2e>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006540:	78fb      	ldrb	r3, [r7, #3]
 8006542:	f003 020f 	and.w	r2, r3, #15
 8006546:	4613      	mov	r3, r2
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	3338      	adds	r3, #56	@ 0x38
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	4413      	add	r3, r2
 8006554:	3304      	adds	r3, #4
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	e00c      	b.n	8006574 <HAL_PCD_EP_Abort+0x48>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800655a:	78fb      	ldrb	r3, [r7, #3]
 800655c:	f003 020f 	and.w	r2, r3, #15
 8006560:	4613      	mov	r3, r2
 8006562:	00db      	lsls	r3, r3, #3
 8006564:	4413      	add	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	4413      	add	r3, r2
 8006570:	3304      	adds	r3, #4
 8006572:	60fb      	str	r3, [r7, #12]
    }

    /* Stop Xfer */
    ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68f9      	ldr	r1, [r7, #12]
 800657a:	4618      	mov	r0, r3
 800657c:	f003 f89a 	bl	80096b4 <USB_EPStopXfer>
 8006580:	4603      	mov	r3, r0
 8006582:	72fb      	strb	r3, [r7, #11]

    return ret;
 8006584:	7afb      	ldrb	r3, [r7, #11]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <PCD_WriteEmptyTxFifo>:
 * @brief  Check FIFO for the next packet to be loaded.
 * @param  hpcd PCD handle
 * @param  epnum endpoint number
 * @retval HAL status
 */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef * hpcd, uint32_t epnum) {
 800658e:	b580      	push	{r7, lr}
 8006590:	b08a      	sub	sp, #40	@ 0x28
 8006592:	af02      	add	r7, sp, #8
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	6039      	str	r1, [r7, #0]
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	617b      	str	r3, [r7, #20]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	613b      	str	r3, [r7, #16]
    USB_OTG_EPTypeDef * ep;
    uint32_t len;
    uint32_t len32b;
    uint32_t fifoemptymsk;

    ep = &hpcd->IN_ep[epnum];
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	4613      	mov	r3, r2
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	4413      	add	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	3338      	adds	r3, #56	@ 0x38
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	4413      	add	r3, r2
 80065b2:	3304      	adds	r3, #4
 80065b4:	60fb      	str	r3, [r7, #12]

    if (ep->xfer_count > ep->xfer_len) {
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6a1a      	ldr	r2, [r3, #32]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d901      	bls.n	80065c6 <PCD_WriteEmptyTxFifo+0x38>
        return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e06c      	b.n	80066a0 <PCD_WriteEmptyTxFifo+0x112>
    }

    len = ep->xfer_len - ep->xfer_count;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	699a      	ldr	r2, [r3, #24]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket) {
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	69fa      	ldr	r2, [r7, #28]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d902      	bls.n	80065e2 <PCD_WriteEmptyTxFifo+0x54>
        len = ep->maxpacket;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	61fb      	str	r3, [r7, #28]
    }

    len32b = (len + 3U) / 4U;
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	3303      	adds	r3, #3
 80065e6:	089b      	lsrs	r3, r3, #2
 80065e8:	61bb      	str	r3, [r7, #24]

    while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) && (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U)) {
 80065ea:	e02b      	b.n	8006644 <PCD_WriteEmptyTxFifo+0xb6>
        /* Write the FIFO */
        len = ep->xfer_len - ep->xfer_count;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	699a      	ldr	r2, [r3, #24]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	61fb      	str	r3, [r7, #28]

        if (len > ep->maxpacket) {
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	69fa      	ldr	r2, [r7, #28]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d902      	bls.n	8006608 <PCD_WriteEmptyTxFifo+0x7a>
            len = ep->maxpacket;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	61fb      	str	r3, [r7, #28]
        }
        len32b = (len + 3U) / 4U;
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	3303      	adds	r3, #3
 800660c:	089b      	lsrs	r3, r3, #2
 800660e:	61bb      	str	r3, [r7, #24]

        (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len, (uint8_t)hpcd->Init.dma_enable);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6919      	ldr	r1, [r3, #16]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	b2da      	uxtb	r2, r3
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	b298      	uxth	r0, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	b2db      	uxtb	r3, r3
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	4603      	mov	r3, r0
 8006626:	6978      	ldr	r0, [r7, #20]
 8006628:	f003 f8ee 	bl	8009808 <USB_WritePacket>

        ep->xfer_buff += len;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	691a      	ldr	r2, [r3, #16]
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	441a      	add	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	611a      	str	r2, [r3, #16]
        ep->xfer_count += len;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a1a      	ldr	r2, [r3, #32]
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	441a      	add	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	621a      	str	r2, [r3, #32]
    while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) && (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U)) {
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	b29b      	uxth	r3, r3
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	429a      	cmp	r2, r3
 8006658:	d809      	bhi.n	800666e <PCD_WriteEmptyTxFifo+0xe0>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6a1a      	ldr	r2, [r3, #32]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	429a      	cmp	r2, r3
 8006664:	d203      	bcs.n	800666e <PCD_WriteEmptyTxFifo+0xe0>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1be      	bne.n	80065ec <PCD_WriteEmptyTxFifo+0x5e>
    }

    if (ep->xfer_len <= ep->xfer_count) {
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	699a      	ldr	r2, [r3, #24]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	429a      	cmp	r2, r3
 8006678:	d811      	bhi.n	800669e <PCD_WriteEmptyTxFifo+0x110>
        fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	f003 030f 	and.w	r3, r3, #15
 8006680:	2201      	movs	r2, #1
 8006682:	fa02 f303 	lsl.w	r3, r2, r3
 8006686:	60bb      	str	r3, [r7, #8]
        USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800668e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	43db      	mvns	r3, r3
 8006694:	6939      	ldr	r1, [r7, #16]
 8006696:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800669a:	4013      	ands	r3, r2
 800669c:	634b      	str	r3, [r1, #52]	@ 0x34
    }

    return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3720      	adds	r7, #32
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <PCD_EP_OutXfrComplete_int>:
 * @brief  process EP OUT transfer complete interrupt.
 * @param  hpcd PCD handle
 * @param  epnum endpoint number
 * @retval HAL status
 */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef * hpcd, uint32_t epnum) {
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
    USB_OTG_EPTypeDef * ep;
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	61fb      	str	r3, [r7, #28]
    uint32_t USBx_BASE = (uint32_t)USBx;
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	61bb      	str	r3, [r7, #24]
    uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	333c      	adds	r3, #60	@ 0x3c
 80066c0:	3304      	adds	r3, #4
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	617b      	str	r3, [r7, #20]
    uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	613b      	str	r3, [r7, #16]

    if (hpcd->Init.dma_enable == 1U) {
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d17b      	bne.n	80067d6 <PCD_EP_OutXfrComplete_int+0x12e>
        if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f003 0308 	and.w	r3, r3, #8
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d015      	beq.n	8006714 <PCD_EP_OutXfrComplete_int+0x6c>
        {
            /* StupPktRcvd = 1 this is a setup packet */
            if ((gSNPSiD > USB_OTG_CORE_ID_300A) && ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)) {
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	4a61      	ldr	r2, [pc, #388]	@ (8006870 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	f240 80b9 	bls.w	8006864 <PCD_EP_OutXfrComplete_int+0x1bc>
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 80b3 	beq.w	8006864 <PCD_EP_OutXfrComplete_int+0x1bc>
                CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	4413      	add	r3, r2
 8006706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800670a:	461a      	mov	r2, r3
 800670c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006710:	6093      	str	r3, [r2, #8]
 8006712:	e0a7      	b.n	8006864 <PCD_EP_OutXfrComplete_int+0x1bc>
            }
        } else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	f003 0320 	and.w	r3, r3, #32
 800671a:	2b00      	cmp	r3, #0
 800671c:	d009      	beq.n	8006732 <PCD_EP_OutXfrComplete_int+0x8a>
        {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800672a:	461a      	mov	r2, r3
 800672c:	2320      	movs	r3, #32
 800672e:	6093      	str	r3, [r2, #8]
 8006730:	e098      	b.n	8006864 <PCD_EP_OutXfrComplete_int+0x1bc>
        } else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U) {
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006738:	2b00      	cmp	r3, #0
 800673a:	f040 8093 	bne.w	8006864 <PCD_EP_OutXfrComplete_int+0x1bc>
            /* StupPktRcvd = 1 this is a setup packet */
            if ((gSNPSiD > USB_OTG_CORE_ID_300A) && ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)) {
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	4a4b      	ldr	r2, [pc, #300]	@ (8006870 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d90f      	bls.n	8006766 <PCD_EP_OutXfrComplete_int+0xbe>
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <PCD_EP_OutXfrComplete_int+0xbe>
                CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800675c:	461a      	mov	r2, r3
 800675e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006762:	6093      	str	r3, [r2, #8]
 8006764:	e07e      	b.n	8006864 <PCD_EP_OutXfrComplete_int+0x1bc>
            } else {
                ep = &hpcd->OUT_ep[epnum];
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	4613      	mov	r3, r2
 800676a:	00db      	lsls	r3, r3, #3
 800676c:	4413      	add	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	4413      	add	r3, r2
 8006778:	3304      	adds	r3, #4
 800677a:	60fb      	str	r3, [r7, #12]

                /* out data packet received over EP */
                ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	69da      	ldr	r2, [r3, #28]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	0159      	lsls	r1, r3, #5
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	440b      	add	r3, r1
 8006788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006792:	1ad2      	subs	r2, r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	621a      	str	r2, [r3, #32]

                if (epnum == 0U) {
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d114      	bne.n	80067c8 <PCD_EP_OutXfrComplete_int+0x120>
                    if (ep->xfer_len == 0U) {
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d109      	bne.n	80067ba <PCD_EP_OutXfrComplete_int+0x112>
                        /* this is ZLP, so prepare EP0 for next setup */
                        (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6818      	ldr	r0, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80067b0:	461a      	mov	r2, r3
 80067b2:	2101      	movs	r1, #1
 80067b4:	f003 fabe 	bl	8009d34 <USB_EP0_OutStart>
 80067b8:	e006      	b.n	80067c8 <PCD_EP_OutXfrComplete_int+0x120>
                    } else {
                        ep->xfer_buff += ep->xfer_count;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	691a      	ldr	r2, [r3, #16]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	441a      	add	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	611a      	str	r2, [r3, #16]
                }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
                HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	4619      	mov	r1, r3
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f008 f9c4 	bl	800eb5c <HAL_PCD_DataOutStageCallback>
 80067d4:	e046      	b.n	8006864 <PCD_EP_OutXfrComplete_int+0x1bc>
            }
        } else {
            /* ... */
        }
    } else {
        if (gSNPSiD == USB_OTG_CORE_ID_310A) {
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	4a26      	ldr	r2, [pc, #152]	@ (8006874 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d124      	bne.n	8006828 <PCD_EP_OutXfrComplete_int+0x180>
            /* StupPktRcvd = 1 this is a setup packet */
            if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX) {
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00a      	beq.n	80067fe <PCD_EP_OutXfrComplete_int+0x156>
                CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f4:	461a      	mov	r2, r3
 80067f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067fa:	6093      	str	r3, [r2, #8]
 80067fc:	e032      	b.n	8006864 <PCD_EP_OutXfrComplete_int+0x1bc>
            } else {
                if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) {
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f003 0320 	and.w	r3, r3, #32
 8006804:	2b00      	cmp	r3, #0
 8006806:	d008      	beq.n	800681a <PCD_EP_OutXfrComplete_int+0x172>
                    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006814:	461a      	mov	r2, r3
 8006816:	2320      	movs	r3, #32
 8006818:	6093      	str	r3, [r2, #8]
                }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
                HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f008 f99b 	bl	800eb5c <HAL_PCD_DataOutStageCallback>
 8006826:	e01d      	b.n	8006864 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
        } else {
            if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U)) {
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d114      	bne.n	8006858 <PCD_EP_OutXfrComplete_int+0x1b0>
 800682e:	6879      	ldr	r1, [r7, #4]
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	4613      	mov	r3, r2
 8006834:	00db      	lsls	r3, r3, #3
 8006836:	4413      	add	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	440b      	add	r3, r1
 800683c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d108      	bne.n	8006858 <PCD_EP_OutXfrComplete_int+0x1b0>
                /* this is ZLP, so prepare EP0 for next setup */
                (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006850:	461a      	mov	r2, r3
 8006852:	2100      	movs	r1, #0
 8006854:	f003 fa6e 	bl	8009d34 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	b2db      	uxtb	r3, r3
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f008 f97c 	bl	800eb5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
    }

    return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3720      	adds	r7, #32
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	4f54300a 	.word	0x4f54300a
 8006874:	4f54310a 	.word	0x4f54310a

08006878 <PCD_EP_OutSetupPacket_int>:
 * @brief  process EP OUT setup packet received interrupt.
 * @param  hpcd PCD handle
 * @param  epnum endpoint number
 * @retval HAL status
 */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef * hpcd, uint32_t epnum) {
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	617b      	str	r3, [r7, #20]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	613b      	str	r3, [r7, #16]
    uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	333c      	adds	r3, #60	@ 0x3c
 8006890:	3304      	adds	r3, #4
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	60fb      	str	r3, [r7, #12]
    uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	4413      	add	r3, r2
 800689e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	60bb      	str	r3, [r7, #8]

    if ((gSNPSiD > USB_OTG_CORE_ID_300A) && ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)) {
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	4a15      	ldr	r2, [pc, #84]	@ (8006900 <PCD_EP_OutSetupPacket_int+0x88>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d90e      	bls.n	80068cc <PCD_EP_OutSetupPacket_int+0x54>
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d009      	beq.n	80068cc <PCD_EP_OutSetupPacket_int+0x54>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c4:	461a      	mov	r2, r3
 80068c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068ca:	6093      	str	r3, [r2, #8]

    /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SetupStageCallback(hpcd);
#else
    HAL_PCD_SetupStageCallback(hpcd);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f008 f933 	bl	800eb38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U)) {
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	4a0a      	ldr	r2, [pc, #40]	@ (8006900 <PCD_EP_OutSetupPacket_int+0x88>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d90c      	bls.n	80068f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d108      	bne.n	80068f4 <PCD_EP_OutSetupPacket_int+0x7c>
        (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80068ec:	461a      	mov	r2, r3
 80068ee:	2101      	movs	r1, #1
 80068f0:	f003 fa20 	bl	8009d34 <USB_EP0_OutStart>
    }

    return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	4f54300a 	.word	0x4f54300a

08006904 <HAL_PCDEx_SetTxFiFo>:
 * @param  hpcd PCD handle
 * @param  fifo The number of Tx fifo
 * @param  size Fifo size
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef * hpcd, uint8_t fifo, uint16_t size) {
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	70fb      	strb	r3, [r7, #3]
 8006910:	4613      	mov	r3, r2
 8006912:	803b      	strh	r3, [r7, #0]
           --> Txn should be configured with the minimum space of 16 words
       The FIFO is used optimally when used TxFIFOs are allocated in the top
           of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
       When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

    Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691a:	60bb      	str	r3, [r7, #8]

    if (fifo == 0U) {
 800691c:	78fb      	ldrb	r3, [r7, #3]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d107      	bne.n	8006932 <HAL_PCDEx_SetTxFiFo+0x2e>
        hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006922:	883b      	ldrh	r3, [r7, #0]
 8006924:	0419      	lsls	r1, r3, #16
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	430a      	orrs	r2, r1
 800692e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006930:	e028      	b.n	8006984 <HAL_PCDEx_SetTxFiFo+0x80>
    } else {
        Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006938:	0c1b      	lsrs	r3, r3, #16
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	4413      	add	r3, r2
 800693e:	60bb      	str	r3, [r7, #8]
        for (i = 0U; i < (fifo - 1U); i++) {
 8006940:	2300      	movs	r3, #0
 8006942:	73fb      	strb	r3, [r7, #15]
 8006944:	e00d      	b.n	8006962 <HAL_PCDEx_SetTxFiFo+0x5e>
            Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	7bfb      	ldrb	r3, [r7, #15]
 800694c:	3340      	adds	r3, #64	@ 0x40
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	0c1b      	lsrs	r3, r3, #16
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	4413      	add	r3, r2
 800695a:	60bb      	str	r3, [r7, #8]
        for (i = 0U; i < (fifo - 1U); i++) {
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	3301      	adds	r3, #1
 8006960:	73fb      	strb	r3, [r7, #15]
 8006962:	7bfa      	ldrb	r2, [r7, #15]
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	3b01      	subs	r3, #1
 8006968:	429a      	cmp	r2, r3
 800696a:	d3ec      	bcc.n	8006946 <HAL_PCDEx_SetTxFiFo+0x42>
        }

        /* Multiply Tx_Size by 2 to get higher performance */
        hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800696c:	883b      	ldrh	r3, [r7, #0]
 800696e:	0418      	lsls	r0, r3, #16
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6819      	ldr	r1, [r3, #0]
 8006974:	78fb      	ldrb	r3, [r7, #3]
 8006976:	3b01      	subs	r3, #1
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	4302      	orrs	r2, r0
 800697c:	3340      	adds	r3, #64	@ 0x40
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	440b      	add	r3, r1
 8006982:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <HAL_PCDEx_SetRxFiFo>:
 * @brief  Set Rx FIFO
 * @param  hpcd PCD handle
 * @param  size Size of Rx fifo
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef * hpcd, uint16_t size) {
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	460b      	mov	r3, r1
 800699c:	807b      	strh	r3, [r7, #2]
    hpcd->Instance->GRXFSIZ = size;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	887a      	ldrh	r2, [r7, #2]
 80069a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <HAL_PCDEx_LPM_Callback>:
 * @brief  Send LPM message to user layer callback.
 * @param  hpcd PCD handle
 * @param  msg LPM message
 * @retval HAL status
 */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef * hpcd, PCD_LPM_MsgTypeDef msg) {
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	70fb      	strb	r3, [r7, #3]
    UNUSED(msg);

    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_PCDEx_LPM_Callback could be implemented in the user file
     */
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_RCC_OscConfig>:
 * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 *         supported by this API. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef * RCC_OscInitStruct) {
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
    uint32_t tickstart, pll_config;

    /* Check Null pointer */
    if (RCC_OscInitStruct == NULL) {
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <HAL_RCC_OscConfig+0x12>
        return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e267      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
    }

    /* Check the parameters */
    assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
    /*------------------------------- HSE Configuration ------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE) {
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d075      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x10a>
        /* Check the parameters */
        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE))) {
 80069ea:	4b88      	ldr	r3, [pc, #544]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f003 030c 	and.w	r3, r3, #12
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	d00c      	beq.n	8006a10 <HAL_RCC_OscConfig+0x44>
 80069f6:	4b85      	ldr	r3, [pc, #532]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f003 030c 	and.w	r3, r3, #12
 80069fe:	2b08      	cmp	r3, #8
 8006a00:	d112      	bne.n	8006a28 <HAL_RCC_OscConfig+0x5c>
 8006a02:	4b82      	ldr	r3, [pc, #520]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a0e:	d10b      	bne.n	8006a28 <HAL_RCC_OscConfig+0x5c>
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8006a10:	4b7e      	ldr	r3, [pc, #504]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d05b      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x108>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d157      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x108>
                return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e242      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
            }
        } else {
            /* Set the new HSE configuration ---------------------------------------*/
            __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a30:	d106      	bne.n	8006a40 <HAL_RCC_OscConfig+0x74>
 8006a32:	4b76      	ldr	r3, [pc, #472]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a75      	ldr	r2, [pc, #468]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a3c:	6013      	str	r3, [r2, #0]
 8006a3e:	e01d      	b.n	8006a7c <HAL_RCC_OscConfig+0xb0>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a48:	d10c      	bne.n	8006a64 <HAL_RCC_OscConfig+0x98>
 8006a4a:	4b70      	ldr	r3, [pc, #448]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a6f      	ldr	r2, [pc, #444]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	4b6d      	ldr	r3, [pc, #436]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a6c      	ldr	r2, [pc, #432]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	e00b      	b.n	8006a7c <HAL_RCC_OscConfig+0xb0>
 8006a64:	4b69      	ldr	r3, [pc, #420]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a68      	ldr	r2, [pc, #416]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	4b66      	ldr	r3, [pc, #408]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a65      	ldr	r2, [pc, #404]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a7a:	6013      	str	r3, [r2, #0]

            /* Check the HSE State */
            if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d013      	beq.n	8006aac <HAL_RCC_OscConfig+0xe0>
                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8006a84:	f7fc fcc0 	bl	8003408 <HAL_GetTick>
 8006a88:	6138      	str	r0, [r7, #16]

                /* Wait till HSE is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0xd2>
                    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8006a8c:	f7fc fcbc 	bl	8003408 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b64      	cmp	r3, #100	@ 0x64
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0xd2>
                        return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e207      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8006a9e:	4b5b      	ldr	r3, [pc, #364]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0f0      	beq.n	8006a8c <HAL_RCC_OscConfig+0xc0>
 8006aaa:	e014      	b.n	8006ad6 <HAL_RCC_OscConfig+0x10a>
                    }
                }
            } else {
                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8006aac:	f7fc fcac 	bl	8003408 <HAL_GetTick>
 8006ab0:	6138      	str	r0, [r7, #16]

                /* Wait till HSE is bypassed or disabled */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8006ab2:	e008      	b.n	8006ac6 <HAL_RCC_OscConfig+0xfa>
                    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8006ab4:	f7fc fca8 	bl	8003408 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b64      	cmp	r3, #100	@ 0x64
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCC_OscConfig+0xfa>
                        return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e1f3      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8006ac6:	4b51      	ldr	r3, [pc, #324]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1f0      	bne.n	8006ab4 <HAL_RCC_OscConfig+0xe8>
 8006ad2:	e000      	b.n	8006ad6 <HAL_RCC_OscConfig+0x10a>
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8006ad4:	bf00      	nop
                }
            }
        }
    }
    /*----------------------------- HSI Configuration --------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI) {
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d063      	beq.n	8006baa <HAL_RCC_OscConfig+0x1de>
        /* Check the parameters */
        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI))) {
 8006ae2:	4b4a      	ldr	r3, [pc, #296]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f003 030c 	and.w	r3, r3, #12
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00b      	beq.n	8006b06 <HAL_RCC_OscConfig+0x13a>
 8006aee:	4b47      	ldr	r3, [pc, #284]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 030c 	and.w	r3, r3, #12
 8006af6:	2b08      	cmp	r3, #8
 8006af8:	d11c      	bne.n	8006b34 <HAL_RCC_OscConfig+0x168>
 8006afa:	4b44      	ldr	r3, [pc, #272]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d116      	bne.n	8006b34 <HAL_RCC_OscConfig+0x168>
            /* When HSI is used as system clock it will not disabled */
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8006b06:	4b41      	ldr	r3, [pc, #260]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d005      	beq.n	8006b1e <HAL_RCC_OscConfig+0x152>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d001      	beq.n	8006b1e <HAL_RCC_OscConfig+0x152>
                return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e1c7      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
            }
            /* Otherwise, just the calibration is allowed */
            else {
                /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
                __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	4937      	ldr	r1, [pc, #220]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	600b      	str	r3, [r1, #0]
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8006b32:	e03a      	b.n	8006baa <HAL_RCC_OscConfig+0x1de>
            }
        } else {
            /* Check the HSI State */
            if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d020      	beq.n	8006b7e <HAL_RCC_OscConfig+0x1b2>
                /* Enable the Internal High Speed oscillator (HSI). */
                __HAL_RCC_HSI_ENABLE();
 8006b3c:	4b34      	ldr	r3, [pc, #208]	@ (8006c10 <HAL_RCC_OscConfig+0x244>)
 8006b3e:	2201      	movs	r2, #1
 8006b40:	601a      	str	r2, [r3, #0]

                /* Get Start Tick*/
                tickstart = HAL_GetTick();
 8006b42:	f7fc fc61 	bl	8003408 <HAL_GetTick>
 8006b46:	6138      	str	r0, [r7, #16]

                /* Wait till HSI is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8006b48:	e008      	b.n	8006b5c <HAL_RCC_OscConfig+0x190>
                    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8006b4a:	f7fc fc5d 	bl	8003408 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d901      	bls.n	8006b5c <HAL_RCC_OscConfig+0x190>
                        return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e1a8      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8006b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d0f0      	beq.n	8006b4a <HAL_RCC_OscConfig+0x17e>
                    }
                }

                /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
                __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b68:	4b28      	ldr	r3, [pc, #160]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	00db      	lsls	r3, r3, #3
 8006b76:	4925      	ldr	r1, [pc, #148]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	600b      	str	r3, [r1, #0]
 8006b7c:	e015      	b.n	8006baa <HAL_RCC_OscConfig+0x1de>
            } else {
                /* Disable the Internal High Speed oscillator (HSI). */
                __HAL_RCC_HSI_DISABLE();
 8006b7e:	4b24      	ldr	r3, [pc, #144]	@ (8006c10 <HAL_RCC_OscConfig+0x244>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	601a      	str	r2, [r3, #0]

                /* Get Start Tick*/
                tickstart = HAL_GetTick();
 8006b84:	f7fc fc40 	bl	8003408 <HAL_GetTick>
 8006b88:	6138      	str	r0, [r7, #16]

                /* Wait till HSI is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8006b8a:	e008      	b.n	8006b9e <HAL_RCC_OscConfig+0x1d2>
                    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8006b8c:	f7fc fc3c 	bl	8003408 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0x1d2>
                        return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e187      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8006b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1f0      	bne.n	8006b8c <HAL_RCC_OscConfig+0x1c0>
                }
            }
        }
    }
    /*------------------------------ LSI Configuration -------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI) {
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0308 	and.w	r3, r3, #8
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d036      	beq.n	8006c24 <HAL_RCC_OscConfig+0x258>
        /* Check the parameters */
        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

        /* Check the LSI State */
        if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d016      	beq.n	8006bec <HAL_RCC_OscConfig+0x220>
            /* Enable the Internal Low Speed oscillator (LSI). */
            __HAL_RCC_LSI_ENABLE();
 8006bbe:	4b15      	ldr	r3, [pc, #84]	@ (8006c14 <HAL_RCC_OscConfig+0x248>)
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006bc4:	f7fc fc20 	bl	8003408 <HAL_GetTick>
 8006bc8:	6138      	str	r0, [r7, #16]

            /* Wait till LSI is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8006bca:	e008      	b.n	8006bde <HAL_RCC_OscConfig+0x212>
                if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8006bcc:	f7fc fc1c 	bl	8003408 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_OscConfig+0x212>
                    return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e167      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8006bde:	4b0b      	ldr	r3, [pc, #44]	@ (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d0f0      	beq.n	8006bcc <HAL_RCC_OscConfig+0x200>
 8006bea:	e01b      	b.n	8006c24 <HAL_RCC_OscConfig+0x258>
                }
            }
        } else {
            /* Disable the Internal Low Speed oscillator (LSI). */
            __HAL_RCC_LSI_DISABLE();
 8006bec:	4b09      	ldr	r3, [pc, #36]	@ (8006c14 <HAL_RCC_OscConfig+0x248>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	601a      	str	r2, [r3, #0]

            /* Get Start Tick */
            tickstart = HAL_GetTick();
 8006bf2:	f7fc fc09 	bl	8003408 <HAL_GetTick>
 8006bf6:	6138      	str	r0, [r7, #16]

            /* Wait till LSI is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8006bf8:	e00e      	b.n	8006c18 <HAL_RCC_OscConfig+0x24c>
                if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8006bfa:	f7fc fc05 	bl	8003408 <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d907      	bls.n	8006c18 <HAL_RCC_OscConfig+0x24c>
                    return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e150      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
 8006c0c:	40023800 	.word	0x40023800
 8006c10:	42470000 	.word	0x42470000
 8006c14:	42470e80 	.word	0x42470e80
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8006c18:	4b88      	ldr	r3, [pc, #544]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1ea      	bne.n	8006bfa <HAL_RCC_OscConfig+0x22e>
                }
            }
        }
    }
    /*------------------------------ LSE Configuration -------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE) {
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 8097 	beq.w	8006d60 <HAL_RCC_OscConfig+0x394>
        FlagStatus pwrclkchanged = RESET;
 8006c32:	2300      	movs	r3, #0
 8006c34:	75fb      	strb	r3, [r7, #23]
        /* Check the parameters */
        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

        /* Update LSE configuration in Backup Domain control register    */
        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 8006c36:	4b81      	ldr	r3, [pc, #516]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10f      	bne.n	8006c62 <HAL_RCC_OscConfig+0x296>
            __HAL_RCC_PWR_CLK_ENABLE();
 8006c42:	2300      	movs	r3, #0
 8006c44:	60bb      	str	r3, [r7, #8]
 8006c46:	4b7d      	ldr	r3, [pc, #500]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c4a:	4a7c      	ldr	r2, [pc, #496]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c52:	4b7a      	ldr	r3, [pc, #488]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c5a:	60bb      	str	r3, [r7, #8]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
            pwrclkchanged = SET;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	75fb      	strb	r3, [r7, #23]
        }

        if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8006c62:	4b77      	ldr	r3, [pc, #476]	@ (8006e40 <HAL_RCC_OscConfig+0x474>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d118      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x2d4>
            /* Enable write access to Backup domain */
            SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c6e:	4b74      	ldr	r3, [pc, #464]	@ (8006e40 <HAL_RCC_OscConfig+0x474>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a73      	ldr	r2, [pc, #460]	@ (8006e40 <HAL_RCC_OscConfig+0x474>)
 8006c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c78:	6013      	str	r3, [r2, #0]

            /* Wait for Backup domain Write protection disable */
            tickstart = HAL_GetTick();
 8006c7a:	f7fc fbc5 	bl	8003408 <HAL_GetTick>
 8006c7e:	6138      	str	r0, [r7, #16]

            while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8006c80:	e008      	b.n	8006c94 <HAL_RCC_OscConfig+0x2c8>
                if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8006c82:	f7fc fbc1 	bl	8003408 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d901      	bls.n	8006c94 <HAL_RCC_OscConfig+0x2c8>
                    return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e10c      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
            while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8006c94:	4b6a      	ldr	r3, [pc, #424]	@ (8006e40 <HAL_RCC_OscConfig+0x474>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d0f0      	beq.n	8006c82 <HAL_RCC_OscConfig+0x2b6>
                }
            }
        }

        /* Set the new LSE configuration -----------------------------------------*/
        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d106      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x2ea>
 8006ca8:	4b64      	ldr	r3, [pc, #400]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cac:	4a63      	ldr	r2, [pc, #396]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006cae:	f043 0301 	orr.w	r3, r3, #1
 8006cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cb4:	e01c      	b.n	8006cf0 <HAL_RCC_OscConfig+0x324>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	2b05      	cmp	r3, #5
 8006cbc:	d10c      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x30c>
 8006cbe:	4b5f      	ldr	r3, [pc, #380]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cc2:	4a5e      	ldr	r2, [pc, #376]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006cc4:	f043 0304 	orr.w	r3, r3, #4
 8006cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cca:	4b5c      	ldr	r3, [pc, #368]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cce:	4a5b      	ldr	r2, [pc, #364]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006cd0:	f043 0301 	orr.w	r3, r3, #1
 8006cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cd6:	e00b      	b.n	8006cf0 <HAL_RCC_OscConfig+0x324>
 8006cd8:	4b58      	ldr	r3, [pc, #352]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cdc:	4a57      	ldr	r2, [pc, #348]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006cde:	f023 0301 	bic.w	r3, r3, #1
 8006ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ce4:	4b55      	ldr	r3, [pc, #340]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ce8:	4a54      	ldr	r2, [pc, #336]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006cea:	f023 0304 	bic.w	r3, r3, #4
 8006cee:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Check the LSE State */
        if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d015      	beq.n	8006d24 <HAL_RCC_OscConfig+0x358>
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006cf8:	f7fc fb86 	bl	8003408 <HAL_GetTick>
 8006cfc:	6138      	str	r0, [r7, #16]

            /* Wait till LSE is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8006cfe:	e00a      	b.n	8006d16 <HAL_RCC_OscConfig+0x34a>
                if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8006d00:	f7fc fb82 	bl	8003408 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0x34a>
                    return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e0cb      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8006d16:	4b49      	ldr	r3, [pc, #292]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0ee      	beq.n	8006d00 <HAL_RCC_OscConfig+0x334>
 8006d22:	e014      	b.n	8006d4e <HAL_RCC_OscConfig+0x382>
                }
            }
        } else {
            /* Get Start Tick */
            tickstart = HAL_GetTick();
 8006d24:	f7fc fb70 	bl	8003408 <HAL_GetTick>
 8006d28:	6138      	str	r0, [r7, #16]

            /* Wait till LSE is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8006d2a:	e00a      	b.n	8006d42 <HAL_RCC_OscConfig+0x376>
                if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8006d2c:	f7fc fb6c 	bl	8003408 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0x376>
                    return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e0b5      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8006d42:	4b3e      	ldr	r3, [pc, #248]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1ee      	bne.n	8006d2c <HAL_RCC_OscConfig+0x360>
                }
            }
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET) {
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d105      	bne.n	8006d60 <HAL_RCC_OscConfig+0x394>
            __HAL_RCC_PWR_CLK_DISABLE();
 8006d54:	4b39      	ldr	r3, [pc, #228]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d58:	4a38      	ldr	r2, [pc, #224]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006d5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d5e:	6413      	str	r3, [r2, #64]	@ 0x40
        }
    }
    /*-------------------------------- PLL Configuration -----------------------*/
    /* Check the parameters */
    assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
    if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 80a1 	beq.w	8006eac <HAL_RCC_OscConfig+0x4e0>
        /* Check if the PLL is used as system clock or not */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 8006d6a:	4b34      	ldr	r3, [pc, #208]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f003 030c 	and.w	r3, r3, #12
 8006d72:	2b08      	cmp	r3, #8
 8006d74:	d05c      	beq.n	8006e30 <HAL_RCC_OscConfig+0x464>
            if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d141      	bne.n	8006e02 <HAL_RCC_OscConfig+0x436>
                assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
                assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
                assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

                /* Disable the main PLL. */
                __HAL_RCC_PLL_DISABLE();
 8006d7e:	4b31      	ldr	r3, [pc, #196]	@ (8006e44 <HAL_RCC_OscConfig+0x478>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]

                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8006d84:	f7fc fb40 	bl	8003408 <HAL_GetTick>
 8006d88:	6138      	str	r0, [r7, #16]

                /* Wait till PLL is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8006d8a:	e008      	b.n	8006d9e <HAL_RCC_OscConfig+0x3d2>
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8006d8c:	f7fc fb3c 	bl	8003408 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x3d2>
                        return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e087      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8006d9e:	4b27      	ldr	r3, [pc, #156]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1f0      	bne.n	8006d8c <HAL_RCC_OscConfig+0x3c0>
                    }
                }

                /* Configure the main PLL clock source, multiplication and division factors. */
                WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource | RCC_OscInitStruct->PLL.PLLM | (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos) | (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	69da      	ldr	r2, [r3, #28]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	431a      	orrs	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db8:	019b      	lsls	r3, r3, #6
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc0:	085b      	lsrs	r3, r3, #1
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	041b      	lsls	r3, r3, #16
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dcc:	061b      	lsls	r3, r3, #24
 8006dce:	491b      	ldr	r1, [pc, #108]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	604b      	str	r3, [r1, #4]
                                         (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
                /* Enable the main PLL. */
                __HAL_RCC_PLL_ENABLE();
 8006dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8006e44 <HAL_RCC_OscConfig+0x478>)
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]

                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8006dda:	f7fc fb15 	bl	8003408 <HAL_GetTick>
 8006dde:	6138      	str	r0, [r7, #16]

                /* Wait till PLL is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8006de0:	e008      	b.n	8006df4 <HAL_RCC_OscConfig+0x428>
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8006de2:	f7fc fb11 	bl	8003408 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d901      	bls.n	8006df4 <HAL_RCC_OscConfig+0x428>
                        return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e05c      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8006df4:	4b11      	ldr	r3, [pc, #68]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d0f0      	beq.n	8006de2 <HAL_RCC_OscConfig+0x416>
 8006e00:	e054      	b.n	8006eac <HAL_RCC_OscConfig+0x4e0>
                    }
                }
            } else {
                /* Disable the main PLL. */
                __HAL_RCC_PLL_DISABLE();
 8006e02:	4b10      	ldr	r3, [pc, #64]	@ (8006e44 <HAL_RCC_OscConfig+0x478>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	601a      	str	r2, [r3, #0]

                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8006e08:	f7fc fafe 	bl	8003408 <HAL_GetTick>
 8006e0c:	6138      	str	r0, [r7, #16]

                /* Wait till PLL is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8006e0e:	e008      	b.n	8006e22 <HAL_RCC_OscConfig+0x456>
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8006e10:	f7fc fafa 	bl	8003408 <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d901      	bls.n	8006e22 <HAL_RCC_OscConfig+0x456>
                        return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e045      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8006e22:	4b06      	ldr	r3, [pc, #24]	@ (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1f0      	bne.n	8006e10 <HAL_RCC_OscConfig+0x444>
 8006e2e:	e03d      	b.n	8006eac <HAL_RCC_OscConfig+0x4e0>
                    }
                }
            }
        } else {
            /* Check if there is a request to disable the PLL used as System clock source */
            if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d107      	bne.n	8006e48 <HAL_RCC_OscConfig+0x47c>
                return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e038      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
 8006e3c:	40023800 	.word	0x40023800
 8006e40:	40007000 	.word	0x40007000
 8006e44:	42470060 	.word	0x42470060
            } else {
                /* Do not return HAL_ERROR if request repeats the current configuration */
                pll_config = RCC->PLLCFGR;
 8006e48:	4b1b      	ldr	r3, [pc, #108]	@ (8006eb8 <HAL_RCC_OscConfig+0x4ec>)
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	60fb      	str	r3, [r7, #12]
                if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
                if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d028      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x4dc>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d121      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x4dc>
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
                if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d11a      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x4dc>
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006e78:	4013      	ands	r3, r2
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006e7e:	0192      	lsls	r2, r2, #6
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d111      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x4dc>
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e8e:	085b      	lsrs	r3, r3, #1
 8006e90:	3b01      	subs	r3, #1
 8006e92:	041b      	lsls	r3, r3, #16
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d107      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x4dc>
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea2:	061b      	lsls	r3, r3, #24
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d001      	beq.n	8006eac <HAL_RCC_OscConfig+0x4e0>
#endif
                {
                    return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e000      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
                }
            }
        }
    }
    return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3718      	adds	r7, #24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	40023800 	.word	0x40023800

08006ebc <HAL_RCC_ClockConfig>:
 * @note   Depending on the device voltage range, the software has to set correctly
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef * RCC_ClkInitStruct, uint32_t FLatency) {
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
    uint32_t tickstart;

    /* Check Null pointer */
    if (RCC_ClkInitStruct == NULL) {
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <HAL_RCC_ClockConfig+0x14>
        return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e0cc      	b.n	800706a <HAL_RCC_ClockConfig+0x1ae>
    /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
      must be correctly programmed according to the frequency of the CPU clock
      (HCLK) and the supply voltage of the device. */

    /* Increasing the number of wait states because of higher CPU frequency */
    if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8006ed0:	4b68      	ldr	r3, [pc, #416]	@ (8007074 <HAL_RCC_ClockConfig+0x1b8>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0307 	and.w	r3, r3, #7
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d90c      	bls.n	8006ef8 <HAL_RCC_ClockConfig+0x3c>
        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
        __HAL_FLASH_SET_LATENCY(FLatency);
 8006ede:	4b65      	ldr	r3, [pc, #404]	@ (8007074 <HAL_RCC_ClockConfig+0x1b8>)
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	b2d2      	uxtb	r2, r2
 8006ee4:	701a      	strb	r2, [r3, #0]

        /* Check that the new number of wait states is taken into account to access the Flash
        memory by reading the FLASH_ACR register */
        if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8006ee6:	4b63      	ldr	r3, [pc, #396]	@ (8007074 <HAL_RCC_ClockConfig+0x1b8>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d001      	beq.n	8006ef8 <HAL_RCC_ClockConfig+0x3c>
            return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e0b8      	b.n	800706a <HAL_RCC_ClockConfig+0x1ae>
        }
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d020      	beq.n	8006f46 <HAL_RCC_ClockConfig+0x8a>
        /* Set the highest APBx dividers in order to ensure that we do not go through
           a non-spec phase whatever we decrease or increase HCLK. */
        if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d005      	beq.n	8006f1c <HAL_RCC_ClockConfig+0x60>
            MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f10:	4b59      	ldr	r3, [pc, #356]	@ (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	4a58      	ldr	r2, [pc, #352]	@ (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006f16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006f1a:	6093      	str	r3, [r2, #8]
        }

        if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0308 	and.w	r3, r3, #8
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d005      	beq.n	8006f34 <HAL_RCC_ClockConfig+0x78>
            MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f28:	4b53      	ldr	r3, [pc, #332]	@ (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	4a52      	ldr	r2, [pc, #328]	@ (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006f2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006f32:	6093      	str	r3, [r2, #8]
        }

        assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f34:	4b50      	ldr	r3, [pc, #320]	@ (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	494d      	ldr	r1, [pc, #308]	@ (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) {
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d044      	beq.n	8006fdc <HAL_RCC_ClockConfig+0x120>
        assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

        /* HSE is selected as System Clock Source */
        if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d107      	bne.n	8006f6a <HAL_RCC_ClockConfig+0xae>
            /* Check the HSE ready flag */
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8006f5a:	4b47      	ldr	r3, [pc, #284]	@ (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d119      	bne.n	8006f9a <HAL_RCC_ClockConfig+0xde>
                return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e07f      	b.n	800706a <HAL_RCC_ClockConfig+0x1ae>
            }
        }
        /* PLL is selected as System Clock Source */
        else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)) {
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d003      	beq.n	8006f7a <HAL_RCC_ClockConfig+0xbe>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d107      	bne.n	8006f8a <HAL_RCC_ClockConfig+0xce>
            /* Check the PLL ready flag */
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8006f7a:	4b3f      	ldr	r3, [pc, #252]	@ (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d109      	bne.n	8006f9a <HAL_RCC_ClockConfig+0xde>
                return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e06f      	b.n	800706a <HAL_RCC_ClockConfig+0x1ae>
            }
        }
        /* HSI is selected as System Clock Source */
        else {
            /* Check the HSI ready flag */
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8006f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <HAL_RCC_ClockConfig+0xde>
                return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e067      	b.n	800706a <HAL_RCC_ClockConfig+0x1ae>
            }
        }

        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f9a:	4b37      	ldr	r3, [pc, #220]	@ (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f023 0203 	bic.w	r2, r3, #3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	4934      	ldr	r1, [pc, #208]	@ (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	608b      	str	r3, [r1, #8]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fac:	f7fc fa2c 	bl	8003408 <HAL_GetTick>
 8006fb0:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 8006fb2:	e00a      	b.n	8006fca <HAL_RCC_ClockConfig+0x10e>
            if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8006fb4:	f7fc fa28 	bl	8003408 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_ClockConfig+0x10e>
                return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e04f      	b.n	800706a <HAL_RCC_ClockConfig+0x1ae>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 8006fca:	4b2b      	ldr	r3, [pc, #172]	@ (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f003 020c 	and.w	r2, r3, #12
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d1eb      	bne.n	8006fb4 <HAL_RCC_ClockConfig+0xf8>
            }
        }
    }

    /* Decreasing the number of wait states because of lower CPU frequency */
    if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8006fdc:	4b25      	ldr	r3, [pc, #148]	@ (8007074 <HAL_RCC_ClockConfig+0x1b8>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0307 	and.w	r3, r3, #7
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d20c      	bcs.n	8007004 <HAL_RCC_ClockConfig+0x148>
        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
        __HAL_FLASH_SET_LATENCY(FLatency);
 8006fea:	4b22      	ldr	r3, [pc, #136]	@ (8007074 <HAL_RCC_ClockConfig+0x1b8>)
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	b2d2      	uxtb	r2, r2
 8006ff0:	701a      	strb	r2, [r3, #0]

        /* Check that the new number of wait states is taken into account to access the Flash
        memory by reading the FLASH_ACR register */
        if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8006ff2:	4b20      	ldr	r3, [pc, #128]	@ (8007074 <HAL_RCC_ClockConfig+0x1b8>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d001      	beq.n	8007004 <HAL_RCC_ClockConfig+0x148>
            return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e032      	b.n	800706a <HAL_RCC_ClockConfig+0x1ae>
        }
    }

    /*-------------------------- PCLK1 Configuration ---------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0304 	and.w	r3, r3, #4
 800700c:	2b00      	cmp	r3, #0
 800700e:	d008      	beq.n	8007022 <HAL_RCC_ClockConfig+0x166>
        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007010:	4b19      	ldr	r3, [pc, #100]	@ (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	4916      	ldr	r1, [pc, #88]	@ (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 800701e:	4313      	orrs	r3, r2
 8007020:	608b      	str	r3, [r1, #8]
    }

    /*-------------------------- PCLK2 Configuration ---------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0308 	and.w	r3, r3, #8
 800702a:	2b00      	cmp	r3, #0
 800702c:	d009      	beq.n	8007042 <HAL_RCC_ClockConfig+0x186>
        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800702e:	4b12      	ldr	r3, [pc, #72]	@ (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	490e      	ldr	r1, [pc, #56]	@ (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 800703e:	4313      	orrs	r3, r2
 8007040:	608b      	str	r3, [r1, #8]
    }

    /* Update the SystemCoreClock global variable */
    SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007042:	f000 f821 	bl	8007088 <HAL_RCC_GetSysClockFreq>
 8007046:	4602      	mov	r2, r0
 8007048:	4b0b      	ldr	r3, [pc, #44]	@ (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	091b      	lsrs	r3, r3, #4
 800704e:	f003 030f 	and.w	r3, r3, #15
 8007052:	490a      	ldr	r1, [pc, #40]	@ (800707c <HAL_RCC_ClockConfig+0x1c0>)
 8007054:	5ccb      	ldrb	r3, [r1, r3]
 8007056:	fa22 f303 	lsr.w	r3, r2, r3
 800705a:	4a09      	ldr	r2, [pc, #36]	@ (8007080 <HAL_RCC_ClockConfig+0x1c4>)
 800705c:	6013      	str	r3, [r2, #0]

    /* Configure the source of time base considering new system clocks settings */
    HAL_InitTick(uwTickPrio);
 800705e:	4b09      	ldr	r3, [pc, #36]	@ (8007084 <HAL_RCC_ClockConfig+0x1c8>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4618      	mov	r0, r3
 8007064:	f7fc f98c 	bl	8003380 <HAL_InitTick>

    return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	40023c00 	.word	0x40023c00
 8007078:	40023800 	.word	0x40023800
 800707c:	08011da0 	.word	0x08011da0
 8007080:	2000000c 	.word	0x2000000c
 8007084:	20000030 	.word	0x20000030

08007088 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void) {
 8007088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800708c:	b090      	sub	sp, #64	@ 0x40
 800708e:	af00      	add	r7, sp, #0
    uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007090:	2300      	movs	r3, #0
 8007092:	637b      	str	r3, [r7, #52]	@ 0x34
 8007094:	2300      	movs	r3, #0
 8007096:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007098:	2300      	movs	r3, #0
 800709a:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t sysclockfreq = 0U;
 800709c:	2300      	movs	r3, #0
 800709e:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Get SYSCLK source -------------------------------------------------------*/
    switch (RCC->CFGR & RCC_CFGR_SWS) {
 80070a0:	4b59      	ldr	r3, [pc, #356]	@ (8007208 <HAL_RCC_GetSysClockFreq+0x180>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f003 030c 	and.w	r3, r3, #12
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d00d      	beq.n	80070c8 <HAL_RCC_GetSysClockFreq+0x40>
 80070ac:	2b08      	cmp	r3, #8
 80070ae:	f200 80a1 	bhi.w	80071f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d002      	beq.n	80070bc <HAL_RCC_GetSysClockFreq+0x34>
 80070b6:	2b04      	cmp	r3, #4
 80070b8:	d003      	beq.n	80070c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80070ba:	e09b      	b.n	80071f4 <HAL_RCC_GetSysClockFreq+0x16c>
    case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
    {
        sysclockfreq = HSI_VALUE;
 80070bc:	4b53      	ldr	r3, [pc, #332]	@ (800720c <HAL_RCC_GetSysClockFreq+0x184>)
 80070be:	63bb      	str	r3, [r7, #56]	@ 0x38
        break;
 80070c0:	e09b      	b.n	80071fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
    {
        sysclockfreq = HSE_VALUE;
 80070c2:	4b53      	ldr	r3, [pc, #332]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x188>)
 80070c4:	63bb      	str	r3, [r7, #56]	@ 0x38
        break;
 80070c6:	e098      	b.n	80071fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
    {
        /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
        SYSCLK = PLL_VCO / PLLP */
        pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070c8:	4b4f      	ldr	r3, [pc, #316]	@ (8007208 <HAL_RCC_GetSysClockFreq+0x180>)
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070d0:	637b      	str	r3, [r7, #52]	@ 0x34
        if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 80070d2:	4b4d      	ldr	r3, [pc, #308]	@ (8007208 <HAL_RCC_GetSysClockFreq+0x180>)
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d028      	beq.n	8007130 <HAL_RCC_GetSysClockFreq+0xa8>
            /* HSE used as PLL clock source */
            pllvco = (uint32_t)((((uint64_t)HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070de:	4b4a      	ldr	r3, [pc, #296]	@ (8007208 <HAL_RCC_GetSysClockFreq+0x180>)
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	099b      	lsrs	r3, r3, #6
 80070e4:	2200      	movs	r2, #0
 80070e6:	623b      	str	r3, [r7, #32]
 80070e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80070f0:	2100      	movs	r1, #0
 80070f2:	4b47      	ldr	r3, [pc, #284]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x188>)
 80070f4:	fb03 f201 	mul.w	r2, r3, r1
 80070f8:	2300      	movs	r3, #0
 80070fa:	fb00 f303 	mul.w	r3, r0, r3
 80070fe:	4413      	add	r3, r2
 8007100:	4a43      	ldr	r2, [pc, #268]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x188>)
 8007102:	fba0 1202 	umull	r1, r2, r0, r2
 8007106:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007108:	460a      	mov	r2, r1
 800710a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800710c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800710e:	4413      	add	r3, r2
 8007110:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007114:	2200      	movs	r2, #0
 8007116:	61bb      	str	r3, [r7, #24]
 8007118:	61fa      	str	r2, [r7, #28]
 800711a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800711e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007122:	f7f9 fd99 	bl	8000c58 <__aeabi_uldivmod>
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	4613      	mov	r3, r2
 800712c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800712e:	e053      	b.n	80071d8 <HAL_RCC_GetSysClockFreq+0x150>
        } else {
            /* HSI used as PLL clock source */
            pllvco = (uint32_t)((((uint64_t)HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007130:	4b35      	ldr	r3, [pc, #212]	@ (8007208 <HAL_RCC_GetSysClockFreq+0x180>)
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	099b      	lsrs	r3, r3, #6
 8007136:	2200      	movs	r2, #0
 8007138:	613b      	str	r3, [r7, #16]
 800713a:	617a      	str	r2, [r7, #20]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007142:	f04f 0b00 	mov.w	fp, #0
 8007146:	4652      	mov	r2, sl
 8007148:	465b      	mov	r3, fp
 800714a:	f04f 0000 	mov.w	r0, #0
 800714e:	f04f 0100 	mov.w	r1, #0
 8007152:	0159      	lsls	r1, r3, #5
 8007154:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007158:	0150      	lsls	r0, r2, #5
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	ebb2 080a 	subs.w	r8, r2, sl
 8007162:	eb63 090b 	sbc.w	r9, r3, fp
 8007166:	f04f 0200 	mov.w	r2, #0
 800716a:	f04f 0300 	mov.w	r3, #0
 800716e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007172:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007176:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800717a:	ebb2 0408 	subs.w	r4, r2, r8
 800717e:	eb63 0509 	sbc.w	r5, r3, r9
 8007182:	f04f 0200 	mov.w	r2, #0
 8007186:	f04f 0300 	mov.w	r3, #0
 800718a:	00eb      	lsls	r3, r5, #3
 800718c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007190:	00e2      	lsls	r2, r4, #3
 8007192:	4614      	mov	r4, r2
 8007194:	461d      	mov	r5, r3
 8007196:	eb14 030a 	adds.w	r3, r4, sl
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	eb45 030b 	adc.w	r3, r5, fp
 80071a0:	607b      	str	r3, [r7, #4]
 80071a2:	f04f 0200 	mov.w	r2, #0
 80071a6:	f04f 0300 	mov.w	r3, #0
 80071aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80071ae:	4629      	mov	r1, r5
 80071b0:	028b      	lsls	r3, r1, #10
 80071b2:	4621      	mov	r1, r4
 80071b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071b8:	4621      	mov	r1, r4
 80071ba:	028a      	lsls	r2, r1, #10
 80071bc:	4610      	mov	r0, r2
 80071be:	4619      	mov	r1, r3
 80071c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c2:	2200      	movs	r2, #0
 80071c4:	60bb      	str	r3, [r7, #8]
 80071c6:	60fa      	str	r2, [r7, #12]
 80071c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071cc:	f7f9 fd44 	bl	8000c58 <__aeabi_uldivmod>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	4613      	mov	r3, r2
 80071d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80071d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007208 <HAL_RCC_GetSysClockFreq+0x180>)
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	0c1b      	lsrs	r3, r3, #16
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	3301      	adds	r3, #1
 80071e4:	005b      	lsls	r3, r3, #1
 80071e6:	633b      	str	r3, [r7, #48]	@ 0x30

        sysclockfreq = pllvco / pllp;
 80071e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80071ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f0:	63bb      	str	r3, [r7, #56]	@ 0x38
        break;
 80071f2:	e002      	b.n	80071fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default: {
        sysclockfreq = HSI_VALUE;
 80071f4:	4b05      	ldr	r3, [pc, #20]	@ (800720c <HAL_RCC_GetSysClockFreq+0x184>)
 80071f6:	63bb      	str	r3, [r7, #56]	@ 0x38
        break;
 80071f8:	bf00      	nop
    }
    }
    return sysclockfreq;
 80071fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3740      	adds	r7, #64	@ 0x40
 8007200:	46bd      	mov	sp, r7
 8007202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007206:	bf00      	nop
 8007208:	40023800 	.word	0x40023800
 800720c:	00f42400 	.word	0x00f42400
 8007210:	017d7840 	.word	0x017d7840

08007214 <HAL_RCC_GetHCLKFreq>:
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 8007214:	b480      	push	{r7}
 8007216:	af00      	add	r7, sp, #0
    return SystemCoreClock;
 8007218:	4b03      	ldr	r3, [pc, #12]	@ (8007228 <HAL_RCC_GetHCLKFreq+0x14>)
 800721a:	681b      	ldr	r3, [r3, #0]
}
 800721c:	4618      	mov	r0, r3
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	2000000c 	.word	0x2000000c

0800722c <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 800722c:	b580      	push	{r7, lr}
 800722e:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007230:	f7ff fff0 	bl	8007214 <HAL_RCC_GetHCLKFreq>
 8007234:	4602      	mov	r2, r0
 8007236:	4b05      	ldr	r3, [pc, #20]	@ (800724c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	0a9b      	lsrs	r3, r3, #10
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	4903      	ldr	r1, [pc, #12]	@ (8007250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007242:	5ccb      	ldrb	r3, [r1, r3]
 8007244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007248:	4618      	mov	r0, r3
 800724a:	bd80      	pop	{r7, pc}
 800724c:	40023800 	.word	0x40023800
 8007250:	08011db0 	.word	0x08011db0

08007254 <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 8007254:	b580      	push	{r7, lr}
 8007256:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
    return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007258:	f7ff ffdc 	bl	8007214 <HAL_RCC_GetHCLKFreq>
 800725c:	4602      	mov	r2, r0
 800725e:	4b05      	ldr	r3, [pc, #20]	@ (8007274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	0b5b      	lsrs	r3, r3, #13
 8007264:	f003 0307 	and.w	r3, r3, #7
 8007268:	4903      	ldr	r1, [pc, #12]	@ (8007278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800726a:	5ccb      	ldrb	r3, [r1, r3]
 800726c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007270:	4618      	mov	r0, r3
 8007272:	bd80      	pop	{r7, pc}
 8007274:	40023800 	.word	0x40023800
 8007278:	08011db0 	.word	0x08011db0

0800727c <HAL_TIM_PWM_Init>:
 *         due to DIR bit readonly in center aligned mode.
 *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
 * @param  htim TIM PWM handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef * htim) {
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
    /* Check the TIM handle allocation */
    if (htim == NULL) {
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_TIM_PWM_Init+0x12>
        return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e041      	b.n	8007312 <HAL_TIM_PWM_Init+0x96>
    assert_param(IS_TIM_INSTANCE(htim->Instance));
    assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
    assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
    assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

    if (htim->State == HAL_TIM_STATE_RESET) {
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d106      	bne.n	80072a8 <HAL_TIM_PWM_Init+0x2c>
        /* Allocate lock resource and initialize it */
        htim->Lock = HAL_UNLOCKED;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        htim->PWM_MspInitCallback(htim);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
        HAL_TIM_PWM_MspInit(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7fb f800 	bl	80022a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }

    /* Set the TIM state */
    htim->State = HAL_TIM_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init the base time for the PWM */
    TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3304      	adds	r3, #4
 80072b8:	4619      	mov	r1, r3
 80072ba:	4610      	mov	r0, r2
 80072bc:	f000 f9a0 	bl	8007600 <TIM_Base_SetConfig>

    /* Initialize the DMA burst operation state */
    htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

    /* Initialize the TIM channels state */
    TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    /* Initialize the TIM state*/
    htim->State = HAL_TIM_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <HAL_TIM_PWM_Start>:
 *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
 *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
 *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef * htim, uint32_t Channel) {
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]

    /* Check the parameters */
    assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

    /* Check the TIM channel state */
    if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY) {
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d109      	bne.n	8007340 <HAL_TIM_PWM_Start+0x24>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b01      	cmp	r3, #1
 8007336:	bf14      	ite	ne
 8007338:	2301      	movne	r3, #1
 800733a:	2300      	moveq	r3, #0
 800733c:	b2db      	uxtb	r3, r3
 800733e:	e022      	b.n	8007386 <HAL_TIM_PWM_Start+0x6a>
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	2b04      	cmp	r3, #4
 8007344:	d109      	bne.n	800735a <HAL_TIM_PWM_Start+0x3e>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b01      	cmp	r3, #1
 8007350:	bf14      	ite	ne
 8007352:	2301      	movne	r3, #1
 8007354:	2300      	moveq	r3, #0
 8007356:	b2db      	uxtb	r3, r3
 8007358:	e015      	b.n	8007386 <HAL_TIM_PWM_Start+0x6a>
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	2b08      	cmp	r3, #8
 800735e:	d109      	bne.n	8007374 <HAL_TIM_PWM_Start+0x58>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b01      	cmp	r3, #1
 800736a:	bf14      	ite	ne
 800736c:	2301      	movne	r3, #1
 800736e:	2300      	moveq	r3, #0
 8007370:	b2db      	uxtb	r3, r3
 8007372:	e008      	b.n	8007386 <HAL_TIM_PWM_Start+0x6a>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b01      	cmp	r3, #1
 800737e:	bf14      	ite	ne
 8007380:	2301      	movne	r3, #1
 8007382:	2300      	moveq	r3, #0
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <HAL_TIM_PWM_Start+0x72>
        return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e068      	b.n	8007460 <HAL_TIM_PWM_Start+0x144>
    }

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d104      	bne.n	800739e <HAL_TIM_PWM_Start+0x82>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2202      	movs	r2, #2
 8007398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800739c:	e013      	b.n	80073c6 <HAL_TIM_PWM_Start+0xaa>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2b04      	cmp	r3, #4
 80073a2:	d104      	bne.n	80073ae <HAL_TIM_PWM_Start+0x92>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2202      	movs	r2, #2
 80073a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073ac:	e00b      	b.n	80073c6 <HAL_TIM_PWM_Start+0xaa>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b08      	cmp	r3, #8
 80073b2:	d104      	bne.n	80073be <HAL_TIM_PWM_Start+0xa2>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2202      	movs	r2, #2
 80073b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073bc:	e003      	b.n	80073c6 <HAL_TIM_PWM_Start+0xaa>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2202      	movs	r2, #2
 80073c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2201      	movs	r2, #1
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fb22 	bl	8007a18 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a23      	ldr	r2, [pc, #140]	@ (8007468 <HAL_TIM_PWM_Start+0x14c>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d107      	bne.n	80073ee <HAL_TIM_PWM_Start+0xd2>
        /* Enable the main output */
        __HAL_TIM_MOE_ENABLE(htim);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80073ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a1d      	ldr	r2, [pc, #116]	@ (8007468 <HAL_TIM_PWM_Start+0x14c>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d018      	beq.n	800742a <HAL_TIM_PWM_Start+0x10e>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007400:	d013      	beq.n	800742a <HAL_TIM_PWM_Start+0x10e>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a19      	ldr	r2, [pc, #100]	@ (800746c <HAL_TIM_PWM_Start+0x150>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d00e      	beq.n	800742a <HAL_TIM_PWM_Start+0x10e>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a17      	ldr	r2, [pc, #92]	@ (8007470 <HAL_TIM_PWM_Start+0x154>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d009      	beq.n	800742a <HAL_TIM_PWM_Start+0x10e>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a16      	ldr	r2, [pc, #88]	@ (8007474 <HAL_TIM_PWM_Start+0x158>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d004      	beq.n	800742a <HAL_TIM_PWM_Start+0x10e>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a14      	ldr	r2, [pc, #80]	@ (8007478 <HAL_TIM_PWM_Start+0x15c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d111      	bne.n	800744e <HAL_TIM_PWM_Start+0x132>
        tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f003 0307 	and.w	r3, r3, #7
 8007434:	60fb      	str	r3, [r7, #12]
        if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2b06      	cmp	r3, #6
 800743a:	d010      	beq.n	800745e <HAL_TIM_PWM_Start+0x142>
            __HAL_TIM_ENABLE(htim);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f042 0201 	orr.w	r2, r2, #1
 800744a:	601a      	str	r2, [r3, #0]
        if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 800744c:	e007      	b.n	800745e <HAL_TIM_PWM_Start+0x142>
        }
    } else {
        __HAL_TIM_ENABLE(htim);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f042 0201 	orr.w	r2, r2, #1
 800745c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	40010000 	.word	0x40010000
 800746c:	40000400 	.word	0x40000400
 8007470:	40000800 	.word	0x40000800
 8007474:	40000c00 	.word	0x40000c00
 8007478:	40014000 	.word	0x40014000

0800747c <HAL_TIM_PWM_ConfigChannel>:
 *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
 *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
 *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef * htim, TIM_OC_InitTypeDef * sConfig, uint32_t Channel) {
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
    assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
    assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

    /* Process Locked */
    __HAL_LOCK(htim);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007492:	2b01      	cmp	r3, #1
 8007494:	d101      	bne.n	800749a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007496:	2302      	movs	r3, #2
 8007498:	e0ae      	b.n	80075f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    switch (Channel) {
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b0c      	cmp	r3, #12
 80074a6:	f200 809f 	bhi.w	80075e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80074aa:	a201      	add	r2, pc, #4	@ (adr r2, 80074b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b0:	080074e5 	.word	0x080074e5
 80074b4:	080075e9 	.word	0x080075e9
 80074b8:	080075e9 	.word	0x080075e9
 80074bc:	080075e9 	.word	0x080075e9
 80074c0:	08007525 	.word	0x08007525
 80074c4:	080075e9 	.word	0x080075e9
 80074c8:	080075e9 	.word	0x080075e9
 80074cc:	080075e9 	.word	0x080075e9
 80074d0:	08007567 	.word	0x08007567
 80074d4:	080075e9 	.word	0x080075e9
 80074d8:	080075e9 	.word	0x080075e9
 80074dc:	080075e9 	.word	0x080075e9
 80074e0:	080075a7 	.word	0x080075a7
    case TIM_CHANNEL_1: {
        /* Check the parameters */
        assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

        /* Configure the Channel 1 in PWM mode */
        TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68b9      	ldr	r1, [r7, #8]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 f908 	bl	8007700 <TIM_OC1_SetConfig>

        /* Set the Preload enable bit for channel1 */
        htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	699a      	ldr	r2, [r3, #24]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f042 0208 	orr.w	r2, r2, #8
 80074fe:	619a      	str	r2, [r3, #24]

        /* Configure the Output Fast mode */
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	699a      	ldr	r2, [r3, #24]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f022 0204 	bic.w	r2, r2, #4
 800750e:	619a      	str	r2, [r3, #24]
        htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6999      	ldr	r1, [r3, #24]
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	691a      	ldr	r2, [r3, #16]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	619a      	str	r2, [r3, #24]
        break;
 8007522:	e064      	b.n	80075ee <HAL_TIM_PWM_ConfigChannel+0x172>
    case TIM_CHANNEL_2: {
        /* Check the parameters */
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

        /* Configure the Channel 2 in PWM mode */
        TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68b9      	ldr	r1, [r7, #8]
 800752a:	4618      	mov	r0, r3
 800752c:	f000 f94e 	bl	80077cc <TIM_OC2_SetConfig>

        /* Set the Preload enable bit for channel2 */
        htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	699a      	ldr	r2, [r3, #24]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800753e:	619a      	str	r2, [r3, #24]

        /* Configure the Output Fast mode */
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	699a      	ldr	r2, [r3, #24]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800754e:	619a      	str	r2, [r3, #24]
        htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6999      	ldr	r1, [r3, #24]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	021a      	lsls	r2, r3, #8
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	430a      	orrs	r2, r1
 8007562:	619a      	str	r2, [r3, #24]
        break;
 8007564:	e043      	b.n	80075ee <HAL_TIM_PWM_ConfigChannel+0x172>
    case TIM_CHANNEL_3: {
        /* Check the parameters */
        assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

        /* Configure the Channel 3 in PWM mode */
        TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68b9      	ldr	r1, [r7, #8]
 800756c:	4618      	mov	r0, r3
 800756e:	f000 f999 	bl	80078a4 <TIM_OC3_SetConfig>

        /* Set the Preload enable bit for channel3 */
        htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	69da      	ldr	r2, [r3, #28]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f042 0208 	orr.w	r2, r2, #8
 8007580:	61da      	str	r2, [r3, #28]

        /* Configure the Output Fast mode */
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	69da      	ldr	r2, [r3, #28]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 0204 	bic.w	r2, r2, #4
 8007590:	61da      	str	r2, [r3, #28]
        htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	69d9      	ldr	r1, [r3, #28]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	691a      	ldr	r2, [r3, #16]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	430a      	orrs	r2, r1
 80075a2:	61da      	str	r2, [r3, #28]
        break;
 80075a4:	e023      	b.n	80075ee <HAL_TIM_PWM_ConfigChannel+0x172>
    case TIM_CHANNEL_4: {
        /* Check the parameters */
        assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

        /* Configure the Channel 4 in PWM mode */
        TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68b9      	ldr	r1, [r7, #8]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 f9e3 	bl	8007978 <TIM_OC4_SetConfig>

        /* Set the Preload enable bit for channel4 */
        htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	69da      	ldr	r2, [r3, #28]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075c0:	61da      	str	r2, [r3, #28]

        /* Configure the Output Fast mode */
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	69da      	ldr	r2, [r3, #28]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075d0:	61da      	str	r2, [r3, #28]
        htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	69d9      	ldr	r1, [r3, #28]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	021a      	lsls	r2, r3, #8
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	61da      	str	r2, [r3, #28]
        break;
 80075e6:	e002      	b.n	80075ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
        status = HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	75fb      	strb	r3, [r7, #23]
        break;
 80075ec:	bf00      	nop
    }

    __HAL_UNLOCK(htim);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return status;
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3718      	adds	r7, #24
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <TIM_Base_SetConfig>:
 * @brief  Time Base configuration
 * @param  TIMx TIM peripheral
 * @param  Structure TIM Base configuration structure
 * @retval None
 */
void TIM_Base_SetConfig(TIM_TypeDef * TIMx, TIM_Base_InitTypeDef * Structure) {
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
    uint32_t tmpcr1;
    tmpcr1 = TIMx->CR1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	60fb      	str	r3, [r7, #12]

    /* Set TIM Time Base Unit parameters ---------------------------------------*/
    if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx)) {
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a34      	ldr	r2, [pc, #208]	@ (80076e4 <TIM_Base_SetConfig+0xe4>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d00f      	beq.n	8007638 <TIM_Base_SetConfig+0x38>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800761e:	d00b      	beq.n	8007638 <TIM_Base_SetConfig+0x38>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a31      	ldr	r2, [pc, #196]	@ (80076e8 <TIM_Base_SetConfig+0xe8>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d007      	beq.n	8007638 <TIM_Base_SetConfig+0x38>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a30      	ldr	r2, [pc, #192]	@ (80076ec <TIM_Base_SetConfig+0xec>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d003      	beq.n	8007638 <TIM_Base_SetConfig+0x38>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a2f      	ldr	r2, [pc, #188]	@ (80076f0 <TIM_Base_SetConfig+0xf0>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d108      	bne.n	800764a <TIM_Base_SetConfig+0x4a>
        /* Select the Counter Mode */
        tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800763e:	60fb      	str	r3, [r7, #12]
        tmpcr1 |= Structure->CounterMode;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	4313      	orrs	r3, r2
 8007648:	60fb      	str	r3, [r7, #12]
    }

    if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx)) {
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a25      	ldr	r2, [pc, #148]	@ (80076e4 <TIM_Base_SetConfig+0xe4>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d01b      	beq.n	800768a <TIM_Base_SetConfig+0x8a>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007658:	d017      	beq.n	800768a <TIM_Base_SetConfig+0x8a>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a22      	ldr	r2, [pc, #136]	@ (80076e8 <TIM_Base_SetConfig+0xe8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d013      	beq.n	800768a <TIM_Base_SetConfig+0x8a>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a21      	ldr	r2, [pc, #132]	@ (80076ec <TIM_Base_SetConfig+0xec>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d00f      	beq.n	800768a <TIM_Base_SetConfig+0x8a>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a20      	ldr	r2, [pc, #128]	@ (80076f0 <TIM_Base_SetConfig+0xf0>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d00b      	beq.n	800768a <TIM_Base_SetConfig+0x8a>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a1f      	ldr	r2, [pc, #124]	@ (80076f4 <TIM_Base_SetConfig+0xf4>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d007      	beq.n	800768a <TIM_Base_SetConfig+0x8a>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a1e      	ldr	r2, [pc, #120]	@ (80076f8 <TIM_Base_SetConfig+0xf8>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d003      	beq.n	800768a <TIM_Base_SetConfig+0x8a>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a1d      	ldr	r2, [pc, #116]	@ (80076fc <TIM_Base_SetConfig+0xfc>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d108      	bne.n	800769c <TIM_Base_SetConfig+0x9c>
        /* Set the clock division */
        tmpcr1 &= ~TIM_CR1_CKD;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007690:	60fb      	str	r3, [r7, #12]
        tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	4313      	orrs	r3, r2
 800769a:	60fb      	str	r3, [r7, #12]
    }

    /* Set the auto-reload preload */
    MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	60fb      	str	r3, [r7, #12]

    TIMx->CR1 = tmpcr1;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	601a      	str	r2, [r3, #0]

    /* Set the Autoreload value */
    TIMx->ARR = (uint32_t)Structure->Period;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the Prescaler value */
    TIMx->PSC = Structure->Prescaler;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	629a      	str	r2, [r3, #40]	@ 0x28

    if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx)) {
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a08      	ldr	r2, [pc, #32]	@ (80076e4 <TIM_Base_SetConfig+0xe4>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d103      	bne.n	80076d0 <TIM_Base_SetConfig+0xd0>
        /* Set the Repetition Counter value */
        TIMx->RCR = Structure->RepetitionCounter;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	691a      	ldr	r2, [r3, #16]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Generate an update event to reload the Prescaler
       and the repetition counter (only for advanced timer) value immediately */
    TIMx->EGR = TIM_EGR_UG;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	615a      	str	r2, [r3, #20]
}
 80076d6:	bf00      	nop
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	40010000 	.word	0x40010000
 80076e8:	40000400 	.word	0x40000400
 80076ec:	40000800 	.word	0x40000800
 80076f0:	40000c00 	.word	0x40000c00
 80076f4:	40014000 	.word	0x40014000
 80076f8:	40014400 	.word	0x40014400
 80076fc:	40014800 	.word	0x40014800

08007700 <TIM_OC1_SetConfig>:
 * @brief  Timer Output Compare 1 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
static void TIM_OC1_SetConfig(TIM_TypeDef * TIMx, TIM_OC_InitTypeDef * OC_Config) {
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
    uint32_t tmpccmrx;
    uint32_t tmpccer;
    uint32_t tmpcr2;

    /* Disable the Channel 1: Reset the CC1E Bit */
    TIMx->CCER &= ~TIM_CCER_CC1E;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	f023 0201 	bic.w	r2, r3, #1
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	621a      	str	r2, [r3, #32]

    /* Get the TIMx CCER register value */
    tmpccer = TIMx->CCER;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	617b      	str	r3, [r7, #20]
    /* Get the TIMx CR2 register value */
    tmpcr2 = TIMx->CR2;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	613b      	str	r3, [r7, #16]

    /* Get the TIMx CCMR1 register value */
    tmpccmrx = TIMx->CCMR1;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Compare Mode Bits */
    tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800772e:	60fb      	str	r3, [r7, #12]
    tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f023 0303 	bic.w	r3, r3, #3
 8007736:	60fb      	str	r3, [r7, #12]
    /* Select the Output Compare Mode */
    tmpccmrx |= OC_Config->OCMode;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	4313      	orrs	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Polarity level */
    tmpccer &= ~TIM_CCER_CC1P;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f023 0302 	bic.w	r3, r3, #2
 8007748:	617b      	str	r3, [r7, #20]
    /* Set the Output Compare Polarity */
    tmpccer |= OC_Config->OCPolarity;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	4313      	orrs	r3, r2
 8007752:	617b      	str	r3, [r7, #20]

    if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1)) {
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a1c      	ldr	r2, [pc, #112]	@ (80077c8 <TIM_OC1_SetConfig+0xc8>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d10c      	bne.n	8007776 <TIM_OC1_SetConfig+0x76>
        /* Check parameters */
        assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

        /* Reset the Output N Polarity level */
        tmpccer &= ~TIM_CCER_CC1NP;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f023 0308 	bic.w	r3, r3, #8
 8007762:	617b      	str	r3, [r7, #20]
        /* Set the Output N Polarity */
        tmpccer |= OC_Config->OCNPolarity;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	697a      	ldr	r2, [r7, #20]
 800776a:	4313      	orrs	r3, r2
 800776c:	617b      	str	r3, [r7, #20]
        /* Reset the Output N State */
        tmpccer &= ~TIM_CCER_CC1NE;
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f023 0304 	bic.w	r3, r3, #4
 8007774:	617b      	str	r3, [r7, #20]
    }

    if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a13      	ldr	r2, [pc, #76]	@ (80077c8 <TIM_OC1_SetConfig+0xc8>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d111      	bne.n	80077a2 <TIM_OC1_SetConfig+0xa2>
        /* Check parameters */
        assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
        assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

        /* Reset the Output Compare and Output Compare N IDLE State */
        tmpcr2 &= ~TIM_CR2_OIS1;
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007784:	613b      	str	r3, [r7, #16]
        tmpcr2 &= ~TIM_CR2_OIS1N;
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800778c:	613b      	str	r3, [r7, #16]
        /* Set the Output Idle state */
        tmpcr2 |= OC_Config->OCIdleState;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	4313      	orrs	r3, r2
 8007796:	613b      	str	r3, [r7, #16]
        /* Set the Output N Idle state */
        tmpcr2 |= OC_Config->OCNIdleState;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	4313      	orrs	r3, r2
 80077a0:	613b      	str	r3, [r7, #16]
    }

    /* Write to TIMx CR2 */
    TIMx->CR2 = tmpcr2;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	605a      	str	r2, [r3, #4]

    /* Write to TIMx CCMR1 */
    TIMx->CCMR1 = tmpccmrx;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	619a      	str	r2, [r3, #24]

    /* Set the Capture Compare Register value */
    TIMx->CCR1 = OC_Config->Pulse;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Write to TIMx CCER */
    TIMx->CCER = tmpccer;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	621a      	str	r2, [r3, #32]
}
 80077bc:	bf00      	nop
 80077be:	371c      	adds	r7, #28
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	40010000 	.word	0x40010000

080077cc <TIM_OC2_SetConfig>:
 * @brief  Timer Output Compare 2 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
void TIM_OC2_SetConfig(TIM_TypeDef * TIMx, TIM_OC_InitTypeDef * OC_Config) {
 80077cc:	b480      	push	{r7}
 80077ce:	b087      	sub	sp, #28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
    uint32_t tmpccmrx;
    uint32_t tmpccer;
    uint32_t tmpcr2;

    /* Disable the Channel 2: Reset the CC2E Bit */
    TIMx->CCER &= ~TIM_CCER_CC2E;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	f023 0210 	bic.w	r2, r3, #16
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	621a      	str	r2, [r3, #32]

    /* Get the TIMx CCER register value */
    tmpccer = TIMx->CCER;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	617b      	str	r3, [r7, #20]
    /* Get the TIMx CR2 register value */
    tmpcr2 = TIMx->CR2;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	613b      	str	r3, [r7, #16]

    /* Get the TIMx CCMR1 register value */
    tmpccmrx = TIMx->CCMR1;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Compare mode and Capture/Compare selection Bits */
    tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077fa:	60fb      	str	r3, [r7, #12]
    tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007802:	60fb      	str	r3, [r7, #12]

    /* Select the Output Compare Mode */
    tmpccmrx |= (OC_Config->OCMode << 8U);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	021b      	lsls	r3, r3, #8
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	4313      	orrs	r3, r2
 800780e:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Polarity level */
    tmpccer &= ~TIM_CCER_CC2P;
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	f023 0320 	bic.w	r3, r3, #32
 8007816:	617b      	str	r3, [r7, #20]
    /* Set the Output Compare Polarity */
    tmpccer |= (OC_Config->OCPolarity << 4U);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	011b      	lsls	r3, r3, #4
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	4313      	orrs	r3, r2
 8007822:	617b      	str	r3, [r7, #20]

    if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2)) {
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a1e      	ldr	r2, [pc, #120]	@ (80078a0 <TIM_OC2_SetConfig+0xd4>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d10d      	bne.n	8007848 <TIM_OC2_SetConfig+0x7c>
        assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

        /* Reset the Output N Polarity level */
        tmpccer &= ~TIM_CCER_CC2NP;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007832:	617b      	str	r3, [r7, #20]
        /* Set the Output N Polarity */
        tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	011b      	lsls	r3, r3, #4
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	4313      	orrs	r3, r2
 800783e:	617b      	str	r3, [r7, #20]
        /* Reset the Output N State */
        tmpccer &= ~TIM_CCER_CC2NE;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007846:	617b      	str	r3, [r7, #20]
    }

    if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a15      	ldr	r2, [pc, #84]	@ (80078a0 <TIM_OC2_SetConfig+0xd4>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d113      	bne.n	8007878 <TIM_OC2_SetConfig+0xac>
        /* Check parameters */
        assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
        assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

        /* Reset the Output Compare and Output Compare N IDLE State */
        tmpcr2 &= ~TIM_CR2_OIS2;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007856:	613b      	str	r3, [r7, #16]
        tmpcr2 &= ~TIM_CR2_OIS2N;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800785e:	613b      	str	r3, [r7, #16]
        /* Set the Output Idle state */
        tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	4313      	orrs	r3, r2
 800786a:	613b      	str	r3, [r7, #16]
        /* Set the Output N Idle state */
        tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	4313      	orrs	r3, r2
 8007876:	613b      	str	r3, [r7, #16]
    }

    /* Write to TIMx CR2 */
    TIMx->CR2 = tmpcr2;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	605a      	str	r2, [r3, #4]

    /* Write to TIMx CCMR1 */
    TIMx->CCMR1 = tmpccmrx;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	619a      	str	r2, [r3, #24]

    /* Set the Capture Compare Register value */
    TIMx->CCR2 = OC_Config->Pulse;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Write to TIMx CCER */
    TIMx->CCER = tmpccer;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	621a      	str	r2, [r3, #32]
}
 8007892:	bf00      	nop
 8007894:	371c      	adds	r7, #28
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	40010000 	.word	0x40010000

080078a4 <TIM_OC3_SetConfig>:
 * @brief  Timer Output Compare 3 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
static void TIM_OC3_SetConfig(TIM_TypeDef * TIMx, TIM_OC_InitTypeDef * OC_Config) {
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
    uint32_t tmpccmrx;
    uint32_t tmpccer;
    uint32_t tmpcr2;

    /* Disable the Channel 3: Reset the CC2E Bit */
    TIMx->CCER &= ~TIM_CCER_CC3E;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	621a      	str	r2, [r3, #32]

    /* Get the TIMx CCER register value */
    tmpccer = TIMx->CCER;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	617b      	str	r3, [r7, #20]
    /* Get the TIMx CR2 register value */
    tmpcr2 = TIMx->CR2;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	613b      	str	r3, [r7, #16]

    /* Get the TIMx CCMR2 register value */
    tmpccmrx = TIMx->CCMR2;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	69db      	ldr	r3, [r3, #28]
 80078ca:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Compare mode and Capture/Compare selection Bits */
    tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078d2:	60fb      	str	r3, [r7, #12]
    tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f023 0303 	bic.w	r3, r3, #3
 80078da:	60fb      	str	r3, [r7, #12]
    /* Select the Output Compare Mode */
    tmpccmrx |= OC_Config->OCMode;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Polarity level */
    tmpccer &= ~TIM_CCER_CC3P;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80078ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Compare Polarity */
    tmpccer |= (OC_Config->OCPolarity << 8U);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	021b      	lsls	r3, r3, #8
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	617b      	str	r3, [r7, #20]

    if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3)) {
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a1d      	ldr	r2, [pc, #116]	@ (8007974 <TIM_OC3_SetConfig+0xd0>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d10d      	bne.n	800791e <TIM_OC3_SetConfig+0x7a>
        assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

        /* Reset the Output N Polarity level */
        tmpccer &= ~TIM_CCER_CC3NP;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007908:	617b      	str	r3, [r7, #20]
        /* Set the Output N Polarity */
        tmpccer |= (OC_Config->OCNPolarity << 8U);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	021b      	lsls	r3, r3, #8
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	4313      	orrs	r3, r2
 8007914:	617b      	str	r3, [r7, #20]
        /* Reset the Output N State */
        tmpccer &= ~TIM_CCER_CC3NE;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800791c:	617b      	str	r3, [r7, #20]
    }

    if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a14      	ldr	r2, [pc, #80]	@ (8007974 <TIM_OC3_SetConfig+0xd0>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d113      	bne.n	800794e <TIM_OC3_SetConfig+0xaa>
        /* Check parameters */
        assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
        assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

        /* Reset the Output Compare and Output Compare N IDLE State */
        tmpcr2 &= ~TIM_CR2_OIS3;
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800792c:	613b      	str	r3, [r7, #16]
        tmpcr2 &= ~TIM_CR2_OIS3N;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007934:	613b      	str	r3, [r7, #16]
        /* Set the Output Idle state */
        tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	011b      	lsls	r3, r3, #4
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	4313      	orrs	r3, r2
 8007940:	613b      	str	r3, [r7, #16]
        /* Set the Output N Idle state */
        tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	011b      	lsls	r3, r3, #4
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	4313      	orrs	r3, r2
 800794c:	613b      	str	r3, [r7, #16]
    }

    /* Write to TIMx CR2 */
    TIMx->CR2 = tmpcr2;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	605a      	str	r2, [r3, #4]

    /* Write to TIMx CCMR2 */
    TIMx->CCMR2 = tmpccmrx;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	61da      	str	r2, [r3, #28]

    /* Set the Capture Compare Register value */
    TIMx->CCR3 = OC_Config->Pulse;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Write to TIMx CCER */
    TIMx->CCER = tmpccer;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	621a      	str	r2, [r3, #32]
}
 8007968:	bf00      	nop
 800796a:	371c      	adds	r7, #28
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	40010000 	.word	0x40010000

08007978 <TIM_OC4_SetConfig>:
 * @brief  Timer Output Compare 4 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
static void TIM_OC4_SetConfig(TIM_TypeDef * TIMx, TIM_OC_InitTypeDef * OC_Config) {
 8007978:	b480      	push	{r7}
 800797a:	b087      	sub	sp, #28
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
    uint32_t tmpccmrx;
    uint32_t tmpccer;
    uint32_t tmpcr2;

    /* Disable the Channel 4: Reset the CC4E Bit */
    TIMx->CCER &= ~TIM_CCER_CC4E;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	621a      	str	r2, [r3, #32]

    /* Get the TIMx CCER register value */
    tmpccer = TIMx->CCER;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	613b      	str	r3, [r7, #16]
    /* Get the TIMx CR2 register value */
    tmpcr2 = TIMx->CR2;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	617b      	str	r3, [r7, #20]

    /* Get the TIMx CCMR2 register value */
    tmpccmrx = TIMx->CCMR2;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Compare mode and Capture/Compare selection Bits */
    tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079a6:	60fb      	str	r3, [r7, #12]
    tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079ae:	60fb      	str	r3, [r7, #12]

    /* Select the Output Compare Mode */
    tmpccmrx |= (OC_Config->OCMode << 8U);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	021b      	lsls	r3, r3, #8
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Polarity level */
    tmpccer &= ~TIM_CCER_CC4P;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80079c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Compare Polarity */
    tmpccer |= (OC_Config->OCPolarity << 12U);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	031b      	lsls	r3, r3, #12
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	613b      	str	r3, [r7, #16]

    if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a10      	ldr	r2, [pc, #64]	@ (8007a14 <TIM_OC4_SetConfig+0x9c>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d109      	bne.n	80079ec <TIM_OC4_SetConfig+0x74>
        /* Check parameters */
        assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

        /* Reset the Output Compare IDLE State */
        tmpcr2 &= ~TIM_CR2_OIS4;
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079de:	617b      	str	r3, [r7, #20]

        /* Set the Output Idle state */
        tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	019b      	lsls	r3, r3, #6
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	617b      	str	r3, [r7, #20]
    }

    /* Write to TIMx CR2 */
    TIMx->CR2 = tmpcr2;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	605a      	str	r2, [r3, #4]

    /* Write to TIMx CCMR2 */
    TIMx->CCMR2 = tmpccmrx;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	61da      	str	r2, [r3, #28]

    /* Set the Capture Compare Register value */
    TIMx->CCR4 = OC_Config->Pulse;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Write to TIMx CCER */
    TIMx->CCER = tmpccer;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	621a      	str	r2, [r3, #32]
}
 8007a06:	bf00      	nop
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	40010000 	.word	0x40010000

08007a18 <TIM_CCxChannelCmd>:
 *            @arg TIM_CHANNEL_4: TIM Channel 4
 * @param  ChannelState specifies the TIM Channel CCxE bit new state.
 *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
 * @retval None
 */
void TIM_CCxChannelCmd(TIM_TypeDef * TIMx, uint32_t Channel, uint32_t ChannelState) {
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]

    /* Check the parameters */
    assert_param(IS_TIM_CC1_INSTANCE(TIMx));
    assert_param(IS_TIM_CHANNELS(Channel));

    tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	f003 031f 	and.w	r3, r3, #31
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a30:	617b      	str	r3, [r7, #20]

    /* Reset the CCxE Bit */
    TIMx->CCER &= ~tmp;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6a1a      	ldr	r2, [r3, #32]
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	43db      	mvns	r3, r3
 8007a3a:	401a      	ands	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	621a      	str	r2, [r3, #32]

    /* Set or reset the CCxE Bit */
    TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6a1a      	ldr	r2, [r3, #32]
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	f003 031f 	and.w	r3, r3, #31
 8007a4a:	6879      	ldr	r1, [r7, #4]
 8007a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a50:	431a      	orrs	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	621a      	str	r2, [r3, #32]
}
 8007a56:	bf00      	nop
 8007a58:	371c      	adds	r7, #28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
	...

08007a64 <HAL_TIMEx_MasterConfigSynchronization>:
 * @param  sMasterConfig pointer to a TIM_MasterConfigTypeDef structure that
 *         contains the selected trigger output (TRGO) and the Master/Slave
 *         mode.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef * htim, TIM_MasterConfigTypeDef * sMasterConfig) {
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
    assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
    assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
    assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

    /* Check input state */
    __HAL_LOCK(htim);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d101      	bne.n	8007a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e050      	b.n	8007b1e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Change the handler state */
    htim->State = HAL_TIM_STATE_BUSY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2202      	movs	r2, #2
 8007a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Get the TIMx CR2 register value */
    tmpcr2 = htim->Instance->CR2;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	60fb      	str	r3, [r7, #12]

    /* Get the TIMx SMCR register value */
    tmpsmcr = htim->Instance->SMCR;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	60bb      	str	r3, [r7, #8]

    /* Reset the MMS Bits */
    tmpcr2 &= ~TIM_CR2_MMS;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aa2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO source */
    tmpcr2 |= sMasterConfig->MasterOutputTrigger;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]

    /* Update TIMx CR2 */
    htim->Instance->CR2 = tmpcr2;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	605a      	str	r2, [r3, #4]

    if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a1c      	ldr	r2, [pc, #112]	@ (8007b2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d018      	beq.n	8007af2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ac8:	d013      	beq.n	8007af2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a18      	ldr	r2, [pc, #96]	@ (8007b30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d00e      	beq.n	8007af2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a16      	ldr	r2, [pc, #88]	@ (8007b34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d009      	beq.n	8007af2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a15      	ldr	r2, [pc, #84]	@ (8007b38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d004      	beq.n	8007af2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a13      	ldr	r2, [pc, #76]	@ (8007b3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d10c      	bne.n	8007b0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
        /* Reset the MSM Bit */
        tmpsmcr &= ~TIM_SMCR_MSM;
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007af8:	60bb      	str	r3, [r7, #8]
        /* Set master mode */
        tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	60bb      	str	r3, [r7, #8]

        /* Update TIMx SMCR */
        htim->Instance->SMCR = tmpsmcr;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	609a      	str	r2, [r3, #8]
    }

    /* Change the htim state */
    htim->State = HAL_TIM_STATE_READY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    __HAL_UNLOCK(htim);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	40010000 	.word	0x40010000
 8007b30:	40000400 	.word	0x40000400
 8007b34:	40000800 	.word	0x40000800
 8007b38:	40000c00 	.word	0x40000c00
 8007b3c:	40014000 	.word	0x40014000

08007b40 <HAL_UART_Init>:
 *         the UART_InitTypeDef and create the associated handle.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef * huart) {
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
    /* Check the UART handle allocation */
    if (huart == NULL) {
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <HAL_UART_Init+0x12>
        return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e03f      	b.n	8007bd2 <HAL_UART_Init+0x92>
        assert_param(IS_UART_INSTANCE(huart->Instance));
    }
    assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
    assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

    if (huart->gState == HAL_UART_STATE_RESET) {
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d106      	bne.n	8007b6c <HAL_UART_Init+0x2c>
        /* Allocate lock resource and initialize it */
        huart->Lock = HAL_UNLOCKED;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Init the low level hardware */
        huart->MspInitCallback(huart);
#else
        /* Init the low level hardware : GPIO, CLOCK */
        HAL_UART_MspInit(huart);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7fa fc1a 	bl	80023a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
    }

    huart->gState = HAL_UART_STATE_BUSY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2224      	movs	r2, #36	@ 0x24
 8007b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the peripheral */
    __HAL_UART_DISABLE(huart);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b82:	60da      	str	r2, [r3, #12]

    /* Set the UART Communication parameters */
    UART_SetConfig(huart);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 faa5 	bl	80080d4 <UART_SetConfig>

    /* In asynchronous mode, the following bits must be kept cleared:
       - LINEN and CLKEN bits in the USART_CR2 register,
       - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
    CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	691a      	ldr	r2, [r3, #16]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b98:	611a      	str	r2, [r3, #16]
    CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	695a      	ldr	r2, [r3, #20]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ba8:	615a      	str	r2, [r3, #20]

    /* Enable the peripheral */
    __HAL_UART_ENABLE(huart);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68da      	ldr	r2, [r3, #12]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007bb8:	60da      	str	r2, [r3, #12]

    /* Initialize the UART state */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2220      	movs	r2, #32
 8007bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <HAL_UART_Receive_DMA>:
 * @param  pData Pointer to data buffer (u8 or u16 data elements).
 * @param  Size  Amount of data elements (u8 or u16) to be received.
 * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef * huart, uint8_t * pData, uint16_t Size) {
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	60f8      	str	r0, [r7, #12]
 8007be2:	60b9      	str	r1, [r7, #8]
 8007be4:	4613      	mov	r3, r2
 8007be6:	80fb      	strh	r3, [r7, #6]
    /* Check that a Rx process is not already ongoing */
    if (huart->RxState == HAL_UART_STATE_READY) {
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b20      	cmp	r3, #32
 8007bf2:	d11d      	bne.n	8007c30 <HAL_UART_Receive_DMA+0x56>
        if ((pData == NULL) || (Size == 0U)) {
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d002      	beq.n	8007c00 <HAL_UART_Receive_DMA+0x26>
 8007bfa:	88fb      	ldrh	r3, [r7, #6]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d101      	bne.n	8007c04 <HAL_UART_Receive_DMA+0x2a>
            return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e016      	b.n	8007c32 <HAL_UART_Receive_DMA+0x58>
        }

        /* Process Locked */
        __HAL_LOCK(huart);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d101      	bne.n	8007c12 <HAL_UART_Receive_DMA+0x38>
 8007c0e:	2302      	movs	r3, #2
 8007c10:	e00f      	b.n	8007c32 <HAL_UART_Receive_DMA+0x58>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Set Reception type to Standard reception */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	631a      	str	r2, [r3, #48]	@ 0x30

        return (UART_Start_Receive_DMA(huart, pData, Size));
 8007c20:	88fb      	ldrh	r3, [r7, #6]
 8007c22:	461a      	mov	r2, r3
 8007c24:	68b9      	ldr	r1, [r7, #8]
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f000 f92a 	bl	8007e80 <UART_Start_Receive_DMA>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	e000      	b.n	8007c32 <HAL_UART_Receive_DMA+0x58>
    } else {
        return HAL_BUSY;
 8007c30:	2302      	movs	r3, #2
    }
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <HAL_UART_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) {
 8007c3a:	b480      	push	{r7}
 8007c3c:	b083      	sub	sp, #12
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    /* NOTE: This function should not be modified, when the callback is needed,
             the HAL_UART_RxCpltCallback could be implemented in the user file
     */
}
 8007c42:	bf00      	nop
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <HAL_UART_RxHalfCpltCallback>:
 * @brief  Rx Half Transfer completed callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef * huart) {
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    /* NOTE: This function should not be modified, when the callback is needed,
             the HAL_UART_RxHalfCpltCallback could be implemented in the user file
     */
}
 8007c56:	bf00      	nop
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <HAL_UART_ErrorCallback>:
 * @brief  UART error callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef * huart) {
 8007c62:	b480      	push	{r7}
 8007c64:	b083      	sub	sp, #12
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    /* NOTE: This function should not be modified, when the callback is needed,
             the HAL_UART_ErrorCallback could be implemented in the user file
     */
}
 8007c6a:	bf00      	nop
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <HAL_UARTEx_RxEventCallback>:
 * @param  huart UART handle
 * @param  Size  Number of data available in application reception buffer (indicates a position in
 *               reception buffer until which, data are available)
 * @retval None
 */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef * huart, uint16_t Size) {
 8007c76:	b480      	push	{r7}
 8007c78:	b083      	sub	sp, #12
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	460b      	mov	r3, r1
 8007c80:	807b      	strh	r3, [r7, #2]
    UNUSED(Size);

    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_UARTEx_RxEventCallback can be implemented in the user file.
     */
}
 8007c82:	bf00      	nop
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <UART_DMAReceiveCplt>:
 * @brief  DMA UART receive process complete callback.
 * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef * hdma) {
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b09c      	sub	sp, #112	@ 0x70
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    /* DMA Normal mode*/
    if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U) {
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d172      	bne.n	8007d90 <UART_DMAReceiveCplt+0x102>
        huart->RxXferCount = 0U;
 8007caa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cac:	2200      	movs	r2, #0
 8007cae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	330c      	adds	r3, #12
 8007cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  \return        value of type uint32_t at (*ptr)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t * addr) {
    uint32_t result;

    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8007cb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cba:	e853 3f00 	ldrex	r3, [r3]
 8007cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
    return (result);
 8007cc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	330c      	adds	r3, #12
 8007cce:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007cd0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007cd2:	657b      	str	r3, [r7, #84]	@ 0x54
  \return          1  Function failed
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t * addr) {
    uint32_t result;

    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8007cd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007cd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cd8:	e841 2300 	strex	r3, r2, [r1]
 8007cdc:	653b      	str	r3, [r7, #80]	@ 0x50
    return (result);
 8007cde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1e5      	bne.n	8007cb0 <UART_DMAReceiveCplt+0x22>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3314      	adds	r3, #20
 8007cea:	63bb      	str	r3, [r7, #56]	@ 0x38
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8007cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cee:	e853 3f00 	ldrex	r3, [r3]
 8007cf2:	637b      	str	r3, [r7, #52]	@ 0x34
    return (result);
 8007cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cf6:	f023 0301 	bic.w	r3, r3, #1
 8007cfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8007cfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3314      	adds	r3, #20
 8007d02:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007d04:	647a      	str	r2, [r7, #68]	@ 0x44
 8007d06:	643b      	str	r3, [r7, #64]	@ 0x40
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8007d08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d0c:	e841 2300 	strex	r3, r2, [r1]
 8007d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return (result);
 8007d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1e5      	bne.n	8007ce4 <UART_DMAReceiveCplt+0x56>

        /* Disable the DMA transfer for the receiver request by setting the DMAR bit
           in the UART CR3 register */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	3314      	adds	r3, #20
 8007d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8007d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d22:	e853 3f00 	ldrex	r3, [r3]
 8007d26:	623b      	str	r3, [r7, #32]
    return (result);
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	3314      	adds	r3, #20
 8007d36:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007d38:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8007d3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d40:	e841 2300 	strex	r3, r2, [r1]
 8007d44:	62bb      	str	r3, [r7, #40]	@ 0x28
    return (result);
 8007d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1e5      	bne.n	8007d18 <UART_DMAReceiveCplt+0x8a>

        /* At end of Rx process, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d4e:	2220      	movs	r2, #32
 8007d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8007d54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d119      	bne.n	8007d90 <UART_DMAReceiveCplt+0x102>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	330c      	adds	r3, #12
 8007d62:	613b      	str	r3, [r7, #16]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	60fb      	str	r3, [r7, #12]
    return (result);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f023 0310 	bic.w	r3, r3, #16
 8007d72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	330c      	adds	r3, #12
 8007d7a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007d7c:	61fa      	str	r2, [r7, #28]
 8007d7e:	61bb      	str	r3, [r7, #24]
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8007d80:	69b9      	ldr	r1, [r7, #24]
 8007d82:	69fa      	ldr	r2, [r7, #28]
 8007d84:	e841 2300 	strex	r3, r2, [r1]
 8007d88:	617b      	str	r3, [r7, #20]
    return (result);
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e5      	bne.n	8007d5c <UART_DMAReceiveCplt+0xce>
        }
    }

    /* Check current reception Mode :
       If Reception till IDLE event has been selected : use Rx Event callback */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8007d90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d106      	bne.n	8007da6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d9a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007da0:	f7ff ff69 	bl	8007c76 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    }
}
 8007da4:	e002      	b.n	8007dac <UART_DMAReceiveCplt+0x11e>
        HAL_UART_RxCpltCallback(huart);
 8007da6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007da8:	f7ff ff47 	bl	8007c3a <HAL_UART_RxCpltCallback>
}
 8007dac:	bf00      	nop
 8007dae:	3770      	adds	r7, #112	@ 0x70
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <UART_DMARxHalfCplt>:
 * @brief DMA UART receive process half complete callback
 * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef * hdma) {
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc0:	60fb      	str	r3, [r7, #12]

    /* Check current reception Mode :
       If Reception till IDLE event has been selected : use Rx Event callback */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d108      	bne.n	8007ddc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007dce:	085b      	lsrs	r3, r3, #1
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f7ff ff4e 	bl	8007c76 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx Half complete callback*/
        HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    }
}
 8007dda:	e002      	b.n	8007de2 <UART_DMARxHalfCplt+0x2e>
        HAL_UART_RxHalfCpltCallback(huart);
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f7ff ff36 	bl	8007c4e <HAL_UART_RxHalfCpltCallback>
}
 8007de2:	bf00      	nop
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <UART_DMAError>:
 * @brief  DMA UART communication error callback.
 * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void UART_DMAError(DMA_HandleTypeDef * hdma) {
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
    uint32_t dmarequest = 0x00U;
 8007df2:	2300      	movs	r3, #0
 8007df4:	60fb      	str	r3, [r7, #12]
    UART_HandleTypeDef * huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dfa:	60bb      	str	r3, [r7, #8]

    /* Stop UART DMA Tx request if ongoing */
    dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e06:	2b80      	cmp	r3, #128	@ 0x80
 8007e08:	bf0c      	ite	eq
 8007e0a:	2301      	moveq	r3, #1
 8007e0c:	2300      	movne	r3, #0
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	60fb      	str	r3, [r7, #12]
    if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest) {
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b21      	cmp	r3, #33	@ 0x21
 8007e1c:	d108      	bne.n	8007e30 <UART_DMAError+0x46>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d005      	beq.n	8007e30 <UART_DMAError+0x46>
        huart->TxXferCount = 0x00U;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2200      	movs	r2, #0
 8007e28:	84da      	strh	r2, [r3, #38]	@ 0x26
        UART_EndTxTransfer(huart);
 8007e2a:	68b8      	ldr	r0, [r7, #8]
 8007e2c:	f000 f8c6 	bl	8007fbc <UART_EndTxTransfer>
    }

    /* Stop UART DMA Rx request if ongoing */
    dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e3a:	2b40      	cmp	r3, #64	@ 0x40
 8007e3c:	bf0c      	ite	eq
 8007e3e:	2301      	moveq	r3, #1
 8007e40:	2300      	movne	r3, #0
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	60fb      	str	r3, [r7, #12]
    if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest) {
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b22      	cmp	r3, #34	@ 0x22
 8007e50:	d108      	bne.n	8007e64 <UART_DMAError+0x7a>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d005      	beq.n	8007e64 <UART_DMAError+0x7a>
        huart->RxXferCount = 0x00U;
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	85da      	strh	r2, [r3, #46]	@ 0x2e
        UART_EndRxTransfer(huart);
 8007e5e:	68b8      	ldr	r0, [r7, #8]
 8007e60:	f000 f8d4 	bl	800800c <UART_EndRxTransfer>
    }

    huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e68:	f043 0210 	orr.w	r2, r3, #16
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    huart->ErrorCallback(huart);
#else
    /*Call legacy weak error callback*/
    HAL_UART_ErrorCallback(huart);
 8007e70:	68b8      	ldr	r0, [r7, #8]
 8007e72:	f7ff fef6 	bl	8007c62 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e76:	bf00      	nop
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
	...

08007e80 <UART_Start_Receive_DMA>:
 * @param  huart UART handle.
 * @param  pData Pointer to data buffer (u8 or u16 data elements).
 * @param  Size  Amount of data elements (u8 or u16) to be received.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef * huart, uint8_t * pData, uint16_t Size) {
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b098      	sub	sp, #96	@ 0x60
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	80fb      	strh	r3, [r7, #6]
    uint32_t * tmp;

    huart->pRxBuffPtr = pData;
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	629a      	str	r2, [r3, #40]	@ 0x28
    huart->RxXferSize = Size;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	88fa      	ldrh	r2, [r7, #6]
 8007e98:	859a      	strh	r2, [r3, #44]	@ 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2222      	movs	r2, #34	@ 0x22
 8007ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eac:	4a40      	ldr	r2, [pc, #256]	@ (8007fb0 <UART_Start_Receive_DMA+0x130>)
 8007eae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb4:	4a3f      	ldr	r2, [pc, #252]	@ (8007fb4 <UART_Start_Receive_DMA+0x134>)
 8007eb6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ebc:	4a3e      	ldr	r2, [pc, #248]	@ (8007fb8 <UART_Start_Receive_DMA+0x138>)
 8007ebe:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8007ec8:	f107 0308 	add.w	r3, r7, #8
 8007ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	4619      	mov	r1, r3
 8007eda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	88fb      	ldrh	r3, [r7, #6]
 8007ee0:	f7fc f84a 	bl	8003f78 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	613b      	str	r3, [r7, #16]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	613b      	str	r3, [r7, #16]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	613b      	str	r3, [r7, #16]
 8007ef8:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (huart->Init.Parity != UART_PARITY_NONE) {
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d019      	beq.n	8007f3e <UART_Start_Receive_DMA+0xbe>
        /* Enable the UART Parity Error Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	330c      	adds	r3, #12
 8007f10:	643b      	str	r3, [r7, #64]	@ 0x40
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8007f12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f14:	e853 3f00 	ldrex	r3, [r3]
 8007f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return (result);
 8007f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	330c      	adds	r3, #12
 8007f28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f2a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8007f2e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007f30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f32:	e841 2300 	strex	r3, r2, [r1]
 8007f36:	647b      	str	r3, [r7, #68]	@ 0x44
    return (result);
 8007f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1e5      	bne.n	8007f0a <UART_Start_Receive_DMA+0x8a>
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3314      	adds	r3, #20
 8007f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8007f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    return (result);
 8007f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f50:	f043 0301 	orr.w	r3, r3, #1
 8007f54:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	3314      	adds	r3, #20
 8007f5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007f5e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007f60:	637b      	str	r3, [r7, #52]	@ 0x34
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8007f62:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007f64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	633b      	str	r3, [r7, #48]	@ 0x30
    return (result);
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e5      	bne.n	8007f3e <UART_Start_Receive_DMA+0xbe>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3314      	adds	r3, #20
 8007f78:	61bb      	str	r3, [r7, #24]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	e853 3f00 	ldrex	r3, [r3]
 8007f80:	617b      	str	r3, [r7, #20]
    return (result);
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f88:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3314      	adds	r3, #20
 8007f90:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f92:	627a      	str	r2, [r7, #36]	@ 0x24
 8007f94:	623b      	str	r3, [r7, #32]
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8007f96:	6a39      	ldr	r1, [r7, #32]
 8007f98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f9a:	e841 2300 	strex	r3, r2, [r1]
 8007f9e:	61fb      	str	r3, [r7, #28]
    return (result);
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1e5      	bne.n	8007f72 <UART_Start_Receive_DMA+0xf2>

    return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3760      	adds	r7, #96	@ 0x60
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	08007c8f 	.word	0x08007c8f
 8007fb4:	08007db5 	.word	0x08007db5
 8007fb8:	08007deb 	.word	0x08007deb

08007fbc <UART_EndTxTransfer>:
/**
 * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndTxTransfer(UART_HandleTypeDef * huart) {
 8007fbc:	b480      	push	{r7}
 8007fbe:	b089      	sub	sp, #36	@ 0x24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
    /* Disable TXEIE and TCIE interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	330c      	adds	r3, #12
 8007fca:	60fb      	str	r3, [r7, #12]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	e853 3f00 	ldrex	r3, [r3]
 8007fd2:	60bb      	str	r3, [r7, #8]
    return (result);
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007fda:	61fb      	str	r3, [r7, #28]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	330c      	adds	r3, #12
 8007fe2:	69fa      	ldr	r2, [r7, #28]
 8007fe4:	61ba      	str	r2, [r7, #24]
 8007fe6:	617b      	str	r3, [r7, #20]
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8007fe8:	6979      	ldr	r1, [r7, #20]
 8007fea:	69ba      	ldr	r2, [r7, #24]
 8007fec:	e841 2300 	strex	r3, r2, [r1]
 8007ff0:	613b      	str	r3, [r7, #16]
    return (result);
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1e5      	bne.n	8007fc4 <UART_EndTxTransfer+0x8>

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8008000:	bf00      	nop
 8008002:	3724      	adds	r7, #36	@ 0x24
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <UART_EndRxTransfer>:
/**
 * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef * huart) {
 800800c:	b480      	push	{r7}
 800800e:	b095      	sub	sp, #84	@ 0x54
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	330c      	adds	r3, #12
 800801a:	637b      	str	r3, [r7, #52]	@ 0x34
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 800801c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800801e:	e853 3f00 	ldrex	r3, [r3]
 8008022:	633b      	str	r3, [r7, #48]	@ 0x30
    return (result);
 8008024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008026:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800802a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	330c      	adds	r3, #12
 8008032:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008034:	643a      	str	r2, [r7, #64]	@ 0x40
 8008036:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8008038:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800803a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800803c:	e841 2300 	strex	r3, r2, [r1]
 8008040:	63bb      	str	r3, [r7, #56]	@ 0x38
    return (result);
 8008042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e5      	bne.n	8008014 <UART_EndRxTransfer+0x8>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3314      	adds	r3, #20
 800804e:	623b      	str	r3, [r7, #32]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8008050:	6a3b      	ldr	r3, [r7, #32]
 8008052:	e853 3f00 	ldrex	r3, [r3]
 8008056:	61fb      	str	r3, [r7, #28]
    return (result);
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	f023 0301 	bic.w	r3, r3, #1
 800805e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	3314      	adds	r3, #20
 8008066:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008068:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800806a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 800806c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800806e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008070:	e841 2300 	strex	r3, r2, [r1]
 8008074:	627b      	str	r3, [r7, #36]	@ 0x24
    return (result);
 8008076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1e5      	bne.n	8008048 <UART_EndRxTransfer+0x3c>

    /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008080:	2b01      	cmp	r3, #1
 8008082:	d119      	bne.n	80080b8 <UART_EndRxTransfer+0xac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	330c      	adds	r3, #12
 800808a:	60fb      	str	r3, [r7, #12]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	60bb      	str	r3, [r7, #8]
    return (result);
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f023 0310 	bic.w	r3, r3, #16
 800809a:	647b      	str	r3, [r7, #68]	@ 0x44
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	330c      	adds	r3, #12
 80080a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080a4:	61ba      	str	r2, [r7, #24]
 80080a6:	617b      	str	r3, [r7, #20]
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 80080a8:	6979      	ldr	r1, [r7, #20]
 80080aa:	69ba      	ldr	r2, [r7, #24]
 80080ac:	e841 2300 	strex	r3, r2, [r1]
 80080b0:	613b      	str	r3, [r7, #16]
    return (result);
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1e5      	bne.n	8008084 <UART_EndRxTransfer+0x78>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2220      	movs	r2, #32
 80080bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80080c6:	bf00      	nop
 80080c8:	3754      	adds	r7, #84	@ 0x54
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
	...

080080d4 <UART_SetConfig>:
 * @brief  Configures the UART peripheral.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_SetConfig(UART_HandleTypeDef * huart) {
 80080d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080d8:	b0c0      	sub	sp, #256	@ 0x100
 80080da:	af00      	add	r7, sp, #0
 80080dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
    assert_param(IS_UART_MODE(huart->Init.Mode));

    /*-------------------------- USART CR2 Configuration -----------------------*/
    /* Configure the UART Stop Bits: Set STOP[13:12] bits
       according to huart->Init.StopBits value */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80080ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080f0:	68d9      	ldr	r1, [r3, #12]
 80080f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	ea40 0301 	orr.w	r3, r0, r1
 80080fc:	6113      	str	r3, [r2, #16]
       Set the M bits according to huart->Init.WordLength value
       Set PCE and PS bits according to huart->Init.Parity value
       Set TE and RE bits according to huart->Init.Mode value
       Set OVER8 bit according to huart->Init.OverSampling value */

    tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008102:	689a      	ldr	r2, [r3, #8]
 8008104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	431a      	orrs	r2, r3
 800810c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	431a      	orrs	r2, r3
 8008114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008118:	69db      	ldr	r3, [r3, #28]
 800811a:	4313      	orrs	r3, r2
 800811c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    MODIFY_REG(huart->Instance->CR1, (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), tmpreg);
 8008120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800812c:	f021 010c 	bic.w	r1, r1, #12
 8008130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800813a:	430b      	orrs	r3, r1
 800813c:	60d3      	str	r3, [r2, #12]

    /*-------------------------- USART CR3 Configuration -----------------------*/
    /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
    MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800813e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800814a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800814e:	6999      	ldr	r1, [r3, #24]
 8008150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	ea40 0301 	orr.w	r3, r0, r1
 800815a:	6153      	str	r3, [r2, #20]
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10)) {
        pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6)) {
 800815c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	4b8f      	ldr	r3, [pc, #572]	@ (80083a0 <UART_SetConfig+0x2cc>)
 8008164:	429a      	cmp	r2, r3
 8008166:	d005      	beq.n	8008174 <UART_SetConfig+0xa0>
 8008168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	4b8d      	ldr	r3, [pc, #564]	@ (80083a4 <UART_SetConfig+0x2d0>)
 8008170:	429a      	cmp	r2, r3
 8008172:	d104      	bne.n	800817e <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008174:	f7ff f86e 	bl	8007254 <HAL_RCC_GetPCLK2Freq>
 8008178:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800817c:	e003      	b.n	8008186 <UART_SetConfig+0xb2>
    if (huart->Instance == USART1) {
        pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else {
        pclk = HAL_RCC_GetPCLK1Freq();
 800817e:	f7ff f855 	bl	800722c <HAL_RCC_GetPCLK1Freq>
 8008182:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
    /*-------------------------- USART BRR Configuration ---------------------*/
    if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8008186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800818a:	69db      	ldr	r3, [r3, #28]
 800818c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008190:	f040 810c 	bne.w	80083ac <UART_SetConfig+0x2d8>
        huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008198:	2200      	movs	r2, #0
 800819a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800819e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80081a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80081a6:	4622      	mov	r2, r4
 80081a8:	462b      	mov	r3, r5
 80081aa:	1891      	adds	r1, r2, r2
 80081ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80081ae:	415b      	adcs	r3, r3
 80081b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80081b6:	4621      	mov	r1, r4
 80081b8:	eb12 0801 	adds.w	r8, r2, r1
 80081bc:	4629      	mov	r1, r5
 80081be:	eb43 0901 	adc.w	r9, r3, r1
 80081c2:	f04f 0200 	mov.w	r2, #0
 80081c6:	f04f 0300 	mov.w	r3, #0
 80081ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081d6:	4690      	mov	r8, r2
 80081d8:	4699      	mov	r9, r3
 80081da:	4623      	mov	r3, r4
 80081dc:	eb18 0303 	adds.w	r3, r8, r3
 80081e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80081e4:	462b      	mov	r3, r5
 80081e6:	eb49 0303 	adc.w	r3, r9, r3
 80081ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80081ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80081fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80081fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008202:	460b      	mov	r3, r1
 8008204:	18db      	adds	r3, r3, r3
 8008206:	653b      	str	r3, [r7, #80]	@ 0x50
 8008208:	4613      	mov	r3, r2
 800820a:	eb42 0303 	adc.w	r3, r2, r3
 800820e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008210:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008214:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008218:	f7f8 fd1e 	bl	8000c58 <__aeabi_uldivmod>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	4b61      	ldr	r3, [pc, #388]	@ (80083a8 <UART_SetConfig+0x2d4>)
 8008222:	fba3 2302 	umull	r2, r3, r3, r2
 8008226:	095b      	lsrs	r3, r3, #5
 8008228:	011c      	lsls	r4, r3, #4
 800822a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800822e:	2200      	movs	r2, #0
 8008230:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008234:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008238:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800823c:	4642      	mov	r2, r8
 800823e:	464b      	mov	r3, r9
 8008240:	1891      	adds	r1, r2, r2
 8008242:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008244:	415b      	adcs	r3, r3
 8008246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008248:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800824c:	4641      	mov	r1, r8
 800824e:	eb12 0a01 	adds.w	sl, r2, r1
 8008252:	4649      	mov	r1, r9
 8008254:	eb43 0b01 	adc.w	fp, r3, r1
 8008258:	f04f 0200 	mov.w	r2, #0
 800825c:	f04f 0300 	mov.w	r3, #0
 8008260:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008264:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008268:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800826c:	4692      	mov	sl, r2
 800826e:	469b      	mov	fp, r3
 8008270:	4643      	mov	r3, r8
 8008272:	eb1a 0303 	adds.w	r3, sl, r3
 8008276:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800827a:	464b      	mov	r3, r9
 800827c:	eb4b 0303 	adc.w	r3, fp, r3
 8008280:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008290:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008294:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008298:	460b      	mov	r3, r1
 800829a:	18db      	adds	r3, r3, r3
 800829c:	643b      	str	r3, [r7, #64]	@ 0x40
 800829e:	4613      	mov	r3, r2
 80082a0:	eb42 0303 	adc.w	r3, r2, r3
 80082a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80082a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80082aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80082ae:	f7f8 fcd3 	bl	8000c58 <__aeabi_uldivmod>
 80082b2:	4602      	mov	r2, r0
 80082b4:	460b      	mov	r3, r1
 80082b6:	4611      	mov	r1, r2
 80082b8:	4b3b      	ldr	r3, [pc, #236]	@ (80083a8 <UART_SetConfig+0x2d4>)
 80082ba:	fba3 2301 	umull	r2, r3, r3, r1
 80082be:	095b      	lsrs	r3, r3, #5
 80082c0:	2264      	movs	r2, #100	@ 0x64
 80082c2:	fb02 f303 	mul.w	r3, r2, r3
 80082c6:	1acb      	subs	r3, r1, r3
 80082c8:	00db      	lsls	r3, r3, #3
 80082ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80082ce:	4b36      	ldr	r3, [pc, #216]	@ (80083a8 <UART_SetConfig+0x2d4>)
 80082d0:	fba3 2302 	umull	r2, r3, r3, r2
 80082d4:	095b      	lsrs	r3, r3, #5
 80082d6:	005b      	lsls	r3, r3, #1
 80082d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80082dc:	441c      	add	r4, r3
 80082de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082e2:	2200      	movs	r2, #0
 80082e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80082ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80082f0:	4642      	mov	r2, r8
 80082f2:	464b      	mov	r3, r9
 80082f4:	1891      	adds	r1, r2, r2
 80082f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80082f8:	415b      	adcs	r3, r3
 80082fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008300:	4641      	mov	r1, r8
 8008302:	1851      	adds	r1, r2, r1
 8008304:	6339      	str	r1, [r7, #48]	@ 0x30
 8008306:	4649      	mov	r1, r9
 8008308:	414b      	adcs	r3, r1
 800830a:	637b      	str	r3, [r7, #52]	@ 0x34
 800830c:	f04f 0200 	mov.w	r2, #0
 8008310:	f04f 0300 	mov.w	r3, #0
 8008314:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008318:	4659      	mov	r1, fp
 800831a:	00cb      	lsls	r3, r1, #3
 800831c:	4651      	mov	r1, sl
 800831e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008322:	4651      	mov	r1, sl
 8008324:	00ca      	lsls	r2, r1, #3
 8008326:	4610      	mov	r0, r2
 8008328:	4619      	mov	r1, r3
 800832a:	4603      	mov	r3, r0
 800832c:	4642      	mov	r2, r8
 800832e:	189b      	adds	r3, r3, r2
 8008330:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008334:	464b      	mov	r3, r9
 8008336:	460a      	mov	r2, r1
 8008338:	eb42 0303 	adc.w	r3, r2, r3
 800833c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800834c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008350:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008354:	460b      	mov	r3, r1
 8008356:	18db      	adds	r3, r3, r3
 8008358:	62bb      	str	r3, [r7, #40]	@ 0x28
 800835a:	4613      	mov	r3, r2
 800835c:	eb42 0303 	adc.w	r3, r2, r3
 8008360:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008362:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008366:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800836a:	f7f8 fc75 	bl	8000c58 <__aeabi_uldivmod>
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	4b0d      	ldr	r3, [pc, #52]	@ (80083a8 <UART_SetConfig+0x2d4>)
 8008374:	fba3 1302 	umull	r1, r3, r3, r2
 8008378:	095b      	lsrs	r3, r3, #5
 800837a:	2164      	movs	r1, #100	@ 0x64
 800837c:	fb01 f303 	mul.w	r3, r1, r3
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	00db      	lsls	r3, r3, #3
 8008384:	3332      	adds	r3, #50	@ 0x32
 8008386:	4a08      	ldr	r2, [pc, #32]	@ (80083a8 <UART_SetConfig+0x2d4>)
 8008388:	fba2 2303 	umull	r2, r3, r2, r3
 800838c:	095b      	lsrs	r3, r3, #5
 800838e:	f003 0207 	and.w	r2, r3, #7
 8008392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4422      	add	r2, r4
 800839a:	609a      	str	r2, [r3, #8]
    } else {
        huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
}
 800839c:	e106      	b.n	80085ac <UART_SetConfig+0x4d8>
 800839e:	bf00      	nop
 80083a0:	40011000 	.word	0x40011000
 80083a4:	40011400 	.word	0x40011400
 80083a8:	51eb851f 	.word	0x51eb851f
        huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083b0:	2200      	movs	r2, #0
 80083b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80083b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80083ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80083be:	4642      	mov	r2, r8
 80083c0:	464b      	mov	r3, r9
 80083c2:	1891      	adds	r1, r2, r2
 80083c4:	6239      	str	r1, [r7, #32]
 80083c6:	415b      	adcs	r3, r3
 80083c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80083ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083ce:	4641      	mov	r1, r8
 80083d0:	1854      	adds	r4, r2, r1
 80083d2:	4649      	mov	r1, r9
 80083d4:	eb43 0501 	adc.w	r5, r3, r1
 80083d8:	f04f 0200 	mov.w	r2, #0
 80083dc:	f04f 0300 	mov.w	r3, #0
 80083e0:	00eb      	lsls	r3, r5, #3
 80083e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083e6:	00e2      	lsls	r2, r4, #3
 80083e8:	4614      	mov	r4, r2
 80083ea:	461d      	mov	r5, r3
 80083ec:	4643      	mov	r3, r8
 80083ee:	18e3      	adds	r3, r4, r3
 80083f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80083f4:	464b      	mov	r3, r9
 80083f6:	eb45 0303 	adc.w	r3, r5, r3
 80083fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80083fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800840a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800840e:	f04f 0200 	mov.w	r2, #0
 8008412:	f04f 0300 	mov.w	r3, #0
 8008416:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800841a:	4629      	mov	r1, r5
 800841c:	008b      	lsls	r3, r1, #2
 800841e:	4621      	mov	r1, r4
 8008420:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008424:	4621      	mov	r1, r4
 8008426:	008a      	lsls	r2, r1, #2
 8008428:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800842c:	f7f8 fc14 	bl	8000c58 <__aeabi_uldivmod>
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	4b60      	ldr	r3, [pc, #384]	@ (80085b8 <UART_SetConfig+0x4e4>)
 8008436:	fba3 2302 	umull	r2, r3, r3, r2
 800843a:	095b      	lsrs	r3, r3, #5
 800843c:	011c      	lsls	r4, r3, #4
 800843e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008442:	2200      	movs	r2, #0
 8008444:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008448:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800844c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008450:	4642      	mov	r2, r8
 8008452:	464b      	mov	r3, r9
 8008454:	1891      	adds	r1, r2, r2
 8008456:	61b9      	str	r1, [r7, #24]
 8008458:	415b      	adcs	r3, r3
 800845a:	61fb      	str	r3, [r7, #28]
 800845c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008460:	4641      	mov	r1, r8
 8008462:	1851      	adds	r1, r2, r1
 8008464:	6139      	str	r1, [r7, #16]
 8008466:	4649      	mov	r1, r9
 8008468:	414b      	adcs	r3, r1
 800846a:	617b      	str	r3, [r7, #20]
 800846c:	f04f 0200 	mov.w	r2, #0
 8008470:	f04f 0300 	mov.w	r3, #0
 8008474:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008478:	4659      	mov	r1, fp
 800847a:	00cb      	lsls	r3, r1, #3
 800847c:	4651      	mov	r1, sl
 800847e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008482:	4651      	mov	r1, sl
 8008484:	00ca      	lsls	r2, r1, #3
 8008486:	4610      	mov	r0, r2
 8008488:	4619      	mov	r1, r3
 800848a:	4603      	mov	r3, r0
 800848c:	4642      	mov	r2, r8
 800848e:	189b      	adds	r3, r3, r2
 8008490:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008494:	464b      	mov	r3, r9
 8008496:	460a      	mov	r2, r1
 8008498:	eb42 0303 	adc.w	r3, r2, r3
 800849c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80084aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80084ac:	f04f 0200 	mov.w	r2, #0
 80084b0:	f04f 0300 	mov.w	r3, #0
 80084b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80084b8:	4649      	mov	r1, r9
 80084ba:	008b      	lsls	r3, r1, #2
 80084bc:	4641      	mov	r1, r8
 80084be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084c2:	4641      	mov	r1, r8
 80084c4:	008a      	lsls	r2, r1, #2
 80084c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80084ca:	f7f8 fbc5 	bl	8000c58 <__aeabi_uldivmod>
 80084ce:	4602      	mov	r2, r0
 80084d0:	460b      	mov	r3, r1
 80084d2:	4611      	mov	r1, r2
 80084d4:	4b38      	ldr	r3, [pc, #224]	@ (80085b8 <UART_SetConfig+0x4e4>)
 80084d6:	fba3 2301 	umull	r2, r3, r3, r1
 80084da:	095b      	lsrs	r3, r3, #5
 80084dc:	2264      	movs	r2, #100	@ 0x64
 80084de:	fb02 f303 	mul.w	r3, r2, r3
 80084e2:	1acb      	subs	r3, r1, r3
 80084e4:	011b      	lsls	r3, r3, #4
 80084e6:	3332      	adds	r3, #50	@ 0x32
 80084e8:	4a33      	ldr	r2, [pc, #204]	@ (80085b8 <UART_SetConfig+0x4e4>)
 80084ea:	fba2 2303 	umull	r2, r3, r2, r3
 80084ee:	095b      	lsrs	r3, r3, #5
 80084f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80084f4:	441c      	add	r4, r3
 80084f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084fa:	2200      	movs	r2, #0
 80084fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80084fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8008500:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008504:	4642      	mov	r2, r8
 8008506:	464b      	mov	r3, r9
 8008508:	1891      	adds	r1, r2, r2
 800850a:	60b9      	str	r1, [r7, #8]
 800850c:	415b      	adcs	r3, r3
 800850e:	60fb      	str	r3, [r7, #12]
 8008510:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008514:	4641      	mov	r1, r8
 8008516:	1851      	adds	r1, r2, r1
 8008518:	6039      	str	r1, [r7, #0]
 800851a:	4649      	mov	r1, r9
 800851c:	414b      	adcs	r3, r1
 800851e:	607b      	str	r3, [r7, #4]
 8008520:	f04f 0200 	mov.w	r2, #0
 8008524:	f04f 0300 	mov.w	r3, #0
 8008528:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800852c:	4659      	mov	r1, fp
 800852e:	00cb      	lsls	r3, r1, #3
 8008530:	4651      	mov	r1, sl
 8008532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008536:	4651      	mov	r1, sl
 8008538:	00ca      	lsls	r2, r1, #3
 800853a:	4610      	mov	r0, r2
 800853c:	4619      	mov	r1, r3
 800853e:	4603      	mov	r3, r0
 8008540:	4642      	mov	r2, r8
 8008542:	189b      	adds	r3, r3, r2
 8008544:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008546:	464b      	mov	r3, r9
 8008548:	460a      	mov	r2, r1
 800854a:	eb42 0303 	adc.w	r3, r2, r3
 800854e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	663b      	str	r3, [r7, #96]	@ 0x60
 800855a:	667a      	str	r2, [r7, #100]	@ 0x64
 800855c:	f04f 0200 	mov.w	r2, #0
 8008560:	f04f 0300 	mov.w	r3, #0
 8008564:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008568:	4649      	mov	r1, r9
 800856a:	008b      	lsls	r3, r1, #2
 800856c:	4641      	mov	r1, r8
 800856e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008572:	4641      	mov	r1, r8
 8008574:	008a      	lsls	r2, r1, #2
 8008576:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800857a:	f7f8 fb6d 	bl	8000c58 <__aeabi_uldivmod>
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	4b0d      	ldr	r3, [pc, #52]	@ (80085b8 <UART_SetConfig+0x4e4>)
 8008584:	fba3 1302 	umull	r1, r3, r3, r2
 8008588:	095b      	lsrs	r3, r3, #5
 800858a:	2164      	movs	r1, #100	@ 0x64
 800858c:	fb01 f303 	mul.w	r3, r1, r3
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	011b      	lsls	r3, r3, #4
 8008594:	3332      	adds	r3, #50	@ 0x32
 8008596:	4a08      	ldr	r2, [pc, #32]	@ (80085b8 <UART_SetConfig+0x4e4>)
 8008598:	fba2 2303 	umull	r2, r3, r2, r3
 800859c:	095b      	lsrs	r3, r3, #5
 800859e:	f003 020f 	and.w	r2, r3, #15
 80085a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4422      	add	r2, r4
 80085aa:	609a      	str	r2, [r3, #8]
}
 80085ac:	bf00      	nop
 80085ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80085b2:	46bd      	mov	sp, r7
 80085b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085b8:	51eb851f 	.word	0x51eb851f

080085bc <USB_CoreInit>:
 * @param  USBx USB Instance
 * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef * USBx, USB_OTG_CfgTypeDef cfg) {
 80085bc:	b084      	sub	sp, #16
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	f107 001c 	add.w	r0, r7, #28
 80085ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    HAL_StatusTypeDef ret;
    if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 80085ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d122      	bne.n	800861a <USB_CoreInit+0x5e>
        USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Init The ULPI Interface */
        USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80085e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	60d3      	str	r3, [r2, #12]

        /* Select vbus source */
        USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	60da      	str	r2, [r3, #12]
        if (cfg.use_external_vbus == 1U) {
 80085fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d105      	bne.n	800860e <USB_CoreInit+0x52>
            USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	60da      	str	r2, [r3, #12]
        }

        /* Reset after a PHY select */
        ret = USB_CoreReset(USBx);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f001 fbee 	bl	8009df0 <USB_CoreReset>
 8008614:	4603      	mov	r3, r0
 8008616:	73fb      	strb	r3, [r7, #15]
 8008618:	e01a      	b.n	8008650 <USB_CoreInit+0x94>
    } else /* FS interface (embedded Phy) */
    {
        /* Select FS Embedded PHY */
        USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	60da      	str	r2, [r3, #12]

        /* Reset after a PHY select */
        ret = USB_CoreReset(USBx);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f001 fbe2 	bl	8009df0 <USB_CoreReset>
 800862c:	4603      	mov	r3, r0
 800862e:	73fb      	strb	r3, [r7, #15]

        if (cfg.battery_charging_enable == 0U) {
 8008630:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008632:	2b00      	cmp	r3, #0
 8008634:	d106      	bne.n	8008644 <USB_CoreInit+0x88>
            /* Activate the USB Transceiver */
            USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800863a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	639a      	str	r2, [r3, #56]	@ 0x38
 8008642:	e005      	b.n	8008650 <USB_CoreInit+0x94>
        } else {
            /* Deactivate the USB Transceiver */
            USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008648:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	639a      	str	r2, [r3, #56]	@ 0x38
        }
    }

    if (cfg.dma_enable == 1U) {
 8008650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008652:	2b01      	cmp	r3, #1
 8008654:	d10b      	bne.n	800866e <USB_CoreInit+0xb2>
        USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f043 0206 	orr.w	r2, r3, #6
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	609a      	str	r2, [r3, #8]
        USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	f043 0220 	orr.w	r2, r3, #32
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	609a      	str	r2, [r3, #8]
    }

    return ret;
 800866e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800867a:	b004      	add	sp, #16
 800867c:	4770      	bx	lr
	...

08008680 <USB_SetTurnaroundTime>:
 * @brief  Set the USB turnaround time
 * @param  USBx USB Instance
 * @param  hclk: AHB clock frequency
 * @retval USB turnaround time In PHY Clocks number
 */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef * USBx, uint32_t hclk, uint8_t speed) {
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	4613      	mov	r3, r2
 800868c:	71fb      	strb	r3, [r7, #7]

    /* The USBTRD is configured according to the tables below, depending on AHB frequency
    used by application. In the low AHB frequency range it is used to stretch enough the USB response
    time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
    latency to the Data FIFO */
    if (speed == USBD_FS_SPEED) {
 800868e:	79fb      	ldrb	r3, [r7, #7]
 8008690:	2b02      	cmp	r3, #2
 8008692:	d165      	bne.n	8008760 <USB_SetTurnaroundTime+0xe0>
        if ((hclk >= 14200000U) && (hclk < 15000000U)) {
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	4a41      	ldr	r2, [pc, #260]	@ (800879c <USB_SetTurnaroundTime+0x11c>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d906      	bls.n	80086aa <USB_SetTurnaroundTime+0x2a>
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	4a40      	ldr	r2, [pc, #256]	@ (80087a0 <USB_SetTurnaroundTime+0x120>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d202      	bcs.n	80086aa <USB_SetTurnaroundTime+0x2a>
            /* hclk Clock Range between 14.2-15 MHz */
            UsbTrd = 0xFU;
 80086a4:	230f      	movs	r3, #15
 80086a6:	617b      	str	r3, [r7, #20]
 80086a8:	e062      	b.n	8008770 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 15000000U) && (hclk < 16000000U)) {
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	4a3c      	ldr	r2, [pc, #240]	@ (80087a0 <USB_SetTurnaroundTime+0x120>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d306      	bcc.n	80086c0 <USB_SetTurnaroundTime+0x40>
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	4a3b      	ldr	r2, [pc, #236]	@ (80087a4 <USB_SetTurnaroundTime+0x124>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d202      	bcs.n	80086c0 <USB_SetTurnaroundTime+0x40>
            /* hclk Clock Range between 15-16 MHz */
            UsbTrd = 0xEU;
 80086ba:	230e      	movs	r3, #14
 80086bc:	617b      	str	r3, [r7, #20]
 80086be:	e057      	b.n	8008770 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 16000000U) && (hclk < 17200000U)) {
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	4a38      	ldr	r2, [pc, #224]	@ (80087a4 <USB_SetTurnaroundTime+0x124>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d306      	bcc.n	80086d6 <USB_SetTurnaroundTime+0x56>
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	4a37      	ldr	r2, [pc, #220]	@ (80087a8 <USB_SetTurnaroundTime+0x128>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d202      	bcs.n	80086d6 <USB_SetTurnaroundTime+0x56>
            /* hclk Clock Range between 16-17.2 MHz */
            UsbTrd = 0xDU;
 80086d0:	230d      	movs	r3, #13
 80086d2:	617b      	str	r3, [r7, #20]
 80086d4:	e04c      	b.n	8008770 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 17200000U) && (hclk < 18500000U)) {
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	4a33      	ldr	r2, [pc, #204]	@ (80087a8 <USB_SetTurnaroundTime+0x128>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d306      	bcc.n	80086ec <USB_SetTurnaroundTime+0x6c>
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	4a32      	ldr	r2, [pc, #200]	@ (80087ac <USB_SetTurnaroundTime+0x12c>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d802      	bhi.n	80086ec <USB_SetTurnaroundTime+0x6c>
            /* hclk Clock Range between 17.2-18.5 MHz */
            UsbTrd = 0xCU;
 80086e6:	230c      	movs	r3, #12
 80086e8:	617b      	str	r3, [r7, #20]
 80086ea:	e041      	b.n	8008770 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 18500000U) && (hclk < 20000000U)) {
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	4a2f      	ldr	r2, [pc, #188]	@ (80087ac <USB_SetTurnaroundTime+0x12c>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d906      	bls.n	8008702 <USB_SetTurnaroundTime+0x82>
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	4a2e      	ldr	r2, [pc, #184]	@ (80087b0 <USB_SetTurnaroundTime+0x130>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d802      	bhi.n	8008702 <USB_SetTurnaroundTime+0x82>
            /* hclk Clock Range between 18.5-20 MHz */
            UsbTrd = 0xBU;
 80086fc:	230b      	movs	r3, #11
 80086fe:	617b      	str	r3, [r7, #20]
 8008700:	e036      	b.n	8008770 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 20000000U) && (hclk < 21800000U)) {
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	4a2a      	ldr	r2, [pc, #168]	@ (80087b0 <USB_SetTurnaroundTime+0x130>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d906      	bls.n	8008718 <USB_SetTurnaroundTime+0x98>
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	4a29      	ldr	r2, [pc, #164]	@ (80087b4 <USB_SetTurnaroundTime+0x134>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d802      	bhi.n	8008718 <USB_SetTurnaroundTime+0x98>
            /* hclk Clock Range between 20-21.8 MHz */
            UsbTrd = 0xAU;
 8008712:	230a      	movs	r3, #10
 8008714:	617b      	str	r3, [r7, #20]
 8008716:	e02b      	b.n	8008770 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 21800000U) && (hclk < 24000000U)) {
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	4a26      	ldr	r2, [pc, #152]	@ (80087b4 <USB_SetTurnaroundTime+0x134>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d906      	bls.n	800872e <USB_SetTurnaroundTime+0xae>
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	4a25      	ldr	r2, [pc, #148]	@ (80087b8 <USB_SetTurnaroundTime+0x138>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d202      	bcs.n	800872e <USB_SetTurnaroundTime+0xae>
            /* hclk Clock Range between 21.8-24 MHz */
            UsbTrd = 0x9U;
 8008728:	2309      	movs	r3, #9
 800872a:	617b      	str	r3, [r7, #20]
 800872c:	e020      	b.n	8008770 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 24000000U) && (hclk < 27700000U)) {
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	4a21      	ldr	r2, [pc, #132]	@ (80087b8 <USB_SetTurnaroundTime+0x138>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d306      	bcc.n	8008744 <USB_SetTurnaroundTime+0xc4>
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	4a20      	ldr	r2, [pc, #128]	@ (80087bc <USB_SetTurnaroundTime+0x13c>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d802      	bhi.n	8008744 <USB_SetTurnaroundTime+0xc4>
            /* hclk Clock Range between 24-27.7 MHz */
            UsbTrd = 0x8U;
 800873e:	2308      	movs	r3, #8
 8008740:	617b      	str	r3, [r7, #20]
 8008742:	e015      	b.n	8008770 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 27700000U) && (hclk < 32000000U)) {
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	4a1d      	ldr	r2, [pc, #116]	@ (80087bc <USB_SetTurnaroundTime+0x13c>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d906      	bls.n	800875a <USB_SetTurnaroundTime+0xda>
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	4a1c      	ldr	r2, [pc, #112]	@ (80087c0 <USB_SetTurnaroundTime+0x140>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d202      	bcs.n	800875a <USB_SetTurnaroundTime+0xda>
            /* hclk Clock Range between 27.7-32 MHz */
            UsbTrd = 0x7U;
 8008754:	2307      	movs	r3, #7
 8008756:	617b      	str	r3, [r7, #20]
 8008758:	e00a      	b.n	8008770 <USB_SetTurnaroundTime+0xf0>
        } else /* if(hclk >= 32000000) */
        {
            /* hclk Clock Range between 32-200 MHz */
            UsbTrd = 0x6U;
 800875a:	2306      	movs	r3, #6
 800875c:	617b      	str	r3, [r7, #20]
 800875e:	e007      	b.n	8008770 <USB_SetTurnaroundTime+0xf0>
        }
    } else if (speed == USBD_HS_SPEED) {
 8008760:	79fb      	ldrb	r3, [r7, #7]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d102      	bne.n	800876c <USB_SetTurnaroundTime+0xec>
        UsbTrd = USBD_HS_TRDT_VALUE;
 8008766:	2309      	movs	r3, #9
 8008768:	617b      	str	r3, [r7, #20]
 800876a:	e001      	b.n	8008770 <USB_SetTurnaroundTime+0xf0>
    } else {
        UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800876c:	2309      	movs	r3, #9
 800876e:	617b      	str	r3, [r7, #20]
    }

    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	60da      	str	r2, [r3, #12]
    USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	68da      	ldr	r2, [r3, #12]
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	029b      	lsls	r3, r3, #10
 8008784:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008788:	431a      	orrs	r2, r3
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	371c      	adds	r7, #28
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	00d8acbf 	.word	0x00d8acbf
 80087a0:	00e4e1c0 	.word	0x00e4e1c0
 80087a4:	00f42400 	.word	0x00f42400
 80087a8:	01067380 	.word	0x01067380
 80087ac:	011a499f 	.word	0x011a499f
 80087b0:	01312cff 	.word	0x01312cff
 80087b4:	014ca43f 	.word	0x014ca43f
 80087b8:	016e3600 	.word	0x016e3600
 80087bc:	01a6ab1f 	.word	0x01a6ab1f
 80087c0:	01e84800 	.word	0x01e84800

080087c4 <USB_EnableGlobalInt>:
 * @brief  USB_EnableGlobalInt
 *         Enables the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef * USBx) {
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	f043 0201 	orr.w	r2, r3, #1
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	370c      	adds	r7, #12
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr

080087e6 <USB_DisableGlobalInt>:
 * @brief  USB_DisableGlobalInt
 *         Disable the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef * USBx) {
 80087e6:	b480      	push	{r7}
 80087e8:	b083      	sub	sp, #12
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
    USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f023 0201 	bic.w	r2, r3, #1
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <USB_SetCurrentMode>:
 *          This parameter can be one of these values:
 *            @arg USB_DEVICE_MODE Peripheral mode
 *            @arg USB_HOST_MODE Host mode
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef * USBx, USB_OTG_ModeTypeDef mode) {
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	460b      	mov	r3, r1
 8008812:	70fb      	strb	r3, [r7, #3]
    uint32_t ms = 0U;
 8008814:	2300      	movs	r3, #0
 8008816:	60fb      	str	r3, [r7, #12]

    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	60da      	str	r2, [r3, #12]

    if (mode == USB_HOST_MODE) {
 8008824:	78fb      	ldrb	r3, [r7, #3]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d115      	bne.n	8008856 <USB_SetCurrentMode+0x4e>
        USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	60da      	str	r2, [r3, #12]

        do {
            HAL_Delay(1U);
 8008836:	2001      	movs	r0, #1
 8008838:	f7fa fdf2 	bl	8003420 <HAL_Delay>
            ms++;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3301      	adds	r3, #1
 8008840:	60fb      	str	r3, [r7, #12]
        } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f001 fa45 	bl	8009cd2 <USB_GetMode>
 8008848:	4603      	mov	r3, r0
 800884a:	2b01      	cmp	r3, #1
 800884c:	d01e      	beq.n	800888c <USB_SetCurrentMode+0x84>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2b31      	cmp	r3, #49	@ 0x31
 8008852:	d9f0      	bls.n	8008836 <USB_SetCurrentMode+0x2e>
 8008854:	e01a      	b.n	800888c <USB_SetCurrentMode+0x84>
    } else if (mode == USB_DEVICE_MODE) {
 8008856:	78fb      	ldrb	r3, [r7, #3]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d115      	bne.n	8008888 <USB_SetCurrentMode+0x80>
        USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	60da      	str	r2, [r3, #12]

        do {
            HAL_Delay(1U);
 8008868:	2001      	movs	r0, #1
 800886a:	f7fa fdd9 	bl	8003420 <HAL_Delay>
            ms++;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	3301      	adds	r3, #1
 8008872:	60fb      	str	r3, [r7, #12]
        } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f001 fa2c 	bl	8009cd2 <USB_GetMode>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d005      	beq.n	800888c <USB_SetCurrentMode+0x84>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2b31      	cmp	r3, #49	@ 0x31
 8008884:	d9f0      	bls.n	8008868 <USB_SetCurrentMode+0x60>
 8008886:	e001      	b.n	800888c <USB_SetCurrentMode+0x84>
    } else {
        return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e005      	b.n	8008898 <USB_SetCurrentMode+0x90>
    }

    if (ms == 50U) {
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2b32      	cmp	r3, #50	@ 0x32
 8008890:	d101      	bne.n	8008896 <USB_SetCurrentMode+0x8e>
        return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e000      	b.n	8008898 <USB_SetCurrentMode+0x90>
    }

    return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <USB_DevInit>:
 * @param  USBx  Selected device
 * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef * USBx, USB_OTG_CfgTypeDef cfg) {
 80088a0:	b084      	sub	sp, #16
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b086      	sub	sp, #24
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80088ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    HAL_StatusTypeDef ret = HAL_OK;
 80088b2:	2300      	movs	r3, #0
 80088b4:	75fb      	strb	r3, [r7, #23]
    uint32_t USBx_BASE = (uint32_t)USBx;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	60fb      	str	r3, [r7, #12]
    uint32_t i;

    for (i = 0U; i < 15U; i++) {
 80088ba:	2300      	movs	r3, #0
 80088bc:	613b      	str	r3, [r7, #16]
 80088be:	e009      	b.n	80088d4 <USB_DevInit+0x34>
        USBx->DIEPTXF[i] = 0U;
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	3340      	adds	r3, #64	@ 0x40
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4413      	add	r3, r2
 80088ca:	2200      	movs	r2, #0
 80088cc:	605a      	str	r2, [r3, #4]
    for (i = 0U; i < 15U; i++) {
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	3301      	adds	r3, #1
 80088d2:	613b      	str	r3, [r7, #16]
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	2b0e      	cmp	r3, #14
 80088d8:	d9f2      	bls.n	80088c0 <USB_DevInit+0x20>
        /* Enable HW VBUS sensing */
        USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
    }
#else
    /* VBUS Sensing setup */
    if (cfg.vbus_sensing_enable == 0U) {
 80088da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d11c      	bne.n	800891a <USB_DevInit+0x7a>
        /*
         * Disable HW VBUS sensing. VBUS is internally considered to be always
         * at VBUS-Valid level (5V).
         */
        USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088ee:	f043 0302 	orr.w	r3, r3, #2
 80088f2:	6053      	str	r3, [r2, #4]
        USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088f8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	639a      	str	r2, [r3, #56]	@ 0x38
        USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008904:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	639a      	str	r2, [r3, #56]	@ 0x38
        USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008910:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	639a      	str	r2, [r3, #56]	@ 0x38
 8008918:	e00b      	b.n	8008932 <USB_DevInit+0x92>
    } else {
        /* Enable HW VBUS sensing */
        USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800891e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	639a      	str	r2, [r3, #56]	@ 0x38
        USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800892a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	639a      	str	r2, [r3, #56]	@ 0x38
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

    /* Restart the Phy Clock */
    USBx_PCGCCTL = 0U;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008938:	461a      	mov	r2, r3
 800893a:	2300      	movs	r3, #0
 800893c:	6013      	str	r3, [r2, #0]

    /* Device mode configuration */
    USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008944:	4619      	mov	r1, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800894c:	461a      	mov	r2, r3
 800894e:	680b      	ldr	r3, [r1, #0]
 8008950:	6013      	str	r3, [r2, #0]

    if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 8008952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008954:	2b01      	cmp	r3, #1
 8008956:	d10c      	bne.n	8008972 <USB_DevInit+0xd2>
        if (cfg.speed == USBD_HS_SPEED) {
 8008958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800895a:	2b00      	cmp	r3, #0
 800895c:	d104      	bne.n	8008968 <USB_DevInit+0xc8>
            /* Set Core speed to High speed mode */
            (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800895e:	2100      	movs	r1, #0
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f965 	bl	8008c30 <USB_SetDevSpeed>
 8008966:	e008      	b.n	800897a <USB_DevInit+0xda>
        } else {
            /* Set Core speed to Full speed mode */
            (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008968:	2101      	movs	r1, #1
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f960 	bl	8008c30 <USB_SetDevSpeed>
 8008970:	e003      	b.n	800897a <USB_DevInit+0xda>
        }
    } else {
        /* Set Core speed to Full speed mode */
        (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008972:	2103      	movs	r1, #3
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 f95b 	bl	8008c30 <USB_SetDevSpeed>
    }

    /* Flush the FIFOs */
    if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800897a:	2110      	movs	r1, #16
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f8f3 	bl	8008b68 <USB_FlushTxFifo>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <USB_DevInit+0xec>
    {
        ret = HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	75fb      	strb	r3, [r7, #23]
    }

    if (USB_FlushRxFifo(USBx) != HAL_OK) {
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f91f 	bl	8008bd0 <USB_FlushRxFifo>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d001      	beq.n	800899c <USB_DevInit+0xfc>
        ret = HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	75fb      	strb	r3, [r7, #23]
    }

    /* Clear all pending Device Interrupts */
    USBx_DEVICE->DIEPMSK = 0U;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089a2:	461a      	mov	r2, r3
 80089a4:	2300      	movs	r3, #0
 80089a6:	6113      	str	r3, [r2, #16]
    USBx_DEVICE->DOEPMSK = 0U;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089ae:	461a      	mov	r2, r3
 80089b0:	2300      	movs	r3, #0
 80089b2:	6153      	str	r3, [r2, #20]
    USBx_DEVICE->DAINTMSK = 0U;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089ba:	461a      	mov	r2, r3
 80089bc:	2300      	movs	r3, #0
 80089be:	61d3      	str	r3, [r2, #28]

    for (i = 0U; i < cfg.dev_endpoints; i++) {
 80089c0:	2300      	movs	r3, #0
 80089c2:	613b      	str	r3, [r7, #16]
 80089c4:	e043      	b.n	8008a4e <USB_DevInit+0x1ae>
        if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA) {
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	015a      	lsls	r2, r3, #5
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	4413      	add	r3, r2
 80089ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80089d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089dc:	d118      	bne.n	8008a10 <USB_DevInit+0x170>
            if (i == 0U) {
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10a      	bne.n	80089fa <USB_DevInit+0x15a>
                USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	015a      	lsls	r2, r3, #5
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	4413      	add	r3, r2
 80089ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089f0:	461a      	mov	r2, r3
 80089f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80089f6:	6013      	str	r3, [r2, #0]
 80089f8:	e013      	b.n	8008a22 <USB_DevInit+0x182>
            } else {
                USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	015a      	lsls	r2, r3, #5
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	4413      	add	r3, r2
 8008a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a06:	461a      	mov	r2, r3
 8008a08:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008a0c:	6013      	str	r3, [r2, #0]
 8008a0e:	e008      	b.n	8008a22 <USB_DevInit+0x182>
            }
        } else {
            USBx_INEP(i)->DIEPCTL = 0U;
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	015a      	lsls	r2, r3, #5
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	4413      	add	r3, r2
 8008a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	2300      	movs	r3, #0
 8008a20:	6013      	str	r3, [r2, #0]
        }

        USBx_INEP(i)->DIEPTSIZ = 0U;
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	015a      	lsls	r2, r3, #5
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	4413      	add	r3, r2
 8008a2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a2e:	461a      	mov	r2, r3
 8008a30:	2300      	movs	r3, #0
 8008a32:	6113      	str	r3, [r2, #16]
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	015a      	lsls	r2, r3, #5
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a40:	461a      	mov	r2, r3
 8008a42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008a46:	6093      	str	r3, [r2, #8]
    for (i = 0U; i < cfg.dev_endpoints; i++) {
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	613b      	str	r3, [r7, #16]
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d3b7      	bcc.n	80089c6 <USB_DevInit+0x126>
    }

    for (i = 0U; i < cfg.dev_endpoints; i++) {
 8008a56:	2300      	movs	r3, #0
 8008a58:	613b      	str	r3, [r7, #16]
 8008a5a:	e043      	b.n	8008ae4 <USB_DevInit+0x244>
        if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	015a      	lsls	r2, r3, #5
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	4413      	add	r3, r2
 8008a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a72:	d118      	bne.n	8008aa6 <USB_DevInit+0x206>
            if (i == 0U) {
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10a      	bne.n	8008a90 <USB_DevInit+0x1f0>
                USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	015a      	lsls	r2, r3, #5
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	4413      	add	r3, r2
 8008a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a86:	461a      	mov	r2, r3
 8008a88:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008a8c:	6013      	str	r3, [r2, #0]
 8008a8e:	e013      	b.n	8008ab8 <USB_DevInit+0x218>
            } else {
                USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	015a      	lsls	r2, r3, #5
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4413      	add	r3, r2
 8008a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008aa2:	6013      	str	r3, [r2, #0]
 8008aa4:	e008      	b.n	8008ab8 <USB_DevInit+0x218>
            }
        } else {
            USBx_OUTEP(i)->DOEPCTL = 0U;
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	6013      	str	r3, [r2, #0]
        }

        USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	015a      	lsls	r2, r3, #5
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	4413      	add	r3, r2
 8008ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	6113      	str	r3, [r2, #16]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	015a      	lsls	r2, r3, #5
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008adc:	6093      	str	r3, [r2, #8]
    for (i = 0U; i < cfg.dev_endpoints; i++) {
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	613b      	str	r3, [r7, #16]
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d3b7      	bcc.n	8008a5c <USB_DevInit+0x1bc>
    }

    USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008afa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008afe:	6113      	str	r3, [r2, #16]

    /* Disable all interrupts. */
    USBx->GINTMSK = 0U;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	619a      	str	r2, [r3, #24]

    /* Clear any pending interrupts */
    USBx->GINTSTS = 0xBFFFFFFFU;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008b0c:	615a      	str	r2, [r3, #20]

    /* Enable the common interrupts */
    if (cfg.dma_enable == 0U) {
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d105      	bne.n	8008b20 <USB_DevInit+0x280>
        USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	f043 0210 	orr.w	r2, r3, #16
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	619a      	str	r2, [r3, #24]
    }

    /* Enable interrupts matching to the Device mode ONLY */
    USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST | USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT | USB_OTG_GINTMSK_OEPINT | USB_OTG_GINTMSK_IISOIXFRM | USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	699a      	ldr	r2, [r3, #24]
 8008b24:	4b0f      	ldr	r3, [pc, #60]	@ (8008b64 <USB_DevInit+0x2c4>)
 8008b26:	4313      	orrs	r3, r2
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	6193      	str	r3, [r2, #24]

    if (cfg.Sof_enable != 0U) {
 8008b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d005      	beq.n	8008b3e <USB_DevInit+0x29e>
        USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	f043 0208 	orr.w	r2, r3, #8
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	619a      	str	r2, [r3, #24]
    }

    if (cfg.vbus_sensing_enable == 1U) {
 8008b3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d107      	bne.n	8008b54 <USB_DevInit+0x2b4>
        USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b4c:	f043 0304 	orr.w	r3, r3, #4
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	6193      	str	r3, [r2, #24]
    }

    return ret;
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3718      	adds	r7, #24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b60:	b004      	add	sp, #16
 8008b62:	4770      	bx	lr
 8008b64:	803c3800 	.word	0x803c3800

08008b68 <USB_FlushTxFifo>:
  * @param  num  FIFO number
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef * USBx, uint32_t num) {
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
    __IO uint32_t count = 0U;
 8008b72:	2300      	movs	r3, #0
 8008b74:	60fb      	str	r3, [r7, #12]

    /* Wait for AHB master IDLE state. */
    do {
        count++;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	4a13      	ldr	r2, [pc, #76]	@ (8008bcc <USB_FlushTxFifo+0x64>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d901      	bls.n	8008b88 <USB_FlushTxFifo+0x20>
            return HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	e01b      	b.n	8008bc0 <USB_FlushTxFifo+0x58>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	daf2      	bge.n	8008b76 <USB_FlushTxFifo+0xe>

    /* Flush TX Fifo */
    count = 0U;
 8008b90:	2300      	movs	r3, #0
 8008b92:	60fb      	str	r3, [r7, #12]
    USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	019b      	lsls	r3, r3, #6
 8008b98:	f043 0220 	orr.w	r2, r3, #32
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	611a      	str	r2, [r3, #16]

    do {
        count++;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	4a08      	ldr	r2, [pc, #32]	@ (8008bcc <USB_FlushTxFifo+0x64>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d901      	bls.n	8008bb2 <USB_FlushTxFifo+0x4a>
            return HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e006      	b.n	8008bc0 <USB_FlushTxFifo+0x58>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	f003 0320 	and.w	r3, r3, #32
 8008bba:	2b20      	cmp	r3, #32
 8008bbc:	d0f0      	beq.n	8008ba0 <USB_FlushTxFifo+0x38>

    return HAL_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3714      	adds	r7, #20
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr
 8008bcc:	00030d40 	.word	0x00030d40

08008bd0 <USB_FlushRxFifo>:
/**
 * @brief  USB_FlushRxFifo  Flush Rx FIFO
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef * USBx) {
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
    __IO uint32_t count = 0U;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	60fb      	str	r3, [r7, #12]

    /* Wait for AHB master IDLE state. */
    do {
        count++;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	3301      	adds	r3, #1
 8008be0:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	4a11      	ldr	r2, [pc, #68]	@ (8008c2c <USB_FlushRxFifo+0x5c>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d901      	bls.n	8008bee <USB_FlushRxFifo+0x1e>
            return HAL_TIMEOUT;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e018      	b.n	8008c20 <USB_FlushRxFifo+0x50>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	daf2      	bge.n	8008bdc <USB_FlushRxFifo+0xc>

    /* Flush RX Fifo */
    count = 0U;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	60fb      	str	r3, [r7, #12]
    USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2210      	movs	r2, #16
 8008bfe:	611a      	str	r2, [r3, #16]

    do {
        count++;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	3301      	adds	r3, #1
 8008c04:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	4a08      	ldr	r2, [pc, #32]	@ (8008c2c <USB_FlushRxFifo+0x5c>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d901      	bls.n	8008c12 <USB_FlushRxFifo+0x42>
            return HAL_TIMEOUT;
 8008c0e:	2303      	movs	r3, #3
 8008c10:	e006      	b.n	8008c20 <USB_FlushRxFifo+0x50>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	f003 0310 	and.w	r3, r3, #16
 8008c1a:	2b10      	cmp	r3, #16
 8008c1c:	d0f0      	beq.n	8008c00 <USB_FlushRxFifo+0x30>

    return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	00030d40 	.word	0x00030d40

08008c30 <USB_SetDevSpeed>:
 *            @arg USB_OTG_SPEED_HIGH: High speed mode
 *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
 *            @arg USB_OTG_SPEED_FULL: Full speed mode
 * @retval  Hal status
 */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef * USBx, uint8_t speed) {
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	60fb      	str	r3, [r7, #12]

    USBx_DEVICE->DCFG |= speed;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	78fb      	ldrb	r3, [r7, #3]
 8008c4a:	68f9      	ldr	r1, [r7, #12]
 8008c4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c50:	4313      	orrs	r3, r2
 8008c52:	600b      	str	r3, [r1, #0]
    return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3714      	adds	r7, #20
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr

08008c62 <USB_GetDevSpeed>:
 * @retval speed  device speed
 *          This parameter can be one of these values:
 *            @arg USBD_HS_SPEED: High speed mode
 *            @arg USBD_FS_SPEED: Full speed mode
 */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef * USBx) {
 8008c62:	b480      	push	{r7}
 8008c64:	b087      	sub	sp, #28
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	613b      	str	r3, [r7, #16]
    uint8_t speed;
    uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	f003 0306 	and.w	r3, r3, #6
 8008c7a:	60fb      	str	r3, [r7, #12]

    if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ) {
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d102      	bne.n	8008c88 <USB_GetDevSpeed+0x26>
        speed = USBD_HS_SPEED;
 8008c82:	2300      	movs	r3, #0
 8008c84:	75fb      	strb	r3, [r7, #23]
 8008c86:	e00a      	b.n	8008c9e <USB_GetDevSpeed+0x3c>
    } else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) || (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ)) {
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d002      	beq.n	8008c94 <USB_GetDevSpeed+0x32>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2b06      	cmp	r3, #6
 8008c92:	d102      	bne.n	8008c9a <USB_GetDevSpeed+0x38>
        speed = USBD_FS_SPEED;
 8008c94:	2302      	movs	r3, #2
 8008c96:	75fb      	strb	r3, [r7, #23]
 8008c98:	e001      	b.n	8008c9e <USB_GetDevSpeed+0x3c>
    } else {
        speed = 0xFU;
 8008c9a:	230f      	movs	r3, #15
 8008c9c:	75fb      	strb	r3, [r7, #23]
    }

    return speed;
 8008c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	371c      	adds	r7, #28
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <USB_ActivateEndpoint>:
 * @brief  Activate and configure an endpoint
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t)ep->num;
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	60bb      	str	r3, [r7, #8]

    if (ep->is_in == 1U) {
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	785b      	ldrb	r3, [r3, #1]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d13a      	bne.n	8008d3e <USB_ActivateEndpoint+0x92>
        USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cce:	69da      	ldr	r2, [r3, #28]
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	f003 030f 	and.w	r3, r3, #15
 8008cd8:	2101      	movs	r1, #1
 8008cda:	fa01 f303 	lsl.w	r3, r1, r3
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	68f9      	ldr	r1, [r7, #12]
 8008ce2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	61cb      	str	r3, [r1, #28]

        if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U) {
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	015a      	lsls	r2, r3, #5
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d155      	bne.n	8008dac <USB_ActivateEndpoint+0x100>
            USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) | ((uint32_t)ep->type << 18) | (epnum << 22) | USB_OTG_DIEPCTL_SD0PID_SEVNFRM | USB_OTG_DIEPCTL_USBAEP;
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	791b      	ldrb	r3, [r3, #4]
 8008d1a:	049b      	lsls	r3, r3, #18
 8008d1c:	4319      	orrs	r1, r3
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	059b      	lsls	r3, r3, #22
 8008d22:	430b      	orrs	r3, r1
 8008d24:	4313      	orrs	r3, r2
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	0151      	lsls	r1, r2, #5
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	440a      	add	r2, r1
 8008d2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d3a:	6013      	str	r3, [r2, #0]
 8008d3c:	e036      	b.n	8008dac <USB_ActivateEndpoint+0x100>
        }
    } else {
        USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d44:	69da      	ldr	r2, [r3, #28]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	f003 030f 	and.w	r3, r3, #15
 8008d4e:	2101      	movs	r1, #1
 8008d50:	fa01 f303 	lsl.w	r3, r1, r3
 8008d54:	041b      	lsls	r3, r3, #16
 8008d56:	68f9      	ldr	r1, [r7, #12]
 8008d58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	61cb      	str	r3, [r1, #28]

        if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U) {
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	015a      	lsls	r2, r3, #5
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d11a      	bne.n	8008dac <USB_ActivateEndpoint+0x100>
            USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) | ((uint32_t)ep->type << 18) | USB_OTG_DIEPCTL_SD0PID_SEVNFRM | USB_OTG_DOEPCTL_USBAEP;
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	015a      	lsls	r2, r3, #5
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	791b      	ldrb	r3, [r3, #4]
 8008d90:	049b      	lsls	r3, r3, #18
 8008d92:	430b      	orrs	r3, r1
 8008d94:	4313      	orrs	r3, r2
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	0151      	lsls	r1, r2, #5
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	440a      	add	r2, r1
 8008d9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008da2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008da6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008daa:	6013      	str	r3, [r2, #0]
        }
    }
    return HAL_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3714      	adds	r7, #20
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
	...

08008dbc <USB_DeactivateEndpoint>:
 * @brief  De-activate and de-initialize an endpoint
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t)ep->num;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	60bb      	str	r3, [r7, #8]

    /* Read DEPCTLn register */
    if (ep->is_in == 1U) {
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	785b      	ldrb	r3, [r3, #1]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d161      	bne.n	8008e9c <USB_DeactivateEndpoint+0xe0>
        if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA) {
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	015a      	lsls	r2, r3, #5
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	4413      	add	r3, r2
 8008de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008dea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008dee:	d11f      	bne.n	8008e30 <USB_DeactivateEndpoint+0x74>
            USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	015a      	lsls	r2, r3, #5
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	4413      	add	r3, r2
 8008df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	0151      	lsls	r1, r2, #5
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	440a      	add	r2, r1
 8008e06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e0a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008e0e:	6013      	str	r3, [r2, #0]
            USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	015a      	lsls	r2, r3, #5
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	4413      	add	r3, r2
 8008e18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	0151      	lsls	r1, r2, #5
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	440a      	add	r2, r1
 8008e26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e2e:	6013      	str	r3, [r2, #0]
        }

        USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	f003 030f 	and.w	r3, r3, #15
 8008e40:	2101      	movs	r1, #1
 8008e42:	fa01 f303 	lsl.w	r3, r1, r3
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	43db      	mvns	r3, r3
 8008e4a:	68f9      	ldr	r1, [r7, #12]
 8008e4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e50:	4013      	ands	r3, r2
 8008e52:	63cb      	str	r3, [r1, #60]	@ 0x3c
        USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e5a:	69da      	ldr	r2, [r3, #28]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	f003 030f 	and.w	r3, r3, #15
 8008e64:	2101      	movs	r1, #1
 8008e66:	fa01 f303 	lsl.w	r3, r1, r3
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	43db      	mvns	r3, r3
 8008e6e:	68f9      	ldr	r1, [r7, #12]
 8008e70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e74:	4013      	ands	r3, r2
 8008e76:	61cb      	str	r3, [r1, #28]
        USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP | USB_OTG_DIEPCTL_MPSIZ | USB_OTG_DIEPCTL_TXFNUM | USB_OTG_DIEPCTL_SD0PID_SEVNFRM | USB_OTG_DIEPCTL_EPTYP);
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	015a      	lsls	r2, r3, #5
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4413      	add	r3, r2
 8008e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	0159      	lsls	r1, r3, #5
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	440b      	add	r3, r1
 8008e8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e92:	4619      	mov	r1, r3
 8008e94:	4b35      	ldr	r3, [pc, #212]	@ (8008f6c <USB_DeactivateEndpoint+0x1b0>)
 8008e96:	4013      	ands	r3, r2
 8008e98:	600b      	str	r3, [r1, #0]
 8008e9a:	e060      	b.n	8008f5e <USB_DeactivateEndpoint+0x1a2>
    } else {
        if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	015a      	lsls	r2, r3, #5
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008eae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008eb2:	d11f      	bne.n	8008ef4 <USB_DeactivateEndpoint+0x138>
            USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68ba      	ldr	r2, [r7, #8]
 8008ec4:	0151      	lsls	r1, r2, #5
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	440a      	add	r2, r1
 8008eca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ece:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008ed2:	6013      	str	r3, [r2, #0]
            USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	0151      	lsls	r1, r2, #5
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	440a      	add	r2, r1
 8008eea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008eee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ef2:	6013      	str	r3, [r2, #0]
        }

        USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008efa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	f003 030f 	and.w	r3, r3, #15
 8008f04:	2101      	movs	r1, #1
 8008f06:	fa01 f303 	lsl.w	r3, r1, r3
 8008f0a:	041b      	lsls	r3, r3, #16
 8008f0c:	43db      	mvns	r3, r3
 8008f0e:	68f9      	ldr	r1, [r7, #12]
 8008f10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f14:	4013      	ands	r3, r2
 8008f16:	63cb      	str	r3, [r1, #60]	@ 0x3c
        USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f1e:	69da      	ldr	r2, [r3, #28]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	f003 030f 	and.w	r3, r3, #15
 8008f28:	2101      	movs	r1, #1
 8008f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8008f2e:	041b      	lsls	r3, r3, #16
 8008f30:	43db      	mvns	r3, r3
 8008f32:	68f9      	ldr	r1, [r7, #12]
 8008f34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f38:	4013      	ands	r3, r2
 8008f3a:	61cb      	str	r3, [r1, #28]
        USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP | USB_OTG_DOEPCTL_MPSIZ | USB_OTG_DOEPCTL_SD0PID_SEVNFRM | USB_OTG_DOEPCTL_EPTYP);
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	015a      	lsls	r2, r3, #5
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	4413      	add	r3, r2
 8008f44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	0159      	lsls	r1, r3, #5
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	440b      	add	r3, r1
 8008f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f56:	4619      	mov	r1, r3
 8008f58:	4b05      	ldr	r3, [pc, #20]	@ (8008f70 <USB_DeactivateEndpoint+0x1b4>)
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	600b      	str	r3, [r1, #0]
    }

    return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3714      	adds	r7, #20
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	ec337800 	.word	0xec337800
 8008f70:	eff37800 	.word	0xeff37800

08008f74 <USB_EPStartXfer>:
 *          This parameter can be one of these values:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep, uint8_t dma) {
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b08a      	sub	sp, #40	@ 0x28
 8008f78:	af02      	add	r7, sp, #8
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	4613      	mov	r3, r2
 8008f80:	71fb      	strb	r3, [r7, #7]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	61fb      	str	r3, [r7, #28]
    uint32_t epnum = (uint32_t)ep->num;
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	61bb      	str	r3, [r7, #24]
    uint16_t pktcnt;

    /* IN endpoint */
    if (ep->is_in == 1U) {
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	785b      	ldrb	r3, [r3, #1]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	f040 815c 	bne.w	800924e <USB_EPStartXfer+0x2da>
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U) {
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d132      	bne.n	8009004 <USB_EPStartXfer+0x90>
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	015a      	lsls	r2, r3, #5
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	69ba      	ldr	r2, [r7, #24]
 8008fae:	0151      	lsls	r1, r2, #5
 8008fb0:	69fa      	ldr	r2, [r7, #28]
 8008fb2:	440a      	add	r2, r1
 8008fb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fb8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008fbc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008fc0:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	015a      	lsls	r2, r3, #5
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	69ba      	ldr	r2, [r7, #24]
 8008fd2:	0151      	lsls	r1, r2, #5
 8008fd4:	69fa      	ldr	r2, [r7, #28]
 8008fd6:	440a      	add	r2, r1
 8008fd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fdc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008fe0:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	69ba      	ldr	r2, [r7, #24]
 8008ff2:	0151      	lsls	r1, r2, #5
 8008ff4:	69fa      	ldr	r2, [r7, #28]
 8008ff6:	440a      	add	r2, r1
 8008ff8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ffc:	0cdb      	lsrs	r3, r3, #19
 8008ffe:	04db      	lsls	r3, r3, #19
 8009000:	6113      	str	r3, [r2, #16]
 8009002:	e074      	b.n	80090ee <USB_EPStartXfer+0x17a>
            /* Program the transfer size and packet count
             * as follows: xfersize = N * maxpacket +
             * short_packet pktcnt = N + (short_packet
             * exist ? 1 : 0)
             */
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	4413      	add	r3, r2
 800900c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	69ba      	ldr	r2, [r7, #24]
 8009014:	0151      	lsls	r1, r2, #5
 8009016:	69fa      	ldr	r2, [r7, #28]
 8009018:	440a      	add	r2, r1
 800901a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800901e:	0cdb      	lsrs	r3, r3, #19
 8009020:	04db      	lsls	r3, r3, #19
 8009022:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	015a      	lsls	r2, r3, #5
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	4413      	add	r3, r2
 800902c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	69ba      	ldr	r2, [r7, #24]
 8009034:	0151      	lsls	r1, r2, #5
 8009036:	69fa      	ldr	r2, [r7, #28]
 8009038:	440a      	add	r2, r1
 800903a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800903e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009042:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009046:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	015a      	lsls	r2, r3, #5
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	4413      	add	r3, r2
 8009050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009054:	691a      	ldr	r2, [r3, #16]
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	6999      	ldr	r1, [r3, #24]
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	440b      	add	r3, r1
 8009060:	1e59      	subs	r1, r3, #1
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	fbb1 f3f3 	udiv	r3, r1, r3
 800906a:	04d9      	lsls	r1, r3, #19
 800906c:	4b9d      	ldr	r3, [pc, #628]	@ (80092e4 <USB_EPStartXfer+0x370>)
 800906e:	400b      	ands	r3, r1
 8009070:	69b9      	ldr	r1, [r7, #24]
 8009072:	0148      	lsls	r0, r1, #5
 8009074:	69f9      	ldr	r1, [r7, #28]
 8009076:	4401      	add	r1, r0
 8009078:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800907c:	4313      	orrs	r3, r2
 800907e:	610b      	str	r3, [r1, #16]

            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	015a      	lsls	r2, r3, #5
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	4413      	add	r3, r2
 8009088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800908c:	691a      	ldr	r2, [r3, #16]
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009096:	69b9      	ldr	r1, [r7, #24]
 8009098:	0148      	lsls	r0, r1, #5
 800909a:	69f9      	ldr	r1, [r7, #28]
 800909c:	4401      	add	r1, r0
 800909e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80090a2:	4313      	orrs	r3, r2
 80090a4:	610b      	str	r3, [r1, #16]

            if (ep->type == EP_TYPE_ISOC) {
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	791b      	ldrb	r3, [r3, #4]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d11f      	bne.n	80090ee <USB_EPStartXfer+0x17a>
                USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	015a      	lsls	r2, r3, #5
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	4413      	add	r3, r2
 80090b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	69ba      	ldr	r2, [r7, #24]
 80090be:	0151      	lsls	r1, r2, #5
 80090c0:	69fa      	ldr	r2, [r7, #28]
 80090c2:	440a      	add	r2, r1
 80090c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090c8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80090cc:	6113      	str	r3, [r2, #16]
                USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	69ba      	ldr	r2, [r7, #24]
 80090de:	0151      	lsls	r1, r2, #5
 80090e0:	69fa      	ldr	r2, [r7, #28]
 80090e2:	440a      	add	r2, r1
 80090e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80090ec:	6113      	str	r3, [r2, #16]
            }
        }

        if (dma == 1U) {
 80090ee:	79fb      	ldrb	r3, [r7, #7]
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d14b      	bne.n	800918c <USB_EPStartXfer+0x218>
            if ((uint32_t)ep->dma_addr != 0U) {
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	695b      	ldr	r3, [r3, #20]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d009      	beq.n	8009110 <USB_EPStartXfer+0x19c>
                USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	015a      	lsls	r2, r3, #5
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	4413      	add	r3, r2
 8009104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009108:	461a      	mov	r2, r3
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	695b      	ldr	r3, [r3, #20]
 800910e:	6153      	str	r3, [r2, #20]
            }

            if (ep->type == EP_TYPE_ISOC) {
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	791b      	ldrb	r3, [r3, #4]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d128      	bne.n	800916a <USB_EPStartXfer+0x1f6>
                if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009124:	2b00      	cmp	r3, #0
 8009126:	d110      	bne.n	800914a <USB_EPStartXfer+0x1d6>
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	4413      	add	r3, r2
 8009130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	69ba      	ldr	r2, [r7, #24]
 8009138:	0151      	lsls	r1, r2, #5
 800913a:	69fa      	ldr	r2, [r7, #28]
 800913c:	440a      	add	r2, r1
 800913e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009142:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009146:	6013      	str	r3, [r2, #0]
 8009148:	e00f      	b.n	800916a <USB_EPStartXfer+0x1f6>
                } else {
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	015a      	lsls	r2, r3, #5
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	4413      	add	r3, r2
 8009152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	69ba      	ldr	r2, [r7, #24]
 800915a:	0151      	lsls	r1, r2, #5
 800915c:	69fa      	ldr	r2, [r7, #28]
 800915e:	440a      	add	r2, r1
 8009160:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009168:	6013      	str	r3, [r2, #0]
                }
            }

            /* EP enable, IN data in FIFO */
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	015a      	lsls	r2, r3, #5
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	4413      	add	r3, r2
 8009172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	69ba      	ldr	r2, [r7, #24]
 800917a:	0151      	lsls	r1, r2, #5
 800917c:	69fa      	ldr	r2, [r7, #28]
 800917e:	440a      	add	r2, r1
 8009180:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009184:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009188:	6013      	str	r3, [r2, #0]
 800918a:	e133      	b.n	80093f4 <USB_EPStartXfer+0x480>
        } else {
            /* EP enable, IN data in FIFO */
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	015a      	lsls	r2, r3, #5
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	4413      	add	r3, r2
 8009194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	69ba      	ldr	r2, [r7, #24]
 800919c:	0151      	lsls	r1, r2, #5
 800919e:	69fa      	ldr	r2, [r7, #28]
 80091a0:	440a      	add	r2, r1
 80091a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091a6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80091aa:	6013      	str	r3, [r2, #0]

            if (ep->type != EP_TYPE_ISOC) {
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	791b      	ldrb	r3, [r3, #4]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d015      	beq.n	80091e0 <USB_EPStartXfer+0x26c>
                /* Enable the Tx FIFO Empty Interrupt for this EP */
                if (ep->xfer_len > 0U) {
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	699b      	ldr	r3, [r3, #24]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f000 811b 	beq.w	80093f4 <USB_EPStartXfer+0x480>
                    USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	f003 030f 	and.w	r3, r3, #15
 80091ce:	2101      	movs	r1, #1
 80091d0:	fa01 f303 	lsl.w	r3, r1, r3
 80091d4:	69f9      	ldr	r1, [r7, #28]
 80091d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80091da:	4313      	orrs	r3, r2
 80091dc:	634b      	str	r3, [r1, #52]	@ 0x34
 80091de:	e109      	b.n	80093f4 <USB_EPStartXfer+0x480>
                }
            } else {
                if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d110      	bne.n	8009212 <USB_EPStartXfer+0x29e>
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	015a      	lsls	r2, r3, #5
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	4413      	add	r3, r2
 80091f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	69ba      	ldr	r2, [r7, #24]
 8009200:	0151      	lsls	r1, r2, #5
 8009202:	69fa      	ldr	r2, [r7, #28]
 8009204:	440a      	add	r2, r1
 8009206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800920a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800920e:	6013      	str	r3, [r2, #0]
 8009210:	e00f      	b.n	8009232 <USB_EPStartXfer+0x2be>
                } else {
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	4413      	add	r3, r2
 800921a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	69ba      	ldr	r2, [r7, #24]
 8009222:	0151      	lsls	r1, r2, #5
 8009224:	69fa      	ldr	r2, [r7, #28]
 8009226:	440a      	add	r2, r1
 8009228:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800922c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009230:	6013      	str	r3, [r2, #0]
                }

                (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	6919      	ldr	r1, [r3, #16]
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	781a      	ldrb	r2, [r3, #0]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	b298      	uxth	r0, r3
 8009240:	79fb      	ldrb	r3, [r7, #7]
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	4603      	mov	r3, r0
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f000 fade 	bl	8009808 <USB_WritePacket>
 800924c:	e0d2      	b.n	80093f4 <USB_EPStartXfer+0x480>
    {
        /* Program the transfer size and packet count as follows:
         * pktcnt = N
         * xfersize = N * maxpacket
         */
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	4413      	add	r3, r2
 8009256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	69ba      	ldr	r2, [r7, #24]
 800925e:	0151      	lsls	r1, r2, #5
 8009260:	69fa      	ldr	r2, [r7, #28]
 8009262:	440a      	add	r2, r1
 8009264:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009268:	0cdb      	lsrs	r3, r3, #19
 800926a:	04db      	lsls	r3, r3, #19
 800926c:	6113      	str	r3, [r2, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	015a      	lsls	r2, r3, #5
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	4413      	add	r3, r2
 8009276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	69ba      	ldr	r2, [r7, #24]
 800927e:	0151      	lsls	r1, r2, #5
 8009280:	69fa      	ldr	r2, [r7, #28]
 8009282:	440a      	add	r2, r1
 8009284:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009288:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800928c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009290:	6113      	str	r3, [r2, #16]

        if (ep->xfer_len == 0U) {
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	699b      	ldr	r3, [r3, #24]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d126      	bne.n	80092e8 <USB_EPStartXfer+0x374>
            USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	015a      	lsls	r2, r3, #5
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	4413      	add	r3, r2
 80092a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092a6:	691a      	ldr	r2, [r3, #16]
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092b0:	69b9      	ldr	r1, [r7, #24]
 80092b2:	0148      	lsls	r0, r1, #5
 80092b4:	69f9      	ldr	r1, [r7, #28]
 80092b6:	4401      	add	r1, r0
 80092b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80092bc:	4313      	orrs	r3, r2
 80092be:	610b      	str	r3, [r1, #16]
            USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	015a      	lsls	r2, r3, #5
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	4413      	add	r3, r2
 80092c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	69ba      	ldr	r2, [r7, #24]
 80092d0:	0151      	lsls	r1, r2, #5
 80092d2:	69fa      	ldr	r2, [r7, #28]
 80092d4:	440a      	add	r2, r1
 80092d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80092de:	6113      	str	r3, [r2, #16]
 80092e0:	e03a      	b.n	8009358 <USB_EPStartXfer+0x3e4>
 80092e2:	bf00      	nop
 80092e4:	1ff80000 	.word	0x1ff80000
        } else {
            pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	699a      	ldr	r2, [r3, #24]
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	4413      	add	r3, r2
 80092f2:	1e5a      	subs	r2, r3, #1
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80092fc:	82fb      	strh	r3, [r7, #22]
            ep->xfer_size = ep->maxpacket * pktcnt;
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	8afa      	ldrh	r2, [r7, #22]
 8009304:	fb03 f202 	mul.w	r2, r3, r2
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	61da      	str	r2, [r3, #28]

            USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009318:	691a      	ldr	r2, [r3, #16]
 800931a:	8afb      	ldrh	r3, [r7, #22]
 800931c:	04d9      	lsls	r1, r3, #19
 800931e:	4b38      	ldr	r3, [pc, #224]	@ (8009400 <USB_EPStartXfer+0x48c>)
 8009320:	400b      	ands	r3, r1
 8009322:	69b9      	ldr	r1, [r7, #24]
 8009324:	0148      	lsls	r0, r1, #5
 8009326:	69f9      	ldr	r1, [r7, #28]
 8009328:	4401      	add	r1, r0
 800932a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800932e:	4313      	orrs	r3, r2
 8009330:	610b      	str	r3, [r1, #16]
            USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	015a      	lsls	r2, r3, #5
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	4413      	add	r3, r2
 800933a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800933e:	691a      	ldr	r2, [r3, #16]
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	69db      	ldr	r3, [r3, #28]
 8009344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009348:	69b9      	ldr	r1, [r7, #24]
 800934a:	0148      	lsls	r0, r1, #5
 800934c:	69f9      	ldr	r1, [r7, #28]
 800934e:	4401      	add	r1, r0
 8009350:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009354:	4313      	orrs	r3, r2
 8009356:	610b      	str	r3, [r1, #16]
        }

        if (dma == 1U) {
 8009358:	79fb      	ldrb	r3, [r7, #7]
 800935a:	2b01      	cmp	r3, #1
 800935c:	d10d      	bne.n	800937a <USB_EPStartXfer+0x406>
            if ((uint32_t)ep->xfer_buff != 0U) {
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d009      	beq.n	800937a <USB_EPStartXfer+0x406>
                USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	6919      	ldr	r1, [r3, #16]
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	4413      	add	r3, r2
 8009372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009376:	460a      	mov	r2, r1
 8009378:	615a      	str	r2, [r3, #20]
            }
        }

        if (ep->type == EP_TYPE_ISOC) {
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	791b      	ldrb	r3, [r3, #4]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d128      	bne.n	80093d4 <USB_EPStartXfer+0x460>
            if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800938e:	2b00      	cmp	r3, #0
 8009390:	d110      	bne.n	80093b4 <USB_EPStartXfer+0x440>
                USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	015a      	lsls	r2, r3, #5
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	4413      	add	r3, r2
 800939a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	69ba      	ldr	r2, [r7, #24]
 80093a2:	0151      	lsls	r1, r2, #5
 80093a4:	69fa      	ldr	r2, [r7, #28]
 80093a6:	440a      	add	r2, r1
 80093a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80093b0:	6013      	str	r3, [r2, #0]
 80093b2:	e00f      	b.n	80093d4 <USB_EPStartXfer+0x460>
            } else {
                USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	015a      	lsls	r2, r3, #5
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	4413      	add	r3, r2
 80093bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	69ba      	ldr	r2, [r7, #24]
 80093c4:	0151      	lsls	r1, r2, #5
 80093c6:	69fa      	ldr	r2, [r7, #28]
 80093c8:	440a      	add	r2, r1
 80093ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093d2:	6013      	str	r3, [r2, #0]
            }
        }
        /* EP enable */
        USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	69ba      	ldr	r2, [r7, #24]
 80093e4:	0151      	lsls	r1, r2, #5
 80093e6:	69fa      	ldr	r2, [r7, #28]
 80093e8:	440a      	add	r2, r1
 80093ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093ee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80093f2:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3720      	adds	r7, #32
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	1ff80000 	.word	0x1ff80000

08009404 <USB_EP0StartXfer>:
 *          This parameter can be one of these values:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep, uint8_t dma) {
 8009404:	b480      	push	{r7}
 8009406:	b087      	sub	sp, #28
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	4613      	mov	r3, r2
 8009410:	71fb      	strb	r3, [r7, #7]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	617b      	str	r3, [r7, #20]
    uint32_t epnum = (uint32_t)ep->num;
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	613b      	str	r3, [r7, #16]

    /* IN endpoint */
    if (ep->is_in == 1U) {
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	785b      	ldrb	r3, [r3, #1]
 8009420:	2b01      	cmp	r3, #1
 8009422:	f040 80ce 	bne.w	80095c2 <USB_EP0StartXfer+0x1be>
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U) {
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	699b      	ldr	r3, [r3, #24]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d132      	bne.n	8009494 <USB_EP0StartXfer+0x90>
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	015a      	lsls	r2, r3, #5
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	4413      	add	r3, r2
 8009436:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	0151      	lsls	r1, r2, #5
 8009440:	697a      	ldr	r2, [r7, #20]
 8009442:	440a      	add	r2, r1
 8009444:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009448:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800944c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009450:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	015a      	lsls	r2, r3, #5
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	4413      	add	r3, r2
 800945a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	693a      	ldr	r2, [r7, #16]
 8009462:	0151      	lsls	r1, r2, #5
 8009464:	697a      	ldr	r2, [r7, #20]
 8009466:	440a      	add	r2, r1
 8009468:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800946c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009470:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	015a      	lsls	r2, r3, #5
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	4413      	add	r3, r2
 800947a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	0151      	lsls	r1, r2, #5
 8009484:	697a      	ldr	r2, [r7, #20]
 8009486:	440a      	add	r2, r1
 8009488:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800948c:	0cdb      	lsrs	r3, r3, #19
 800948e:	04db      	lsls	r3, r3, #19
 8009490:	6113      	str	r3, [r2, #16]
 8009492:	e04e      	b.n	8009532 <USB_EP0StartXfer+0x12e>
            /* Program the transfer size and packet count
             * as follows: xfersize = N * maxpacket +
             * short_packet pktcnt = N + (short_packet
             * exist ? 1 : 0)
             */
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	015a      	lsls	r2, r3, #5
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	4413      	add	r3, r2
 800949c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	693a      	ldr	r2, [r7, #16]
 80094a4:	0151      	lsls	r1, r2, #5
 80094a6:	697a      	ldr	r2, [r7, #20]
 80094a8:	440a      	add	r2, r1
 80094aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094ae:	0cdb      	lsrs	r3, r3, #19
 80094b0:	04db      	lsls	r3, r3, #19
 80094b2:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	015a      	lsls	r2, r3, #5
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	4413      	add	r3, r2
 80094bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	693a      	ldr	r2, [r7, #16]
 80094c4:	0151      	lsls	r1, r2, #5
 80094c6:	697a      	ldr	r2, [r7, #20]
 80094c8:	440a      	add	r2, r1
 80094ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094ce:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80094d2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80094d6:	6113      	str	r3, [r2, #16]

            if (ep->xfer_len > ep->maxpacket) {
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	699a      	ldr	r2, [r3, #24]
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d903      	bls.n	80094ec <USB_EP0StartXfer+0xe8>
                ep->xfer_len = ep->maxpacket;
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	68da      	ldr	r2, [r3, #12]
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	619a      	str	r2, [r3, #24]
            }
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	015a      	lsls	r2, r3, #5
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	4413      	add	r3, r2
 80094f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	693a      	ldr	r2, [r7, #16]
 80094fc:	0151      	lsls	r1, r2, #5
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	440a      	add	r2, r1
 8009502:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009506:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800950a:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	015a      	lsls	r2, r3, #5
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	4413      	add	r3, r2
 8009514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009518:	691a      	ldr	r2, [r3, #16]
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	699b      	ldr	r3, [r3, #24]
 800951e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009522:	6939      	ldr	r1, [r7, #16]
 8009524:	0148      	lsls	r0, r1, #5
 8009526:	6979      	ldr	r1, [r7, #20]
 8009528:	4401      	add	r1, r0
 800952a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800952e:	4313      	orrs	r3, r2
 8009530:	610b      	str	r3, [r1, #16]
        }

        if (dma == 1U) {
 8009532:	79fb      	ldrb	r3, [r7, #7]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d11e      	bne.n	8009576 <USB_EP0StartXfer+0x172>
            if ((uint32_t)ep->dma_addr != 0U) {
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	695b      	ldr	r3, [r3, #20]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d009      	beq.n	8009554 <USB_EP0StartXfer+0x150>
                USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	015a      	lsls	r2, r3, #5
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	4413      	add	r3, r2
 8009548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800954c:	461a      	mov	r2, r3
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	695b      	ldr	r3, [r3, #20]
 8009552:	6153      	str	r3, [r2, #20]
            }

            /* EP enable, IN data in FIFO */
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	4413      	add	r3, r2
 800955c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	693a      	ldr	r2, [r7, #16]
 8009564:	0151      	lsls	r1, r2, #5
 8009566:	697a      	ldr	r2, [r7, #20]
 8009568:	440a      	add	r2, r1
 800956a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800956e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009572:	6013      	str	r3, [r2, #0]
 8009574:	e097      	b.n	80096a6 <USB_EP0StartXfer+0x2a2>
        } else {
            /* EP enable, IN data in FIFO */
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	015a      	lsls	r2, r3, #5
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	4413      	add	r3, r2
 800957e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	693a      	ldr	r2, [r7, #16]
 8009586:	0151      	lsls	r1, r2, #5
 8009588:	697a      	ldr	r2, [r7, #20]
 800958a:	440a      	add	r2, r1
 800958c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009590:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009594:	6013      	str	r3, [r2, #0]

            /* Enable the Tx FIFO Empty Interrupt for this EP */
            if (ep->xfer_len > 0U) {
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	2b00      	cmp	r3, #0
 800959c:	f000 8083 	beq.w	80096a6 <USB_EP0StartXfer+0x2a2>
                USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	f003 030f 	and.w	r3, r3, #15
 80095b0:	2101      	movs	r1, #1
 80095b2:	fa01 f303 	lsl.w	r3, r1, r3
 80095b6:	6979      	ldr	r1, [r7, #20]
 80095b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80095bc:	4313      	orrs	r3, r2
 80095be:	634b      	str	r3, [r1, #52]	@ 0x34
 80095c0:	e071      	b.n	80096a6 <USB_EP0StartXfer+0x2a2>
    {
        /* Program the transfer size and packet count as follows:
         * pktcnt = N
         * xfersize = N * maxpacket
         */
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	015a      	lsls	r2, r3, #5
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	4413      	add	r3, r2
 80095ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	0151      	lsls	r1, r2, #5
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	440a      	add	r2, r1
 80095d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095dc:	0cdb      	lsrs	r3, r3, #19
 80095de:	04db      	lsls	r3, r3, #19
 80095e0:	6113      	str	r3, [r2, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	015a      	lsls	r2, r3, #5
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	4413      	add	r3, r2
 80095ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	693a      	ldr	r2, [r7, #16]
 80095f2:	0151      	lsls	r1, r2, #5
 80095f4:	697a      	ldr	r2, [r7, #20]
 80095f6:	440a      	add	r2, r1
 80095f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095fc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009600:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009604:	6113      	str	r3, [r2, #16]

        if (ep->xfer_len > 0U) {
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d003      	beq.n	8009616 <USB_EP0StartXfer+0x212>
            ep->xfer_len = ep->maxpacket;
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	68da      	ldr	r2, [r3, #12]
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	619a      	str	r2, [r3, #24]
        }

        /* Store transfer size, for EP0 this is equal to endpoint max packet size */
        ep->xfer_size = ep->maxpacket;
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	68da      	ldr	r2, [r3, #12]
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	61da      	str	r2, [r3, #28]

        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	015a      	lsls	r2, r3, #5
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	4413      	add	r3, r2
 8009626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	693a      	ldr	r2, [r7, #16]
 800962e:	0151      	lsls	r1, r2, #5
 8009630:	697a      	ldr	r2, [r7, #20]
 8009632:	440a      	add	r2, r1
 8009634:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009638:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800963c:	6113      	str	r3, [r2, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	015a      	lsls	r2, r3, #5
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	4413      	add	r3, r2
 8009646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800964a:	691a      	ldr	r2, [r3, #16]
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	69db      	ldr	r3, [r3, #28]
 8009650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009654:	6939      	ldr	r1, [r7, #16]
 8009656:	0148      	lsls	r0, r1, #5
 8009658:	6979      	ldr	r1, [r7, #20]
 800965a:	4401      	add	r1, r0
 800965c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009660:	4313      	orrs	r3, r2
 8009662:	610b      	str	r3, [r1, #16]

        if (dma == 1U) {
 8009664:	79fb      	ldrb	r3, [r7, #7]
 8009666:	2b01      	cmp	r3, #1
 8009668:	d10d      	bne.n	8009686 <USB_EP0StartXfer+0x282>
            if ((uint32_t)ep->xfer_buff != 0U) {
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d009      	beq.n	8009686 <USB_EP0StartXfer+0x282>
                USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	6919      	ldr	r1, [r3, #16]
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	015a      	lsls	r2, r3, #5
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	4413      	add	r3, r2
 800967e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009682:	460a      	mov	r2, r1
 8009684:	615a      	str	r2, [r3, #20]
            }
        }

        /* EP enable */
        USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	015a      	lsls	r2, r3, #5
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	4413      	add	r3, r2
 800968e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	0151      	lsls	r1, r2, #5
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	440a      	add	r2, r1
 800969c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80096a4:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	371c      	adds	r7, #28
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <USB_EPStopXfer>:
 * @brief  USB_EPStoptXfer  Stop transfer on an EP
 * @param  USBx  usb device instance
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 80096b4:	b480      	push	{r7}
 80096b6:	b087      	sub	sp, #28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
    __IO uint32_t count = 0U;
 80096be:	2300      	movs	r3, #0
 80096c0:	60fb      	str	r3, [r7, #12]
    HAL_StatusTypeDef ret = HAL_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	75fb      	strb	r3, [r7, #23]
    uint32_t USBx_BASE = (uint32_t)USBx;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	613b      	str	r3, [r7, #16]

    /* IN endpoint */
    if (ep->is_in == 1U) {
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	785b      	ldrb	r3, [r3, #1]
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d14a      	bne.n	8009768 <USB_EPStopXfer+0xb4>
        /* EP enable, IN data in FIFO */
        if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA) {
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	015a      	lsls	r2, r3, #5
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	4413      	add	r3, r2
 80096dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80096e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80096ea:	f040 8086 	bne.w	80097fa <USB_EPStopXfer+0x146>
            USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	015a      	lsls	r2, r3, #5
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	4413      	add	r3, r2
 80096f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	7812      	ldrb	r2, [r2, #0]
 8009702:	0151      	lsls	r1, r2, #5
 8009704:	693a      	ldr	r2, [r7, #16]
 8009706:	440a      	add	r2, r1
 8009708:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800970c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009710:	6013      	str	r3, [r2, #0]
            USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	015a      	lsls	r2, r3, #5
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	4413      	add	r3, r2
 800971c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	7812      	ldrb	r2, [r2, #0]
 8009726:	0151      	lsls	r1, r2, #5
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	440a      	add	r2, r1
 800972c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009730:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009734:	6013      	str	r3, [r2, #0]

            do {
                count++;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	3301      	adds	r3, #1
 800973a:	60fb      	str	r3, [r7, #12]

                if (count > 10000U) {
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009742:	4293      	cmp	r3, r2
 8009744:	d902      	bls.n	800974c <USB_EPStopXfer+0x98>
                    ret = HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	75fb      	strb	r3, [r7, #23]
                    break;
 800974a:	e056      	b.n	80097fa <USB_EPStopXfer+0x146>
                }
            } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA);
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	015a      	lsls	r2, r3, #5
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	4413      	add	r3, r2
 8009756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009760:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009764:	d0e7      	beq.n	8009736 <USB_EPStopXfer+0x82>
 8009766:	e048      	b.n	80097fa <USB_EPStopXfer+0x146>
        }
    } else /* OUT endpoint */
    {
        if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	015a      	lsls	r2, r3, #5
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	4413      	add	r3, r2
 8009772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800977c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009780:	d13b      	bne.n	80097fa <USB_EPStopXfer+0x146>
            USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	015a      	lsls	r2, r3, #5
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	4413      	add	r3, r2
 800978c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	7812      	ldrb	r2, [r2, #0]
 8009796:	0151      	lsls	r1, r2, #5
 8009798:	693a      	ldr	r2, [r7, #16]
 800979a:	440a      	add	r2, r1
 800979c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80097a4:	6013      	str	r3, [r2, #0]
            USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	015a      	lsls	r2, r3, #5
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	4413      	add	r3, r2
 80097b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	683a      	ldr	r2, [r7, #0]
 80097b8:	7812      	ldrb	r2, [r2, #0]
 80097ba:	0151      	lsls	r1, r2, #5
 80097bc:	693a      	ldr	r2, [r7, #16]
 80097be:	440a      	add	r2, r1
 80097c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097c8:	6013      	str	r3, [r2, #0]

            do {
                count++;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	3301      	adds	r3, #1
 80097ce:	60fb      	str	r3, [r7, #12]

                if (count > 10000U) {
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d902      	bls.n	80097e0 <USB_EPStopXfer+0x12c>
                    ret = HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	75fb      	strb	r3, [r7, #23]
                    break;
 80097de:	e00c      	b.n	80097fa <USB_EPStopXfer+0x146>
                }
            } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	015a      	lsls	r2, r3, #5
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	4413      	add	r3, r2
 80097ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097f8:	d0e7      	beq.n	80097ca <USB_EPStopXfer+0x116>
        }
    }

    return ret;
 80097fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	371c      	adds	r7, #28
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <USB_WritePacket>:
 *          This parameter can be one of these values:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef * USBx, uint8_t * src, uint8_t ch_ep_num, uint16_t len, uint8_t dma) {
 8009808:	b480      	push	{r7}
 800980a:	b089      	sub	sp, #36	@ 0x24
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	4611      	mov	r1, r2
 8009814:	461a      	mov	r2, r3
 8009816:	460b      	mov	r3, r1
 8009818:	71fb      	strb	r3, [r7, #7]
 800981a:	4613      	mov	r3, r2
 800981c:	80bb      	strh	r3, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	617b      	str	r3, [r7, #20]
    uint8_t * pSrc = src;
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	61fb      	str	r3, [r7, #28]
    uint32_t count32b;
    uint32_t i;

    if (dma == 0U) {
 8009826:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800982a:	2b00      	cmp	r3, #0
 800982c:	d123      	bne.n	8009876 <USB_WritePacket+0x6e>
        count32b = ((uint32_t)len + 3U) / 4U;
 800982e:	88bb      	ldrh	r3, [r7, #4]
 8009830:	3303      	adds	r3, #3
 8009832:	089b      	lsrs	r3, r3, #2
 8009834:	613b      	str	r3, [r7, #16]
        for (i = 0U; i < count32b; i++) {
 8009836:	2300      	movs	r3, #0
 8009838:	61bb      	str	r3, [r7, #24]
 800983a:	e018      	b.n	800986e <USB_WritePacket+0x66>
            USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800983c:	79fb      	ldrb	r3, [r7, #7]
 800983e:	031a      	lsls	r2, r3, #12
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	4413      	add	r3, r2
 8009844:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009848:	461a      	mov	r2, r3
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	6013      	str	r3, [r2, #0]
            pSrc++;
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	3301      	adds	r3, #1
 8009854:	61fb      	str	r3, [r7, #28]
            pSrc++;
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	3301      	adds	r3, #1
 800985a:	61fb      	str	r3, [r7, #28]
            pSrc++;
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	3301      	adds	r3, #1
 8009860:	61fb      	str	r3, [r7, #28]
            pSrc++;
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	3301      	adds	r3, #1
 8009866:	61fb      	str	r3, [r7, #28]
        for (i = 0U; i < count32b; i++) {
 8009868:	69bb      	ldr	r3, [r7, #24]
 800986a:	3301      	adds	r3, #1
 800986c:	61bb      	str	r3, [r7, #24]
 800986e:	69ba      	ldr	r2, [r7, #24]
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	429a      	cmp	r2, r3
 8009874:	d3e2      	bcc.n	800983c <USB_WritePacket+0x34>
        }
    }

    return HAL_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3724      	adds	r7, #36	@ 0x24
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <USB_ReadPacket>:
 * @param  USBx  Selected device
 * @param  dest  source pointer
 * @param  len  Number of bytes to read
 * @retval pointer to destination buffer
 */
void * USB_ReadPacket(USB_OTG_GlobalTypeDef * USBx, uint8_t * dest, uint16_t len) {
 8009884:	b480      	push	{r7}
 8009886:	b08b      	sub	sp, #44	@ 0x2c
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	4613      	mov	r3, r2
 8009890:	80fb      	strh	r3, [r7, #6]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	61bb      	str	r3, [r7, #24]
    uint8_t * pDest = dest;
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t pData;
    uint32_t i;
    uint32_t count32b = (uint32_t)len >> 2U;
 800989a:	88fb      	ldrh	r3, [r7, #6]
 800989c:	089b      	lsrs	r3, r3, #2
 800989e:	b29b      	uxth	r3, r3
 80098a0:	617b      	str	r3, [r7, #20]
    uint16_t remaining_bytes = len % 4U;
 80098a2:	88fb      	ldrh	r3, [r7, #6]
 80098a4:	f003 0303 	and.w	r3, r3, #3
 80098a8:	83fb      	strh	r3, [r7, #30]

    for (i = 0U; i < count32b; i++) {
 80098aa:	2300      	movs	r3, #0
 80098ac:	623b      	str	r3, [r7, #32]
 80098ae:	e014      	b.n	80098da <USB_ReadPacket+0x56>
        __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ba:	601a      	str	r2, [r3, #0]
        pDest++;
 80098bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098be:	3301      	adds	r3, #1
 80098c0:	627b      	str	r3, [r7, #36]	@ 0x24
        pDest++;
 80098c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c4:	3301      	adds	r3, #1
 80098c6:	627b      	str	r3, [r7, #36]	@ 0x24
        pDest++;
 80098c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ca:	3301      	adds	r3, #1
 80098cc:	627b      	str	r3, [r7, #36]	@ 0x24
        pDest++;
 80098ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d0:	3301      	adds	r3, #1
 80098d2:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 0U; i < count32b; i++) {
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	3301      	adds	r3, #1
 80098d8:	623b      	str	r3, [r7, #32]
 80098da:	6a3a      	ldr	r2, [r7, #32]
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d3e6      	bcc.n	80098b0 <USB_ReadPacket+0x2c>
    }

    /* When Number of data is not word aligned, read the remaining byte */
    if (remaining_bytes != 0U) {
 80098e2:	8bfb      	ldrh	r3, [r7, #30]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d01e      	beq.n	8009926 <USB_ReadPacket+0xa2>
        i = 0U;
 80098e8:	2300      	movs	r3, #0
 80098ea:	623b      	str	r3, [r7, #32]
        __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098f2:	461a      	mov	r2, r3
 80098f4:	f107 0310 	add.w	r3, r7, #16
 80098f8:	6812      	ldr	r2, [r2, #0]
 80098fa:	601a      	str	r2, [r3, #0]

        do {
            *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	6a3b      	ldr	r3, [r7, #32]
 8009900:	b2db      	uxtb	r3, r3
 8009902:	00db      	lsls	r3, r3, #3
 8009904:	fa22 f303 	lsr.w	r3, r2, r3
 8009908:	b2da      	uxtb	r2, r3
 800990a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990c:	701a      	strb	r2, [r3, #0]
            i++;
 800990e:	6a3b      	ldr	r3, [r7, #32]
 8009910:	3301      	adds	r3, #1
 8009912:	623b      	str	r3, [r7, #32]
            pDest++;
 8009914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009916:	3301      	adds	r3, #1
 8009918:	627b      	str	r3, [r7, #36]	@ 0x24
            remaining_bytes--;
 800991a:	8bfb      	ldrh	r3, [r7, #30]
 800991c:	3b01      	subs	r3, #1
 800991e:	83fb      	strh	r3, [r7, #30]
        } while (remaining_bytes != 0U);
 8009920:	8bfb      	ldrh	r3, [r7, #30]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1ea      	bne.n	80098fc <USB_ReadPacket+0x78>
    }

    return ((void *)pDest);
 8009926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009928:	4618      	mov	r0, r3
 800992a:	372c      	adds	r7, #44	@ 0x2c
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <USB_EPSetStall>:
 * @brief  USB_EPSetStall : set a stall condition over an EP
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t)ep->num;
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	60bb      	str	r3, [r7, #8]

    if (ep->is_in == 1U) {
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	785b      	ldrb	r3, [r3, #1]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d12c      	bne.n	80099aa <USB_EPSetStall+0x76>
        if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U)) {
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	015a      	lsls	r2, r3, #5
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	4413      	add	r3, r2
 8009958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	db12      	blt.n	8009988 <USB_EPSetStall+0x54>
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00f      	beq.n	8009988 <USB_EPSetStall+0x54>
            USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	015a      	lsls	r2, r3, #5
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4413      	add	r3, r2
 8009970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	0151      	lsls	r1, r2, #5
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	440a      	add	r2, r1
 800997e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009982:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009986:	6013      	str	r3, [r2, #0]
        }
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	015a      	lsls	r2, r3, #5
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	4413      	add	r3, r2
 8009990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	0151      	lsls	r1, r2, #5
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	440a      	add	r2, r1
 800999e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80099a6:	6013      	str	r3, [r2, #0]
 80099a8:	e02b      	b.n	8009a02 <USB_EPSetStall+0xce>
    } else {
        if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U)) {
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	015a      	lsls	r2, r3, #5
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	4413      	add	r3, r2
 80099b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	db12      	blt.n	80099e2 <USB_EPSetStall+0xae>
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00f      	beq.n	80099e2 <USB_EPSetStall+0xae>
            USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	015a      	lsls	r2, r3, #5
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	4413      	add	r3, r2
 80099ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68ba      	ldr	r2, [r7, #8]
 80099d2:	0151      	lsls	r1, r2, #5
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	440a      	add	r2, r1
 80099d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099dc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80099e0:	6013      	str	r3, [r2, #0]
        }
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	015a      	lsls	r2, r3, #5
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	4413      	add	r3, r2
 80099ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68ba      	ldr	r2, [r7, #8]
 80099f2:	0151      	lsls	r1, r2, #5
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	440a      	add	r2, r1
 80099f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009a00:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3714      	adds	r7, #20
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <USB_EPClearStall>:
 * @brief  USB_EPClearStall : Clear a stall condition over an EP
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t)ep->num;
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	60bb      	str	r3, [r7, #8]

    if (ep->is_in == 1U) {
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	785b      	ldrb	r3, [r3, #1]
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d128      	bne.n	8009a7e <USB_EPClearStall+0x6e>
        USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	015a      	lsls	r2, r3, #5
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	4413      	add	r3, r2
 8009a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	0151      	lsls	r1, r2, #5
 8009a3e:	68fa      	ldr	r2, [r7, #12]
 8009a40:	440a      	add	r2, r1
 8009a42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009a4a:	6013      	str	r3, [r2, #0]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK)) {
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	791b      	ldrb	r3, [r3, #4]
 8009a50:	2b03      	cmp	r3, #3
 8009a52:	d003      	beq.n	8009a5c <USB_EPClearStall+0x4c>
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	791b      	ldrb	r3, [r3, #4]
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d138      	bne.n	8009ace <USB_EPClearStall+0xbe>
            USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	015a      	lsls	r2, r3, #5
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4413      	add	r3, r2
 8009a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	0151      	lsls	r1, r2, #5
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	440a      	add	r2, r1
 8009a72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a7a:	6013      	str	r3, [r2, #0]
 8009a7c:	e027      	b.n	8009ace <USB_EPClearStall+0xbe>
        }
    } else {
        USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	015a      	lsls	r2, r3, #5
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	4413      	add	r3, r2
 8009a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68ba      	ldr	r2, [r7, #8]
 8009a8e:	0151      	lsls	r1, r2, #5
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	440a      	add	r2, r1
 8009a94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a98:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009a9c:	6013      	str	r3, [r2, #0]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK)) {
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	791b      	ldrb	r3, [r3, #4]
 8009aa2:	2b03      	cmp	r3, #3
 8009aa4:	d003      	beq.n	8009aae <USB_EPClearStall+0x9e>
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	791b      	ldrb	r3, [r3, #4]
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	d10f      	bne.n	8009ace <USB_EPClearStall+0xbe>
            USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	015a      	lsls	r2, r3, #5
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68ba      	ldr	r2, [r7, #8]
 8009abe:	0151      	lsls	r1, r2, #5
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	440a      	add	r2, r1
 8009ac4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009acc:	6013      	str	r3, [r2, #0]
        }
    }
    return HAL_OK;
 8009ace:	2300      	movs	r3, #0
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3714      	adds	r7, #20
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <USB_SetDevAddress>:
 * @param  USBx  Selected device
 * @param  address  new device address to be assigned
 *          This parameter can be a value from 0 to 255
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef * USBx, uint8_t address) {
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	60fb      	str	r3, [r7, #12]

    USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009afa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009afe:	6013      	str	r3, [r2, #0]
    USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	78fb      	ldrb	r3, [r7, #3]
 8009b0a:	011b      	lsls	r3, r3, #4
 8009b0c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009b10:	68f9      	ldr	r1, [r7, #12]
 8009b12:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b16:	4313      	orrs	r3, r2
 8009b18:	600b      	str	r3, [r1, #0]

    return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3714      	adds	r7, #20
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <USB_DevConnect>:
/**
 * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef * USBx) {
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	60fb      	str	r3, [r7, #12]

    /* In case phy is stopped, ensure to ungate and restore the phy CLK */
    USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009b42:	f023 0303 	bic.w	r3, r3, #3
 8009b46:	6013      	str	r3, [r2, #0]

    USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b56:	f023 0302 	bic.w	r3, r3, #2
 8009b5a:	6053      	str	r3, [r2, #4]

    return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3714      	adds	r7, #20
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr

08009b6a <USB_DevDisconnect>:
/**
 * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef * USBx) {
 8009b6a:	b480      	push	{r7}
 8009b6c:	b085      	sub	sp, #20
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	60fb      	str	r3, [r7, #12]

    /* In case phy is stopped, ensure to ungate and restore the phy CLK */
    USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009b84:	f023 0303 	bic.w	r3, r3, #3
 8009b88:	6013      	str	r3, [r2, #0]

    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	68fa      	ldr	r2, [r7, #12]
 8009b94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b98:	f043 0302 	orr.w	r3, r3, #2
 8009b9c:	6053      	str	r3, [r2, #4]

    return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3714      	adds	r7, #20
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <USB_ReadInterrupts>:
/**
 * @brief  USB_ReadInterrupts: return the global USB interrupt status
 * @param  USBx  Selected device
 * @retval HAL status
 */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef * USBx) {
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
    uint32_t tmpreg;

    tmpreg = USBx->GINTSTS;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	695b      	ldr	r3, [r3, #20]
 8009bb8:	60fb      	str	r3, [r7, #12]
    tmpreg &= USBx->GINTMSK;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	699b      	ldr	r3, [r3, #24]
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	4013      	ands	r3, r2
 8009bc2:	60fb      	str	r3, [r7, #12]

    return tmpreg;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3714      	adds	r7, #20
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <USB_ReadDevAllOutEpInterrupt>:
/**
 * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
 * @param  USBx  Selected device
 * @retval HAL status
 */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef * USBx) {
 8009bd2:	b480      	push	{r7}
 8009bd4:	b085      	sub	sp, #20
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	60fb      	str	r3, [r7, #12]
    uint32_t tmpreg;

    tmpreg = USBx_DEVICE->DAINT;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009be4:	699b      	ldr	r3, [r3, #24]
 8009be6:	60bb      	str	r3, [r7, #8]
    tmpreg &= USBx_DEVICE->DAINTMSK;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bee:	69db      	ldr	r3, [r3, #28]
 8009bf0:	68ba      	ldr	r2, [r7, #8]
 8009bf2:	4013      	ands	r3, r2
 8009bf4:	60bb      	str	r3, [r7, #8]

    return ((tmpreg & 0xffff0000U) >> 16);
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	0c1b      	lsrs	r3, r3, #16
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3714      	adds	r7, #20
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <USB_ReadDevAllInEpInterrupt>:
/**
 * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
 * @param  USBx  Selected device
 * @retval HAL status
 */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef * USBx) {
 8009c06:	b480      	push	{r7}
 8009c08:	b085      	sub	sp, #20
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	60fb      	str	r3, [r7, #12]
    uint32_t tmpreg;

    tmpreg = USBx_DEVICE->DAINT;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	60bb      	str	r3, [r7, #8]
    tmpreg &= USBx_DEVICE->DAINTMSK;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c22:	69db      	ldr	r3, [r3, #28]
 8009c24:	68ba      	ldr	r2, [r7, #8]
 8009c26:	4013      	ands	r3, r2
 8009c28:	60bb      	str	r3, [r7, #8]

    return ((tmpreg & 0xFFFFU));
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	b29b      	uxth	r3, r3
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3714      	adds	r7, #20
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <USB_ReadDevOutEPInterrupt>:
 * @param  USBx  Selected device
 * @param  epnum  endpoint number
 *          This parameter can be a value from 0 to 15
 * @retval Device OUT EP Interrupt register
 */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef * USBx, uint8_t epnum) {
 8009c3a:	b480      	push	{r7}
 8009c3c:	b085      	sub	sp, #20
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	460b      	mov	r3, r1
 8009c44:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	60fb      	str	r3, [r7, #12]
    uint32_t tmpreg;

    tmpreg = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009c4a:	78fb      	ldrb	r3, [r7, #3]
 8009c4c:	015a      	lsls	r2, r3, #5
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	4413      	add	r3, r2
 8009c52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	60bb      	str	r3, [r7, #8]
    tmpreg &= USBx_DEVICE->DOEPMSK;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c60:	695b      	ldr	r3, [r3, #20]
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	4013      	ands	r3, r2
 8009c66:	60bb      	str	r3, [r7, #8]

    return tmpreg;
 8009c68:	68bb      	ldr	r3, [r7, #8]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3714      	adds	r7, #20
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <USB_ReadDevInEPInterrupt>:
 * @param  USBx  Selected device
 * @param  epnum  endpoint number
 *          This parameter can be a value from 0 to 15
 * @retval Device IN EP Interrupt register
 */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef * USBx, uint8_t epnum) {
 8009c76:	b480      	push	{r7}
 8009c78:	b087      	sub	sp, #28
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	460b      	mov	r3, r1
 8009c80:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	617b      	str	r3, [r7, #20]
    uint32_t tmpreg;
    uint32_t msk;
    uint32_t emp;

    msk = USBx_DEVICE->DIEPMSK;
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	613b      	str	r3, [r7, #16]
    emp = USBx_DEVICE->DIEPEMPMSK;
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c98:	60fb      	str	r3, [r7, #12]
    msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009c9a:	78fb      	ldrb	r3, [r7, #3]
 8009c9c:	f003 030f 	and.w	r3, r3, #15
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ca6:	01db      	lsls	r3, r3, #7
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	693a      	ldr	r2, [r7, #16]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	613b      	str	r3, [r7, #16]
    tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009cb0:	78fb      	ldrb	r3, [r7, #3]
 8009cb2:	015a      	lsls	r2, r3, #5
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	693a      	ldr	r2, [r7, #16]
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	60bb      	str	r3, [r7, #8]

    return tmpreg;
 8009cc4:	68bb      	ldr	r3, [r7, #8]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	371c      	adds	r7, #28
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <USB_GetMode>:
 * @retval return core mode : Host or Device
 *          This parameter can be one of these values:
 *           0 : Host
 *           1 : Device
 */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef * USBx) {
 8009cd2:	b480      	push	{r7}
 8009cd4:	b083      	sub	sp, #12
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
    return ((USBx->GINTSTS) & 0x1U);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	695b      	ldr	r3, [r3, #20]
 8009cde:	f003 0301 	and.w	r3, r3, #1
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	370c      	adds	r7, #12
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <USB_ActivateSetup>:
/**
 * @brief  Activate EP0 for Setup transactions
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef * USBx) {
 8009cee:	b480      	push	{r7}
 8009cf0:	b085      	sub	sp, #20
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	60fb      	str	r3, [r7, #12]

    /* Set the MPS of the IN EP0 to 64 bytes */
    USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d08:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009d0c:	f023 0307 	bic.w	r3, r3, #7
 8009d10:	6013      	str	r3, [r2, #0]

    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d24:	6053      	str	r3, [r2, #4]

    return HAL_OK;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3714      	adds	r7, #20
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <USB_EP0_OutStart>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @param  psetup  pointer to setup packet
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef * USBx, uint8_t dma, uint8_t * psetup) {
 8009d34:	b480      	push	{r7}
 8009d36:	b087      	sub	sp, #28
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	607a      	str	r2, [r7, #4]
 8009d40:	72fb      	strb	r3, [r7, #11]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	617b      	str	r3, [r7, #20]
    uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	333c      	adds	r3, #60	@ 0x3c
 8009d4a:	3304      	adds	r3, #4
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	613b      	str	r3, [r7, #16]

    if (gSNPSiD > USB_OTG_CORE_ID_300A) {
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	4a26      	ldr	r2, [pc, #152]	@ (8009dec <USB_EP0_OutStart+0xb8>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d90a      	bls.n	8009d6e <USB_EP0_OutStart+0x3a>
        if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d68:	d101      	bne.n	8009d6e <USB_EP0_OutStart+0x3a>
            return HAL_OK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	e037      	b.n	8009dde <USB_EP0_OutStart+0xaa>
        }
    }

    USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d74:	461a      	mov	r2, r3
 8009d76:	2300      	movs	r3, #0
 8009d78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d80:	691b      	ldr	r3, [r3, #16]
 8009d82:	697a      	ldr	r2, [r7, #20]
 8009d84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009d8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	697a      	ldr	r2, [r7, #20]
 8009d98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d9c:	f043 0318 	orr.w	r3, r3, #24
 8009da0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(0U)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_STUPCNT;
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	697a      	ldr	r2, [r7, #20]
 8009dac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009db0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009db4:	6113      	str	r3, [r2, #16]

    if (dma == 1U) {
 8009db6:	7afb      	ldrb	r3, [r7, #11]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d10f      	bne.n	8009ddc <USB_EP0_OutStart+0xa8>
        USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6153      	str	r3, [r2, #20]
        /* EP enable */
        USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	697a      	ldr	r2, [r7, #20]
 8009dd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dd6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009dda:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	371c      	adds	r7, #28
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	4f54300a 	.word	0x4f54300a

08009df0 <USB_CoreReset>:
/**
 * @brief  Reset the USB Core (needed after USB clock settings change)
 * @param  USBx  Selected device
 * @retval HAL status
 */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef * USBx) {
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
    __IO uint32_t count = 0U;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	60fb      	str	r3, [r7, #12]

    /* Wait for AHB master IDLE state. */
    do {
        count++;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	4a13      	ldr	r2, [pc, #76]	@ (8009e54 <USB_CoreReset+0x64>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d901      	bls.n	8009e0e <USB_CoreReset+0x1e>
            return HAL_TIMEOUT;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	e01b      	b.n	8009e46 <USB_CoreReset+0x56>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	daf2      	bge.n	8009dfc <USB_CoreReset+0xc>

    /* Core Soft Reset */
    count = 0U;
 8009e16:	2300      	movs	r3, #0
 8009e18:	60fb      	str	r3, [r7, #12]
    USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	f043 0201 	orr.w	r2, r3, #1
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	611a      	str	r2, [r3, #16]

    do {
        count++;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	4a09      	ldr	r2, [pc, #36]	@ (8009e54 <USB_CoreReset+0x64>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d901      	bls.n	8009e38 <USB_CoreReset+0x48>
            return HAL_TIMEOUT;
 8009e34:	2303      	movs	r3, #3
 8009e36:	e006      	b.n	8009e46 <USB_CoreReset+0x56>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	f003 0301 	and.w	r3, r3, #1
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d0f0      	beq.n	8009e26 <USB_CoreReset+0x36>

    return HAL_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	00030d40 	.word	0x00030d40

08009e58 <USBD_CDC_Init>:
 *         Initialize the CDC interface
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef * pdev, uint8_t cfgidx) {
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	460b      	mov	r3, r1
 8009e62:	70fb      	strb	r3, [r7, #3]
    UNUSED(cfgidx);
    USBD_CDC_HandleTypeDef * hcdc;

    hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009e64:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009e68:	f005 f8d8 	bl	800f01c <USBD_static_malloc>
 8009e6c:	60f8      	str	r0, [r7, #12]

    if (hcdc == NULL) {
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d109      	bne.n	8009e88 <USBD_CDC_Init+0x30>
        pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	32b0      	adds	r2, #176	@ 0xb0
 8009e7e:	2100      	movs	r1, #0
 8009e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        return (uint8_t)USBD_EMEM;
 8009e84:	2302      	movs	r3, #2
 8009e86:	e0d4      	b.n	800a032 <USBD_CDC_Init+0x1da>
    }

    (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009e88:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f005 ff23 	bl	800fcda <memset>

    pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	32b0      	adds	r2, #176	@ 0xb0
 8009e9e:	68f9      	ldr	r1, [r7, #12]
 8009ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	32b0      	adds	r2, #176	@ 0xb0
 8009eae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    CDCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
    CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
    CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

    if (pdev->dev_speed == USBD_SPEED_HIGH) {
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	7c1b      	ldrb	r3, [r3, #16]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d138      	bne.n	8009f32 <USBD_CDC_Init+0xda>
        /* Open EP IN */
        (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK, CDC_DATA_HS_IN_PACKET_SIZE);
 8009ec0:	4b5e      	ldr	r3, [pc, #376]	@ (800a03c <USBD_CDC_Init+0x1e4>)
 8009ec2:	7819      	ldrb	r1, [r3, #0]
 8009ec4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ec8:	2202      	movs	r2, #2
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f004 ff83 	bl	800edd6 <USBD_LL_OpenEP>

        pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009ed0:	4b5a      	ldr	r3, [pc, #360]	@ (800a03c <USBD_CDC_Init+0x1e4>)
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	f003 020f 	and.w	r2, r3, #15
 8009ed8:	6879      	ldr	r1, [r7, #4]
 8009eda:	4613      	mov	r3, r2
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4413      	add	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	440b      	add	r3, r1
 8009ee4:	3324      	adds	r3, #36	@ 0x24
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	801a      	strh	r2, [r3, #0]

        /* Open EP OUT */
        (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK, CDC_DATA_HS_OUT_PACKET_SIZE);
 8009eea:	4b55      	ldr	r3, [pc, #340]	@ (800a040 <USBD_CDC_Init+0x1e8>)
 8009eec:	7819      	ldrb	r1, [r3, #0]
 8009eee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f004 ff6e 	bl	800edd6 <USBD_LL_OpenEP>

        pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009efa:	4b51      	ldr	r3, [pc, #324]	@ (800a040 <USBD_CDC_Init+0x1e8>)
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	f003 020f 	and.w	r2, r3, #15
 8009f02:	6879      	ldr	r1, [r7, #4]
 8009f04:	4613      	mov	r3, r2
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	4413      	add	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	440b      	add	r3, r1
 8009f0e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009f12:	2201      	movs	r2, #1
 8009f14:	801a      	strh	r2, [r3, #0]

        /* Set bInterval for CDC CMD Endpoint */
        pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009f16:	4b4b      	ldr	r3, [pc, #300]	@ (800a044 <USBD_CDC_Init+0x1ec>)
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	f003 020f 	and.w	r2, r3, #15
 8009f1e:	6879      	ldr	r1, [r7, #4]
 8009f20:	4613      	mov	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4413      	add	r3, r2
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	440b      	add	r3, r1
 8009f2a:	3326      	adds	r3, #38	@ 0x26
 8009f2c:	2210      	movs	r2, #16
 8009f2e:	801a      	strh	r2, [r3, #0]
 8009f30:	e035      	b.n	8009f9e <USBD_CDC_Init+0x146>
    } else {
        /* Open EP IN */
        (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK, CDC_DATA_FS_IN_PACKET_SIZE);
 8009f32:	4b42      	ldr	r3, [pc, #264]	@ (800a03c <USBD_CDC_Init+0x1e4>)
 8009f34:	7819      	ldrb	r1, [r3, #0]
 8009f36:	2340      	movs	r3, #64	@ 0x40
 8009f38:	2202      	movs	r2, #2
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f004 ff4b 	bl	800edd6 <USBD_LL_OpenEP>

        pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009f40:	4b3e      	ldr	r3, [pc, #248]	@ (800a03c <USBD_CDC_Init+0x1e4>)
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	f003 020f 	and.w	r2, r3, #15
 8009f48:	6879      	ldr	r1, [r7, #4]
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	4413      	add	r3, r2
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	440b      	add	r3, r1
 8009f54:	3324      	adds	r3, #36	@ 0x24
 8009f56:	2201      	movs	r2, #1
 8009f58:	801a      	strh	r2, [r3, #0]

        /* Open EP OUT */
        (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK, CDC_DATA_FS_OUT_PACKET_SIZE);
 8009f5a:	4b39      	ldr	r3, [pc, #228]	@ (800a040 <USBD_CDC_Init+0x1e8>)
 8009f5c:	7819      	ldrb	r1, [r3, #0]
 8009f5e:	2340      	movs	r3, #64	@ 0x40
 8009f60:	2202      	movs	r2, #2
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f004 ff37 	bl	800edd6 <USBD_LL_OpenEP>

        pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009f68:	4b35      	ldr	r3, [pc, #212]	@ (800a040 <USBD_CDC_Init+0x1e8>)
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	f003 020f 	and.w	r2, r3, #15
 8009f70:	6879      	ldr	r1, [r7, #4]
 8009f72:	4613      	mov	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	440b      	add	r3, r1
 8009f7c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009f80:	2201      	movs	r2, #1
 8009f82:	801a      	strh	r2, [r3, #0]

        /* Set bInterval for CMD Endpoint */
        pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009f84:	4b2f      	ldr	r3, [pc, #188]	@ (800a044 <USBD_CDC_Init+0x1ec>)
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	f003 020f 	and.w	r2, r3, #15
 8009f8c:	6879      	ldr	r1, [r7, #4]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	440b      	add	r3, r1
 8009f98:	3326      	adds	r3, #38	@ 0x26
 8009f9a:	2210      	movs	r2, #16
 8009f9c:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009f9e:	4b29      	ldr	r3, [pc, #164]	@ (800a044 <USBD_CDC_Init+0x1ec>)
 8009fa0:	7819      	ldrb	r1, [r3, #0]
 8009fa2:	2308      	movs	r3, #8
 8009fa4:	2203      	movs	r2, #3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f004 ff15 	bl	800edd6 <USBD_LL_OpenEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009fac:	4b25      	ldr	r3, [pc, #148]	@ (800a044 <USBD_CDC_Init+0x1ec>)
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	f003 020f 	and.w	r2, r3, #15
 8009fb4:	6879      	ldr	r1, [r7, #4]
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	440b      	add	r3, r1
 8009fc0:	3324      	adds	r3, #36	@ 0x24
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	801a      	strh	r2, [r3, #0]

    hcdc->RxBuffer = NULL;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	33b0      	adds	r3, #176	@ 0xb0
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	4413      	add	r3, r2
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (hcdc->RxBuffer == NULL) {
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d101      	bne.n	800a000 <USBD_CDC_Init+0x1a8>
        return (uint8_t)USBD_EMEM;
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	e018      	b.n	800a032 <USBD_CDC_Init+0x1da>
    }

    if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	7c1b      	ldrb	r3, [r3, #16]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10a      	bne.n	800a01e <USBD_CDC_Init+0x1c6>
        /* Prepare Out endpoint to receive next packet */
        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer, CDC_DATA_HS_OUT_PACKET_SIZE);
 800a008:	4b0d      	ldr	r3, [pc, #52]	@ (800a040 <USBD_CDC_Init+0x1e8>)
 800a00a:	7819      	ldrb	r1, [r3, #0]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a012:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f004 ffcc 	bl	800efb4 <USBD_LL_PrepareReceive>
 800a01c:	e008      	b.n	800a030 <USBD_CDC_Init+0x1d8>
    } else {
        /* Prepare Out endpoint to receive next packet */
        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer, CDC_DATA_FS_OUT_PACKET_SIZE);
 800a01e:	4b08      	ldr	r3, [pc, #32]	@ (800a040 <USBD_CDC_Init+0x1e8>)
 800a020:	7819      	ldrb	r1, [r3, #0]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a028:	2340      	movs	r3, #64	@ 0x40
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f004 ffc2 	bl	800efb4 <USBD_LL_PrepareReceive>
    }

    return (uint8_t)USBD_OK;
 800a030:	2300      	movs	r3, #0
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	200000bf 	.word	0x200000bf
 800a040:	200000c0 	.word	0x200000c0
 800a044:	200000c1 	.word	0x200000c1

0800a048 <USBD_CDC_DeInit>:
 *         DeInitialize the CDC layer
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef * pdev, uint8_t cfgidx) {
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	460b      	mov	r3, r1
 800a052:	70fb      	strb	r3, [r7, #3]
    CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
    CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a054:	4b3a      	ldr	r3, [pc, #232]	@ (800a140 <USBD_CDC_DeInit+0xf8>)
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	4619      	mov	r1, r3
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f004 fee1 	bl	800ee22 <USBD_LL_CloseEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a060:	4b37      	ldr	r3, [pc, #220]	@ (800a140 <USBD_CDC_DeInit+0xf8>)
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	f003 020f 	and.w	r2, r3, #15
 800a068:	6879      	ldr	r1, [r7, #4]
 800a06a:	4613      	mov	r3, r2
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	4413      	add	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	440b      	add	r3, r1
 800a074:	3324      	adds	r3, #36	@ 0x24
 800a076:	2200      	movs	r2, #0
 800a078:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a07a:	4b32      	ldr	r3, [pc, #200]	@ (800a144 <USBD_CDC_DeInit+0xfc>)
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	4619      	mov	r1, r3
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f004 fece 	bl	800ee22 <USBD_LL_CloseEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a086:	4b2f      	ldr	r3, [pc, #188]	@ (800a144 <USBD_CDC_DeInit+0xfc>)
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	f003 020f 	and.w	r2, r3, #15
 800a08e:	6879      	ldr	r1, [r7, #4]
 800a090:	4613      	mov	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4413      	add	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	440b      	add	r3, r1
 800a09a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a09e:	2200      	movs	r2, #0
 800a0a0:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a0a2:	4b29      	ldr	r3, [pc, #164]	@ (800a148 <USBD_CDC_DeInit+0x100>)
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f004 feba 	bl	800ee22 <USBD_LL_CloseEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a0ae:	4b26      	ldr	r3, [pc, #152]	@ (800a148 <USBD_CDC_DeInit+0x100>)
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	f003 020f 	and.w	r2, r3, #15
 800a0b6:	6879      	ldr	r1, [r7, #4]
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	4413      	add	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	440b      	add	r3, r1
 800a0c2:	3324      	adds	r3, #36	@ 0x24
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a0c8:	4b1f      	ldr	r3, [pc, #124]	@ (800a148 <USBD_CDC_DeInit+0x100>)
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	f003 020f 	and.w	r2, r3, #15
 800a0d0:	6879      	ldr	r1, [r7, #4]
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	4413      	add	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	440b      	add	r3, r1
 800a0dc:	3326      	adds	r3, #38	@ 0x26
 800a0de:	2200      	movs	r2, #0
 800a0e0:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    if (pdev->pClassDataCmsit[pdev->classId] != NULL) {
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	32b0      	adds	r2, #176	@ 0xb0
 800a0ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d01f      	beq.n	800a134 <USBD_CDC_DeInit+0xec>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	33b0      	adds	r3, #176	@ 0xb0
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	4413      	add	r3, r2
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	4798      	blx	r3
        (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	32b0      	adds	r2, #176	@ 0xb0
 800a112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a116:	4618      	mov	r0, r3
 800a118:	f004 ff8e 	bl	800f038 <USBD_static_free>
        pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	32b0      	adds	r2, #176	@ 0xb0
 800a126:	2100      	movs	r1, #0
 800a128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pdev->pClassData = NULL;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    }

    return (uint8_t)USBD_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	200000bf 	.word	0x200000bf
 800a144:	200000c0 	.word	0x200000c0
 800a148:	200000c1 	.word	0x200000c1

0800a14c <USBD_CDC_Setup>:
 *         Handle the CDC specific requests
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	32b0      	adds	r2, #176	@ 0xb0
 800a160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a164:	613b      	str	r3, [r7, #16]
    uint16_t len;
    uint8_t ifalt = 0U;
 800a166:	2300      	movs	r3, #0
 800a168:	737b      	strb	r3, [r7, #13]
    uint16_t status_info = 0U;
 800a16a:	2300      	movs	r3, #0
 800a16c:	817b      	strh	r3, [r7, #10]
    USBD_StatusTypeDef ret = USBD_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	75fb      	strb	r3, [r7, #23]

    if (hcdc == NULL) {
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d101      	bne.n	800a17c <USBD_CDC_Setup+0x30>
        return (uint8_t)USBD_FAIL;
 800a178:	2303      	movs	r3, #3
 800a17a:	e0bf      	b.n	800a2fc <USBD_CDC_Setup+0x1b0>
    }

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a184:	2b00      	cmp	r3, #0
 800a186:	d050      	beq.n	800a22a <USBD_CDC_Setup+0xde>
 800a188:	2b20      	cmp	r3, #32
 800a18a:	f040 80af 	bne.w	800a2ec <USBD_CDC_Setup+0x1a0>
    case USB_REQ_TYPE_CLASS:
        if (req->wLength != 0U) {
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	88db      	ldrh	r3, [r3, #6]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d03a      	beq.n	800a20c <USBD_CDC_Setup+0xc0>
            if ((req->bmRequest & 0x80U) != 0U) {
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	b25b      	sxtb	r3, r3
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	da1b      	bge.n	800a1d8 <USBD_CDC_Setup+0x8c>
                ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest, (uint8_t *)hcdc->data, req->wLength);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	33b0      	adds	r3, #176	@ 0xb0
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	4413      	add	r3, r2
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	683a      	ldr	r2, [r7, #0]
 800a1b4:	7850      	ldrb	r0, [r2, #1]
 800a1b6:	6939      	ldr	r1, [r7, #16]
 800a1b8:	683a      	ldr	r2, [r7, #0]
 800a1ba:	88d2      	ldrh	r2, [r2, #6]
 800a1bc:	4798      	blx	r3

                len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	88db      	ldrh	r3, [r3, #6]
 800a1c2:	2b07      	cmp	r3, #7
 800a1c4:	bf28      	it	cs
 800a1c6:	2307      	movcs	r3, #7
 800a1c8:	81fb      	strh	r3, [r7, #14]
                (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	89fa      	ldrh	r2, [r7, #14]
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f001 fd87 	bl	800bce4 <USBD_CtlSendData>
                (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
            }
        } else {
            ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest, (uint8_t *)req, 0U);
        }
        break;
 800a1d6:	e090      	b.n	800a2fa <USBD_CDC_Setup+0x1ae>
                hcdc->CmdOpCode = req->bRequest;
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	785a      	ldrb	r2, [r3, #1]
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
                hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	88db      	ldrh	r3, [r3, #6]
 800a1e6:	2b3f      	cmp	r3, #63	@ 0x3f
 800a1e8:	d803      	bhi.n	800a1f2 <USBD_CDC_Setup+0xa6>
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	88db      	ldrh	r3, [r3, #6]
 800a1ee:	b2da      	uxtb	r2, r3
 800a1f0:	e000      	b.n	800a1f4 <USBD_CDC_Setup+0xa8>
 800a1f2:	2240      	movs	r2, #64	@ 0x40
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
                (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a1fa:	6939      	ldr	r1, [r7, #16]
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a202:	461a      	mov	r2, r3
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f001 fd99 	bl	800bd3c <USBD_CtlPrepareRx>
        break;
 800a20a:	e076      	b.n	800a2fa <USBD_CDC_Setup+0x1ae>
            ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest, (uint8_t *)req, 0U);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	33b0      	adds	r3, #176	@ 0xb0
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	4413      	add	r3, r2
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	683a      	ldr	r2, [r7, #0]
 800a220:	7850      	ldrb	r0, [r2, #1]
 800a222:	2200      	movs	r2, #0
 800a224:	6839      	ldr	r1, [r7, #0]
 800a226:	4798      	blx	r3
        break;
 800a228:	e067      	b.n	800a2fa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
        switch (req->bRequest) {
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	785b      	ldrb	r3, [r3, #1]
 800a22e:	2b0b      	cmp	r3, #11
 800a230:	d851      	bhi.n	800a2d6 <USBD_CDC_Setup+0x18a>
 800a232:	a201      	add	r2, pc, #4	@ (adr r2, 800a238 <USBD_CDC_Setup+0xec>)
 800a234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a238:	0800a269 	.word	0x0800a269
 800a23c:	0800a2e5 	.word	0x0800a2e5
 800a240:	0800a2d7 	.word	0x0800a2d7
 800a244:	0800a2d7 	.word	0x0800a2d7
 800a248:	0800a2d7 	.word	0x0800a2d7
 800a24c:	0800a2d7 	.word	0x0800a2d7
 800a250:	0800a2d7 	.word	0x0800a2d7
 800a254:	0800a2d7 	.word	0x0800a2d7
 800a258:	0800a2d7 	.word	0x0800a2d7
 800a25c:	0800a2d7 	.word	0x0800a2d7
 800a260:	0800a293 	.word	0x0800a293
 800a264:	0800a2bd 	.word	0x0800a2bd
        case USB_REQ_GET_STATUS:
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	2b03      	cmp	r3, #3
 800a272:	d107      	bne.n	800a284 <USBD_CDC_Setup+0x138>
                (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a274:	f107 030a 	add.w	r3, r7, #10
 800a278:	2202      	movs	r2, #2
 800a27a:	4619      	mov	r1, r3
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f001 fd31 	bl	800bce4 <USBD_CtlSendData>
            } else {
                USBD_CtlError(pdev, req);
                ret = USBD_FAIL;
            }
            break;
 800a282:	e032      	b.n	800a2ea <USBD_CDC_Setup+0x19e>
                USBD_CtlError(pdev, req);
 800a284:	6839      	ldr	r1, [r7, #0]
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f001 fcbb 	bl	800bc02 <USBD_CtlError>
                ret = USBD_FAIL;
 800a28c:	2303      	movs	r3, #3
 800a28e:	75fb      	strb	r3, [r7, #23]
            break;
 800a290:	e02b      	b.n	800a2ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	2b03      	cmp	r3, #3
 800a29c:	d107      	bne.n	800a2ae <USBD_CDC_Setup+0x162>
                (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a29e:	f107 030d 	add.w	r3, r7, #13
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f001 fd1c 	bl	800bce4 <USBD_CtlSendData>
            } else {
                USBD_CtlError(pdev, req);
                ret = USBD_FAIL;
            }
            break;
 800a2ac:	e01d      	b.n	800a2ea <USBD_CDC_Setup+0x19e>
                USBD_CtlError(pdev, req);
 800a2ae:	6839      	ldr	r1, [r7, #0]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f001 fca6 	bl	800bc02 <USBD_CtlError>
                ret = USBD_FAIL;
 800a2b6:	2303      	movs	r3, #3
 800a2b8:	75fb      	strb	r3, [r7, #23]
            break;
 800a2ba:	e016      	b.n	800a2ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
            if (pdev->dev_state != USBD_STATE_CONFIGURED) {
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	2b03      	cmp	r3, #3
 800a2c6:	d00f      	beq.n	800a2e8 <USBD_CDC_Setup+0x19c>
                USBD_CtlError(pdev, req);
 800a2c8:	6839      	ldr	r1, [r7, #0]
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f001 fc99 	bl	800bc02 <USBD_CtlError>
                ret = USBD_FAIL;
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800a2d4:	e008      	b.n	800a2e8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
            break;

        default:
            USBD_CtlError(pdev, req);
 800a2d6:	6839      	ldr	r1, [r7, #0]
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f001 fc92 	bl	800bc02 <USBD_CtlError>
            ret = USBD_FAIL;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	75fb      	strb	r3, [r7, #23]
            break;
 800a2e2:	e002      	b.n	800a2ea <USBD_CDC_Setup+0x19e>
            break;
 800a2e4:	bf00      	nop
 800a2e6:	e008      	b.n	800a2fa <USBD_CDC_Setup+0x1ae>
            break;
 800a2e8:	bf00      	nop
        }
        break;
 800a2ea:	e006      	b.n	800a2fa <USBD_CDC_Setup+0x1ae>

    default:
        USBD_CtlError(pdev, req);
 800a2ec:	6839      	ldr	r1, [r7, #0]
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f001 fc87 	bl	800bc02 <USBD_CtlError>
        ret = USBD_FAIL;
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	75fb      	strb	r3, [r7, #23]
        break;
 800a2f8:	bf00      	nop
    }

    return (uint8_t)ret;
 800a2fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3718      	adds	r7, #24
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <USBD_CDC_DataIn>:
 *         Data sent on non-control IN endpoint
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef * pdev, uint8_t epnum) {
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	460b      	mov	r3, r1
 800a30e:	70fb      	strb	r3, [r7, #3]
    USBD_CDC_HandleTypeDef * hcdc;
    PCD_HandleTypeDef * hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a316:	60fb      	str	r3, [r7, #12]

    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	32b0      	adds	r2, #176	@ 0xb0
 800a322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d101      	bne.n	800a32e <USBD_CDC_DataIn+0x2a>
        return (uint8_t)USBD_FAIL;
 800a32a:	2303      	movs	r3, #3
 800a32c:	e065      	b.n	800a3fa <USBD_CDC_DataIn+0xf6>
    }

    hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	32b0      	adds	r2, #176	@ 0xb0
 800a338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a33c:	60bb      	str	r3, [r7, #8]

    if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) && ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U)) {
 800a33e:	78fb      	ldrb	r3, [r7, #3]
 800a340:	f003 020f 	and.w	r2, r3, #15
 800a344:	6879      	ldr	r1, [r7, #4]
 800a346:	4613      	mov	r3, r2
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	4413      	add	r3, r2
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	440b      	add	r3, r1
 800a350:	3318      	adds	r3, #24
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d02f      	beq.n	800a3b8 <USBD_CDC_DataIn+0xb4>
 800a358:	78fb      	ldrb	r3, [r7, #3]
 800a35a:	f003 020f 	and.w	r2, r3, #15
 800a35e:	6879      	ldr	r1, [r7, #4]
 800a360:	4613      	mov	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4413      	add	r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	440b      	add	r3, r1
 800a36a:	3318      	adds	r3, #24
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	78fb      	ldrb	r3, [r7, #3]
 800a370:	f003 010f 	and.w	r1, r3, #15
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	460b      	mov	r3, r1
 800a378:	00db      	lsls	r3, r3, #3
 800a37a:	440b      	add	r3, r1
 800a37c:	009b      	lsls	r3, r3, #2
 800a37e:	4403      	add	r3, r0
 800a380:	3348      	adds	r3, #72	@ 0x48
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	fbb2 f1f3 	udiv	r1, r2, r3
 800a388:	fb01 f303 	mul.w	r3, r1, r3
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d112      	bne.n	800a3b8 <USBD_CDC_DataIn+0xb4>
        /* Update the packet total length */
        pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a392:	78fb      	ldrb	r3, [r7, #3]
 800a394:	f003 020f 	and.w	r2, r3, #15
 800a398:	6879      	ldr	r1, [r7, #4]
 800a39a:	4613      	mov	r3, r2
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	4413      	add	r3, r2
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	440b      	add	r3, r1
 800a3a4:	3318      	adds	r3, #24
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	601a      	str	r2, [r3, #0]

        /* Send ZLP */
        (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a3aa:	78f9      	ldrb	r1, [r7, #3]
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f004 fdde 	bl	800ef72 <USBD_LL_Transmit>
 800a3b6:	e01f      	b.n	800a3f8 <USBD_CDC_DataIn+0xf4>
    } else {
        hcdc->TxState = 0U;
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

        if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL) {
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	33b0      	adds	r3, #176	@ 0xb0
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4413      	add	r3, r2
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d010      	beq.n	800a3f8 <USBD_CDC_DataIn+0xf4>
            ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	33b0      	adds	r3, #176	@ 0xb0
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	4413      	add	r3, r2
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	68ba      	ldr	r2, [r7, #8]
 800a3ea:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a3ee:	68ba      	ldr	r2, [r7, #8]
 800a3f0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a3f4:	78fa      	ldrb	r2, [r7, #3]
 800a3f6:	4798      	blx	r3
        }
    }

    return (uint8_t)USBD_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <USBD_CDC_DataOut>:
 *         Data received on non-control Out endpoint
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef * pdev, uint8_t epnum) {
 800a402:	b580      	push	{r7, lr}
 800a404:	b084      	sub	sp, #16
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	460b      	mov	r3, r1
 800a40c:	70fb      	strb	r3, [r7, #3]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	32b0      	adds	r2, #176	@ 0xb0
 800a418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a41c:	60fb      	str	r3, [r7, #12]

    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	32b0      	adds	r2, #176	@ 0xb0
 800a428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d101      	bne.n	800a434 <USBD_CDC_DataOut+0x32>
        return (uint8_t)USBD_FAIL;
 800a430:	2303      	movs	r3, #3
 800a432:	e01a      	b.n	800a46a <USBD_CDC_DataOut+0x68>
    }

    /* Get the received data length */
    hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a434:	78fb      	ldrb	r3, [r7, #3]
 800a436:	4619      	mov	r1, r3
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f004 fddc 	bl	800eff6 <USBD_LL_GetRxDataSize>
 800a43e:	4602      	mov	r2, r0
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

    /* USB data will be immediately processed, this allow next USB traffic being
    NAKed till the end of the application Xfer */

    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	33b0      	adds	r3, #176	@ 0xb0
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	4413      	add	r3, r2
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a45e:	68fa      	ldr	r2, [r7, #12]
 800a460:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a464:	4611      	mov	r1, r2
 800a466:	4798      	blx	r3

    return (uint8_t)USBD_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <USBD_CDC_EP0_RxReady>:
 * @brief  USBD_CDC_EP0_RxReady
 *         Handle EP0 Rx Ready event
 * @param  pdev: device instance
 * @retval status
 */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef * pdev) {
 800a472:	b580      	push	{r7, lr}
 800a474:	b084      	sub	sp, #16
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	32b0      	adds	r2, #176	@ 0xb0
 800a484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a488:	60fb      	str	r3, [r7, #12]

    if (hcdc == NULL) {
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d101      	bne.n	800a494 <USBD_CDC_EP0_RxReady+0x22>
        return (uint8_t)USBD_FAIL;
 800a490:	2303      	movs	r3, #3
 800a492:	e024      	b.n	800a4de <USBD_CDC_EP0_RxReady+0x6c>
    }

    if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU)) {
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	33b0      	adds	r3, #176	@ 0xb0
 800a49e:	009b      	lsls	r3, r3, #2
 800a4a0:	4413      	add	r3, r2
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d019      	beq.n	800a4dc <USBD_CDC_EP0_RxReady+0x6a>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a4ae:	2bff      	cmp	r3, #255	@ 0xff
 800a4b0:	d014      	beq.n	800a4dc <USBD_CDC_EP0_RxReady+0x6a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode, (uint8_t *)hcdc->data, (uint16_t)hcdc->CmdLength);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	33b0      	adds	r3, #176	@ 0xb0
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	4413      	add	r3, r2
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
 800a4ca:	68f9      	ldr	r1, [r7, #12]
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
 800a4d2:	4798      	blx	r3
        hcdc->CmdOpCode = 0xFFU;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	22ff      	movs	r2, #255	@ 0xff
 800a4d8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
    }

    return (uint8_t)USBD_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
	...

0800a4e8 <USBD_CDC_GetFSCfgDesc>:
 * @brief  USBD_CDC_GetFSCfgDesc
 *         Return configuration descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t * USBD_CDC_GetFSCfgDesc(uint16_t * length) {
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b086      	sub	sp, #24
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
    USBD_EpDescTypeDef * pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a4f0:	2182      	movs	r1, #130	@ 0x82
 800a4f2:	4818      	ldr	r0, [pc, #96]	@ (800a554 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a4f4:	f000 fd4f 	bl	800af96 <USBD_GetEpDesc>
 800a4f8:	6178      	str	r0, [r7, #20]
    USBD_EpDescTypeDef * pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a4fa:	2101      	movs	r1, #1
 800a4fc:	4815      	ldr	r0, [pc, #84]	@ (800a554 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a4fe:	f000 fd4a 	bl	800af96 <USBD_GetEpDesc>
 800a502:	6138      	str	r0, [r7, #16]
    USBD_EpDescTypeDef * pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a504:	2181      	movs	r1, #129	@ 0x81
 800a506:	4813      	ldr	r0, [pc, #76]	@ (800a554 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a508:	f000 fd45 	bl	800af96 <USBD_GetEpDesc>
 800a50c:	60f8      	str	r0, [r7, #12]

    if (pEpCmdDesc != NULL) {
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d002      	beq.n	800a51a <USBD_CDC_GetFSCfgDesc+0x32>
        pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	2210      	movs	r2, #16
 800a518:	719a      	strb	r2, [r3, #6]
    }

    if (pEpOutDesc != NULL) {
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d006      	beq.n	800a52e <USBD_CDC_GetFSCfgDesc+0x46>
        pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	2200      	movs	r2, #0
 800a524:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a528:	711a      	strb	r2, [r3, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	715a      	strb	r2, [r3, #5]
    }

    if (pEpInDesc != NULL) {
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d006      	beq.n	800a542 <USBD_CDC_GetFSCfgDesc+0x5a>
        pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2200      	movs	r2, #0
 800a538:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a53c:	711a      	strb	r2, [r3, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	715a      	strb	r2, [r3, #5]
    }

    *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2243      	movs	r2, #67	@ 0x43
 800a546:	801a      	strh	r2, [r3, #0]
    return USBD_CDC_CfgDesc;
 800a548:	4b02      	ldr	r3, [pc, #8]	@ (800a554 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3718      	adds	r7, #24
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	2000007c 	.word	0x2000007c

0800a558 <USBD_CDC_GetHSCfgDesc>:
 * @brief  USBD_CDC_GetHSCfgDesc
 *         Return configuration descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t * USBD_CDC_GetHSCfgDesc(uint16_t * length) {
 800a558:	b580      	push	{r7, lr}
 800a55a:	b086      	sub	sp, #24
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
    USBD_EpDescTypeDef * pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a560:	2182      	movs	r1, #130	@ 0x82
 800a562:	4818      	ldr	r0, [pc, #96]	@ (800a5c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a564:	f000 fd17 	bl	800af96 <USBD_GetEpDesc>
 800a568:	6178      	str	r0, [r7, #20]
    USBD_EpDescTypeDef * pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a56a:	2101      	movs	r1, #1
 800a56c:	4815      	ldr	r0, [pc, #84]	@ (800a5c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a56e:	f000 fd12 	bl	800af96 <USBD_GetEpDesc>
 800a572:	6138      	str	r0, [r7, #16]
    USBD_EpDescTypeDef * pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a574:	2181      	movs	r1, #129	@ 0x81
 800a576:	4813      	ldr	r0, [pc, #76]	@ (800a5c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a578:	f000 fd0d 	bl	800af96 <USBD_GetEpDesc>
 800a57c:	60f8      	str	r0, [r7, #12]

    if (pEpCmdDesc != NULL) {
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d002      	beq.n	800a58a <USBD_CDC_GetHSCfgDesc+0x32>
        pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	2210      	movs	r2, #16
 800a588:	719a      	strb	r2, [r3, #6]
    }

    if (pEpOutDesc != NULL) {
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d006      	beq.n	800a59e <USBD_CDC_GetHSCfgDesc+0x46>
        pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	2200      	movs	r2, #0
 800a594:	711a      	strb	r2, [r3, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	f042 0202 	orr.w	r2, r2, #2
 800a59c:	715a      	strb	r2, [r3, #5]
    }

    if (pEpInDesc != NULL) {
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d006      	beq.n	800a5b2 <USBD_CDC_GetHSCfgDesc+0x5a>
        pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	711a      	strb	r2, [r3, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f042 0202 	orr.w	r2, r2, #2
 800a5b0:	715a      	strb	r2, [r3, #5]
    }

    *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2243      	movs	r2, #67	@ 0x43
 800a5b6:	801a      	strh	r2, [r3, #0]
    return USBD_CDC_CfgDesc;
 800a5b8:	4b02      	ldr	r3, [pc, #8]	@ (800a5c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3718      	adds	r7, #24
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	2000007c 	.word	0x2000007c

0800a5c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
 * @brief  USBD_CDC_GetOtherSpeedCfgDesc
 *         Return configuration descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t * USBD_CDC_GetOtherSpeedCfgDesc(uint16_t * length) {
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b086      	sub	sp, #24
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
    USBD_EpDescTypeDef * pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a5d0:	2182      	movs	r1, #130	@ 0x82
 800a5d2:	4818      	ldr	r0, [pc, #96]	@ (800a634 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a5d4:	f000 fcdf 	bl	800af96 <USBD_GetEpDesc>
 800a5d8:	6178      	str	r0, [r7, #20]
    USBD_EpDescTypeDef * pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a5da:	2101      	movs	r1, #1
 800a5dc:	4815      	ldr	r0, [pc, #84]	@ (800a634 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a5de:	f000 fcda 	bl	800af96 <USBD_GetEpDesc>
 800a5e2:	6138      	str	r0, [r7, #16]
    USBD_EpDescTypeDef * pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a5e4:	2181      	movs	r1, #129	@ 0x81
 800a5e6:	4813      	ldr	r0, [pc, #76]	@ (800a634 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a5e8:	f000 fcd5 	bl	800af96 <USBD_GetEpDesc>
 800a5ec:	60f8      	str	r0, [r7, #12]

    if (pEpCmdDesc != NULL) {
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d002      	beq.n	800a5fa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
        pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	2210      	movs	r2, #16
 800a5f8:	719a      	strb	r2, [r3, #6]
    }

    if (pEpOutDesc != NULL) {
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d006      	beq.n	800a60e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
        pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	2200      	movs	r2, #0
 800a604:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a608:	711a      	strb	r2, [r3, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	715a      	strb	r2, [r3, #5]
    }

    if (pEpInDesc != NULL) {
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d006      	beq.n	800a622 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
        pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2200      	movs	r2, #0
 800a618:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a61c:	711a      	strb	r2, [r3, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	715a      	strb	r2, [r3, #5]
    }

    *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2243      	movs	r2, #67	@ 0x43
 800a626:	801a      	strh	r2, [r3, #0]
    return USBD_CDC_CfgDesc;
 800a628:	4b02      	ldr	r3, [pc, #8]	@ (800a634 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3718      	adds	r7, #24
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	2000007c 	.word	0x2000007c

0800a638 <USBD_CDC_GetDeviceQualifierDescriptor>:
 * @brief  USBD_CDC_GetDeviceQualifierDescriptor
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
uint8_t * USBD_CDC_GetDeviceQualifierDescriptor(uint16_t * length) {
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
    *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	220a      	movs	r2, #10
 800a644:	801a      	strh	r2, [r3, #0]

    return USBD_CDC_DeviceQualifierDesc;
 800a646:	4b03      	ldr	r3, [pc, #12]	@ (800a654 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a648:	4618      	mov	r0, r3
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr
 800a654:	20000038 	.word	0x20000038

0800a658 <USBD_CDC_RegisterInterface>:
 * @brief  USBD_CDC_RegisterInterface
 * @param  pdev: device instance
 * @param  fops: CD  Interface callback
 * @retval status
 */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef * pdev, USBD_CDC_ItfTypeDef * fops) {
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
    if (fops == NULL) {
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d101      	bne.n	800a66c <USBD_CDC_RegisterInterface+0x14>
        return (uint8_t)USBD_FAIL;
 800a668:	2303      	movs	r3, #3
 800a66a:	e009      	b.n	800a680 <USBD_CDC_RegisterInterface+0x28>
    }

    pdev->pUserData[pdev->classId] = fops;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	33b0      	adds	r3, #176	@ 0xb0
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	4413      	add	r3, r2
 800a67a:	683a      	ldr	r2, [r7, #0]
 800a67c:	605a      	str	r2, [r3, #4]

    return (uint8_t)USBD_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <USBD_CDC_SetTxBuffer>:
 * @param  pdev: device instance
 * @param  pbuff: Tx Buffer
 * @param  length: Tx Buffer length
 * @retval status
 */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef * pdev, uint8_t * pbuff, uint32_t length) {
 800a68c:	b480      	push	{r7}
 800a68e:	b087      	sub	sp, #28
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	32b0      	adds	r2, #176	@ 0xb0
 800a6a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6a6:	617b      	str	r3, [r7, #20]

    if (hcdc == NULL) {
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d101      	bne.n	800a6b2 <USBD_CDC_SetTxBuffer+0x26>
        return (uint8_t)USBD_FAIL;
 800a6ae:	2303      	movs	r3, #3
 800a6b0:	e008      	b.n	800a6c4 <USBD_CDC_SetTxBuffer+0x38>
    }

    hcdc->TxBuffer = pbuff;
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	68ba      	ldr	r2, [r7, #8]
 800a6b6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
    hcdc->TxLength = length;
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

    return (uint8_t)USBD_OK;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	371c      	adds	r7, #28
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <USBD_CDC_SetRxBuffer>:
 * @brief  USBD_CDC_SetRxBuffer
 * @param  pdev: device instance
 * @param  pbuff: Rx Buffer
 * @retval status
 */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef * pdev, uint8_t * pbuff) {
 800a6d0:	b480      	push	{r7}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	32b0      	adds	r2, #176	@ 0xb0
 800a6e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6e8:	60fb      	str	r3, [r7, #12]

    if (hcdc == NULL) {
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d101      	bne.n	800a6f4 <USBD_CDC_SetRxBuffer+0x24>
        return (uint8_t)USBD_FAIL;
 800a6f0:	2303      	movs	r3, #3
 800a6f2:	e004      	b.n	800a6fe <USBD_CDC_SetRxBuffer+0x2e>
    }

    hcdc->RxBuffer = pbuff;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	683a      	ldr	r2, [r7, #0]
 800a6f8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

    return (uint8_t)USBD_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3714      	adds	r7, #20
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr
	...

0800a70c <USBD_CDC_TransmitPacket>:
 * @brief  USBD_CDC_TransmitPacket
 *         Transmit packet on IN endpoint
 * @param  pdev: device instance
 * @retval status
 */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef * pdev) {
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	32b0      	adds	r2, #176	@ 0xb0
 800a71e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a722:	60bb      	str	r3, [r7, #8]
    USBD_StatusTypeDef ret = USBD_BUSY;
 800a724:	2301      	movs	r3, #1
 800a726:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
    /* Get the Endpoints addresses allocated for this class instance */
    CDCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	32b0      	adds	r2, #176	@ 0xb0
 800a732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d101      	bne.n	800a73e <USBD_CDC_TransmitPacket+0x32>
        return (uint8_t)USBD_FAIL;
 800a73a:	2303      	movs	r3, #3
 800a73c:	e025      	b.n	800a78a <USBD_CDC_TransmitPacket+0x7e>
    }

    if (hcdc->TxState == 0U) {
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a744:	2b00      	cmp	r3, #0
 800a746:	d11f      	bne.n	800a788 <USBD_CDC_TransmitPacket+0x7c>
        /* Tx Transfer in progress */
        hcdc->TxState = 1U;
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

        /* Update the packet total length */
        pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a750:	4b10      	ldr	r3, [pc, #64]	@ (800a794 <USBD_CDC_TransmitPacket+0x88>)
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	f003 020f 	and.w	r2, r3, #15
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	4613      	mov	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4413      	add	r3, r2
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	4403      	add	r3, r0
 800a76a:	3318      	adds	r3, #24
 800a76c:	6019      	str	r1, [r3, #0]

        /* Transmit next packet */
        (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a76e:	4b09      	ldr	r3, [pc, #36]	@ (800a794 <USBD_CDC_TransmitPacket+0x88>)
 800a770:	7819      	ldrb	r1, [r3, #0]
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f004 fbf7 	bl	800ef72 <USBD_LL_Transmit>

        ret = USBD_OK;
 800a784:	2300      	movs	r3, #0
 800a786:	73fb      	strb	r3, [r7, #15]
    }

    return (uint8_t)ret;
 800a788:	7bfb      	ldrb	r3, [r7, #15]
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	200000bf 	.word	0x200000bf

0800a798 <USBD_CDC_ReceivePacket>:
 * @brief  USBD_CDC_ReceivePacket
 *         prepare OUT Endpoint for reception
 * @param  pdev: device instance
 * @retval status
 */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef * pdev) {
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	32b0      	adds	r2, #176	@ 0xb0
 800a7aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
    /* Get the Endpoints addresses allocated for this class instance */
    CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	32b0      	adds	r2, #176	@ 0xb0
 800a7ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d101      	bne.n	800a7c6 <USBD_CDC_ReceivePacket+0x2e>
        return (uint8_t)USBD_FAIL;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	e018      	b.n	800a7f8 <USBD_CDC_ReceivePacket+0x60>
    }

    if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	7c1b      	ldrb	r3, [r3, #16]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d10a      	bne.n	800a7e4 <USBD_CDC_ReceivePacket+0x4c>
        /* Prepare Out endpoint to receive next packet */
        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer, CDC_DATA_HS_OUT_PACKET_SIZE);
 800a7ce:	4b0c      	ldr	r3, [pc, #48]	@ (800a800 <USBD_CDC_ReceivePacket+0x68>)
 800a7d0:	7819      	ldrb	r1, [r3, #0]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a7d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f004 fbe9 	bl	800efb4 <USBD_LL_PrepareReceive>
 800a7e2:	e008      	b.n	800a7f6 <USBD_CDC_ReceivePacket+0x5e>
    } else {
        /* Prepare Out endpoint to receive next packet */
        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer, CDC_DATA_FS_OUT_PACKET_SIZE);
 800a7e4:	4b06      	ldr	r3, [pc, #24]	@ (800a800 <USBD_CDC_ReceivePacket+0x68>)
 800a7e6:	7819      	ldrb	r1, [r3, #0]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a7ee:	2340      	movs	r3, #64	@ 0x40
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f004 fbdf 	bl	800efb4 <USBD_LL_PrepareReceive>
    }

    return (uint8_t)USBD_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	200000c0 	.word	0x200000c0

0800a804 <USBD_Init>:
 * @param  pdev: device instance
 * @param  pdesc: Descriptor structure address
 * @param  id: Low level core index
 * @retval None
 */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef * pdev, USBD_DescriptorsTypeDef * pdesc, uint8_t id) {
 800a804:	b580      	push	{r7, lr}
 800a806:	b086      	sub	sp, #24
 800a808:	af00      	add	r7, sp, #0
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	60b9      	str	r1, [r7, #8]
 800a80e:	4613      	mov	r3, r2
 800a810:	71fb      	strb	r3, [r7, #7]
    USBD_StatusTypeDef ret;

    /* Check whether the USB Host handle is valid */
    if (pdev == NULL) {
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d101      	bne.n	800a81c <USBD_Init+0x18>
#if (USBD_DEBUG_LEVEL > 1U)
        USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
        return USBD_FAIL;
 800a818:	2303      	movs	r3, #3
 800a81a:	e01f      	b.n	800a85c <USBD_Init+0x58>
        pdev->NumClasses = 0;
        pdev->classId = 0;
    }
#else
    /* Unlink previous class*/
    pdev->pClass[0] = NULL;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2200      	movs	r2, #0
 800a820:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
    pdev->pUserData[0] = NULL;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2200      	movs	r2, #0
 800a828:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

    pdev->pConfDesc = NULL;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2200      	movs	r2, #0
 800a830:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

    /* Assign USBD Descriptors */
    if (pdesc != NULL) {
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d003      	beq.n	800a842 <USBD_Init+0x3e>
        pdev->pDesc = pdesc;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	68ba      	ldr	r2, [r7, #8]
 800a83e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    }

    /* Set Device initial State */
    pdev->dev_state = USBD_STATE_DEFAULT;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2201      	movs	r2, #1
 800a846:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    pdev->id = id;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	79fa      	ldrb	r2, [r7, #7]
 800a84e:	701a      	strb	r2, [r3, #0]

    /* Initialize low level driver */
    ret = USBD_LL_Init(pdev);
 800a850:	68f8      	ldr	r0, [r7, #12]
 800a852:	f004 fa59 	bl	800ed08 <USBD_LL_Init>
 800a856:	4603      	mov	r3, r0
 800a858:	75fb      	strb	r3, [r7, #23]

    return ret;
 800a85a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3718      	adds	r7, #24
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <USBD_RegisterClass>:
 *         Link class driver to Device Core.
 * @param  pDevice : Device Handle
 * @param  pclass: Class handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef * pdev, USBD_ClassTypeDef * pclass) {
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
    uint16_t len = 0U;
 800a86e:	2300      	movs	r3, #0
 800a870:	81fb      	strh	r3, [r7, #14]

    if (pclass == NULL) {
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d101      	bne.n	800a87c <USBD_RegisterClass+0x18>
#if (USBD_DEBUG_LEVEL > 1U)
        USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
        return USBD_FAIL;
 800a878:	2303      	movs	r3, #3
 800a87a:	e025      	b.n	800a8c8 <USBD_RegisterClass+0x64>
    }

    /* link the class to the USB Device handle */
    pdev->pClass[0] = pclass;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	683a      	ldr	r2, [r7, #0]
 800a880:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
#ifdef USE_USB_HS
    if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL) {
        pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
    }
#else  /* Default USE_USB_FS */
    if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL) {
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	32ae      	adds	r2, #174	@ 0xae
 800a88e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a894:	2b00      	cmp	r3, #0
 800a896:	d00f      	beq.n	800a8b8 <USBD_RegisterClass+0x54>
        pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	32ae      	adds	r2, #174	@ 0xae
 800a8a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8a8:	f107 020e 	add.w	r2, r7, #14
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	4798      	blx	r3
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
    }
#endif /* USE_USB_FS */

    /* Increment the NumClasses */
    pdev->NumClasses++;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a8be:	1c5a      	adds	r2, r3, #1
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

    return USBD_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <USBD_Start>:
 * @brief  USBD_Start
 *         Start the USB Device Core.
 * @param  pdev: Device Handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef * pdev) {
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
    pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

    /* Start the low level driver  */
    return USBD_LL_Start(pdev);
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f004 fa61 	bl	800eda0 <USBD_LL_Start>
 800a8de:	4603      	mov	r3, r0
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3708      	adds	r7, #8
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <USBD_RunTestMode>:
 * @brief  USBD_RunTestMode
 *         Launch test mode process
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef * pdev) {
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
    return ret;
#else
    /* Prevent unused argument compilation warning */
    UNUSED(pdev);

    return USBD_OK;
 800a8f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	370c      	adds	r7, #12
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr

0800a8fe <USBD_SetClassConfig>:
 * @param  pdev: device instance
 * @param  cfgidx: configuration index
 * @retval status
 */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef * pdev, uint8_t cfgidx) {
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b084      	sub	sp, #16
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
 800a906:	460b      	mov	r3, r1
 800a908:	70fb      	strb	r3, [r7, #3]
    USBD_StatusTypeDef ret = USBD_OK;
 800a90a:	2300      	movs	r3, #0
 800a90c:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }
#else
    if (pdev->pClass[0] != NULL) {
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a914:	2b00      	cmp	r3, #0
 800a916:	d009      	beq.n	800a92c <USBD_SetClassConfig+0x2e>
        /* Set configuration and Start the Class */
        ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	78fa      	ldrb	r2, [r7, #3]
 800a922:	4611      	mov	r1, r2
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	4798      	blx	r3
 800a928:	4603      	mov	r3, r0
 800a92a:	73fb      	strb	r3, [r7, #15]
    }
#endif /* USE_USBD_COMPOSITE */

    return ret;
 800a92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <USBD_ClrClassConfig>:
 *         Clear current configuration
 * @param  pdev: device instance
 * @param  cfgidx: configuration index
 * @retval status: USBD_StatusTypeDef
 */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef * pdev, uint8_t cfgidx) {
 800a936:	b580      	push	{r7, lr}
 800a938:	b084      	sub	sp, #16
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	460b      	mov	r3, r1
 800a940:	70fb      	strb	r3, [r7, #3]
    USBD_StatusTypeDef ret = USBD_OK;
 800a942:	2300      	movs	r3, #0
 800a944:	73fb      	strb	r3, [r7, #15]
            }
        }
    }
#else
    /* Clear configuration  and De-initialize the Class process */
    if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U) {
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	78fa      	ldrb	r2, [r7, #3]
 800a950:	4611      	mov	r1, r2
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	4798      	blx	r3
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d001      	beq.n	800a960 <USBD_ClrClassConfig+0x2a>
        ret = USBD_FAIL;
 800a95c:	2303      	movs	r3, #3
 800a95e:	73fb      	strb	r3, [r7, #15]
    }
#endif /* USE_USBD_COMPOSITE */

    return ret;
 800a960:	7bfb      	ldrb	r3, [r7, #15]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <USBD_LL_SetupStage>:
 * @brief  USBD_LL_SetupStage
 *         Handle the setup stage
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef * pdev, uint8_t * psetup) {
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b084      	sub	sp, #16
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
 800a972:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret;

    USBD_ParseSetupRequest(&pdev->request, psetup);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a97a:	6839      	ldr	r1, [r7, #0]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f001 f906 	bl	800bb8e <USBD_ParseSetupRequest>

    pdev->ep0_state = USBD_EP0_SETUP;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

    pdev->ep0_data_len = pdev->request.wLength;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a990:	461a      	mov	r2, r3
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

    switch (pdev->request.bmRequest & 0x1FU) {
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a99e:	f003 031f 	and.w	r3, r3, #31
 800a9a2:	2b02      	cmp	r3, #2
 800a9a4:	d01a      	beq.n	800a9dc <USBD_LL_SetupStage+0x72>
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	d822      	bhi.n	800a9f0 <USBD_LL_SetupStage+0x86>
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d002      	beq.n	800a9b4 <USBD_LL_SetupStage+0x4a>
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d00a      	beq.n	800a9c8 <USBD_LL_SetupStage+0x5e>
 800a9b2:	e01d      	b.n	800a9f0 <USBD_LL_SetupStage+0x86>
    case USB_REQ_RECIPIENT_DEVICE:
        ret = USBD_StdDevReq(pdev, &pdev->request);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 fb5d 	bl	800b07c <USBD_StdDevReq>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	73fb      	strb	r3, [r7, #15]
        break;
 800a9c6:	e020      	b.n	800aa0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
        ret = USBD_StdItfReq(pdev, &pdev->request);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 fbc5 	bl	800b160 <USBD_StdItfReq>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	73fb      	strb	r3, [r7, #15]
        break;
 800a9da:	e016      	b.n	800aa0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
        ret = USBD_StdEPReq(pdev, &pdev->request);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fc27 	bl	800b238 <USBD_StdEPReq>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	73fb      	strb	r3, [r7, #15]
        break;
 800a9ee:	e00c      	b.n	800aa0a <USBD_LL_SetupStage+0xa0>

    default:
        ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a9f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f004 fa2e 	bl	800ee60 <USBD_LL_StallEP>
 800aa04:	4603      	mov	r3, r0
 800aa06:	73fb      	strb	r3, [r7, #15]
        break;
 800aa08:	bf00      	nop
    }

    return ret;
 800aa0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3710      	adds	r7, #16
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <USBD_LL_DataOutStage>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @param  pdata: data pointer
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef * pdev, uint8_t epnum, uint8_t * pdata) {
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b086      	sub	sp, #24
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	607a      	str	r2, [r7, #4]
 800aa20:	72fb      	strb	r3, [r7, #11]
    USBD_EndpointTypeDef * pep;
    USBD_StatusTypeDef ret = USBD_OK;
 800aa22:	2300      	movs	r3, #0
 800aa24:	75fb      	strb	r3, [r7, #23]
    uint8_t idx;

    if (epnum == 0U) {
 800aa26:	7afb      	ldrb	r3, [r7, #11]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d16e      	bne.n	800ab0a <USBD_LL_DataOutStage+0xf6>
        pep = &pdev->ep_out[0];
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800aa32:	613b      	str	r3, [r7, #16]

        if (pdev->ep0_state == USBD_EP0_DATA_OUT) {
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800aa3a:	2b03      	cmp	r3, #3
 800aa3c:	f040 8098 	bne.w	800ab70 <USBD_LL_DataOutStage+0x15c>
            if (pep->rem_length > pep->maxpacket) {
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	689a      	ldr	r2, [r3, #8]
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d913      	bls.n	800aa74 <USBD_LL_DataOutStage+0x60>
                pep->rem_length -= pep->maxpacket;
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	689a      	ldr	r2, [r3, #8]
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	1ad2      	subs	r2, r2, r3
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	609a      	str	r2, [r3, #8]

                (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	68da      	ldr	r2, [r3, #12]
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	4293      	cmp	r3, r2
 800aa64:	bf28      	it	cs
 800aa66:	4613      	movcs	r3, r2
 800aa68:	461a      	mov	r2, r3
 800aa6a:	6879      	ldr	r1, [r7, #4]
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f001 f982 	bl	800bd76 <USBD_CtlContinueRx>
 800aa72:	e07d      	b.n	800ab70 <USBD_LL_DataOutStage+0x15c>
            } else {
                /* Find the class ID relative to the current request */
                switch (pdev->request.bmRequest & 0x1FU) {
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800aa7a:	f003 031f 	and.w	r3, r3, #31
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	d014      	beq.n	800aaac <USBD_LL_DataOutStage+0x98>
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	d81d      	bhi.n	800aac2 <USBD_LL_DataOutStage+0xae>
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d002      	beq.n	800aa90 <USBD_LL_DataOutStage+0x7c>
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d003      	beq.n	800aa96 <USBD_LL_DataOutStage+0x82>
 800aa8e:	e018      	b.n	800aac2 <USBD_LL_DataOutStage+0xae>
                case USB_REQ_RECIPIENT_DEVICE:
                    /* Device requests must be managed by the first instantiated class
                       (or duplicated by all classes for simplicity) */
                    idx = 0U;
 800aa90:	2300      	movs	r3, #0
 800aa92:	75bb      	strb	r3, [r7, #22]
                    break;
 800aa94:	e018      	b.n	800aac8 <USBD_LL_DataOutStage+0xb4>

                case USB_REQ_RECIPIENT_INTERFACE:
                    idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	f000 fa5e 	bl	800af62 <USBD_CoreFindIF>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	75bb      	strb	r3, [r7, #22]
                    break;
 800aaaa:	e00d      	b.n	800aac8 <USBD_LL_DataOutStage+0xb4>

                case USB_REQ_RECIPIENT_ENDPOINT:
                    idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	4619      	mov	r1, r3
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	f000 fa60 	bl	800af7c <USBD_CoreFindEP>
 800aabc:	4603      	mov	r3, r0
 800aabe:	75bb      	strb	r3, [r7, #22]
                    break;
 800aac0:	e002      	b.n	800aac8 <USBD_LL_DataOutStage+0xb4>

                default:
                    /* Back to the first class in case of doubt */
                    idx = 0U;
 800aac2:	2300      	movs	r3, #0
 800aac4:	75bb      	strb	r3, [r7, #22]
                    break;
 800aac6:	bf00      	nop
                }

                if (idx < USBD_MAX_SUPPORTED_CLASS) {
 800aac8:	7dbb      	ldrb	r3, [r7, #22]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d119      	bne.n	800ab02 <USBD_LL_DataOutStage+0xee>
                    /* Setup the class ID and route the request to the relative class function */
                    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	2b03      	cmp	r3, #3
 800aad8:	d113      	bne.n	800ab02 <USBD_LL_DataOutStage+0xee>
                        if (pdev->pClass[idx]->EP0_RxReady != NULL) {
 800aada:	7dba      	ldrb	r2, [r7, #22]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	32ae      	adds	r2, #174	@ 0xae
 800aae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aae4:	691b      	ldr	r3, [r3, #16]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00b      	beq.n	800ab02 <USBD_LL_DataOutStage+0xee>
                            pdev->classId = idx;
 800aaea:	7dba      	ldrb	r2, [r7, #22]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                            pdev->pClass[idx]->EP0_RxReady(pdev);
 800aaf2:	7dba      	ldrb	r2, [r7, #22]
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	32ae      	adds	r2, #174	@ 0xae
 800aaf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	4798      	blx	r3
                        }
                    }
                }

                (void)USBD_CtlSendStatus(pdev);
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	f001 f948 	bl	800bd98 <USBD_CtlSendStatus>
 800ab08:	e032      	b.n	800ab70 <USBD_LL_DataOutStage+0x15c>
      }
#endif
        }
    } else {
        /* Get the class index relative to this interface */
        idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ab0a:	7afb      	ldrb	r3, [r7, #11]
 800ab0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	4619      	mov	r1, r3
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	f000 fa31 	bl	800af7c <USBD_CoreFindEP>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	75bb      	strb	r3, [r7, #22]

        if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 800ab1e:	7dbb      	ldrb	r3, [r7, #22]
 800ab20:	2bff      	cmp	r3, #255	@ 0xff
 800ab22:	d025      	beq.n	800ab70 <USBD_LL_DataOutStage+0x15c>
 800ab24:	7dbb      	ldrb	r3, [r7, #22]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d122      	bne.n	800ab70 <USBD_LL_DataOutStage+0x15c>
            /* Call the class data out function to manage the request */
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	2b03      	cmp	r3, #3
 800ab34:	d117      	bne.n	800ab66 <USBD_LL_DataOutStage+0x152>
                if (pdev->pClass[idx]->DataOut != NULL) {
 800ab36:	7dba      	ldrb	r2, [r7, #22]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	32ae      	adds	r2, #174	@ 0xae
 800ab3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab40:	699b      	ldr	r3, [r3, #24]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00f      	beq.n	800ab66 <USBD_LL_DataOutStage+0x152>
                    pdev->classId = idx;
 800ab46:	7dba      	ldrb	r2, [r7, #22]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                    ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ab4e:	7dba      	ldrb	r2, [r7, #22]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	32ae      	adds	r2, #174	@ 0xae
 800ab54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab58:	699b      	ldr	r3, [r3, #24]
 800ab5a:	7afa      	ldrb	r2, [r7, #11]
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	4798      	blx	r3
 800ab62:	4603      	mov	r3, r0
 800ab64:	75fb      	strb	r3, [r7, #23]
                }
            }
            if (ret != USBD_OK) {
 800ab66:	7dfb      	ldrb	r3, [r7, #23]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d001      	beq.n	800ab70 <USBD_LL_DataOutStage+0x15c>
                return ret;
 800ab6c:	7dfb      	ldrb	r3, [r7, #23]
 800ab6e:	e000      	b.n	800ab72 <USBD_LL_DataOutStage+0x15e>
            }
        }
    }

    return USBD_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3718      	adds	r7, #24
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <USBD_LL_DataInStage>:
 *         Handle data in stage
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef * pdev, uint8_t epnum, uint8_t * pdata) {
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b086      	sub	sp, #24
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	60f8      	str	r0, [r7, #12]
 800ab82:	460b      	mov	r3, r1
 800ab84:	607a      	str	r2, [r7, #4]
 800ab86:	72fb      	strb	r3, [r7, #11]
    USBD_EndpointTypeDef * pep;
    USBD_StatusTypeDef ret;
    uint8_t idx;

    if (epnum == 0U) {
 800ab88:	7afb      	ldrb	r3, [r7, #11]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d16f      	bne.n	800ac6e <USBD_LL_DataInStage+0xf4>
        pep = &pdev->ep_in[0];
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	3314      	adds	r3, #20
 800ab92:	613b      	str	r3, [r7, #16]

        if (pdev->ep0_state == USBD_EP0_DATA_IN) {
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	d15a      	bne.n	800ac54 <USBD_LL_DataInStage+0xda>
            if (pep->rem_length > pep->maxpacket) {
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	689a      	ldr	r2, [r3, #8]
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d914      	bls.n	800abd4 <USBD_LL_DataInStage+0x5a>
                pep->rem_length -= pep->maxpacket;
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	689a      	ldr	r2, [r3, #8]
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	1ad2      	subs	r2, r2, r3
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	609a      	str	r2, [r3, #8]

                (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	461a      	mov	r2, r3
 800abbe:	6879      	ldr	r1, [r7, #4]
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	f001 f8aa 	bl	800bd1a <USBD_CtlContinueSendData>

                /* Prepare endpoint for premature end of transfer */
                (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abc6:	2300      	movs	r3, #0
 800abc8:	2200      	movs	r2, #0
 800abca:	2100      	movs	r1, #0
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f004 f9f1 	bl	800efb4 <USBD_LL_PrepareReceive>
 800abd2:	e03f      	b.n	800ac54 <USBD_LL_DataInStage+0xda>
            } else {
                /* last packet is MPS multiple, so send ZLP packet */
                if ((pep->maxpacket == pep->rem_length) && (pep->total_length >= pep->maxpacket) && (pep->total_length < pdev->ep0_data_len)) {
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	68da      	ldr	r2, [r3, #12]
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d11c      	bne.n	800ac1a <USBD_LL_DataInStage+0xa0>
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	685a      	ldr	r2, [r3, #4]
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d316      	bcc.n	800ac1a <USBD_LL_DataInStage+0xa0>
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	685a      	ldr	r2, [r3, #4]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d20f      	bcs.n	800ac1a <USBD_LL_DataInStage+0xa0>
                    (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800abfa:	2200      	movs	r2, #0
 800abfc:	2100      	movs	r1, #0
 800abfe:	68f8      	ldr	r0, [r7, #12]
 800ac00:	f001 f88b 	bl	800bd1a <USBD_CtlContinueSendData>
                    pdev->ep0_data_len = 0U;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

                    /* Prepare endpoint for premature end of transfer */
                    (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	2200      	movs	r2, #0
 800ac10:	2100      	movs	r1, #0
 800ac12:	68f8      	ldr	r0, [r7, #12]
 800ac14:	f004 f9ce 	bl	800efb4 <USBD_LL_PrepareReceive>
 800ac18:	e01c      	b.n	800ac54 <USBD_LL_DataInStage+0xda>
                } else {
                    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	2b03      	cmp	r3, #3
 800ac24:	d10f      	bne.n	800ac46 <USBD_LL_DataInStage+0xcc>
                        if (pdev->pClass[0]->EP0_TxSent != NULL) {
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d009      	beq.n	800ac46 <USBD_LL_DataInStage+0xcc>
                            pdev->classId = 0U;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                            pdev->pClass[0]->EP0_TxSent(pdev);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	4798      	blx	r3
                        }
                    }
                    (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac46:	2180      	movs	r1, #128	@ 0x80
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f004 f909 	bl	800ee60 <USBD_LL_StallEP>
                    (void)USBD_CtlReceiveStatus(pdev);
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f001 f8b5 	bl	800bdbe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
        }

        if (pdev->dev_test_mode != 0U) {
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d03a      	beq.n	800acd4 <USBD_LL_DataInStage+0x15a>
            (void)USBD_RunTestMode(pdev);
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f7ff fe42 	bl	800a8e8 <USBD_RunTestMode>
            pdev->dev_test_mode = 0U;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ac6c:	e032      	b.n	800acd4 <USBD_LL_DataInStage+0x15a>
        }
    } else {
        /* Get the class index relative to this interface */
        idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ac6e:	7afb      	ldrb	r3, [r7, #11]
 800ac70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	4619      	mov	r1, r3
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f000 f97f 	bl	800af7c <USBD_CoreFindEP>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	75fb      	strb	r3, [r7, #23]

        if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 800ac82:	7dfb      	ldrb	r3, [r7, #23]
 800ac84:	2bff      	cmp	r3, #255	@ 0xff
 800ac86:	d025      	beq.n	800acd4 <USBD_LL_DataInStage+0x15a>
 800ac88:	7dfb      	ldrb	r3, [r7, #23]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d122      	bne.n	800acd4 <USBD_LL_DataInStage+0x15a>
            /* Call the class data out function to manage the request */
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	2b03      	cmp	r3, #3
 800ac98:	d11c      	bne.n	800acd4 <USBD_LL_DataInStage+0x15a>
                if (pdev->pClass[idx]->DataIn != NULL) {
 800ac9a:	7dfa      	ldrb	r2, [r7, #23]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	32ae      	adds	r2, #174	@ 0xae
 800aca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aca4:	695b      	ldr	r3, [r3, #20]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d014      	beq.n	800acd4 <USBD_LL_DataInStage+0x15a>
                    pdev->classId = idx;
 800acaa:	7dfa      	ldrb	r2, [r7, #23]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                    ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800acb2:	7dfa      	ldrb	r2, [r7, #23]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	32ae      	adds	r2, #174	@ 0xae
 800acb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acbc:	695b      	ldr	r3, [r3, #20]
 800acbe:	7afa      	ldrb	r2, [r7, #11]
 800acc0:	4611      	mov	r1, r2
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	4798      	blx	r3
 800acc6:	4603      	mov	r3, r0
 800acc8:	75bb      	strb	r3, [r7, #22]

                    if (ret != USBD_OK) {
 800acca:	7dbb      	ldrb	r3, [r7, #22]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d001      	beq.n	800acd4 <USBD_LL_DataInStage+0x15a>
                        return ret;
 800acd0:	7dbb      	ldrb	r3, [r7, #22]
 800acd2:	e000      	b.n	800acd6 <USBD_LL_DataInStage+0x15c>
                }
            }
        }
    }

    return USBD_OK;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3718      	adds	r7, #24
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <USBD_LL_Reset>:
 *         Handle Reset event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef * pdev) {
 800acde:	b580      	push	{r7, lr}
 800ace0:	b084      	sub	sp, #16
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
    USBD_StatusTypeDef ret = USBD_OK;
 800ace6:	2300      	movs	r3, #0
 800ace8:	73fb      	strb	r3, [r7, #15]

    /* Upon Reset call user call back */
    pdev->dev_state = USBD_STATE_DEFAULT;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2201      	movs	r2, #1
 800acee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    pdev->ep0_state = USBD_EP0_IDLE;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
    pdev->dev_config = 0U;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	605a      	str	r2, [r3, #4]
    pdev->dev_remote_wakeup = 0U;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    pdev->dev_test_mode = 0U;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
            }
        }
    }
#else

    if (pdev->pClass[0] != NULL) {
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d014      	beq.n	800ad44 <USBD_LL_Reset+0x66>
        if (pdev->pClass[0]->DeInit != NULL) {
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00e      	beq.n	800ad44 <USBD_LL_Reset+0x66>
            if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK) {
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	6852      	ldr	r2, [r2, #4]
 800ad32:	b2d2      	uxtb	r2, r2
 800ad34:	4611      	mov	r1, r2
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	4798      	blx	r3
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d001      	beq.n	800ad44 <USBD_LL_Reset+0x66>
                ret = USBD_FAIL;
 800ad40:	2303      	movs	r3, #3
 800ad42:	73fb      	strb	r3, [r7, #15]
        }
    }
#endif /* USE_USBD_COMPOSITE */

    /* Open EP0 OUT */
    (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad44:	2340      	movs	r3, #64	@ 0x40
 800ad46:	2200      	movs	r2, #0
 800ad48:	2100      	movs	r1, #0
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f004 f843 	bl	800edd6 <USBD_LL_OpenEP>
    pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

    pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2240      	movs	r2, #64	@ 0x40
 800ad5c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

    /* Open EP0 IN */
    (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad60:	2340      	movs	r3, #64	@ 0x40
 800ad62:	2200      	movs	r2, #0
 800ad64:	2180      	movs	r1, #128	@ 0x80
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f004 f835 	bl	800edd6 <USBD_LL_OpenEP>
    pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	849a      	strh	r2, [r3, #36]	@ 0x24

    pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2240      	movs	r2, #64	@ 0x40
 800ad76:	621a      	str	r2, [r3, #32]

    return ret;
 800ad78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <USBD_LL_SetSpeed>:
 * @brief  USBD_LL_SetSpeed
 *         Handle Reset event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef * pdev, USBD_SpeedTypeDef speed) {
 800ad82:	b480      	push	{r7}
 800ad84:	b083      	sub	sp, #12
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	70fb      	strb	r3, [r7, #3]
    pdev->dev_speed = speed;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	78fa      	ldrb	r2, [r7, #3]
 800ad92:	741a      	strb	r2, [r3, #16]

    return USBD_OK;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	370c      	adds	r7, #12
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr

0800ada2 <USBD_LL_Suspend>:
 *         Handle Suspend event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef * pdev) {
 800ada2:	b480      	push	{r7}
 800ada4:	b083      	sub	sp, #12
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
    pdev->dev_old_state = pdev->dev_state;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adb0:	b2da      	uxtb	r2, r3
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
    pdev->dev_state = USBD_STATE_SUSPENDED;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2204      	movs	r2, #4
 800adbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

    return USBD_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	370c      	adds	r7, #12
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr

0800adce <USBD_LL_Resume>:
 *         Handle Resume event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef * pdev) {
 800adce:	b480      	push	{r7}
 800add0:	b083      	sub	sp, #12
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
    if (pdev->dev_state == USBD_STATE_SUSPENDED) {
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800addc:	b2db      	uxtb	r3, r3
 800adde:	2b04      	cmp	r3, #4
 800ade0:	d106      	bne.n	800adf0 <USBD_LL_Resume+0x22>
        pdev->dev_state = pdev->dev_old_state;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ade8:	b2da      	uxtb	r2, r3
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    }

    return USBD_OK;
 800adf0:	2300      	movs	r3, #0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	370c      	adds	r7, #12
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr

0800adfe <USBD_LL_SOF>:
 *         Handle SOF event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef * pdev) {
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b082      	sub	sp, #8
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
    /* The SOF event can be distributed for all classes that support it */
    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	2b03      	cmp	r3, #3
 800ae10:	d110      	bne.n	800ae34 <USBD_LL_SOF+0x36>
                    }
                }
            }
        }
#else
        if (pdev->pClass[0] != NULL) {
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d00b      	beq.n	800ae34 <USBD_LL_SOF+0x36>
            if (pdev->pClass[0]->SOF != NULL) {
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae22:	69db      	ldr	r3, [r3, #28]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d005      	beq.n	800ae34 <USBD_LL_SOF+0x36>
                (void)pdev->pClass[0]->SOF(pdev);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae2e:	69db      	ldr	r3, [r3, #28]
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	4798      	blx	r3
            }
        }
#endif /* USE_USBD_COMPOSITE */
    }

    return USBD_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3708      	adds	r7, #8
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <USBD_LL_IsoINIncomplete>:
 * @brief  USBD_LL_IsoINIncomplete
 *         Handle iso in incomplete event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef * pdev, uint8_t epnum) {
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b082      	sub	sp, #8
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
 800ae46:	460b      	mov	r3, r1
 800ae48:	70fb      	strb	r3, [r7, #3]
    if (pdev->pClass[pdev->classId] == NULL) {
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	32ae      	adds	r2, #174	@ 0xae
 800ae54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d101      	bne.n	800ae60 <USBD_LL_IsoINIncomplete+0x22>
        return USBD_FAIL;
 800ae5c:	2303      	movs	r3, #3
 800ae5e:	e01c      	b.n	800ae9a <USBD_LL_IsoINIncomplete+0x5c>
    }

    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	2b03      	cmp	r3, #3
 800ae6a:	d115      	bne.n	800ae98 <USBD_LL_IsoINIncomplete+0x5a>
        if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL) {
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	32ae      	adds	r2, #174	@ 0xae
 800ae76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae7a:	6a1b      	ldr	r3, [r3, #32]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00b      	beq.n	800ae98 <USBD_LL_IsoINIncomplete+0x5a>
            (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	32ae      	adds	r2, #174	@ 0xae
 800ae8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae8e:	6a1b      	ldr	r3, [r3, #32]
 800ae90:	78fa      	ldrb	r2, [r7, #3]
 800ae92:	4611      	mov	r1, r2
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	4798      	blx	r3
        }
    }

    return USBD_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <USBD_LL_IsoOUTIncomplete>:
 * @brief  USBD_LL_IsoOUTIncomplete
 *         Handle iso out incomplete event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef * pdev, uint8_t epnum) {
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b082      	sub	sp, #8
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	460b      	mov	r3, r1
 800aeac:	70fb      	strb	r3, [r7, #3]
    if (pdev->pClass[pdev->classId] == NULL) {
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	32ae      	adds	r2, #174	@ 0xae
 800aeb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d101      	bne.n	800aec4 <USBD_LL_IsoOUTIncomplete+0x22>
        return USBD_FAIL;
 800aec0:	2303      	movs	r3, #3
 800aec2:	e01c      	b.n	800aefe <USBD_LL_IsoOUTIncomplete+0x5c>
    }

    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	2b03      	cmp	r3, #3
 800aece:	d115      	bne.n	800aefc <USBD_LL_IsoOUTIncomplete+0x5a>
        if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL) {
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	32ae      	adds	r2, #174	@ 0xae
 800aeda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d00b      	beq.n	800aefc <USBD_LL_IsoOUTIncomplete+0x5a>
            (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	32ae      	adds	r2, #174	@ 0xae
 800aeee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aef4:	78fa      	ldrb	r2, [r7, #3]
 800aef6:	4611      	mov	r1, r2
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	4798      	blx	r3
        }
    }

    return USBD_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <USBD_LL_DevConnected>:
 * @brief  USBD_LL_DevConnected
 *         Handle device connection event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef * pdev) {
 800af06:	b480      	push	{r7}
 800af08:	b083      	sub	sp, #12
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument compilation warning */
    UNUSED(pdev);

    return USBD_OK;
 800af0e:	2300      	movs	r3, #0
}
 800af10:	4618      	mov	r0, r3
 800af12:	370c      	adds	r7, #12
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr

0800af1c <USBD_LL_DevDisconnected>:
 * @brief  USBD_LL_DevDisconnected
 *         Handle device disconnection event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef * pdev) {
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
    USBD_StatusTypeDef ret = USBD_OK;
 800af24:	2300      	movs	r3, #0
 800af26:	73fb      	strb	r3, [r7, #15]

    /* Free Class Resources */
    pdev->dev_state = USBD_STATE_DEFAULT;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
                }
            }
        }
    }
#else
    if (pdev->pClass[0] != NULL) {
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00e      	beq.n	800af58 <USBD_LL_DevDisconnected+0x3c>
        if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U) {
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	6852      	ldr	r2, [r2, #4]
 800af46:	b2d2      	uxtb	r2, r2
 800af48:	4611      	mov	r1, r2
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	4798      	blx	r3
 800af4e:	4603      	mov	r3, r0
 800af50:	2b00      	cmp	r3, #0
 800af52:	d001      	beq.n	800af58 <USBD_LL_DevDisconnected+0x3c>
            ret = USBD_FAIL;
 800af54:	2303      	movs	r3, #3
 800af56:	73fb      	strb	r3, [r7, #15]
        }
    }
#endif /* USE_USBD_COMPOSITE */

    return ret;
 800af58:	7bfb      	ldrb	r3, [r7, #15]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3710      	adds	r7, #16
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <USBD_CoreFindIF>:
 *         return the class index relative to the selected interface
 * @param  pdev: device instance
 * @param  index : selected interface number
 * @retval index of the class using the selected interface number. OxFF if no class found.
 */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef * pdev, uint8_t index) {
 800af62:	b480      	push	{r7}
 800af64:	b083      	sub	sp, #12
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
 800af6a:	460b      	mov	r3, r1
 800af6c:	70fb      	strb	r3, [r7, #3]
    return 0xFFU;
#else
    UNUSED(pdev);
    UNUSED(index);

    return 0x00U;
 800af6e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800af70:	4618      	mov	r0, r3
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <USBD_CoreFindEP>:
 *         return the class index relative to the selected endpoint
 * @param  pdev: device instance
 * @param  index : selected endpoint number
 * @retval index of the class using the selected endpoint number. 0xFF if no class found.
 */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef * pdev, uint8_t index) {
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	460b      	mov	r3, r1
 800af86:	70fb      	strb	r3, [r7, #3]
    return 0xFFU;
#else
    UNUSED(pdev);
    UNUSED(index);

    return 0x00U;
 800af88:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	370c      	adds	r7, #12
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr

0800af96 <USBD_GetEpDesc>:
 * @param  pdev: device instance
 * @param  pConfDesc:  pointer to Bos descriptor
 * @param  EpAddr:  endpoint address
 * @retval pointer to video endpoint descriptor
 */
void * USBD_GetEpDesc(uint8_t * pConfDesc, uint8_t EpAddr) {
 800af96:	b580      	push	{r7, lr}
 800af98:	b086      	sub	sp, #24
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
 800af9e:	460b      	mov	r3, r1
 800afa0:	70fb      	strb	r3, [r7, #3]
    USBD_DescHeaderTypeDef * pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	617b      	str	r3, [r7, #20]
    USBD_ConfigDescTypeDef * desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	60fb      	str	r3, [r7, #12]
    USBD_EpDescTypeDef * pEpDesc = NULL;
 800afaa:	2300      	movs	r3, #0
 800afac:	613b      	str	r3, [r7, #16]
    uint16_t ptr;

    if (desc->wTotalLength > desc->bLength) {
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	885b      	ldrh	r3, [r3, #2]
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	68fa      	ldr	r2, [r7, #12]
 800afb6:	7812      	ldrb	r2, [r2, #0]
 800afb8:	4293      	cmp	r3, r2
 800afba:	d91f      	bls.n	800affc <USBD_GetEpDesc+0x66>
        ptr = desc->bLength;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	817b      	strh	r3, [r7, #10]

        while (ptr < desc->wTotalLength) {
 800afc2:	e013      	b.n	800afec <USBD_GetEpDesc+0x56>
            pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800afc4:	f107 030a 	add.w	r3, r7, #10
 800afc8:	4619      	mov	r1, r3
 800afca:	6978      	ldr	r0, [r7, #20]
 800afcc:	f000 f81b 	bl	800b006 <USBD_GetNextDesc>
 800afd0:	6178      	str	r0, [r7, #20]

            if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT) {
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	785b      	ldrb	r3, [r3, #1]
 800afd6:	2b05      	cmp	r3, #5
 800afd8:	d108      	bne.n	800afec <USBD_GetEpDesc+0x56>
                pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	613b      	str	r3, [r7, #16]

                if (pEpDesc->bEndpointAddress == EpAddr) {
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	789b      	ldrb	r3, [r3, #2]
 800afe2:	78fa      	ldrb	r2, [r7, #3]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d008      	beq.n	800affa <USBD_GetEpDesc+0x64>
                    break;
                } else {
                    pEpDesc = NULL;
 800afe8:	2300      	movs	r3, #0
 800afea:	613b      	str	r3, [r7, #16]
        while (ptr < desc->wTotalLength) {
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	885b      	ldrh	r3, [r3, #2]
 800aff0:	b29a      	uxth	r2, r3
 800aff2:	897b      	ldrh	r3, [r7, #10]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d8e5      	bhi.n	800afc4 <USBD_GetEpDesc+0x2e>
 800aff8:	e000      	b.n	800affc <USBD_GetEpDesc+0x66>
                    break;
 800affa:	bf00      	nop
                }
            }
        }
    }

    return (void *)pEpDesc;
 800affc:	693b      	ldr	r3, [r7, #16]
}
 800affe:	4618      	mov	r0, r3
 800b000:	3718      	adds	r7, #24
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <USBD_GetNextDesc>:
 *         This function return the next descriptor header
 * @param  buf: Buffer where the descriptor is available
 * @param  ptr: data pointer inside the descriptor
 * @retval next header
 */
USBD_DescHeaderTypeDef * USBD_GetNextDesc(uint8_t * pbuf, uint16_t * ptr) {
 800b006:	b480      	push	{r7}
 800b008:	b085      	sub	sp, #20
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
 800b00e:	6039      	str	r1, [r7, #0]
    USBD_DescHeaderTypeDef * pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	60fb      	str	r3, [r7, #12]

    *ptr += pnext->bLength;
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	881b      	ldrh	r3, [r3, #0]
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	7812      	ldrb	r2, [r2, #0]
 800b01c:	4413      	add	r3, r2
 800b01e:	b29a      	uxth	r2, r3
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	801a      	strh	r2, [r3, #0]
    pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	461a      	mov	r2, r3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	4413      	add	r3, r2
 800b02e:	60fb      	str	r3, [r7, #12]

    return (pnext);
 800b030:	68fb      	ldr	r3, [r7, #12]
}
 800b032:	4618      	mov	r0, r3
 800b034:	3714      	adds	r7, #20
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr

0800b03e <SWAPBYTE>:
 */

/** @defgroup USBD_DEF_Exported_Macros
 * @{
 */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t * addr) {
 800b03e:	b480      	push	{r7}
 800b040:	b087      	sub	sp, #28
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
    uint16_t _SwapVal, _Byte1, _Byte2;
    uint8_t * _pbuff = addr;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	617b      	str	r3, [r7, #20]

    _Byte1 = *(uint8_t *)_pbuff;
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	827b      	strh	r3, [r7, #18]
    _pbuff++;
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	3301      	adds	r3, #1
 800b054:	617b      	str	r3, [r7, #20]
    _Byte2 = *(uint8_t *)_pbuff;
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	823b      	strh	r3, [r7, #16]

    _SwapVal = (_Byte2 << 8) | _Byte1;
 800b05c:	8a3b      	ldrh	r3, [r7, #16]
 800b05e:	021b      	lsls	r3, r3, #8
 800b060:	b21a      	sxth	r2, r3
 800b062:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b066:	4313      	orrs	r3, r2
 800b068:	b21b      	sxth	r3, r3
 800b06a:	81fb      	strh	r3, [r7, #14]

    return _SwapVal;
 800b06c:	89fb      	ldrh	r3, [r7, #14]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	371c      	adds	r7, #28
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
	...

0800b07c <USBD_StdDevReq>:
 *         Handle standard usb device requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret = USBD_OK;
 800b086:	2300      	movs	r3, #0
 800b088:	73fb      	strb	r3, [r7, #15]

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b092:	2b40      	cmp	r3, #64	@ 0x40
 800b094:	d005      	beq.n	800b0a2 <USBD_StdDevReq+0x26>
 800b096:	2b40      	cmp	r3, #64	@ 0x40
 800b098:	d857      	bhi.n	800b14a <USBD_StdDevReq+0xce>
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00f      	beq.n	800b0be <USBD_StdDevReq+0x42>
 800b09e:	2b20      	cmp	r3, #32
 800b0a0:	d153      	bne.n	800b14a <USBD_StdDevReq+0xce>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
        ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	32ae      	adds	r2, #174	@ 0xae
 800b0ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0b0:	689b      	ldr	r3, [r3, #8]
 800b0b2:	6839      	ldr	r1, [r7, #0]
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	4798      	blx	r3
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	73fb      	strb	r3, [r7, #15]
        break;
 800b0bc:	e04a      	b.n	800b154 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
        switch (req->bRequest) {
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	785b      	ldrb	r3, [r3, #1]
 800b0c2:	2b09      	cmp	r3, #9
 800b0c4:	d83b      	bhi.n	800b13e <USBD_StdDevReq+0xc2>
 800b0c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b0cc <USBD_StdDevReq+0x50>)
 800b0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0cc:	0800b121 	.word	0x0800b121
 800b0d0:	0800b135 	.word	0x0800b135
 800b0d4:	0800b13f 	.word	0x0800b13f
 800b0d8:	0800b12b 	.word	0x0800b12b
 800b0dc:	0800b13f 	.word	0x0800b13f
 800b0e0:	0800b0ff 	.word	0x0800b0ff
 800b0e4:	0800b0f5 	.word	0x0800b0f5
 800b0e8:	0800b13f 	.word	0x0800b13f
 800b0ec:	0800b117 	.word	0x0800b117
 800b0f0:	0800b109 	.word	0x0800b109
        case USB_REQ_GET_DESCRIPTOR:
            USBD_GetDescriptor(pdev, req);
 800b0f4:	6839      	ldr	r1, [r7, #0]
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fa3c 	bl	800b574 <USBD_GetDescriptor>
            break;
 800b0fc:	e024      	b.n	800b148 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
            USBD_SetAddress(pdev, req);
 800b0fe:	6839      	ldr	r1, [r7, #0]
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 fba1 	bl	800b848 <USBD_SetAddress>
            break;
 800b106:	e01f      	b.n	800b148 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
            ret = USBD_SetConfig(pdev, req);
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 fbe0 	bl	800b8d0 <USBD_SetConfig>
 800b110:	4603      	mov	r3, r0
 800b112:	73fb      	strb	r3, [r7, #15]
            break;
 800b114:	e018      	b.n	800b148 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
            USBD_GetConfig(pdev, req);
 800b116:	6839      	ldr	r1, [r7, #0]
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 fc83 	bl	800ba24 <USBD_GetConfig>
            break;
 800b11e:	e013      	b.n	800b148 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
            USBD_GetStatus(pdev, req);
 800b120:	6839      	ldr	r1, [r7, #0]
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 fcb4 	bl	800ba90 <USBD_GetStatus>
            break;
 800b128:	e00e      	b.n	800b148 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
            USBD_SetFeature(pdev, req);
 800b12a:	6839      	ldr	r1, [r7, #0]
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 fce3 	bl	800baf8 <USBD_SetFeature>
            break;
 800b132:	e009      	b.n	800b148 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
            USBD_ClrFeature(pdev, req);
 800b134:	6839      	ldr	r1, [r7, #0]
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 fd07 	bl	800bb4a <USBD_ClrFeature>
            break;
 800b13c:	e004      	b.n	800b148 <USBD_StdDevReq+0xcc>

        default:
            USBD_CtlError(pdev, req);
 800b13e:	6839      	ldr	r1, [r7, #0]
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 fd5e 	bl	800bc02 <USBD_CtlError>
            break;
 800b146:	bf00      	nop
        }
        break;
 800b148:	e004      	b.n	800b154 <USBD_StdDevReq+0xd8>

    default:
        USBD_CtlError(pdev, req);
 800b14a:	6839      	ldr	r1, [r7, #0]
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 fd58 	bl	800bc02 <USBD_CtlError>
        break;
 800b152:	bf00      	nop
    }

    return ret;
 800b154:	7bfb      	ldrb	r3, [r7, #15]
}
 800b156:	4618      	mov	r0, r3
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop

0800b160 <USBD_StdItfReq>:
 *         Handle standard usb interface requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret = USBD_OK;
 800b16a:	2300      	movs	r3, #0
 800b16c:	73fb      	strb	r3, [r7, #15]
    uint8_t idx;

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b176:	2b40      	cmp	r3, #64	@ 0x40
 800b178:	d005      	beq.n	800b186 <USBD_StdItfReq+0x26>
 800b17a:	2b40      	cmp	r3, #64	@ 0x40
 800b17c:	d852      	bhi.n	800b224 <USBD_StdItfReq+0xc4>
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d001      	beq.n	800b186 <USBD_StdItfReq+0x26>
 800b182:	2b20      	cmp	r3, #32
 800b184:	d14e      	bne.n	800b224 <USBD_StdItfReq+0xc4>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
        switch (pdev->dev_state) {
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	3b01      	subs	r3, #1
 800b190:	2b02      	cmp	r3, #2
 800b192:	d840      	bhi.n	800b216 <USBD_StdItfReq+0xb6>
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

            if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) {
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	889b      	ldrh	r3, [r3, #4]
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d836      	bhi.n	800b20c <USBD_StdItfReq+0xac>
                /* Get the class index relative to this interface */
                idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	889b      	ldrh	r3, [r3, #4]
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f7ff fedb 	bl	800af62 <USBD_CoreFindIF>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	73bb      	strb	r3, [r7, #14]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 800b1b0:	7bbb      	ldrb	r3, [r7, #14]
 800b1b2:	2bff      	cmp	r3, #255	@ 0xff
 800b1b4:	d01d      	beq.n	800b1f2 <USBD_StdItfReq+0x92>
 800b1b6:	7bbb      	ldrb	r3, [r7, #14]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d11a      	bne.n	800b1f2 <USBD_StdItfReq+0x92>
                    /* Call the class data out function to manage the request */
                    if (pdev->pClass[idx]->Setup != NULL) {
 800b1bc:	7bba      	ldrb	r2, [r7, #14]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	32ae      	adds	r2, #174	@ 0xae
 800b1c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d00f      	beq.n	800b1ec <USBD_StdItfReq+0x8c>
                        pdev->classId = idx;
 800b1cc:	7bba      	ldrb	r2, [r7, #14]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                        ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b1d4:	7bba      	ldrb	r2, [r7, #14]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	32ae      	adds	r2, #174	@ 0xae
 800b1da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	6839      	ldr	r1, [r7, #0]
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	4798      	blx	r3
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	73fb      	strb	r3, [r7, #15]
                    if (pdev->pClass[idx]->Setup != NULL) {
 800b1ea:	e004      	b.n	800b1f6 <USBD_StdItfReq+0x96>
                    } else {
                        /* should never reach this condition */
                        ret = USBD_FAIL;
 800b1ec:	2303      	movs	r3, #3
 800b1ee:	73fb      	strb	r3, [r7, #15]
                    if (pdev->pClass[idx]->Setup != NULL) {
 800b1f0:	e001      	b.n	800b1f6 <USBD_StdItfReq+0x96>
                    }
                } else {
                    /* No relative interface found */
                    ret = USBD_FAIL;
 800b1f2:	2303      	movs	r3, #3
 800b1f4:	73fb      	strb	r3, [r7, #15]
                }

                if ((req->wLength == 0U) && (ret == USBD_OK)) {
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	88db      	ldrh	r3, [r3, #6]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d110      	bne.n	800b220 <USBD_StdItfReq+0xc0>
 800b1fe:	7bfb      	ldrb	r3, [r7, #15]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10d      	bne.n	800b220 <USBD_StdItfReq+0xc0>
                    (void)USBD_CtlSendStatus(pdev);
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 fdc7 	bl	800bd98 <USBD_CtlSendStatus>
                }
            } else {
                USBD_CtlError(pdev, req);
            }
            break;
 800b20a:	e009      	b.n	800b220 <USBD_StdItfReq+0xc0>
                USBD_CtlError(pdev, req);
 800b20c:	6839      	ldr	r1, [r7, #0]
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fcf7 	bl	800bc02 <USBD_CtlError>
            break;
 800b214:	e004      	b.n	800b220 <USBD_StdItfReq+0xc0>

        default:
            USBD_CtlError(pdev, req);
 800b216:	6839      	ldr	r1, [r7, #0]
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 fcf2 	bl	800bc02 <USBD_CtlError>
            break;
 800b21e:	e000      	b.n	800b222 <USBD_StdItfReq+0xc2>
            break;
 800b220:	bf00      	nop
        }
        break;
 800b222:	e004      	b.n	800b22e <USBD_StdItfReq+0xce>

    default:
        USBD_CtlError(pdev, req);
 800b224:	6839      	ldr	r1, [r7, #0]
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 fceb 	bl	800bc02 <USBD_CtlError>
        break;
 800b22c:	bf00      	nop
    }

    return ret;
 800b22e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3710      	adds	r7, #16
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <USBD_StdEPReq>:
 *         Handle standard usb endpoint requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
    USBD_EndpointTypeDef * pep;
    uint8_t ep_addr;
    uint8_t idx;
    USBD_StatusTypeDef ret = USBD_OK;
 800b242:	2300      	movs	r3, #0
 800b244:	73fb      	strb	r3, [r7, #15]

    ep_addr = LOBYTE(req->wIndex);
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	889b      	ldrh	r3, [r3, #4]
 800b24a:	73bb      	strb	r3, [r7, #14]

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b254:	2b40      	cmp	r3, #64	@ 0x40
 800b256:	d007      	beq.n	800b268 <USBD_StdEPReq+0x30>
 800b258:	2b40      	cmp	r3, #64	@ 0x40
 800b25a:	f200 817f 	bhi.w	800b55c <USBD_StdEPReq+0x324>
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d02a      	beq.n	800b2b8 <USBD_StdEPReq+0x80>
 800b262:	2b20      	cmp	r3, #32
 800b264:	f040 817a 	bne.w	800b55c <USBD_StdEPReq+0x324>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
        /* Get the class index relative to this endpoint */
        idx = USBD_CoreFindEP(pdev, ep_addr);
 800b268:	7bbb      	ldrb	r3, [r7, #14]
 800b26a:	4619      	mov	r1, r3
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f7ff fe85 	bl	800af7c <USBD_CoreFindEP>
 800b272:	4603      	mov	r3, r0
 800b274:	737b      	strb	r3, [r7, #13]
        if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 800b276:	7b7b      	ldrb	r3, [r7, #13]
 800b278:	2bff      	cmp	r3, #255	@ 0xff
 800b27a:	f000 8174 	beq.w	800b566 <USBD_StdEPReq+0x32e>
 800b27e:	7b7b      	ldrb	r3, [r7, #13]
 800b280:	2b00      	cmp	r3, #0
 800b282:	f040 8170 	bne.w	800b566 <USBD_StdEPReq+0x32e>
            pdev->classId = idx;
 800b286:	7b7a      	ldrb	r2, [r7, #13]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
            /* Call the class data out function to manage the request */
            if (pdev->pClass[idx]->Setup != NULL) {
 800b28e:	7b7a      	ldrb	r2, [r7, #13]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	32ae      	adds	r2, #174	@ 0xae
 800b294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f000 8163 	beq.w	800b566 <USBD_StdEPReq+0x32e>
                ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b2a0:	7b7a      	ldrb	r2, [r7, #13]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	32ae      	adds	r2, #174	@ 0xae
 800b2a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	6839      	ldr	r1, [r7, #0]
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	4798      	blx	r3
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	73fb      	strb	r3, [r7, #15]
            }
        }
        break;
 800b2b6:	e156      	b.n	800b566 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
        switch (req->bRequest) {
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	785b      	ldrb	r3, [r3, #1]
 800b2bc:	2b03      	cmp	r3, #3
 800b2be:	d008      	beq.n	800b2d2 <USBD_StdEPReq+0x9a>
 800b2c0:	2b03      	cmp	r3, #3
 800b2c2:	f300 8145 	bgt.w	800b550 <USBD_StdEPReq+0x318>
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	f000 809b 	beq.w	800b402 <USBD_StdEPReq+0x1ca>
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d03c      	beq.n	800b34a <USBD_StdEPReq+0x112>
 800b2d0:	e13e      	b.n	800b550 <USBD_StdEPReq+0x318>
        case USB_REQ_SET_FEATURE:
            switch (pdev->dev_state) {
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	d002      	beq.n	800b2e4 <USBD_StdEPReq+0xac>
 800b2de:	2b03      	cmp	r3, #3
 800b2e0:	d016      	beq.n	800b310 <USBD_StdEPReq+0xd8>
 800b2e2:	e02c      	b.n	800b33e <USBD_StdEPReq+0x106>
            case USBD_STATE_ADDRESSED:
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U)) {
 800b2e4:	7bbb      	ldrb	r3, [r7, #14]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d00d      	beq.n	800b306 <USBD_StdEPReq+0xce>
 800b2ea:	7bbb      	ldrb	r3, [r7, #14]
 800b2ec:	2b80      	cmp	r3, #128	@ 0x80
 800b2ee:	d00a      	beq.n	800b306 <USBD_StdEPReq+0xce>
                    (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2f0:	7bbb      	ldrb	r3, [r7, #14]
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f003 fdb3 	bl	800ee60 <USBD_LL_StallEP>
                    (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2fa:	2180      	movs	r1, #128	@ 0x80
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f003 fdaf 	bl	800ee60 <USBD_LL_StallEP>
 800b302:	bf00      	nop
                } else {
                    USBD_CtlError(pdev, req);
                }
                break;
 800b304:	e020      	b.n	800b348 <USBD_StdEPReq+0x110>
                    USBD_CtlError(pdev, req);
 800b306:	6839      	ldr	r1, [r7, #0]
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 fc7a 	bl	800bc02 <USBD_CtlError>
                break;
 800b30e:	e01b      	b.n	800b348 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
                if (req->wValue == USB_FEATURE_EP_HALT) {
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	885b      	ldrh	r3, [r3, #2]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d10e      	bne.n	800b336 <USBD_StdEPReq+0xfe>
                    if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U)) {
 800b318:	7bbb      	ldrb	r3, [r7, #14]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00b      	beq.n	800b336 <USBD_StdEPReq+0xfe>
 800b31e:	7bbb      	ldrb	r3, [r7, #14]
 800b320:	2b80      	cmp	r3, #128	@ 0x80
 800b322:	d008      	beq.n	800b336 <USBD_StdEPReq+0xfe>
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	88db      	ldrh	r3, [r3, #6]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d104      	bne.n	800b336 <USBD_StdEPReq+0xfe>
                        (void)USBD_LL_StallEP(pdev, ep_addr);
 800b32c:	7bbb      	ldrb	r3, [r7, #14]
 800b32e:	4619      	mov	r1, r3
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f003 fd95 	bl	800ee60 <USBD_LL_StallEP>
                    }
                }
                (void)USBD_CtlSendStatus(pdev);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 fd2e 	bl	800bd98 <USBD_CtlSendStatus>

                break;
 800b33c:	e004      	b.n	800b348 <USBD_StdEPReq+0x110>

            default:
                USBD_CtlError(pdev, req);
 800b33e:	6839      	ldr	r1, [r7, #0]
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 fc5e 	bl	800bc02 <USBD_CtlError>
                break;
 800b346:	bf00      	nop
            }
            break;
 800b348:	e107      	b.n	800b55a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

            switch (pdev->dev_state) {
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b350:	b2db      	uxtb	r3, r3
 800b352:	2b02      	cmp	r3, #2
 800b354:	d002      	beq.n	800b35c <USBD_StdEPReq+0x124>
 800b356:	2b03      	cmp	r3, #3
 800b358:	d016      	beq.n	800b388 <USBD_StdEPReq+0x150>
 800b35a:	e04b      	b.n	800b3f4 <USBD_StdEPReq+0x1bc>
            case USBD_STATE_ADDRESSED:
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U)) {
 800b35c:	7bbb      	ldrb	r3, [r7, #14]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00d      	beq.n	800b37e <USBD_StdEPReq+0x146>
 800b362:	7bbb      	ldrb	r3, [r7, #14]
 800b364:	2b80      	cmp	r3, #128	@ 0x80
 800b366:	d00a      	beq.n	800b37e <USBD_StdEPReq+0x146>
                    (void)USBD_LL_StallEP(pdev, ep_addr);
 800b368:	7bbb      	ldrb	r3, [r7, #14]
 800b36a:	4619      	mov	r1, r3
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f003 fd77 	bl	800ee60 <USBD_LL_StallEP>
                    (void)USBD_LL_StallEP(pdev, 0x80U);
 800b372:	2180      	movs	r1, #128	@ 0x80
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f003 fd73 	bl	800ee60 <USBD_LL_StallEP>
 800b37a:	bf00      	nop
                } else {
                    USBD_CtlError(pdev, req);
                }
                break;
 800b37c:	e040      	b.n	800b400 <USBD_StdEPReq+0x1c8>
                    USBD_CtlError(pdev, req);
 800b37e:	6839      	ldr	r1, [r7, #0]
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 fc3e 	bl	800bc02 <USBD_CtlError>
                break;
 800b386:	e03b      	b.n	800b400 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
                if (req->wValue == USB_FEATURE_EP_HALT) {
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	885b      	ldrh	r3, [r3, #2]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d136      	bne.n	800b3fe <USBD_StdEPReq+0x1c6>
                    if ((ep_addr & 0x7FU) != 0x00U) {
 800b390:	7bbb      	ldrb	r3, [r7, #14]
 800b392:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b396:	2b00      	cmp	r3, #0
 800b398:	d004      	beq.n	800b3a4 <USBD_StdEPReq+0x16c>
                        (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b39a:	7bbb      	ldrb	r3, [r7, #14]
 800b39c:	4619      	mov	r1, r3
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f003 fd7d 	bl	800ee9e <USBD_LL_ClearStallEP>
                    }
                    (void)USBD_CtlSendStatus(pdev);
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 fcf7 	bl	800bd98 <USBD_CtlSendStatus>

                    /* Get the class index relative to this interface */
                    idx = USBD_CoreFindEP(pdev, ep_addr);
 800b3aa:	7bbb      	ldrb	r3, [r7, #14]
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f7ff fde4 	bl	800af7c <USBD_CoreFindEP>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	737b      	strb	r3, [r7, #13]
                    if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 800b3b8:	7b7b      	ldrb	r3, [r7, #13]
 800b3ba:	2bff      	cmp	r3, #255	@ 0xff
 800b3bc:	d01f      	beq.n	800b3fe <USBD_StdEPReq+0x1c6>
 800b3be:	7b7b      	ldrb	r3, [r7, #13]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d11c      	bne.n	800b3fe <USBD_StdEPReq+0x1c6>
                        pdev->classId = idx;
 800b3c4:	7b7a      	ldrb	r2, [r7, #13]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                        /* Call the class data out function to manage the request */
                        if (pdev->pClass[idx]->Setup != NULL) {
 800b3cc:	7b7a      	ldrb	r2, [r7, #13]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	32ae      	adds	r2, #174	@ 0xae
 800b3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d010      	beq.n	800b3fe <USBD_StdEPReq+0x1c6>
                            ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b3dc:	7b7a      	ldrb	r2, [r7, #13]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	32ae      	adds	r2, #174	@ 0xae
 800b3e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	6839      	ldr	r1, [r7, #0]
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	4798      	blx	r3
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	73fb      	strb	r3, [r7, #15]
                        }
                    }
                }
                break;
 800b3f2:	e004      	b.n	800b3fe <USBD_StdEPReq+0x1c6>

            default:
                USBD_CtlError(pdev, req);
 800b3f4:	6839      	ldr	r1, [r7, #0]
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 fc03 	bl	800bc02 <USBD_CtlError>
                break;
 800b3fc:	e000      	b.n	800b400 <USBD_StdEPReq+0x1c8>
                break;
 800b3fe:	bf00      	nop
            }
            break;
 800b400:	e0ab      	b.n	800b55a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
            switch (pdev->dev_state) {
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	2b02      	cmp	r3, #2
 800b40c:	d002      	beq.n	800b414 <USBD_StdEPReq+0x1dc>
 800b40e:	2b03      	cmp	r3, #3
 800b410:	d032      	beq.n	800b478 <USBD_StdEPReq+0x240>
 800b412:	e097      	b.n	800b544 <USBD_StdEPReq+0x30c>
            case USBD_STATE_ADDRESSED:
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U)) {
 800b414:	7bbb      	ldrb	r3, [r7, #14]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d007      	beq.n	800b42a <USBD_StdEPReq+0x1f2>
 800b41a:	7bbb      	ldrb	r3, [r7, #14]
 800b41c:	2b80      	cmp	r3, #128	@ 0x80
 800b41e:	d004      	beq.n	800b42a <USBD_StdEPReq+0x1f2>
                    USBD_CtlError(pdev, req);
 800b420:	6839      	ldr	r1, [r7, #0]
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 fbed 	bl	800bc02 <USBD_CtlError>
                    break;
 800b428:	e091      	b.n	800b54e <USBD_StdEPReq+0x316>
                }
                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : &pdev->ep_out[ep_addr & 0x7FU];
 800b42a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	da0b      	bge.n	800b44a <USBD_StdEPReq+0x212>
 800b432:	7bbb      	ldrb	r3, [r7, #14]
 800b434:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b438:	4613      	mov	r3, r2
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	4413      	add	r3, r2
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	3310      	adds	r3, #16
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	4413      	add	r3, r2
 800b446:	3304      	adds	r3, #4
 800b448:	e00b      	b.n	800b462 <USBD_StdEPReq+0x22a>
 800b44a:	7bbb      	ldrb	r3, [r7, #14]
 800b44c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b450:	4613      	mov	r3, r2
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	4413      	add	r3, r2
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	4413      	add	r3, r2
 800b460:	3304      	adds	r3, #4
 800b462:	60bb      	str	r3, [r7, #8]

                pep->status = 0x0000U;
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	2200      	movs	r2, #0
 800b468:	601a      	str	r2, [r3, #0]

                (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	2202      	movs	r2, #2
 800b46e:	4619      	mov	r1, r3
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 fc37 	bl	800bce4 <USBD_CtlSendData>
                break;
 800b476:	e06a      	b.n	800b54e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
                if ((ep_addr & 0x80U) == 0x80U) {
 800b478:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	da11      	bge.n	800b4a4 <USBD_StdEPReq+0x26c>
                    if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U) {
 800b480:	7bbb      	ldrb	r3, [r7, #14]
 800b482:	f003 020f 	and.w	r2, r3, #15
 800b486:	6879      	ldr	r1, [r7, #4]
 800b488:	4613      	mov	r3, r2
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	4413      	add	r3, r2
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	440b      	add	r3, r1
 800b492:	3324      	adds	r3, #36	@ 0x24
 800b494:	881b      	ldrh	r3, [r3, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d117      	bne.n	800b4ca <USBD_StdEPReq+0x292>
                        USBD_CtlError(pdev, req);
 800b49a:	6839      	ldr	r1, [r7, #0]
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 fbb0 	bl	800bc02 <USBD_CtlError>
                        break;
 800b4a2:	e054      	b.n	800b54e <USBD_StdEPReq+0x316>
                    }
                } else {
                    if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U) {
 800b4a4:	7bbb      	ldrb	r3, [r7, #14]
 800b4a6:	f003 020f 	and.w	r2, r3, #15
 800b4aa:	6879      	ldr	r1, [r7, #4]
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	4413      	add	r3, r2
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	440b      	add	r3, r1
 800b4b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b4ba:	881b      	ldrh	r3, [r3, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d104      	bne.n	800b4ca <USBD_StdEPReq+0x292>
                        USBD_CtlError(pdev, req);
 800b4c0:	6839      	ldr	r1, [r7, #0]
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 fb9d 	bl	800bc02 <USBD_CtlError>
                        break;
 800b4c8:	e041      	b.n	800b54e <USBD_StdEPReq+0x316>
                    }
                }

                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : &pdev->ep_out[ep_addr & 0x7FU];
 800b4ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	da0b      	bge.n	800b4ea <USBD_StdEPReq+0x2b2>
 800b4d2:	7bbb      	ldrb	r3, [r7, #14]
 800b4d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b4d8:	4613      	mov	r3, r2
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	4413      	add	r3, r2
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	3310      	adds	r3, #16
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	3304      	adds	r3, #4
 800b4e8:	e00b      	b.n	800b502 <USBD_StdEPReq+0x2ca>
 800b4ea:	7bbb      	ldrb	r3, [r7, #14]
 800b4ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b4f0:	4613      	mov	r3, r2
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	4413      	add	r3, r2
 800b4f6:	009b      	lsls	r3, r3, #2
 800b4f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	4413      	add	r3, r2
 800b500:	3304      	adds	r3, #4
 800b502:	60bb      	str	r3, [r7, #8]

                if ((ep_addr == 0x00U) || (ep_addr == 0x80U)) {
 800b504:	7bbb      	ldrb	r3, [r7, #14]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d002      	beq.n	800b510 <USBD_StdEPReq+0x2d8>
 800b50a:	7bbb      	ldrb	r3, [r7, #14]
 800b50c:	2b80      	cmp	r3, #128	@ 0x80
 800b50e:	d103      	bne.n	800b518 <USBD_StdEPReq+0x2e0>
                    pep->status = 0x0000U;
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	2200      	movs	r2, #0
 800b514:	601a      	str	r2, [r3, #0]
 800b516:	e00e      	b.n	800b536 <USBD_StdEPReq+0x2fe>
                } else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U) {
 800b518:	7bbb      	ldrb	r3, [r7, #14]
 800b51a:	4619      	mov	r1, r3
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f003 fcdd 	bl	800eedc <USBD_LL_IsStallEP>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d003      	beq.n	800b530 <USBD_StdEPReq+0x2f8>
                    pep->status = 0x0001U;
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	2201      	movs	r2, #1
 800b52c:	601a      	str	r2, [r3, #0]
 800b52e:	e002      	b.n	800b536 <USBD_StdEPReq+0x2fe>
                } else {
                    pep->status = 0x0000U;
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	2200      	movs	r2, #0
 800b534:	601a      	str	r2, [r3, #0]
                }

                (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	2202      	movs	r2, #2
 800b53a:	4619      	mov	r1, r3
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 fbd1 	bl	800bce4 <USBD_CtlSendData>
                break;
 800b542:	e004      	b.n	800b54e <USBD_StdEPReq+0x316>

            default:
                USBD_CtlError(pdev, req);
 800b544:	6839      	ldr	r1, [r7, #0]
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 fb5b 	bl	800bc02 <USBD_CtlError>
                break;
 800b54c:	bf00      	nop
            }
            break;
 800b54e:	e004      	b.n	800b55a <USBD_StdEPReq+0x322>

        default:
            USBD_CtlError(pdev, req);
 800b550:	6839      	ldr	r1, [r7, #0]
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 fb55 	bl	800bc02 <USBD_CtlError>
            break;
 800b558:	bf00      	nop
        }
        break;
 800b55a:	e005      	b.n	800b568 <USBD_StdEPReq+0x330>

    default:
        USBD_CtlError(pdev, req);
 800b55c:	6839      	ldr	r1, [r7, #0]
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 fb4f 	bl	800bc02 <USBD_CtlError>
        break;
 800b564:	e000      	b.n	800b568 <USBD_StdEPReq+0x330>
        break;
 800b566:	bf00      	nop
    }

    return ret;
 800b568:	7bfb      	ldrb	r3, [r7, #15]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3710      	adds	r7, #16
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
	...

0800b574 <USBD_GetDescriptor>:
 *         Handle Get Descriptor requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_GetDescriptor(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
    uint16_t len = 0U;
 800b57e:	2300      	movs	r3, #0
 800b580:	813b      	strh	r3, [r7, #8]
    uint8_t * pbuf = NULL;
 800b582:	2300      	movs	r3, #0
 800b584:	60fb      	str	r3, [r7, #12]
    uint8_t err = 0U;
 800b586:	2300      	movs	r3, #0
 800b588:	72fb      	strb	r3, [r7, #11]

    switch (req->wValue >> 8) {
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	885b      	ldrh	r3, [r3, #2]
 800b58e:	0a1b      	lsrs	r3, r3, #8
 800b590:	b29b      	uxth	r3, r3
 800b592:	3b01      	subs	r3, #1
 800b594:	2b06      	cmp	r3, #6
 800b596:	f200 8128 	bhi.w	800b7ea <USBD_GetDescriptor+0x276>
 800b59a:	a201      	add	r2, pc, #4	@ (adr r2, 800b5a0 <USBD_GetDescriptor+0x2c>)
 800b59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5a0:	0800b5bd 	.word	0x0800b5bd
 800b5a4:	0800b5d5 	.word	0x0800b5d5
 800b5a8:	0800b615 	.word	0x0800b615
 800b5ac:	0800b7eb 	.word	0x0800b7eb
 800b5b0:	0800b7eb 	.word	0x0800b7eb
 800b5b4:	0800b78b 	.word	0x0800b78b
 800b5b8:	0800b7b7 	.word	0x0800b7b7
            err++;
        }
        break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
        pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	7c12      	ldrb	r2, [r2, #16]
 800b5c8:	f107 0108 	add.w	r1, r7, #8
 800b5cc:	4610      	mov	r0, r2
 800b5ce:	4798      	blx	r3
 800b5d0:	60f8      	str	r0, [r7, #12]
        break;
 800b5d2:	e112      	b.n	800b7fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
        if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	7c1b      	ldrb	r3, [r3, #16]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d10d      	bne.n	800b5f8 <USBD_GetDescriptor+0x84>
            if ((uint8_t)(pdev->NumClasses) > 0U) {
                pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
            } else
#endif /* USE_USBD_COMPOSITE */
            {
                pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5e4:	f107 0208 	add.w	r2, r7, #8
 800b5e8:	4610      	mov	r0, r2
 800b5ea:	4798      	blx	r3
 800b5ec:	60f8      	str	r0, [r7, #12]
            }
            pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	2202      	movs	r2, #2
 800b5f4:	701a      	strb	r2, [r3, #0]
            {
                pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
            }
            pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
        }
        break;
 800b5f6:	e100      	b.n	800b7fa <USBD_GetDescriptor+0x286>
                pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b600:	f107 0208 	add.w	r2, r7, #8
 800b604:	4610      	mov	r0, r2
 800b606:	4798      	blx	r3
 800b608:	60f8      	str	r0, [r7, #12]
            pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	3301      	adds	r3, #1
 800b60e:	2202      	movs	r2, #2
 800b610:	701a      	strb	r2, [r3, #0]
        break;
 800b612:	e0f2      	b.n	800b7fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
        switch ((uint8_t)(req->wValue)) {
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	885b      	ldrh	r3, [r3, #2]
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	2b05      	cmp	r3, #5
 800b61c:	f200 80ac 	bhi.w	800b778 <USBD_GetDescriptor+0x204>
 800b620:	a201      	add	r2, pc, #4	@ (adr r2, 800b628 <USBD_GetDescriptor+0xb4>)
 800b622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b626:	bf00      	nop
 800b628:	0800b641 	.word	0x0800b641
 800b62c:	0800b675 	.word	0x0800b675
 800b630:	0800b6a9 	.word	0x0800b6a9
 800b634:	0800b6dd 	.word	0x0800b6dd
 800b638:	0800b711 	.word	0x0800b711
 800b63c:	0800b745 	.word	0x0800b745
        case USBD_IDX_LANGID_STR:
            if (pdev->pDesc->GetLangIDStrDescriptor != NULL) {
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d00b      	beq.n	800b664 <USBD_GetDescriptor+0xf0>
                pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	7c12      	ldrb	r2, [r2, #16]
 800b658:	f107 0108 	add.w	r1, r7, #8
 800b65c:	4610      	mov	r0, r2
 800b65e:	4798      	blx	r3
 800b660:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800b662:	e091      	b.n	800b788 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800b664:	6839      	ldr	r1, [r7, #0]
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 facb 	bl	800bc02 <USBD_CtlError>
                err++;
 800b66c:	7afb      	ldrb	r3, [r7, #11]
 800b66e:	3301      	adds	r3, #1
 800b670:	72fb      	strb	r3, [r7, #11]
            break;
 800b672:	e089      	b.n	800b788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
            if (pdev->pDesc->GetManufacturerStrDescriptor != NULL) {
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d00b      	beq.n	800b698 <USBD_GetDescriptor+0x124>
                pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	7c12      	ldrb	r2, [r2, #16]
 800b68c:	f107 0108 	add.w	r1, r7, #8
 800b690:	4610      	mov	r0, r2
 800b692:	4798      	blx	r3
 800b694:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800b696:	e077      	b.n	800b788 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800b698:	6839      	ldr	r1, [r7, #0]
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 fab1 	bl	800bc02 <USBD_CtlError>
                err++;
 800b6a0:	7afb      	ldrb	r3, [r7, #11]
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	72fb      	strb	r3, [r7, #11]
            break;
 800b6a6:	e06f      	b.n	800b788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
            if (pdev->pDesc->GetProductStrDescriptor != NULL) {
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d00b      	beq.n	800b6cc <USBD_GetDescriptor+0x158>
                pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6ba:	68db      	ldr	r3, [r3, #12]
 800b6bc:	687a      	ldr	r2, [r7, #4]
 800b6be:	7c12      	ldrb	r2, [r2, #16]
 800b6c0:	f107 0108 	add.w	r1, r7, #8
 800b6c4:	4610      	mov	r0, r2
 800b6c6:	4798      	blx	r3
 800b6c8:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800b6ca:	e05d      	b.n	800b788 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800b6cc:	6839      	ldr	r1, [r7, #0]
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 fa97 	bl	800bc02 <USBD_CtlError>
                err++;
 800b6d4:	7afb      	ldrb	r3, [r7, #11]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	72fb      	strb	r3, [r7, #11]
            break;
 800b6da:	e055      	b.n	800b788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
            if (pdev->pDesc->GetSerialStrDescriptor != NULL) {
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6e2:	691b      	ldr	r3, [r3, #16]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d00b      	beq.n	800b700 <USBD_GetDescriptor+0x18c>
                pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6ee:	691b      	ldr	r3, [r3, #16]
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	7c12      	ldrb	r2, [r2, #16]
 800b6f4:	f107 0108 	add.w	r1, r7, #8
 800b6f8:	4610      	mov	r0, r2
 800b6fa:	4798      	blx	r3
 800b6fc:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800b6fe:	e043      	b.n	800b788 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800b700:	6839      	ldr	r1, [r7, #0]
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 fa7d 	bl	800bc02 <USBD_CtlError>
                err++;
 800b708:	7afb      	ldrb	r3, [r7, #11]
 800b70a:	3301      	adds	r3, #1
 800b70c:	72fb      	strb	r3, [r7, #11]
            break;
 800b70e:	e03b      	b.n	800b788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
            if (pdev->pDesc->GetConfigurationStrDescriptor != NULL) {
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b716:	695b      	ldr	r3, [r3, #20]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d00b      	beq.n	800b734 <USBD_GetDescriptor+0x1c0>
                pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b722:	695b      	ldr	r3, [r3, #20]
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	7c12      	ldrb	r2, [r2, #16]
 800b728:	f107 0108 	add.w	r1, r7, #8
 800b72c:	4610      	mov	r0, r2
 800b72e:	4798      	blx	r3
 800b730:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800b732:	e029      	b.n	800b788 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800b734:	6839      	ldr	r1, [r7, #0]
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 fa63 	bl	800bc02 <USBD_CtlError>
                err++;
 800b73c:	7afb      	ldrb	r3, [r7, #11]
 800b73e:	3301      	adds	r3, #1
 800b740:	72fb      	strb	r3, [r7, #11]
            break;
 800b742:	e021      	b.n	800b788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
            if (pdev->pDesc->GetInterfaceStrDescriptor != NULL) {
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b74a:	699b      	ldr	r3, [r3, #24]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d00b      	beq.n	800b768 <USBD_GetDescriptor+0x1f4>
                pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b756:	699b      	ldr	r3, [r3, #24]
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	7c12      	ldrb	r2, [r2, #16]
 800b75c:	f107 0108 	add.w	r1, r7, #8
 800b760:	4610      	mov	r0, r2
 800b762:	4798      	blx	r3
 800b764:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800b766:	e00f      	b.n	800b788 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800b768:	6839      	ldr	r1, [r7, #0]
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 fa49 	bl	800bc02 <USBD_CtlError>
                err++;
 800b770:	7afb      	ldrb	r3, [r7, #11]
 800b772:	3301      	adds	r3, #1
 800b774:	72fb      	strb	r3, [r7, #11]
            break;
 800b776:	e007      	b.n	800b788 <USBD_GetDescriptor+0x214>
                err++;
            }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
            USBD_CtlError(pdev, req);
 800b778:	6839      	ldr	r1, [r7, #0]
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fa41 	bl	800bc02 <USBD_CtlError>
            err++;
 800b780:	7afb      	ldrb	r3, [r7, #11]
 800b782:	3301      	adds	r3, #1
 800b784:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
            break;
 800b786:	bf00      	nop
        }
        break;
 800b788:	e037      	b.n	800b7fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
        if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	7c1b      	ldrb	r3, [r3, #16]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d109      	bne.n	800b7a6 <USBD_GetDescriptor+0x232>
            if ((uint8_t)(pdev->NumClasses) > 0U) {
                pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
            } else
#endif /* USE_USBD_COMPOSITE */
            {
                pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b79a:	f107 0208 	add.w	r2, r7, #8
 800b79e:	4610      	mov	r0, r2
 800b7a0:	4798      	blx	r3
 800b7a2:	60f8      	str	r0, [r7, #12]
            }
        } else {
            USBD_CtlError(pdev, req);
            err++;
        }
        break;
 800b7a4:	e029      	b.n	800b7fa <USBD_GetDescriptor+0x286>
            USBD_CtlError(pdev, req);
 800b7a6:	6839      	ldr	r1, [r7, #0]
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 fa2a 	bl	800bc02 <USBD_CtlError>
            err++;
 800b7ae:	7afb      	ldrb	r3, [r7, #11]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	72fb      	strb	r3, [r7, #11]
        break;
 800b7b4:	e021      	b.n	800b7fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
        if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	7c1b      	ldrb	r3, [r3, #16]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d10d      	bne.n	800b7da <USBD_GetDescriptor+0x266>
            if ((uint8_t)(pdev->NumClasses) > 0U) {
                pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
            } else
#endif /* USE_USBD_COMPOSITE */
            {
                pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7c6:	f107 0208 	add.w	r2, r7, #8
 800b7ca:	4610      	mov	r0, r2
 800b7cc:	4798      	blx	r3
 800b7ce:	60f8      	str	r0, [r7, #12]
            }
            pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	2207      	movs	r2, #7
 800b7d6:	701a      	strb	r2, [r3, #0]
        } else {
            USBD_CtlError(pdev, req);
            err++;
        }
        break;
 800b7d8:	e00f      	b.n	800b7fa <USBD_GetDescriptor+0x286>
            USBD_CtlError(pdev, req);
 800b7da:	6839      	ldr	r1, [r7, #0]
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 fa10 	bl	800bc02 <USBD_CtlError>
            err++;
 800b7e2:	7afb      	ldrb	r3, [r7, #11]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	72fb      	strb	r3, [r7, #11]
        break;
 800b7e8:	e007      	b.n	800b7fa <USBD_GetDescriptor+0x286>

    default:
        USBD_CtlError(pdev, req);
 800b7ea:	6839      	ldr	r1, [r7, #0]
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 fa08 	bl	800bc02 <USBD_CtlError>
        err++;
 800b7f2:	7afb      	ldrb	r3, [r7, #11]
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	72fb      	strb	r3, [r7, #11]
        break;
 800b7f8:	bf00      	nop
    }

    if (err != 0U) {
 800b7fa:	7afb      	ldrb	r3, [r7, #11]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d11e      	bne.n	800b83e <USBD_GetDescriptor+0x2ca>
        return;
    }

    if (req->wLength != 0U) {
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	88db      	ldrh	r3, [r3, #6]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d016      	beq.n	800b836 <USBD_GetDescriptor+0x2c2>
        if (len != 0U) {
 800b808:	893b      	ldrh	r3, [r7, #8]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d00e      	beq.n	800b82c <USBD_GetDescriptor+0x2b8>
            len = MIN(len, req->wLength);
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	88da      	ldrh	r2, [r3, #6]
 800b812:	893b      	ldrh	r3, [r7, #8]
 800b814:	4293      	cmp	r3, r2
 800b816:	bf28      	it	cs
 800b818:	4613      	movcs	r3, r2
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	813b      	strh	r3, [r7, #8]
            (void)USBD_CtlSendData(pdev, pbuf, len);
 800b81e:	893b      	ldrh	r3, [r7, #8]
 800b820:	461a      	mov	r2, r3
 800b822:	68f9      	ldr	r1, [r7, #12]
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 fa5d 	bl	800bce4 <USBD_CtlSendData>
 800b82a:	e009      	b.n	800b840 <USBD_GetDescriptor+0x2cc>
        } else {
            USBD_CtlError(pdev, req);
 800b82c:	6839      	ldr	r1, [r7, #0]
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 f9e7 	bl	800bc02 <USBD_CtlError>
 800b834:	e004      	b.n	800b840 <USBD_GetDescriptor+0x2cc>
        }
    } else {
        (void)USBD_CtlSendStatus(pdev);
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 faae 	bl	800bd98 <USBD_CtlSendStatus>
 800b83c:	e000      	b.n	800b840 <USBD_GetDescriptor+0x2cc>
        return;
 800b83e:	bf00      	nop
    }
}
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop

0800b848 <USBD_SetAddress>:
 *         Set device address
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_SetAddress(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
    uint8_t dev_addr;

    if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U)) {
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	889b      	ldrh	r3, [r3, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d131      	bne.n	800b8be <USBD_SetAddress+0x76>
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	88db      	ldrh	r3, [r3, #6]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d12d      	bne.n	800b8be <USBD_SetAddress+0x76>
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	885b      	ldrh	r3, [r3, #2]
 800b866:	2b7f      	cmp	r3, #127	@ 0x7f
 800b868:	d829      	bhi.n	800b8be <USBD_SetAddress+0x76>
        dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	885b      	ldrh	r3, [r3, #2]
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b874:	73fb      	strb	r3, [r7, #15]

        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	2b03      	cmp	r3, #3
 800b880:	d104      	bne.n	800b88c <USBD_SetAddress+0x44>
            USBD_CtlError(pdev, req);
 800b882:	6839      	ldr	r1, [r7, #0]
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 f9bc 	bl	800bc02 <USBD_CtlError>
        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800b88a:	e01d      	b.n	800b8c8 <USBD_SetAddress+0x80>
        } else {
            pdev->dev_address = dev_addr;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	7bfa      	ldrb	r2, [r7, #15]
 800b890:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
            (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b894:	7bfb      	ldrb	r3, [r7, #15]
 800b896:	4619      	mov	r1, r3
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f003 fb4b 	bl	800ef34 <USBD_LL_SetUSBAddress>
            (void)USBD_CtlSendStatus(pdev);
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 fa7a 	bl	800bd98 <USBD_CtlSendStatus>

            if (dev_addr != 0U) {
 800b8a4:	7bfb      	ldrb	r3, [r7, #15]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d004      	beq.n	800b8b4 <USBD_SetAddress+0x6c>
                pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2202      	movs	r2, #2
 800b8ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800b8b2:	e009      	b.n	800b8c8 <USBD_SetAddress+0x80>
            } else {
                pdev->dev_state = USBD_STATE_DEFAULT;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800b8bc:	e004      	b.n	800b8c8 <USBD_SetAddress+0x80>
            }
        }
    } else {
        USBD_CtlError(pdev, req);
 800b8be:	6839      	ldr	r1, [r7, #0]
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 f99e 	bl	800bc02 <USBD_CtlError>
    }
}
 800b8c6:	bf00      	nop
 800b8c8:	bf00      	nop
 800b8ca:	3710      	adds	r7, #16
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <USBD_SetConfig>:
 *         Handle Set device configuration request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret = USBD_OK;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	73fb      	strb	r3, [r7, #15]
    static uint8_t cfgidx;

    cfgidx = (uint8_t)(req->wValue);
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	885b      	ldrh	r3, [r3, #2]
 800b8e2:	b2da      	uxtb	r2, r3
 800b8e4:	4b4e      	ldr	r3, [pc, #312]	@ (800ba20 <USBD_SetConfig+0x150>)
 800b8e6:	701a      	strb	r2, [r3, #0]

    if (cfgidx > USBD_MAX_NUM_CONFIGURATION) {
 800b8e8:	4b4d      	ldr	r3, [pc, #308]	@ (800ba20 <USBD_SetConfig+0x150>)
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d905      	bls.n	800b8fc <USBD_SetConfig+0x2c>
        USBD_CtlError(pdev, req);
 800b8f0:	6839      	ldr	r1, [r7, #0]
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 f985 	bl	800bc02 <USBD_CtlError>
        return USBD_FAIL;
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	e08c      	b.n	800ba16 <USBD_SetConfig+0x146>
    }

    switch (pdev->dev_state) {
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b902:	b2db      	uxtb	r3, r3
 800b904:	2b02      	cmp	r3, #2
 800b906:	d002      	beq.n	800b90e <USBD_SetConfig+0x3e>
 800b908:	2b03      	cmp	r3, #3
 800b90a:	d029      	beq.n	800b960 <USBD_SetConfig+0x90>
 800b90c:	e075      	b.n	800b9fa <USBD_SetConfig+0x12a>
    case USBD_STATE_ADDRESSED:
        if (cfgidx != 0U) {
 800b90e:	4b44      	ldr	r3, [pc, #272]	@ (800ba20 <USBD_SetConfig+0x150>)
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d020      	beq.n	800b958 <USBD_SetConfig+0x88>
            pdev->dev_config = cfgidx;
 800b916:	4b42      	ldr	r3, [pc, #264]	@ (800ba20 <USBD_SetConfig+0x150>)
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	461a      	mov	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	605a      	str	r2, [r3, #4]

            ret = USBD_SetClassConfig(pdev, cfgidx);
 800b920:	4b3f      	ldr	r3, [pc, #252]	@ (800ba20 <USBD_SetConfig+0x150>)
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	4619      	mov	r1, r3
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f7fe ffe9 	bl	800a8fe <USBD_SetClassConfig>
 800b92c:	4603      	mov	r3, r0
 800b92e:	73fb      	strb	r3, [r7, #15]

            if (ret != USBD_OK) {
 800b930:	7bfb      	ldrb	r3, [r7, #15]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d008      	beq.n	800b948 <USBD_SetConfig+0x78>
                USBD_CtlError(pdev, req);
 800b936:	6839      	ldr	r1, [r7, #0]
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 f962 	bl	800bc02 <USBD_CtlError>
                pdev->dev_state = USBD_STATE_ADDRESSED;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2202      	movs	r2, #2
 800b942:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
                pdev->dev_state = USBD_STATE_CONFIGURED;
            }
        } else {
            (void)USBD_CtlSendStatus(pdev);
        }
        break;
 800b946:	e065      	b.n	800ba14 <USBD_SetConfig+0x144>
                (void)USBD_CtlSendStatus(pdev);
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 fa25 	bl	800bd98 <USBD_CtlSendStatus>
                pdev->dev_state = USBD_STATE_CONFIGURED;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2203      	movs	r2, #3
 800b952:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        break;
 800b956:	e05d      	b.n	800ba14 <USBD_SetConfig+0x144>
            (void)USBD_CtlSendStatus(pdev);
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 fa1d 	bl	800bd98 <USBD_CtlSendStatus>
        break;
 800b95e:	e059      	b.n	800ba14 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U) {
 800b960:	4b2f      	ldr	r3, [pc, #188]	@ (800ba20 <USBD_SetConfig+0x150>)
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d112      	bne.n	800b98e <USBD_SetConfig+0xbe>
            pdev->dev_state = USBD_STATE_ADDRESSED;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2202      	movs	r2, #2
 800b96c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
            pdev->dev_config = cfgidx;
 800b970:	4b2b      	ldr	r3, [pc, #172]	@ (800ba20 <USBD_SetConfig+0x150>)
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	461a      	mov	r2, r3
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	605a      	str	r2, [r3, #4]
            (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b97a:	4b29      	ldr	r3, [pc, #164]	@ (800ba20 <USBD_SetConfig+0x150>)
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	4619      	mov	r1, r3
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f7fe ffd8 	bl	800a936 <USBD_ClrClassConfig>
            (void)USBD_CtlSendStatus(pdev);
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 fa06 	bl	800bd98 <USBD_CtlSendStatus>
                (void)USBD_CtlSendStatus(pdev);
            }
        } else {
            (void)USBD_CtlSendStatus(pdev);
        }
        break;
 800b98c:	e042      	b.n	800ba14 <USBD_SetConfig+0x144>
        } else if (cfgidx != pdev->dev_config) {
 800b98e:	4b24      	ldr	r3, [pc, #144]	@ (800ba20 <USBD_SetConfig+0x150>)
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	461a      	mov	r2, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d02a      	beq.n	800b9f2 <USBD_SetConfig+0x122>
            (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f7fe ffc6 	bl	800a936 <USBD_ClrClassConfig>
            pdev->dev_config = cfgidx;
 800b9aa:	4b1d      	ldr	r3, [pc, #116]	@ (800ba20 <USBD_SetConfig+0x150>)
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	605a      	str	r2, [r3, #4]
            ret = USBD_SetClassConfig(pdev, cfgidx);
 800b9b4:	4b1a      	ldr	r3, [pc, #104]	@ (800ba20 <USBD_SetConfig+0x150>)
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f7fe ff9f 	bl	800a8fe <USBD_SetClassConfig>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	73fb      	strb	r3, [r7, #15]
            if (ret != USBD_OK) {
 800b9c4:	7bfb      	ldrb	r3, [r7, #15]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d00f      	beq.n	800b9ea <USBD_SetConfig+0x11a>
                USBD_CtlError(pdev, req);
 800b9ca:	6839      	ldr	r1, [r7, #0]
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 f918 	bl	800bc02 <USBD_CtlError>
                (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	4619      	mov	r1, r3
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f7fe ffab 	bl	800a936 <USBD_ClrClassConfig>
                pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2202      	movs	r2, #2
 800b9e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        break;
 800b9e8:	e014      	b.n	800ba14 <USBD_SetConfig+0x144>
                (void)USBD_CtlSendStatus(pdev);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 f9d4 	bl	800bd98 <USBD_CtlSendStatus>
        break;
 800b9f0:	e010      	b.n	800ba14 <USBD_SetConfig+0x144>
            (void)USBD_CtlSendStatus(pdev);
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 f9d0 	bl	800bd98 <USBD_CtlSendStatus>
        break;
 800b9f8:	e00c      	b.n	800ba14 <USBD_SetConfig+0x144>

    default:
        USBD_CtlError(pdev, req);
 800b9fa:	6839      	ldr	r1, [r7, #0]
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 f900 	bl	800bc02 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ba02:	4b07      	ldr	r3, [pc, #28]	@ (800ba20 <USBD_SetConfig+0x150>)
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	4619      	mov	r1, r3
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f7fe ff94 	bl	800a936 <USBD_ClrClassConfig>
        ret = USBD_FAIL;
 800ba0e:	2303      	movs	r3, #3
 800ba10:	73fb      	strb	r3, [r7, #15]
        break;
 800ba12:	bf00      	nop
    }

    return ret;
 800ba14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	20000bfc 	.word	0x20000bfc

0800ba24 <USBD_GetConfig>:
 *         Handle Get device configuration request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_GetConfig(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
    if (req->wLength != 1U) {
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	88db      	ldrh	r3, [r3, #6]
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d004      	beq.n	800ba40 <USBD_GetConfig+0x1c>
        USBD_CtlError(pdev, req);
 800ba36:	6839      	ldr	r1, [r7, #0]
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 f8e2 	bl	800bc02 <USBD_CtlError>
        default:
            USBD_CtlError(pdev, req);
            break;
        }
    }
}
 800ba3e:	e023      	b.n	800ba88 <USBD_GetConfig+0x64>
        switch (pdev->dev_state) {
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba46:	b2db      	uxtb	r3, r3
 800ba48:	2b02      	cmp	r3, #2
 800ba4a:	dc02      	bgt.n	800ba52 <USBD_GetConfig+0x2e>
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	dc03      	bgt.n	800ba58 <USBD_GetConfig+0x34>
 800ba50:	e015      	b.n	800ba7e <USBD_GetConfig+0x5a>
 800ba52:	2b03      	cmp	r3, #3
 800ba54:	d00b      	beq.n	800ba6e <USBD_GetConfig+0x4a>
 800ba56:	e012      	b.n	800ba7e <USBD_GetConfig+0x5a>
            pdev->dev_default_config = 0U;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	609a      	str	r2, [r3, #8]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	3308      	adds	r3, #8
 800ba62:	2201      	movs	r2, #1
 800ba64:	4619      	mov	r1, r3
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 f93c 	bl	800bce4 <USBD_CtlSendData>
            break;
 800ba6c:	e00c      	b.n	800ba88 <USBD_GetConfig+0x64>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	3304      	adds	r3, #4
 800ba72:	2201      	movs	r2, #1
 800ba74:	4619      	mov	r1, r3
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f000 f934 	bl	800bce4 <USBD_CtlSendData>
            break;
 800ba7c:	e004      	b.n	800ba88 <USBD_GetConfig+0x64>
            USBD_CtlError(pdev, req);
 800ba7e:	6839      	ldr	r1, [r7, #0]
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 f8be 	bl	800bc02 <USBD_CtlError>
            break;
 800ba86:	bf00      	nop
}
 800ba88:	bf00      	nop
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <USBD_GetStatus>:
 *         Handle Get Status request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_GetStatus(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
    switch (pdev->dev_state) {
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	3b01      	subs	r3, #1
 800baa4:	2b02      	cmp	r3, #2
 800baa6:	d81e      	bhi.n	800bae6 <USBD_GetStatus+0x56>
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
        if (req->wLength != 0x2U) {
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	88db      	ldrh	r3, [r3, #6]
 800baac:	2b02      	cmp	r3, #2
 800baae:	d004      	beq.n	800baba <USBD_GetStatus+0x2a>
            USBD_CtlError(pdev, req);
 800bab0:	6839      	ldr	r1, [r7, #0]
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 f8a5 	bl	800bc02 <USBD_CtlError>
            break;
 800bab8:	e01a      	b.n	800baf0 <USBD_GetStatus+0x60>
        }

#if (USBD_SELF_POWERED == 1U)
        pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2201      	movs	r2, #1
 800babe:	60da      	str	r2, [r3, #12]
#else
        pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

        if (pdev->dev_remote_wakeup != 0U) {
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d005      	beq.n	800bad6 <USBD_GetStatus+0x46>
            pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	f043 0202 	orr.w	r2, r3, #2
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	60da      	str	r2, [r3, #12]
        }

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	330c      	adds	r3, #12
 800bada:	2202      	movs	r2, #2
 800badc:	4619      	mov	r1, r3
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 f900 	bl	800bce4 <USBD_CtlSendData>
        break;
 800bae4:	e004      	b.n	800baf0 <USBD_GetStatus+0x60>

    default:
        USBD_CtlError(pdev, req);
 800bae6:	6839      	ldr	r1, [r7, #0]
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 f88a 	bl	800bc02 <USBD_CtlError>
        break;
 800baee:	bf00      	nop
    }
}
 800baf0:	bf00      	nop
 800baf2:	3708      	adds	r7, #8
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <USBD_SetFeature>:
 *         Handle Set device feature request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_SetFeature(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) {
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	885b      	ldrh	r3, [r3, #2]
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d107      	bne.n	800bb1a <USBD_SetFeature+0x22>
        pdev->dev_remote_wakeup = 1U;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 f940 	bl	800bd98 <USBD_CtlSendStatus>
        pdev->dev_test_mode = req->wIndex >> 8;
        (void)USBD_CtlSendStatus(pdev);
    } else {
        USBD_CtlError(pdev, req);
    }
}
 800bb18:	e013      	b.n	800bb42 <USBD_SetFeature+0x4a>
    } else if (req->wValue == USB_FEATURE_TEST_MODE) {
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	885b      	ldrh	r3, [r3, #2]
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	d10b      	bne.n	800bb3a <USBD_SetFeature+0x42>
        pdev->dev_test_mode = req->wIndex >> 8;
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	889b      	ldrh	r3, [r3, #4]
 800bb26:	0a1b      	lsrs	r3, r3, #8
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	b2da      	uxtb	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
        (void)USBD_CtlSendStatus(pdev);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 f930 	bl	800bd98 <USBD_CtlSendStatus>
}
 800bb38:	e003      	b.n	800bb42 <USBD_SetFeature+0x4a>
        USBD_CtlError(pdev, req);
 800bb3a:	6839      	ldr	r1, [r7, #0]
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f000 f860 	bl	800bc02 <USBD_CtlError>
}
 800bb42:	bf00      	nop
 800bb44:	3708      	adds	r7, #8
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}

0800bb4a <USBD_ClrFeature>:
 *         Handle clear device feature request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_ClrFeature(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800bb4a:	b580      	push	{r7, lr}
 800bb4c:	b082      	sub	sp, #8
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	6078      	str	r0, [r7, #4]
 800bb52:	6039      	str	r1, [r7, #0]
    switch (pdev->dev_state) {
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	3b01      	subs	r3, #1
 800bb5e:	2b02      	cmp	r3, #2
 800bb60:	d80b      	bhi.n	800bb7a <USBD_ClrFeature+0x30>
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) {
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	885b      	ldrh	r3, [r3, #2]
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d10c      	bne.n	800bb84 <USBD_ClrFeature+0x3a>
            pdev->dev_remote_wakeup = 0U;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
            (void)USBD_CtlSendStatus(pdev);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 f910 	bl	800bd98 <USBD_CtlSendStatus>
        }
        break;
 800bb78:	e004      	b.n	800bb84 <USBD_ClrFeature+0x3a>

    default:
        USBD_CtlError(pdev, req);
 800bb7a:	6839      	ldr	r1, [r7, #0]
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f000 f840 	bl	800bc02 <USBD_CtlError>
        break;
 800bb82:	e000      	b.n	800bb86 <USBD_ClrFeature+0x3c>
        break;
 800bb84:	bf00      	nop
    }
}
 800bb86:	bf00      	nop
 800bb88:	3708      	adds	r7, #8
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}

0800bb8e <USBD_ParseSetupRequest>:
 *         Copy buffer into setup structure
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval None
 */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef * req, uint8_t * pdata) {
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	b084      	sub	sp, #16
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	6078      	str	r0, [r7, #4]
 800bb96:	6039      	str	r1, [r7, #0]
    uint8_t * pbuff = pdata;
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	60fb      	str	r3, [r7, #12]

    req->bmRequest = *(uint8_t *)(pbuff);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	781a      	ldrb	r2, [r3, #0]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	701a      	strb	r2, [r3, #0]

    pbuff++;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	3301      	adds	r3, #1
 800bba8:	60fb      	str	r3, [r7, #12]
    req->bRequest = *(uint8_t *)(pbuff);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	781a      	ldrb	r2, [r3, #0]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	705a      	strb	r2, [r3, #1]

    pbuff++;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	60fb      	str	r3, [r7, #12]
    req->wValue = SWAPBYTE(pbuff);
 800bbb8:	68f8      	ldr	r0, [r7, #12]
 800bbba:	f7ff fa40 	bl	800b03e <SWAPBYTE>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	805a      	strh	r2, [r3, #2]

    pbuff++;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	3301      	adds	r3, #1
 800bbca:	60fb      	str	r3, [r7, #12]
    pbuff++;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	60fb      	str	r3, [r7, #12]
    req->wIndex = SWAPBYTE(pbuff);
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	f7ff fa33 	bl	800b03e <SWAPBYTE>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	461a      	mov	r2, r3
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	809a      	strh	r2, [r3, #4]

    pbuff++;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	60fb      	str	r3, [r7, #12]
    pbuff++;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	3301      	adds	r3, #1
 800bbea:	60fb      	str	r3, [r7, #12]
    req->wLength = SWAPBYTE(pbuff);
 800bbec:	68f8      	ldr	r0, [r7, #12]
 800bbee:	f7ff fa26 	bl	800b03e <SWAPBYTE>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	80da      	strh	r2, [r3, #6]
}
 800bbfa:	bf00      	nop
 800bbfc:	3710      	adds	r7, #16
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <USBD_CtlError>:
 *         Handle USB low level Error
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval None
 */
void USBD_CtlError(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b082      	sub	sp, #8
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
 800bc0a:	6039      	str	r1, [r7, #0]
    UNUSED(req);

    (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc0c:	2180      	movs	r1, #128	@ 0x80
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f003 f926 	bl	800ee60 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, 0U);
 800bc14:	2100      	movs	r1, #0
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f003 f922 	bl	800ee60 <USBD_LL_StallEP>
}
 800bc1c:	bf00      	nop
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <USBD_GetString>:
 * @param  desc : descriptor buffer
 * @param  unicode : Formatted string buffer (unicode)
 * @param  len : descriptor length
 * @retval None
 */
void USBD_GetString(uint8_t * desc, uint8_t * unicode, uint16_t * len) {
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b086      	sub	sp, #24
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	607a      	str	r2, [r7, #4]
    uint8_t idx = 0U;
 800bc30:	2300      	movs	r3, #0
 800bc32:	75fb      	strb	r3, [r7, #23]
    uint8_t * pdesc;

    if (desc == NULL) {
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d036      	beq.n	800bca8 <USBD_GetString+0x84>
        return;
    }

    pdesc = desc;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	613b      	str	r3, [r7, #16]
    *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bc3e:	6938      	ldr	r0, [r7, #16]
 800bc40:	f000 f836 	bl	800bcb0 <USBD_GetLen>
 800bc44:	4603      	mov	r3, r0
 800bc46:	3301      	adds	r3, #1
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	005b      	lsls	r3, r3, #1
 800bc4c:	b29a      	uxth	r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	801a      	strh	r2, [r3, #0]

    unicode[idx] = *(uint8_t *)len;
 800bc52:	7dfb      	ldrb	r3, [r7, #23]
 800bc54:	68ba      	ldr	r2, [r7, #8]
 800bc56:	4413      	add	r3, r2
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	7812      	ldrb	r2, [r2, #0]
 800bc5c:	701a      	strb	r2, [r3, #0]
    idx++;
 800bc5e:	7dfb      	ldrb	r3, [r7, #23]
 800bc60:	3301      	adds	r3, #1
 800bc62:	75fb      	strb	r3, [r7, #23]
    unicode[idx] = USB_DESC_TYPE_STRING;
 800bc64:	7dfb      	ldrb	r3, [r7, #23]
 800bc66:	68ba      	ldr	r2, [r7, #8]
 800bc68:	4413      	add	r3, r2
 800bc6a:	2203      	movs	r2, #3
 800bc6c:	701a      	strb	r2, [r3, #0]
    idx++;
 800bc6e:	7dfb      	ldrb	r3, [r7, #23]
 800bc70:	3301      	adds	r3, #1
 800bc72:	75fb      	strb	r3, [r7, #23]

    while (*pdesc != (uint8_t)'\0') {
 800bc74:	e013      	b.n	800bc9e <USBD_GetString+0x7a>
        unicode[idx] = *pdesc;
 800bc76:	7dfb      	ldrb	r3, [r7, #23]
 800bc78:	68ba      	ldr	r2, [r7, #8]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	693a      	ldr	r2, [r7, #16]
 800bc7e:	7812      	ldrb	r2, [r2, #0]
 800bc80:	701a      	strb	r2, [r3, #0]
        pdesc++;
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	3301      	adds	r3, #1
 800bc86:	613b      	str	r3, [r7, #16]
        idx++;
 800bc88:	7dfb      	ldrb	r3, [r7, #23]
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	75fb      	strb	r3, [r7, #23]

        unicode[idx] = 0U;
 800bc8e:	7dfb      	ldrb	r3, [r7, #23]
 800bc90:	68ba      	ldr	r2, [r7, #8]
 800bc92:	4413      	add	r3, r2
 800bc94:	2200      	movs	r2, #0
 800bc96:	701a      	strb	r2, [r3, #0]
        idx++;
 800bc98:	7dfb      	ldrb	r3, [r7, #23]
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	75fb      	strb	r3, [r7, #23]
    while (*pdesc != (uint8_t)'\0') {
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d1e7      	bne.n	800bc76 <USBD_GetString+0x52>
 800bca6:	e000      	b.n	800bcaa <USBD_GetString+0x86>
        return;
 800bca8:	bf00      	nop
    }
}
 800bcaa:	3718      	adds	r7, #24
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <USBD_GetLen>:
 * @brief  USBD_GetLen
 *         return the string length
 * @param  buf : pointer to the ascii string buffer
 * @retval string length
 */
static uint8_t USBD_GetLen(uint8_t * buf) {
 800bcb0:	b480      	push	{r7}
 800bcb2:	b085      	sub	sp, #20
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
    uint8_t len = 0U;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	73fb      	strb	r3, [r7, #15]
    uint8_t * pbuff = buf;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	60bb      	str	r3, [r7, #8]

    while (*pbuff != (uint8_t)'\0') {
 800bcc0:	e005      	b.n	800bcce <USBD_GetLen+0x1e>
        len++;
 800bcc2:	7bfb      	ldrb	r3, [r7, #15]
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	73fb      	strb	r3, [r7, #15]
        pbuff++;
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	3301      	adds	r3, #1
 800bccc:	60bb      	str	r3, [r7, #8]
    while (*pbuff != (uint8_t)'\0') {
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d1f5      	bne.n	800bcc2 <USBD_GetLen+0x12>
    }

    return len;
 800bcd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3714      	adds	r7, #20
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <USBD_CtlSendData>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be sent
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef * pdev, uint8_t * pbuf, uint32_t len) {
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	607a      	str	r2, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_DATA_IN;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2202      	movs	r2, #2
 800bcf4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
    pdev->ep_in[0].total_length = len;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
    pdev->ep_in[0].rem_length = 0U;
#else
    pdev->ep_in[0].rem_length = len;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

    /* Start the transfer */
    (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	68ba      	ldr	r2, [r7, #8]
 800bd08:	2100      	movs	r1, #0
 800bd0a:	68f8      	ldr	r0, [r7, #12]
 800bd0c:	f003 f931 	bl	800ef72 <USBD_LL_Transmit>

    return USBD_OK;
 800bd10:	2300      	movs	r3, #0
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3710      	adds	r7, #16
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <USBD_CtlContinueSendData>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be sent
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef * pdev, uint8_t * pbuf, uint32_t len) {
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b084      	sub	sp, #16
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	60f8      	str	r0, [r7, #12]
 800bd22:	60b9      	str	r1, [r7, #8]
 800bd24:	607a      	str	r2, [r7, #4]
    /* Start the next transfer */
    (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	68ba      	ldr	r2, [r7, #8]
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f003 f920 	bl	800ef72 <USBD_LL_Transmit>

    return USBD_OK;
 800bd32:	2300      	movs	r3, #0
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3710      	adds	r7, #16
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <USBD_CtlPrepareRx>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be received
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef * pdev, uint8_t * pbuf, uint32_t len) {
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	607a      	str	r2, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2203      	movs	r2, #3
 800bd4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
    pdev->ep_out[0].total_length = len;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	687a      	ldr	r2, [r7, #4]
 800bd54:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
    pdev->ep_out[0].rem_length = 0U;
#else
    pdev->ep_out[0].rem_length = len;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

    /* Start the transfer */
    (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	68ba      	ldr	r2, [r7, #8]
 800bd64:	2100      	movs	r1, #0
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	f003 f924 	bl	800efb4 <USBD_LL_PrepareReceive>

    return USBD_OK;
 800bd6c:	2300      	movs	r3, #0
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3710      	adds	r7, #16
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}

0800bd76 <USBD_CtlContinueRx>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be received
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef * pdev, uint8_t * pbuf, uint32_t len) {
 800bd76:	b580      	push	{r7, lr}
 800bd78:	b084      	sub	sp, #16
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	60f8      	str	r0, [r7, #12]
 800bd7e:	60b9      	str	r1, [r7, #8]
 800bd80:	607a      	str	r2, [r7, #4]
    (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	68ba      	ldr	r2, [r7, #8]
 800bd86:	2100      	movs	r1, #0
 800bd88:	68f8      	ldr	r0, [r7, #12]
 800bd8a:	f003 f913 	bl	800efb4 <USBD_LL_PrepareReceive>

    return USBD_OK;
 800bd8e:	2300      	movs	r3, #0
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3710      	adds	r7, #16
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <USBD_CtlSendStatus>:
 * @brief  USBD_CtlSendStatus
 *         send zero lzngth packet on the ctl pipe
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef * pdev) {
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2204      	movs	r2, #4
 800bda4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

    /* Start the transfer */
    (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bda8:	2300      	movs	r3, #0
 800bdaa:	2200      	movs	r2, #0
 800bdac:	2100      	movs	r1, #0
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f003 f8df 	bl	800ef72 <USBD_LL_Transmit>

    return USBD_OK;
 800bdb4:	2300      	movs	r3, #0
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3708      	adds	r7, #8
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}

0800bdbe <USBD_CtlReceiveStatus>:
 * @brief  USBD_CtlReceiveStatus
 *         receive zero lzngth packet on the ctl pipe
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef * pdev) {
 800bdbe:	b580      	push	{r7, lr}
 800bdc0:	b082      	sub	sp, #8
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2205      	movs	r2, #5
 800bdca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

    /* Start the transfer */
    (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdce:	2300      	movs	r3, #0
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	2100      	movs	r1, #0
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f003 f8ed 	bl	800efb4 <USBD_LL_PrepareReceive>

    return USBD_OK;
 800bdda:	2300      	movs	r3, #0
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <makeFreeRtosPriority>:
#endif

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority(osPriority priority) {
 800bde4:	b480      	push	{r7}
 800bde6:	b085      	sub	sp, #20
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	4603      	mov	r3, r0
 800bdec:	80fb      	strh	r3, [r7, #6]
    unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	60fb      	str	r3, [r7, #12]

    if (priority != osPriorityError) {
 800bdf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bdf6:	2b84      	cmp	r3, #132	@ 0x84
 800bdf8:	d005      	beq.n	800be06 <makeFreeRtosPriority+0x22>
        fpriority += (priority - osPriorityIdle);
 800bdfa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	4413      	add	r3, r2
 800be02:	3303      	adds	r3, #3
 800be04:	60fb      	str	r3, [r7, #12]
    }

    return fpriority;
 800be06:	68fb      	ldr	r3, [r7, #12]
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3714      	adds	r7, #20
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <osKernelStart>:
 * @param  thread_def    thread definition referenced with \ref osThread.
 * @param  argument      pointer that is passed to the thread function as start argument.
 * @retval status code that indicates the execution status of the function
 * @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
 */
osStatus osKernelStart(void) {
 800be14:	b580      	push	{r7, lr}
 800be16:	af00      	add	r7, sp, #0
    vTaskStartScheduler();
 800be18:	f001 f8ee 	bl	800cff8 <vTaskStartScheduler>

    return osOK;
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	bd80      	pop	{r7, pc}

0800be22 <osThreadCreate>:
 * @param  thread_def    thread definition referenced with \ref osThread.
 * @param  argument      pointer that is passed to the thread function as start argument.
 * @retval thread ID for reference by other functions or NULL in case of error.
 * @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
 */
osThreadId osThreadCreate(const osThreadDef_t * thread_def, void * argument) {
 800be22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be24:	b089      	sub	sp, #36	@ 0x24
 800be26:	af04      	add	r7, sp, #16
 800be28:	6078      	str	r0, [r7, #4]
 800be2a:	6039      	str	r1, [r7, #0]
    TaskHandle_t handle;

#if (configSUPPORT_STATIC_ALLOCATION == 1) && (configSUPPORT_DYNAMIC_ALLOCATION == 1)
    if ((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	695b      	ldr	r3, [r3, #20]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d020      	beq.n	800be76 <osThreadCreate+0x54>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	699b      	ldr	r3, [r3, #24]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d01c      	beq.n	800be76 <osThreadCreate+0x54>
        handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread, (const portCHAR *)thread_def->name, thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority), thread_def->buffer, thread_def->controlblock);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	685c      	ldr	r4, [r3, #4]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681d      	ldr	r5, [r3, #0]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	691e      	ldr	r6, [r3, #16]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800be4e:	4618      	mov	r0, r3
 800be50:	f7ff ffc8 	bl	800bde4 <makeFreeRtosPriority>
 800be54:	4601      	mov	r1, r0
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	695b      	ldr	r3, [r3, #20]
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	6992      	ldr	r2, [r2, #24]
 800be5e:	9202      	str	r2, [sp, #8]
 800be60:	9301      	str	r3, [sp, #4]
 800be62:	9100      	str	r1, [sp, #0]
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	4632      	mov	r2, r6
 800be68:	4629      	mov	r1, r5
 800be6a:	4620      	mov	r0, r4
 800be6c:	f000 fdd8 	bl	800ca20 <xTaskCreateStatic>
 800be70:	4603      	mov	r3, r0
 800be72:	60fb      	str	r3, [r7, #12]
 800be74:	e01c      	b.n	800beb0 <osThreadCreate+0x8e>
    } else {
        if (xTaskCreate((TaskFunction_t)thread_def->pthread, (const portCHAR *)thread_def->name, thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority), &handle) != pdPASS) {
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	685c      	ldr	r4, [r3, #4]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681d      	ldr	r5, [r3, #0]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	691b      	ldr	r3, [r3, #16]
 800be82:	b29e      	uxth	r6, r3
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7ff ffaa 	bl	800bde4 <makeFreeRtosPriority>
 800be90:	4602      	mov	r2, r0
 800be92:	f107 030c 	add.w	r3, r7, #12
 800be96:	9301      	str	r3, [sp, #4]
 800be98:	9200      	str	r2, [sp, #0]
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	4632      	mov	r2, r6
 800be9e:	4629      	mov	r1, r5
 800bea0:	4620      	mov	r0, r4
 800bea2:	f000 fe1d 	bl	800cae0 <xTaskCreate>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d001      	beq.n	800beb0 <osThreadCreate+0x8e>
            return NULL;
 800beac:	2300      	movs	r3, #0
 800beae:	e000      	b.n	800beb2 <osThreadCreate+0x90>
    if (xTaskCreate((TaskFunction_t)thread_def->pthread, (const portCHAR *)thread_def->name, thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority), &handle) != pdPASS) {
        return NULL;
    }
#endif

    return handle;
 800beb0:	68fb      	ldr	r3, [r7, #12]
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3714      	adds	r7, #20
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800beba <osDelay>:
/**
 * @brief   Wait for Timeout (Time Delay)
 * @param   millisec      time delay value
 * @retval  status code that indicates the execution status of the function.
 */
osStatus osDelay(uint32_t millisec) {
 800beba:	b580      	push	{r7, lr}
 800bebc:	b084      	sub	sp, #16
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
    TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2200      	movs	r2, #0
 800bec6:	fbb3 f3f2 	udiv	r3, r3, r2
 800beca:	60fb      	str	r3, [r7, #12]

    vTaskDelay(ticks ? ticks : 1); /* Minimum delay = 1 tick */
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d001      	beq.n	800bed6 <osDelay+0x1c>
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	e000      	b.n	800bed8 <osDelay+0x1e>
 800bed6:	2301      	movs	r3, #1
 800bed8:	4618      	mov	r0, r3
 800beda:	f000 ffc3 	bl	800ce64 <vTaskDelay>

    return osOK;
 800bede:	2300      	movs	r3, #0
#else
    (void)millisec;

    return osErrorResource;
#endif
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3710      	adds	r7, #16
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <vListInitialise>:

/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise(List_t * const pxList) {
 800bee8:	b480      	push	{r7}
 800beea:	b083      	sub	sp, #12
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f103 0208 	add.w	r2, r3, #8
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f04f 32ff 	mov.w	r2, #4294967295
 800bf00:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd);     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f103 0208 	add.w	r2, r3, #8
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f103 0208 	add.w	r2, r3, #8
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = (UBaseType_t)0U;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE(pxList);
    listSET_LIST_INTEGRITY_CHECK_2_VALUE(pxList);
}
 800bf1c:	bf00      	nop
 800bf1e:	370c      	adds	r7, #12
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr

0800bf28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t * const pxItem) {
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem);
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem);
}
 800bf36:	bf00      	nop
 800bf38:	370c      	adds	r7, #12
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr

0800bf42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t * const pxList, ListItem_t * const pxNewListItem) {
 800bf42:	b480      	push	{r7}
 800bf44:	b085      	sub	sp, #20
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
 800bf4a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	68fa      	ldr	r2, [r7, #12]
 800bf56:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	689a      	ldr	r2, [r3, #8]
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	683a      	ldr	r2, [r7, #0]
 800bf66:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	683a      	ldr	r2, [r7, #0]
 800bf6c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	687a      	ldr	r2, [r7, #4]
 800bf72:	611a      	str	r2, [r3, #16]

    (pxList->uxNumberOfItems)++;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	1c5a      	adds	r2, r3, #1
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	601a      	str	r2, [r3, #0]
}
 800bf7e:	bf00      	nop
 800bf80:	3714      	adds	r7, #20
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr

0800bf8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert(List_t * const pxList, ListItem_t * const pxNewListItem) {
 800bf8a:	b480      	push	{r7}
 800bf8c:	b085      	sub	sp, #20
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
 800bf92:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	60bb      	str	r3, [r7, #8]
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if (xValueOfInsertion == portMAX_DELAY) {
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa0:	d103      	bne.n	800bfaa <vListInsert+0x20>
        pxIterator = pxList->xListEnd.pxPrevious;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	691b      	ldr	r3, [r3, #16]
 800bfa6:	60fb      	str	r3, [r7, #12]
 800bfa8:	e00c      	b.n	800bfc4 <vListInsert+0x3a>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	3308      	adds	r3, #8
 800bfae:	60fb      	str	r3, [r7, #12]
 800bfb0:	e002      	b.n	800bfb8 <vListInsert+0x2e>
             pxIterator = pxIterator->pxNext) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */ /*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	60fb      	str	r3, [r7, #12]
        for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	68ba      	ldr	r2, [r7, #8]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d2f6      	bcs.n	800bfb2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	685a      	ldr	r2, [r3, #4]
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	683a      	ldr	r2, [r7, #0]
 800bfd2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	68fa      	ldr	r2, [r7, #12]
 800bfd8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	683a      	ldr	r2, [r7, #0]
 800bfde:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	611a      	str	r2, [r3, #16]

    (pxList->uxNumberOfItems)++;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	1c5a      	adds	r2, r3, #1
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	601a      	str	r2, [r3, #0]
}
 800bff0:	bf00      	nop
 800bff2:	3714      	adds	r7, #20
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove(ListItem_t * const pxItemToRemove) {
 800bffc:	b480      	push	{r7}
 800bffe:	b085      	sub	sp, #20
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
    item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	691b      	ldr	r3, [r3, #16]
 800c008:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	6892      	ldr	r2, [r2, #8]
 800c012:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	6852      	ldr	r2, [r2, #4]
 800c01c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if (pxList->pxIndex == pxItemToRemove) {
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	429a      	cmp	r2, r3
 800c026:	d103      	bne.n	800c030 <uxListRemove+0x34>
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	689a      	ldr	r2, [r3, #8]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	605a      	str	r2, [r3, #4]
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	611a      	str	r2, [r3, #16]
    (pxList->uxNumberOfItems)--;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	1e5a      	subs	r2, r3, #1
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
}
 800c044:	4618      	mov	r0, r3
 800c046:	3714      	adds	r7, #20
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <xQueueGenericReset>:
        }                                                                                                                                                                                                                                                \
    }                                                                                                                                                                                                                                                    \
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset(QueueHandle_t xQueue, BaseType_t xNewQueue) {
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	60fb      	str	r3, [r7, #12]

    configASSERT(pxQueue);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d10b      	bne.n	800c07c <xQueueGenericReset+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800c064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c068:	f383 8811 	msr	BASEPRI, r3
 800c06c:	f3bf 8f6f 	isb	sy
 800c070:	f3bf 8f4f 	dsb	sy
 800c074:	60bb      	str	r3, [r7, #8]
}
 800c076:	bf00      	nop
 800c078:	bf00      	nop
 800c07a:	e7fd      	b.n	800c078 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800c07c:	f002 f9bc 	bl	800e3f8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c088:	68f9      	ldr	r1, [r7, #12]
 800c08a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c08c:	fb01 f303 	mul.w	r3, r1, r3
 800c090:	441a      	add	r2, r3
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2200      	movs	r2, #0
 800c09a:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681a      	ldr	r2, [r3, #0]
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ((pxQueue->uxLength - 1U) * pxQueue->uxItemSize); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681a      	ldr	r2, [r3, #0]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	68f9      	ldr	r1, [r7, #12]
 800c0b0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c0b2:	fb01 f303 	mul.w	r3, r1, r3
 800c0b6:	441a      	add	r2, r3
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	22ff      	movs	r2, #255	@ 0xff
 800c0c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	22ff      	movs	r2, #255	@ 0xff
 800c0c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if (xNewQueue == pdFALSE) {
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d114      	bne.n	800c0fc <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
            the tasks will remain blocked as after this function exits the queue
            will still be empty.  If there are tasks blocked waiting to write to
            the queue, then one should be unblocked as after this function exits
            it will be possible to write to it. */
            if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	691b      	ldr	r3, [r3, #16]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d01a      	beq.n	800c110 <xQueueGenericReset+0xc0>
                if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	3310      	adds	r3, #16
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f001 fa16 	bl	800d510 <xTaskRemoveFromEventList>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d012      	beq.n	800c110 <xQueueGenericReset+0xc0>
                    queueYIELD_IF_USING_PREEMPTION();
 800c0ea:	4b0d      	ldr	r3, [pc, #52]	@ (800c120 <xQueueGenericReset+0xd0>)
 800c0ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0f0:	601a      	str	r2, [r3, #0]
 800c0f2:	f3bf 8f4f 	dsb	sy
 800c0f6:	f3bf 8f6f 	isb	sy
 800c0fa:	e009      	b.n	800c110 <xQueueGenericReset+0xc0>
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        } else {
            /* Ensure the event queues start in the correct state. */
            vListInitialise(&(pxQueue->xTasksWaitingToSend));
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	3310      	adds	r3, #16
 800c100:	4618      	mov	r0, r3
 800c102:	f7ff fef1 	bl	800bee8 <vListInitialise>
            vListInitialise(&(pxQueue->xTasksWaitingToReceive));
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	3324      	adds	r3, #36	@ 0x24
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7ff feec 	bl	800bee8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800c110:	f002 f9a4 	bl	800e45c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
    versions. */
    return pdPASS;
 800c114:	2301      	movs	r3, #1
}
 800c116:	4618      	mov	r0, r3
 800c118:	3710      	adds	r7, #16
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	e000ed04 	.word	0xe000ed04

0800c124 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_STATIC_ALLOCATION == 1)

QueueHandle_t xQueueGenericCreateStatic(const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t * pucQueueStorage, StaticQueue_t * pxStaticQueue, const uint8_t ucQueueType) {
 800c124:	b580      	push	{r7, lr}
 800c126:	b08e      	sub	sp, #56	@ 0x38
 800c128:	af02      	add	r7, sp, #8
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	607a      	str	r2, [r7, #4]
 800c130:	603b      	str	r3, [r7, #0]
    Queue_t * pxNewQueue;

    configASSERT(uxQueueLength > (UBaseType_t)0);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d10b      	bne.n	800c150 <xQueueGenericCreateStatic+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800c138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c13c:	f383 8811 	msr	BASEPRI, r3
 800c140:	f3bf 8f6f 	isb	sy
 800c144:	f3bf 8f4f 	dsb	sy
 800c148:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c14a:	bf00      	nop
 800c14c:	bf00      	nop
 800c14e:	e7fd      	b.n	800c14c <xQueueGenericCreateStatic+0x28>

    /* The StaticQueue_t structure and the queue storage area must be
    supplied. */
    configASSERT(pxStaticQueue != NULL);
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d10b      	bne.n	800c16e <xQueueGenericCreateStatic+0x4a>
    __asm volatile("	mov %0, %1												\n"
 800c156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c15a:	f383 8811 	msr	BASEPRI, r3
 800c15e:	f3bf 8f6f 	isb	sy
 800c162:	f3bf 8f4f 	dsb	sy
 800c166:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c168:	bf00      	nop
 800c16a:	bf00      	nop
 800c16c:	e7fd      	b.n	800c16a <xQueueGenericCreateStatic+0x46>

    /* A queue storage area should be provided if the item size is not 0, and
    should not be provided if the item size is 0. */
    configASSERT(!((pucQueueStorage != NULL) && (uxItemSize == 0)));
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d002      	beq.n	800c17a <xQueueGenericCreateStatic+0x56>
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d001      	beq.n	800c17e <xQueueGenericCreateStatic+0x5a>
 800c17a:	2301      	movs	r3, #1
 800c17c:	e000      	b.n	800c180 <xQueueGenericCreateStatic+0x5c>
 800c17e:	2300      	movs	r3, #0
 800c180:	2b00      	cmp	r3, #0
 800c182:	d10b      	bne.n	800c19c <xQueueGenericCreateStatic+0x78>
    __asm volatile("	mov %0, %1												\n"
 800c184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c188:	f383 8811 	msr	BASEPRI, r3
 800c18c:	f3bf 8f6f 	isb	sy
 800c190:	f3bf 8f4f 	dsb	sy
 800c194:	623b      	str	r3, [r7, #32]
}
 800c196:	bf00      	nop
 800c198:	bf00      	nop
 800c19a:	e7fd      	b.n	800c198 <xQueueGenericCreateStatic+0x74>
    configASSERT(!((pucQueueStorage == NULL) && (uxItemSize != 0)));
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d102      	bne.n	800c1a8 <xQueueGenericCreateStatic+0x84>
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d101      	bne.n	800c1ac <xQueueGenericCreateStatic+0x88>
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	e000      	b.n	800c1ae <xQueueGenericCreateStatic+0x8a>
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d10b      	bne.n	800c1ca <xQueueGenericCreateStatic+0xa6>
    __asm volatile("	mov %0, %1												\n"
 800c1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b6:	f383 8811 	msr	BASEPRI, r3
 800c1ba:	f3bf 8f6f 	isb	sy
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	61fb      	str	r3, [r7, #28]
}
 800c1c4:	bf00      	nop
 800c1c6:	bf00      	nop
 800c1c8:	e7fd      	b.n	800c1c6 <xQueueGenericCreateStatic+0xa2>
#if (configASSERT_DEFINED == 1)
    {
        /* Sanity check that the size of the structure used to declare a
        variable of type StaticQueue_t or StaticSemaphore_t equals the size of
        the real queue and semaphore structures. */
        volatile size_t xSize = sizeof(StaticQueue_t);
 800c1ca:	2348      	movs	r3, #72	@ 0x48
 800c1cc:	617b      	str	r3, [r7, #20]
        configASSERT(xSize == sizeof(Queue_t));
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	2b48      	cmp	r3, #72	@ 0x48
 800c1d2:	d00b      	beq.n	800c1ec <xQueueGenericCreateStatic+0xc8>
    __asm volatile("	mov %0, %1												\n"
 800c1d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d8:	f383 8811 	msr	BASEPRI, r3
 800c1dc:	f3bf 8f6f 	isb	sy
 800c1e0:	f3bf 8f4f 	dsb	sy
 800c1e4:	61bb      	str	r3, [r7, #24]
}
 800c1e6:	bf00      	nop
 800c1e8:	bf00      	nop
 800c1ea:	e7fd      	b.n	800c1e8 <xQueueGenericCreateStatic+0xc4>
        (void)xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c1ec:	697b      	ldr	r3, [r7, #20]
#endif /* configASSERT_DEFINED */

    /* The address of a statically allocated queue was passed in, use it.
    The address of a statically allocated storage area was also passed in
    but is already set. */
    pxNewQueue = (Queue_t *)pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (pxNewQueue != NULL) {
 800c1f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d00d      	beq.n	800c214 <xQueueGenericCreateStatic+0xf0>
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
        {
            /* Queues can be allocated wither statically or dynamically, so
            note this queue was allocated statically in case the queue is
            later deleted. */
            pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c1f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
        }
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        prvInitialiseNewQueue(uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue);
 800c200:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c206:	9300      	str	r3, [sp, #0]
 800c208:	4613      	mov	r3, r2
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	68b9      	ldr	r1, [r7, #8]
 800c20e:	68f8      	ldr	r0, [r7, #12]
 800c210:	f000 f805 	bl	800c21e <prvInitialiseNewQueue>
    } else {
        traceQUEUE_CREATE_FAILED(ucQueueType);
        mtCOVERAGE_TEST_MARKER();
    }

    return pxNewQueue;
 800c214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800c216:	4618      	mov	r0, r3
 800c218:	3730      	adds	r7, #48	@ 0x30
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <prvInitialiseNewQueue>:
}

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue(const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t * pucQueueStorage, const uint8_t ucQueueType, Queue_t * pxNewQueue) {
 800c21e:	b580      	push	{r7, lr}
 800c220:	b084      	sub	sp, #16
 800c222:	af00      	add	r7, sp, #0
 800c224:	60f8      	str	r0, [r7, #12]
 800c226:	60b9      	str	r1, [r7, #8]
 800c228:	607a      	str	r2, [r7, #4]
 800c22a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
    configUSE_TRACE_FACILITY not be set to 1. */
    (void)ucQueueType;

    if (uxItemSize == (UBaseType_t)0) {
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d103      	bne.n	800c23a <prvInitialiseNewQueue+0x1c>
        /* No RAM was allocated for the queue storage area, but PC head cannot
        be set to NULL because NULL is used as a key to say the queue is used as
        a mutex.  Therefore just set pcHead to point to the queue as a benign
        value that is known to be within the memory map. */
        pxNewQueue->pcHead = (int8_t *)pxNewQueue;
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	69ba      	ldr	r2, [r7, #24]
 800c236:	601a      	str	r2, [r3, #0]
 800c238:	e002      	b.n	800c240 <prvInitialiseNewQueue+0x22>
    } else {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
 800c23a:	69bb      	ldr	r3, [r7, #24]
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
    defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	68fa      	ldr	r2, [r7, #12]
 800c244:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	68ba      	ldr	r2, [r7, #8]
 800c24a:	641a      	str	r2, [r3, #64]	@ 0x40
    (void)xQueueGenericReset(pxNewQueue, pdTRUE);
 800c24c:	2101      	movs	r1, #1
 800c24e:	69b8      	ldr	r0, [r7, #24]
 800c250:	f7ff fefe 	bl	800c050 <xQueueGenericReset>
#if (configUSE_QUEUE_SETS == 1)
    { pxNewQueue->pxQueueSetContainer = NULL; }
#endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE(pxNewQueue);
}
 800c254:	bf00      	nop
 800c256:	3710      	adds	r7, #16
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <xQueueGenericSend>:
}

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend(QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition) {
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b08e      	sub	sp, #56	@ 0x38
 800c260:	af00      	add	r7, sp, #0
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	607a      	str	r2, [r7, #4]
 800c268:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c26a:	2300      	movs	r3, #0
 800c26c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT(pxQueue);
 800c272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10b      	bne.n	800c290 <xQueueGenericSend+0x34>
    __asm volatile("	mov %0, %1												\n"
 800c278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c27c:	f383 8811 	msr	BASEPRI, r3
 800c280:	f3bf 8f6f 	isb	sy
 800c284:	f3bf 8f4f 	dsb	sy
 800c288:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c28a:	bf00      	nop
 800c28c:	bf00      	nop
 800c28e:	e7fd      	b.n	800c28c <xQueueGenericSend+0x30>
    configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d103      	bne.n	800c29e <xQueueGenericSend+0x42>
 800c296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d101      	bne.n	800c2a2 <xQueueGenericSend+0x46>
 800c29e:	2301      	movs	r3, #1
 800c2a0:	e000      	b.n	800c2a4 <xQueueGenericSend+0x48>
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d10b      	bne.n	800c2c0 <xQueueGenericSend+0x64>
    __asm volatile("	mov %0, %1												\n"
 800c2a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ac:	f383 8811 	msr	BASEPRI, r3
 800c2b0:	f3bf 8f6f 	isb	sy
 800c2b4:	f3bf 8f4f 	dsb	sy
 800c2b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c2ba:	bf00      	nop
 800c2bc:	bf00      	nop
 800c2be:	e7fd      	b.n	800c2bc <xQueueGenericSend+0x60>
    configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	2b02      	cmp	r3, #2
 800c2c4:	d103      	bne.n	800c2ce <xQueueGenericSend+0x72>
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d101      	bne.n	800c2d2 <xQueueGenericSend+0x76>
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e000      	b.n	800c2d4 <xQueueGenericSend+0x78>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d10b      	bne.n	800c2f0 <xQueueGenericSend+0x94>
    __asm volatile("	mov %0, %1												\n"
 800c2d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2dc:	f383 8811 	msr	BASEPRI, r3
 800c2e0:	f3bf 8f6f 	isb	sy
 800c2e4:	f3bf 8f4f 	dsb	sy
 800c2e8:	623b      	str	r3, [r7, #32]
}
 800c2ea:	bf00      	nop
 800c2ec:	bf00      	nop
 800c2ee:	e7fd      	b.n	800c2ec <xQueueGenericSend+0x90>
#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))
    { configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0))); }
 800c2f0:	f001 face 	bl	800d890 <xTaskGetSchedulerState>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d102      	bne.n	800c300 <xQueueGenericSend+0xa4>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d101      	bne.n	800c304 <xQueueGenericSend+0xa8>
 800c300:	2301      	movs	r3, #1
 800c302:	e000      	b.n	800c306 <xQueueGenericSend+0xaa>
 800c304:	2300      	movs	r3, #0
 800c306:	2b00      	cmp	r3, #0
 800c308:	d10b      	bne.n	800c322 <xQueueGenericSend+0xc6>
    __asm volatile("	mov %0, %1												\n"
 800c30a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c30e:	f383 8811 	msr	BASEPRI, r3
 800c312:	f3bf 8f6f 	isb	sy
 800c316:	f3bf 8f4f 	dsb	sy
 800c31a:	61fb      	str	r3, [r7, #28]
}
 800c31c:	bf00      	nop
 800c31e:	bf00      	nop
 800c320:	e7fd      	b.n	800c31e <xQueueGenericSend+0xc2>

    /*lint -save -e904 This function relaxes the coding standard somewhat to
    allow return statements within the function itself.  This is done in the
    interest of execution time efficiency. */
    for (;;) {
        taskENTER_CRITICAL();
 800c322:	f002 f869 	bl	800e3f8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
            highest priority task wanting to access the queue.  If the head item
            in the queue is to be overwritten then it does not matter if the
            queue is full. */
            if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
 800c326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c328:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c32c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c32e:	429a      	cmp	r2, r3
 800c330:	d302      	bcc.n	800c338 <xQueueGenericSend+0xdc>
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	2b02      	cmp	r3, #2
 800c336:	d129      	bne.n	800c38c <xQueueGenericSend+0x130>
                        }
                    }
                }
#else  /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
 800c338:	683a      	ldr	r2, [r7, #0]
 800c33a:	68b9      	ldr	r1, [r7, #8]
 800c33c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c33e:	f000 fa0f 	bl	800c760 <prvCopyDataToQueue>
 800c342:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                    queue then unblock it now. */
                    if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
 800c344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d010      	beq.n	800c36e <xQueueGenericSend+0x112>
                        if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 800c34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c34e:	3324      	adds	r3, #36	@ 0x24
 800c350:	4618      	mov	r0, r3
 800c352:	f001 f8dd 	bl	800d510 <xTaskRemoveFromEventList>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d013      	beq.n	800c384 <xQueueGenericSend+0x128>
                            /* The unblocked task has a priority higher than
                            our own so yield immediately.  Yes it is ok to do
                            this from within the critical section - the kernel
                            takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800c35c:	4b3f      	ldr	r3, [pc, #252]	@ (800c45c <xQueueGenericSend+0x200>)
 800c35e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c362:	601a      	str	r2, [r3, #0]
 800c364:	f3bf 8f4f 	dsb	sy
 800c368:	f3bf 8f6f 	isb	sy
 800c36c:	e00a      	b.n	800c384 <xQueueGenericSend+0x128>
                        } else {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    } else if (xYieldRequired != pdFALSE) {
 800c36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c370:	2b00      	cmp	r3, #0
 800c372:	d007      	beq.n	800c384 <xQueueGenericSend+0x128>
                        /* This path is a special case that will only get
                        executed if the task was holding multiple mutexes and
                        the mutexes were given back in an order that is
                        different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800c374:	4b39      	ldr	r3, [pc, #228]	@ (800c45c <xQueueGenericSend+0x200>)
 800c376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c37a:	601a      	str	r2, [r3, #0]
 800c37c:	f3bf 8f4f 	dsb	sy
 800c380:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
#endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800c384:	f002 f86a 	bl	800e45c <vPortExitCritical>
                return pdPASS;
 800c388:	2301      	movs	r3, #1
 800c38a:	e063      	b.n	800c454 <xQueueGenericSend+0x1f8>
            } else {
                if (xTicksToWait == (TickType_t)0) {
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d103      	bne.n	800c39a <xQueueGenericSend+0x13e>
                    /* The queue was full and no block time is specified (or
                    the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800c392:	f002 f863 	bl	800e45c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                    the function. */
                    traceQUEUE_SEND_FAILED(pxQueue);
                    return errQUEUE_FULL;
 800c396:	2300      	movs	r3, #0
 800c398:	e05c      	b.n	800c454 <xQueueGenericSend+0x1f8>
                } else if (xEntryTimeSet == pdFALSE) {
 800c39a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d106      	bne.n	800c3ae <xQueueGenericSend+0x152>
                    /* The queue was full and a block time was specified so
                    configure the timeout structure. */
                    vTaskInternalSetTimeOutState(&xTimeOut);
 800c3a0:	f107 0314 	add.w	r3, r7, #20
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f001 f917 	bl	800d5d8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c3ae:	f002 f855 	bl	800e45c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
        now the critical section has been exited. */

        vTaskSuspendAll();
 800c3b2:	f000 fe89 	bl	800d0c8 <vTaskSuspendAll>
        prvLockQueue(pxQueue);
 800c3b6:	f002 f81f 	bl	800e3f8 <vPortEnterCritical>
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c3c0:	b25b      	sxtb	r3, r3
 800c3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3c6:	d103      	bne.n	800c3d0 <xQueueGenericSend+0x174>
 800c3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c3d6:	b25b      	sxtb	r3, r3
 800c3d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3dc:	d103      	bne.n	800c3e6 <xQueueGenericSend+0x18a>
 800c3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c3e6:	f002 f839 	bl	800e45c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
 800c3ea:	1d3a      	adds	r2, r7, #4
 800c3ec:	f107 0314 	add.w	r3, r7, #20
 800c3f0:	4611      	mov	r1, r2
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f001 f906 	bl	800d604 <xTaskCheckForTimeOut>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d124      	bne.n	800c448 <xQueueGenericSend+0x1ec>
            if (prvIsQueueFull(pxQueue) != pdFALSE) {
 800c3fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c400:	f000 fa98 	bl	800c934 <prvIsQueueFull>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d018      	beq.n	800c43c <xQueueGenericSend+0x1e0>
                traceBLOCKING_ON_QUEUE_SEND(pxQueue);
                vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
 800c40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c40c:	3310      	adds	r3, #16
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	4611      	mov	r1, r2
 800c412:	4618      	mov	r0, r3
 800c414:	f001 f82a 	bl	800d46c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                event list.  It is possible that interrupts occurring now
                remove this task from the event list again - but as the
                scheduler is suspended the task will go onto the pending
                ready last instead of the actual ready list. */
                prvUnlockQueue(pxQueue);
 800c418:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c41a:	f000 fa23 	bl	800c864 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                ready list into the ready list - so it is feasible that this
                task is already in a ready list before it yields - in which
                case the yield will not cause a context switch unless there
                is also a higher priority task in the pending ready list. */
                if (xTaskResumeAll() == pdFALSE) {
 800c41e:	f000 fe61 	bl	800d0e4 <xTaskResumeAll>
 800c422:	4603      	mov	r3, r0
 800c424:	2b00      	cmp	r3, #0
 800c426:	f47f af7c 	bne.w	800c322 <xQueueGenericSend+0xc6>
                    portYIELD_WITHIN_API();
 800c42a:	4b0c      	ldr	r3, [pc, #48]	@ (800c45c <xQueueGenericSend+0x200>)
 800c42c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c430:	601a      	str	r2, [r3, #0]
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	f3bf 8f6f 	isb	sy
 800c43a:	e772      	b.n	800c322 <xQueueGenericSend+0xc6>
                }
            } else {
                /* Try again. */
                prvUnlockQueue(pxQueue);
 800c43c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c43e:	f000 fa11 	bl	800c864 <prvUnlockQueue>
                (void)xTaskResumeAll();
 800c442:	f000 fe4f 	bl	800d0e4 <xTaskResumeAll>
 800c446:	e76c      	b.n	800c322 <xQueueGenericSend+0xc6>
            }
        } else {
            /* The timeout has expired. */
            prvUnlockQueue(pxQueue);
 800c448:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c44a:	f000 fa0b 	bl	800c864 <prvUnlockQueue>
            (void)xTaskResumeAll();
 800c44e:	f000 fe49 	bl	800d0e4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED(pxQueue);
            return errQUEUE_FULL;
 800c452:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800c454:	4618      	mov	r0, r3
 800c456:	3738      	adds	r7, #56	@ 0x38
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	e000ed04 	.word	0xe000ed04

0800c460 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR(QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition) {
 800c460:	b580      	push	{r7, lr}
 800c462:	b090      	sub	sp, #64	@ 0x40
 800c464:	af00      	add	r7, sp, #0
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	60b9      	str	r1, [r7, #8]
 800c46a:	607a      	str	r2, [r7, #4]
 800c46c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT(pxQueue);
 800c472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c474:	2b00      	cmp	r3, #0
 800c476:	d10b      	bne.n	800c490 <xQueueGenericSendFromISR+0x30>
    __asm volatile("	mov %0, %1												\n"
 800c478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c47c:	f383 8811 	msr	BASEPRI, r3
 800c480:	f3bf 8f6f 	isb	sy
 800c484:	f3bf 8f4f 	dsb	sy
 800c488:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c48a:	bf00      	nop
 800c48c:	bf00      	nop
 800c48e:	e7fd      	b.n	800c48c <xQueueGenericSendFromISR+0x2c>
    configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d103      	bne.n	800c49e <xQueueGenericSendFromISR+0x3e>
 800c496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d101      	bne.n	800c4a2 <xQueueGenericSendFromISR+0x42>
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e000      	b.n	800c4a4 <xQueueGenericSendFromISR+0x44>
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d10b      	bne.n	800c4c0 <xQueueGenericSendFromISR+0x60>
    __asm volatile("	mov %0, %1												\n"
 800c4a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ac:	f383 8811 	msr	BASEPRI, r3
 800c4b0:	f3bf 8f6f 	isb	sy
 800c4b4:	f3bf 8f4f 	dsb	sy
 800c4b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c4ba:	bf00      	nop
 800c4bc:	bf00      	nop
 800c4be:	e7fd      	b.n	800c4bc <xQueueGenericSendFromISR+0x5c>
    configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	2b02      	cmp	r3, #2
 800c4c4:	d103      	bne.n	800c4ce <xQueueGenericSendFromISR+0x6e>
 800c4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d101      	bne.n	800c4d2 <xQueueGenericSendFromISR+0x72>
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	e000      	b.n	800c4d4 <xQueueGenericSendFromISR+0x74>
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d10b      	bne.n	800c4f0 <xQueueGenericSendFromISR+0x90>
    __asm volatile("	mov %0, %1												\n"
 800c4d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4dc:	f383 8811 	msr	BASEPRI, r3
 800c4e0:	f3bf 8f6f 	isb	sy
 800c4e4:	f3bf 8f4f 	dsb	sy
 800c4e8:	623b      	str	r3, [r7, #32]
}
 800c4ea:	bf00      	nop
 800c4ec:	bf00      	nop
 800c4ee:	e7fd      	b.n	800c4ec <xQueueGenericSendFromISR+0x8c>
    that have been assigned a priority at or (logically) below the maximum
    system call	interrupt priority.  FreeRTOS maintains a separate interrupt
    safe API to ensure interrupt entry is as fast and as simple as possible.
    More information (albeit Cortex-M specific) is provided on the following
    link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4f0:	f002 f862 	bl	800e5b8 <vPortValidateInterruptPriority>
/*-----------------------------------------------------------*/

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI(void) {
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile("	mrs %0, basepri											\n"
 800c4f4:	f3ef 8211 	mrs	r2, BASEPRI
 800c4f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4fc:	f383 8811 	msr	BASEPRI, r3
 800c500:	f3bf 8f6f 	isb	sy
 800c504:	f3bf 8f4f 	dsb	sy
 800c508:	61fa      	str	r2, [r7, #28]
 800c50a:	61bb      	str	r3, [r7, #24]
                   : "i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
                   : "memory");

    /* This return will not be reached but is necessary to prevent compiler
    warnings. */
    return ulOriginalBASEPRI;
 800c50c:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
    in the queue.  Also don't directly wake a task that was blocked on a queue
    read, instead return a flag to say whether a context switch is required or
    not (i.e. has a task with a higher priority than us been woken by this
    post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c50e:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
 800c510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c512:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c518:	429a      	cmp	r2, r3
 800c51a:	d302      	bcc.n	800c522 <xQueueGenericSendFromISR+0xc2>
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	2b02      	cmp	r3, #2
 800c520:	d12f      	bne.n	800c582 <xQueueGenericSendFromISR+0x122>
            const int8_t cTxLock = pxQueue->cTxLock;
 800c522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c524:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c528:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c52e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c530:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
            semaphore or mutex.  That means prvCopyDataToQueue() cannot result
            in a task disinheriting a priority and prvCopyDataToQueue() can be
            called here even though the disinherit function does not check if
            the scheduler is suspended before accessing the ready lists. */
            (void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
 800c532:	683a      	ldr	r2, [r7, #0]
 800c534:	68b9      	ldr	r1, [r7, #8]
 800c536:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c538:	f000 f912 	bl	800c760 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
            be done when the queue is unlocked later. */
            if (cTxLock == queueUNLOCKED) {
 800c53c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c544:	d112      	bne.n	800c56c <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
#else  /* configUSE_QUEUE_SETS */
                {
                    if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
 800c546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d016      	beq.n	800c57c <xQueueGenericSendFromISR+0x11c>
                        if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 800c54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c550:	3324      	adds	r3, #36	@ 0x24
 800c552:	4618      	mov	r0, r3
 800c554:	f000 ffdc 	bl	800d510 <xTaskRemoveFromEventList>
 800c558:	4603      	mov	r3, r0
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00e      	beq.n	800c57c <xQueueGenericSendFromISR+0x11c>
                            /* The task waiting has a higher priority so record that a
                            context	switch is required. */
                            if (pxHigherPriorityTaskWoken != NULL) {
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d00b      	beq.n	800c57c <xQueueGenericSendFromISR+0x11c>
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2201      	movs	r2, #1
 800c568:	601a      	str	r2, [r3, #0]
 800c56a:	e007      	b.n	800c57c <xQueueGenericSendFromISR+0x11c>
                }
#endif /* configUSE_QUEUE_SETS */
            } else {
                /* Increment the lock count so the task that unlocks the queue
                knows that data was posted while it was locked. */
                pxQueue->cTxLock = (int8_t)(cTxLock + 1);
 800c56c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c570:	3301      	adds	r3, #1
 800c572:	b2db      	uxtb	r3, r3
 800c574:	b25a      	sxtb	r2, r3
 800c576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c578:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800c57c:	2301      	movs	r3, #1
 800c57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
 800c580:	e001      	b.n	800c586 <xQueueGenericSendFromISR+0x126>
        } else {
            traceQUEUE_SEND_FROM_ISR_FAILED(pxQueue);
            xReturn = errQUEUE_FULL;
 800c582:	2300      	movs	r3, #0
 800c584:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c588:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue) {
    __asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	f383 8811 	msr	BASEPRI, r3
}
 800c590:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);

    return xReturn;
 800c592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c594:	4618      	mov	r0, r3
 800c596:	3740      	adds	r7, #64	@ 0x40
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <xQueueReceive>:

    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive(QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait) {
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b08c      	sub	sp, #48	@ 0x30
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT((pxQueue));
 800c5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d10b      	bne.n	800c5ce <xQueueReceive+0x32>
    __asm volatile("	mov %0, %1												\n"
 800c5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ba:	f383 8811 	msr	BASEPRI, r3
 800c5be:	f3bf 8f6f 	isb	sy
 800c5c2:	f3bf 8f4f 	dsb	sy
 800c5c6:	623b      	str	r3, [r7, #32]
}
 800c5c8:	bf00      	nop
 800c5ca:	bf00      	nop
 800c5cc:	e7fd      	b.n	800c5ca <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
    is zero (so no data is copied into the buffer. */
    configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d103      	bne.n	800c5dc <xQueueReceive+0x40>
 800c5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d101      	bne.n	800c5e0 <xQueueReceive+0x44>
 800c5dc:	2301      	movs	r3, #1
 800c5de:	e000      	b.n	800c5e2 <xQueueReceive+0x46>
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d10b      	bne.n	800c5fe <xQueueReceive+0x62>
    __asm volatile("	mov %0, %1												\n"
 800c5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ea:	f383 8811 	msr	BASEPRI, r3
 800c5ee:	f3bf 8f6f 	isb	sy
 800c5f2:	f3bf 8f4f 	dsb	sy
 800c5f6:	61fb      	str	r3, [r7, #28]
}
 800c5f8:	bf00      	nop
 800c5fa:	bf00      	nop
 800c5fc:	e7fd      	b.n	800c5fa <xQueueReceive+0x5e>

/* Cannot block if the scheduler is suspended. */
#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))
    { configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0))); }
 800c5fe:	f001 f947 	bl	800d890 <xTaskGetSchedulerState>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d102      	bne.n	800c60e <xQueueReceive+0x72>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d101      	bne.n	800c612 <xQueueReceive+0x76>
 800c60e:	2301      	movs	r3, #1
 800c610:	e000      	b.n	800c614 <xQueueReceive+0x78>
 800c612:	2300      	movs	r3, #0
 800c614:	2b00      	cmp	r3, #0
 800c616:	d10b      	bne.n	800c630 <xQueueReceive+0x94>
    __asm volatile("	mov %0, %1												\n"
 800c618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c61c:	f383 8811 	msr	BASEPRI, r3
 800c620:	f3bf 8f6f 	isb	sy
 800c624:	f3bf 8f4f 	dsb	sy
 800c628:	61bb      	str	r3, [r7, #24]
}
 800c62a:	bf00      	nop
 800c62c:	bf00      	nop
 800c62e:	e7fd      	b.n	800c62c <xQueueReceive+0x90>

    /*lint -save -e904  This function relaxes the coding standard somewhat to
    allow return statements within the function itself.  This is done in the
    interest of execution time efficiency. */
    for (;;) {
        taskENTER_CRITICAL();
 800c630:	f001 fee2 	bl	800e3f8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c638:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
            must be the highest priority task wanting to access the queue. */
            if (uxMessagesWaiting > (UBaseType_t)0) {
 800c63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d01f      	beq.n	800c680 <xQueueReceive+0xe4>
                /* Data available, remove one item. */
                prvCopyDataFromQueue(pxQueue, pvBuffer);
 800c640:	68b9      	ldr	r1, [r7, #8]
 800c642:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c644:	f000 f8e8 	bl	800c818 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE(pxQueue);
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
 800c648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c64a:	1e5a      	subs	r2, r3, #1
 800c64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c64e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                post to the queue?  If so, unblock the highest priority waiting
                task. */
                if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
 800c650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c652:	691b      	ldr	r3, [r3, #16]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d00f      	beq.n	800c678 <xQueueReceive+0xdc>
                    if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 800c658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c65a:	3310      	adds	r3, #16
 800c65c:	4618      	mov	r0, r3
 800c65e:	f000 ff57 	bl	800d510 <xTaskRemoveFromEventList>
 800c662:	4603      	mov	r3, r0
 800c664:	2b00      	cmp	r3, #0
 800c666:	d007      	beq.n	800c678 <xQueueReceive+0xdc>
                        queueYIELD_IF_USING_PREEMPTION();
 800c668:	4b3c      	ldr	r3, [pc, #240]	@ (800c75c <xQueueReceive+0x1c0>)
 800c66a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c66e:	601a      	str	r2, [r3, #0]
 800c670:	f3bf 8f4f 	dsb	sy
 800c674:	f3bf 8f6f 	isb	sy
                    }
                } else {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800c678:	f001 fef0 	bl	800e45c <vPortExitCritical>
                return pdPASS;
 800c67c:	2301      	movs	r3, #1
 800c67e:	e069      	b.n	800c754 <xQueueReceive+0x1b8>
            } else {
                if (xTicksToWait == (TickType_t)0) {
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d103      	bne.n	800c68e <xQueueReceive+0xf2>
                    /* The queue was empty and no block time is specified (or
                    the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800c686:	f001 fee9 	bl	800e45c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED(pxQueue);
                    return errQUEUE_EMPTY;
 800c68a:	2300      	movs	r3, #0
 800c68c:	e062      	b.n	800c754 <xQueueReceive+0x1b8>
                } else if (xEntryTimeSet == pdFALSE) {
 800c68e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c690:	2b00      	cmp	r3, #0
 800c692:	d106      	bne.n	800c6a2 <xQueueReceive+0x106>
                    /* The queue was empty and a block time was specified so
                    configure the timeout structure. */
                    vTaskInternalSetTimeOutState(&xTimeOut);
 800c694:	f107 0310 	add.w	r3, r7, #16
 800c698:	4618      	mov	r0, r3
 800c69a:	f000 ff9d 	bl	800d5d8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c69e:	2301      	movs	r3, #1
 800c6a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c6a2:	f001 fedb 	bl	800e45c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
        now the critical section has been exited. */

        vTaskSuspendAll();
 800c6a6:	f000 fd0f 	bl	800d0c8 <vTaskSuspendAll>
        prvLockQueue(pxQueue);
 800c6aa:	f001 fea5 	bl	800e3f8 <vPortEnterCritical>
 800c6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c6b4:	b25b      	sxtb	r3, r3
 800c6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ba:	d103      	bne.n	800c6c4 <xQueueReceive+0x128>
 800c6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c6ca:	b25b      	sxtb	r3, r3
 800c6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6d0:	d103      	bne.n	800c6da <xQueueReceive+0x13e>
 800c6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c6da:	f001 febf 	bl	800e45c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
 800c6de:	1d3a      	adds	r2, r7, #4
 800c6e0:	f107 0310 	add.w	r3, r7, #16
 800c6e4:	4611      	mov	r1, r2
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f000 ff8c 	bl	800d604 <xTaskCheckForTimeOut>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d123      	bne.n	800c73a <xQueueReceive+0x19e>
            /* The timeout has not expired.  If the queue is still empty place
            the task on the list of tasks waiting to receive from the queue. */
            if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 800c6f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6f4:	f000 f908 	bl	800c908 <prvIsQueueEmpty>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d017      	beq.n	800c72e <xQueueReceive+0x192>
                traceBLOCKING_ON_QUEUE_RECEIVE(pxQueue);
                vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
 800c6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c700:	3324      	adds	r3, #36	@ 0x24
 800c702:	687a      	ldr	r2, [r7, #4]
 800c704:	4611      	mov	r1, r2
 800c706:	4618      	mov	r0, r3
 800c708:	f000 feb0 	bl	800d46c <vTaskPlaceOnEventList>
                prvUnlockQueue(pxQueue);
 800c70c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c70e:	f000 f8a9 	bl	800c864 <prvUnlockQueue>
                if (xTaskResumeAll() == pdFALSE) {
 800c712:	f000 fce7 	bl	800d0e4 <xTaskResumeAll>
 800c716:	4603      	mov	r3, r0
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d189      	bne.n	800c630 <xQueueReceive+0x94>
                    portYIELD_WITHIN_API();
 800c71c:	4b0f      	ldr	r3, [pc, #60]	@ (800c75c <xQueueReceive+0x1c0>)
 800c71e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c722:	601a      	str	r2, [r3, #0]
 800c724:	f3bf 8f4f 	dsb	sy
 800c728:	f3bf 8f6f 	isb	sy
 800c72c:	e780      	b.n	800c630 <xQueueReceive+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } else {
                /* The queue contains data again.  Loop back to try and read the
                data. */
                prvUnlockQueue(pxQueue);
 800c72e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c730:	f000 f898 	bl	800c864 <prvUnlockQueue>
                (void)xTaskResumeAll();
 800c734:	f000 fcd6 	bl	800d0e4 <xTaskResumeAll>
 800c738:	e77a      	b.n	800c630 <xQueueReceive+0x94>
            }
        } else {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
            back and attempt to read the data. */
            prvUnlockQueue(pxQueue);
 800c73a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c73c:	f000 f892 	bl	800c864 <prvUnlockQueue>
            (void)xTaskResumeAll();
 800c740:	f000 fcd0 	bl	800d0e4 <xTaskResumeAll>

            if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 800c744:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c746:	f000 f8df 	bl	800c908 <prvIsQueueEmpty>
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	f43f af6f 	beq.w	800c630 <xQueueReceive+0x94>
                traceQUEUE_RECEIVE_FAILED(pxQueue);
                return errQUEUE_EMPTY;
 800c752:	2300      	movs	r3, #0
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800c754:	4618      	mov	r0, r3
 800c756:	3730      	adds	r7, #48	@ 0x30
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	e000ed04 	.word	0xe000ed04

0800c760 <prvCopyDataToQueue>:
}

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue(Queue_t * const pxQueue, const void * pvItemToQueue, const BaseType_t xPosition) {
 800c760:	b580      	push	{r7, lr}
 800c762:	b086      	sub	sp, #24
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800c76c:	2300      	movs	r3, #0
 800c76e:	613b      	str	r3, [r7, #16]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c774:	617b      	str	r3, [r7, #20]

    if (pxQueue->uxItemSize == (UBaseType_t)0) {
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d043      	beq.n	800c806 <prvCopyDataToQueue+0xa6>
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        }
#endif /* configUSE_MUTEXES */
    } else if (xPosition == queueSEND_TO_BACK) {
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d119      	bne.n	800c7b8 <prvCopyDataToQueue+0x58>
        (void)memcpy((void *)pxQueue->pcWriteTo, pvItemToQueue, (size_t)pxQueue->uxItemSize); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	6858      	ldr	r0, [r3, #4]
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c78c:	461a      	mov	r2, r3
 800c78e:	68b9      	ldr	r1, [r7, #8]
 800c790:	f003 fb41 	bl	800fe16 <memcpy>
                                                                                                 memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                            /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	685a      	ldr	r2, [r3, #4]
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c79c:	441a      	add	r2, r3
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	605a      	str	r2, [r3, #4]
        if (pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail)                                   /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	685a      	ldr	r2, [r3, #4]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	689b      	ldr	r3, [r3, #8]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d32b      	bcc.n	800c806 <prvCopyDataToQueue+0xa6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	605a      	str	r2, [r3, #4]
 800c7b6:	e026      	b.n	800c806 <prvCopyDataToQueue+0xa6>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    } else {
        (void)memcpy((void *)pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, (size_t)pxQueue->uxItemSize); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	68d8      	ldr	r0, [r3, #12]
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	68b9      	ldr	r1, [r7, #8]
 800c7c4:	f003 fb27 	bl	800fe16 <memcpy>
                                                                                                           no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	68da      	ldr	r2, [r3, #12]
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7d0:	425b      	negs	r3, r3
 800c7d2:	441a      	add	r2, r3
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	60da      	str	r2, [r3, #12]
        if (pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	68da      	ldr	r2, [r3, #12]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d207      	bcs.n	800c7f4 <prvCopyDataToQueue+0x94>
        {
            pxQueue->u.xQueue.pcReadFrom = (pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize);
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	689a      	ldr	r2, [r3, #8]
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7ec:	425b      	negs	r3, r3
 800c7ee:	441a      	add	r2, r3
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	60da      	str	r2, [r3, #12]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        if (xPosition == queueOVERWRITE) {
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b02      	cmp	r3, #2
 800c7f8:	d105      	bne.n	800c806 <prvCopyDataToQueue+0xa6>
            if (uxMessagesWaiting > (UBaseType_t)0) {
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d002      	beq.n	800c806 <prvCopyDataToQueue+0xa6>
                /* An item is not being added but overwritten, so subtract
                one from the recorded number of items in the queue so when
                one is added again below the number of recorded items remains
                correct. */
                --uxMessagesWaiting;
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	3b01      	subs	r3, #1
 800c804:	617b      	str	r3, [r7, #20]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	1c5a      	adds	r2, r3, #1
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800c80e:	693b      	ldr	r3, [r7, #16]
}
 800c810:	4618      	mov	r0, r3
 800c812:	3718      	adds	r7, #24
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue(Queue_t * const pxQueue, void * const pvBuffer) {
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
    if (pxQueue->uxItemSize != (UBaseType_t)0) {
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c826:	2b00      	cmp	r3, #0
 800c828:	d018      	beq.n	800c85c <prvCopyDataFromQueue+0x44>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;          /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	68da      	ldr	r2, [r3, #12]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c832:	441a      	add	r2, r3
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	60da      	str	r2, [r3, #12]
        if (pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	68da      	ldr	r2, [r3, #12]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	689b      	ldr	r3, [r3, #8]
 800c840:	429a      	cmp	r2, r3
 800c842:	d303      	bcc.n	800c84c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	60da      	str	r2, [r3, #12]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
        (void)memcpy((void *)pvBuffer, (void *)pxQueue->u.xQueue.pcReadFrom,
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	68d9      	ldr	r1, [r3, #12]
                     (size_t)pxQueue->uxItemSize); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (void)memcpy((void *)pvBuffer, (void *)pxQueue->u.xQueue.pcReadFrom,
 800c854:	461a      	mov	r2, r3
 800c856:	6838      	ldr	r0, [r7, #0]
 800c858:	f003 fadd 	bl	800fe16 <memcpy>
                                                      required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    }
}
 800c85c:	bf00      	nop
 800c85e:	3708      	adds	r7, #8
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue(Queue_t * const pxQueue) {
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
    removed from the queue while the queue was locked.  When a queue is
    locked items can be added or removed, but the event lists cannot be
    updated. */
    taskENTER_CRITICAL();
 800c86c:	f001 fdc4 	bl	800e3f8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c876:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while (cTxLock > queueLOCKED_UNMODIFIED) {
 800c878:	e011      	b.n	800c89e <prvUnlockQueue+0x3a>
            }
#else  /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                the pending ready list as the scheduler is still suspended. */
                if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d012      	beq.n	800c8a8 <prvUnlockQueue+0x44>
                    if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	3324      	adds	r3, #36	@ 0x24
 800c886:	4618      	mov	r0, r3
 800c888:	f000 fe42 	bl	800d510 <xTaskRemoveFromEventList>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d001      	beq.n	800c896 <prvUnlockQueue+0x32>
                        /* The task waiting has a higher priority so record that
                        a context switch is required. */
                        vTaskMissedYield();
 800c892:	f000 ff1b 	bl	800d6cc <vTaskMissedYield>
                    break;
                }
            }
#endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800c896:	7bfb      	ldrb	r3, [r7, #15]
 800c898:	3b01      	subs	r3, #1
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	73fb      	strb	r3, [r7, #15]
        while (cTxLock > queueLOCKED_UNMODIFIED) {
 800c89e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	dce9      	bgt.n	800c87a <prvUnlockQueue+0x16>
 800c8a6:	e000      	b.n	800c8aa <prvUnlockQueue+0x46>
                    break;
 800c8a8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	22ff      	movs	r2, #255	@ 0xff
 800c8ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800c8b2:	f001 fdd3 	bl	800e45c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800c8b6:	f001 fd9f 	bl	800e3f8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c8c0:	73bb      	strb	r3, [r7, #14]

        while (cRxLock > queueLOCKED_UNMODIFIED) {
 800c8c2:	e011      	b.n	800c8e8 <prvUnlockQueue+0x84>
            if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	691b      	ldr	r3, [r3, #16]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d012      	beq.n	800c8f2 <prvUnlockQueue+0x8e>
                if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	3310      	adds	r3, #16
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f000 fe1d 	bl	800d510 <xTaskRemoveFromEventList>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d001      	beq.n	800c8e0 <prvUnlockQueue+0x7c>
                    vTaskMissedYield();
 800c8dc:	f000 fef6 	bl	800d6cc <vTaskMissedYield>
                } else {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800c8e0:	7bbb      	ldrb	r3, [r7, #14]
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	73bb      	strb	r3, [r7, #14]
        while (cRxLock > queueLOCKED_UNMODIFIED) {
 800c8e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	dce9      	bgt.n	800c8c4 <prvUnlockQueue+0x60>
 800c8f0:	e000      	b.n	800c8f4 <prvUnlockQueue+0x90>
            } else {
                break;
 800c8f2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	22ff      	movs	r2, #255	@ 0xff
 800c8f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800c8fc:	f001 fdae 	bl	800e45c <vPortExitCritical>
}
 800c900:	bf00      	nop
 800c902:	3710      	adds	r7, #16
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t * pxQueue) {
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800c910:	f001 fd72 	bl	800e3f8 <vPortEnterCritical>
    {
        if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d102      	bne.n	800c922 <prvIsQueueEmpty+0x1a>
            xReturn = pdTRUE;
 800c91c:	2301      	movs	r3, #1
 800c91e:	60fb      	str	r3, [r7, #12]
 800c920:	e001      	b.n	800c926 <prvIsQueueEmpty+0x1e>
        } else {
            xReturn = pdFALSE;
 800c922:	2300      	movs	r3, #0
 800c924:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800c926:	f001 fd99 	bl	800e45c <vPortExitCritical>

    return xReturn;
 800c92a:	68fb      	ldr	r3, [r7, #12]
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3710      	adds	r7, #16
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <prvIsQueueFull>:

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull(const Queue_t * pxQueue) {
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800c93c:	f001 fd5c 	bl	800e3f8 <vPortEnterCritical>
    {
        if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c948:	429a      	cmp	r2, r3
 800c94a:	d102      	bne.n	800c952 <prvIsQueueFull+0x1e>
            xReturn = pdTRUE;
 800c94c:	2301      	movs	r3, #1
 800c94e:	60fb      	str	r3, [r7, #12]
 800c950:	e001      	b.n	800c956 <prvIsQueueFull+0x22>
        } else {
            xReturn = pdFALSE;
 800c952:	2300      	movs	r3, #0
 800c954:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800c956:	f001 fd81 	bl	800e45c <vPortExitCritical>

    return xReturn;
 800c95a:	68fb      	ldr	r3, [r7, #12]
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3710      	adds	r7, #16
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if (configQUEUE_REGISTRY_SIZE > 0)

void vQueueAddToRegistry(QueueHandle_t xQueue, const char * pcQueueName) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800c964:	b480      	push	{r7}
 800c966:	b085      	sub	sp, #20
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
    UBaseType_t ux;

    /* See if there is an empty space in the registry.  A NULL name denotes
    a free slot. */
    for (ux = (UBaseType_t)0U; ux < (UBaseType_t)configQUEUE_REGISTRY_SIZE; ux++) {
 800c96e:	2300      	movs	r3, #0
 800c970:	60fb      	str	r3, [r7, #12]
 800c972:	e014      	b.n	800c99e <vQueueAddToRegistry+0x3a>
        if (xQueueRegistry[ux].pcQueueName == NULL) {
 800c974:	4a0f      	ldr	r2, [pc, #60]	@ (800c9b4 <vQueueAddToRegistry+0x50>)
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d10b      	bne.n	800c998 <vQueueAddToRegistry+0x34>
            /* Store the information on this queue. */
            xQueueRegistry[ux].pcQueueName = pcQueueName;
 800c980:	490c      	ldr	r1, [pc, #48]	@ (800c9b4 <vQueueAddToRegistry+0x50>)
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	683a      	ldr	r2, [r7, #0]
 800c986:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            xQueueRegistry[ux].xHandle = xQueue;
 800c98a:	4a0a      	ldr	r2, [pc, #40]	@ (800c9b4 <vQueueAddToRegistry+0x50>)
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	00db      	lsls	r3, r3, #3
 800c990:	4413      	add	r3, r2
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD(xQueue, pcQueueName);
            break;
 800c996:	e006      	b.n	800c9a6 <vQueueAddToRegistry+0x42>
    for (ux = (UBaseType_t)0U; ux < (UBaseType_t)configQUEUE_REGISTRY_SIZE; ux++) {
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	3301      	adds	r3, #1
 800c99c:	60fb      	str	r3, [r7, #12]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2b07      	cmp	r3, #7
 800c9a2:	d9e7      	bls.n	800c974 <vQueueAddToRegistry+0x10>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800c9a4:	bf00      	nop
 800c9a6:	bf00      	nop
 800c9a8:	3714      	adds	r7, #20
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr
 800c9b2:	bf00      	nop
 800c9b4:	20000c00 	.word	0x20000c00

0800c9b8 <vQueueWaitForMessageRestricted>:
#endif /* configQUEUE_REGISTRY_SIZE */
/*-----------------------------------------------------------*/

#if (configUSE_TIMERS == 1)

void vQueueWaitForMessageRestricted(QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely) {
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b086      	sub	sp, #24
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	607a      	str	r2, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	617b      	str	r3, [r7, #20]
    will not actually cause the task to block, just place it on a blocked
    list.  It will not block until the scheduler is unlocked - at which
    time a yield will be performed.  If an item is added to the queue while
    the queue is locked, and the calling task blocks on the queue, then the
    calling task will be immediately unblocked when the queue is unlocked. */
    prvLockQueue(pxQueue);
 800c9c8:	f001 fd16 	bl	800e3f8 <vPortEnterCritical>
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c9d2:	b25b      	sxtb	r3, r3
 800c9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9d8:	d103      	bne.n	800c9e2 <vQueueWaitForMessageRestricted+0x2a>
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c9e8:	b25b      	sxtb	r3, r3
 800c9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ee:	d103      	bne.n	800c9f8 <vQueueWaitForMessageRestricted+0x40>
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c9f8:	f001 fd30 	bl	800e45c <vPortExitCritical>
    if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d106      	bne.n	800ca12 <vQueueWaitForMessageRestricted+0x5a>
        /* There is nothing in the queue, block for the specified period. */
        vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	3324      	adds	r3, #36	@ 0x24
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	68b9      	ldr	r1, [r7, #8]
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f000 fd53 	bl	800d4b8 <vTaskPlaceOnEventListRestricted>
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
    prvUnlockQueue(pxQueue);
 800ca12:	6978      	ldr	r0, [r7, #20]
 800ca14:	f7ff ff26 	bl	800c864 <prvUnlockQueue>
}
 800ca18:	bf00      	nop
 800ca1a:	3718      	adds	r7, #24
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <xTaskCreateStatic>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_STATIC_ALLOCATION == 1)

TaskHandle_t xTaskCreateStatic(TaskFunction_t pxTaskCode, const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                               const uint32_t ulStackDepth, void * const pvParameters, UBaseType_t uxPriority, StackType_t * const puxStackBuffer, StaticTask_t * const pxTaskBuffer) {
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b08e      	sub	sp, #56	@ 0x38
 800ca24:	af04      	add	r7, sp, #16
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	607a      	str	r2, [r7, #4]
 800ca2c:	603b      	str	r3, [r7, #0]
    TCB_t * pxNewTCB;
    TaskHandle_t xReturn;

    configASSERT(puxStackBuffer != NULL);
 800ca2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d10b      	bne.n	800ca4c <xTaskCreateStatic+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800ca34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca38:	f383 8811 	msr	BASEPRI, r3
 800ca3c:	f3bf 8f6f 	isb	sy
 800ca40:	f3bf 8f4f 	dsb	sy
 800ca44:	623b      	str	r3, [r7, #32]
}
 800ca46:	bf00      	nop
 800ca48:	bf00      	nop
 800ca4a:	e7fd      	b.n	800ca48 <xTaskCreateStatic+0x28>
    configASSERT(pxTaskBuffer != NULL);
 800ca4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d10b      	bne.n	800ca6a <xTaskCreateStatic+0x4a>
    __asm volatile("	mov %0, %1												\n"
 800ca52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca56:	f383 8811 	msr	BASEPRI, r3
 800ca5a:	f3bf 8f6f 	isb	sy
 800ca5e:	f3bf 8f4f 	dsb	sy
 800ca62:	61fb      	str	r3, [r7, #28]
}
 800ca64:	bf00      	nop
 800ca66:	bf00      	nop
 800ca68:	e7fd      	b.n	800ca66 <xTaskCreateStatic+0x46>
#if (configASSERT_DEFINED == 1)
    {
        /* Sanity check that the size of the structure used to declare a
        variable of type StaticTask_t equals the size of the real task
        structure. */
        volatile size_t xSize = sizeof(StaticTask_t);
 800ca6a:	237c      	movs	r3, #124	@ 0x7c
 800ca6c:	613b      	str	r3, [r7, #16]
        configASSERT(xSize == sizeof(TCB_t));
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	2b7c      	cmp	r3, #124	@ 0x7c
 800ca72:	d00b      	beq.n	800ca8c <xTaskCreateStatic+0x6c>
    __asm volatile("	mov %0, %1												\n"
 800ca74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca78:	f383 8811 	msr	BASEPRI, r3
 800ca7c:	f3bf 8f6f 	isb	sy
 800ca80:	f3bf 8f4f 	dsb	sy
 800ca84:	61bb      	str	r3, [r7, #24]
}
 800ca86:	bf00      	nop
 800ca88:	bf00      	nop
 800ca8a:	e7fd      	b.n	800ca88 <xTaskCreateStatic+0x68>
        (void)xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ca8c:	693b      	ldr	r3, [r7, #16]
    }
#endif /* configASSERT_DEFINED */

    if ((pxTaskBuffer != NULL) && (puxStackBuffer != NULL)) {
 800ca8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d01e      	beq.n	800cad2 <xTaskCreateStatic+0xb2>
 800ca94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d01b      	beq.n	800cad2 <xTaskCreateStatic+0xb2>
        /* The memory used for the task's TCB and stack are passed into this
        function - use them. */
        pxNewTCB = (TCB_t *)pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca9c:	627b      	str	r3, [r7, #36]	@ 0x24
        pxNewTCB->pxStack = (StackType_t *)puxStackBuffer;
 800ca9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800caa2:	631a      	str	r2, [r3, #48]	@ 0x30

#if (tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* Tasks can be created statically or dynamically, so note this
            task was created statically in case the task is later deleted. */
            pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800caa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa6:	2202      	movs	r2, #2
 800caa8:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
        }
#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

        prvInitialiseNewTask(pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL);
 800caac:	2300      	movs	r3, #0
 800caae:	9303      	str	r3, [sp, #12]
 800cab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab2:	9302      	str	r3, [sp, #8]
 800cab4:	f107 0314 	add.w	r3, r7, #20
 800cab8:	9301      	str	r3, [sp, #4]
 800caba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cabc:	9300      	str	r3, [sp, #0]
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	68b9      	ldr	r1, [r7, #8]
 800cac4:	68f8      	ldr	r0, [r7, #12]
 800cac6:	f000 f850 	bl	800cb6a <prvInitialiseNewTask>
        prvAddNewTaskToReadyList(pxNewTCB);
 800caca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cacc:	f000 f8d0 	bl	800cc70 <prvAddNewTaskToReadyList>
 800cad0:	e001      	b.n	800cad6 <xTaskCreateStatic+0xb6>
    } else {
        xReturn = NULL;
 800cad2:	2300      	movs	r3, #0
 800cad4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800cad6:	697b      	ldr	r3, [r7, #20]
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3728      	adds	r7, #40	@ 0x28
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <xTaskCreate>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)

BaseType_t xTaskCreate(TaskFunction_t pxTaskCode, const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                       const configSTACK_DEPTH_TYPE usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask) {
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b08c      	sub	sp, #48	@ 0x30
 800cae4:	af04      	add	r7, sp, #16
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	603b      	str	r3, [r7, #0]
 800caec:	4613      	mov	r3, r2
 800caee:	80fb      	strh	r3, [r7, #6]
#else  /* portSTACK_GROWTH */
    {
        StackType_t * pxStack;

        /* Allocate space for the stack used by the task being created. */
        pxStack = pvPortMalloc((((size_t)usStackDepth) * sizeof(StackType_t))); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800caf0:	88fb      	ldrh	r3, [r7, #6]
 800caf2:	009b      	lsls	r3, r3, #2
 800caf4:	4618      	mov	r0, r3
 800caf6:	f001 fda1 	bl	800e63c <pvPortMalloc>
 800cafa:	6178      	str	r0, [r7, #20]

        if (pxStack != NULL) {
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d00e      	beq.n	800cb20 <xTaskCreate+0x40>
            /* Allocate space for the TCB. */
            pxNewTCB = (TCB_t *)pvPortMalloc(sizeof(TCB_t)); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cb02:	207c      	movs	r0, #124	@ 0x7c
 800cb04:	f001 fd9a 	bl	800e63c <pvPortMalloc>
 800cb08:	61f8      	str	r0, [r7, #28]

            if (pxNewTCB != NULL) {
 800cb0a:	69fb      	ldr	r3, [r7, #28]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d003      	beq.n	800cb18 <xTaskCreate+0x38>
                /* Store the stack location in the TCB. */
                pxNewTCB->pxStack = pxStack;
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	697a      	ldr	r2, [r7, #20]
 800cb14:	631a      	str	r2, [r3, #48]	@ 0x30
 800cb16:	e005      	b.n	800cb24 <xTaskCreate+0x44>
            } else {
                /* The stack cannot be used as the TCB was not created.  Free
                it again. */
                vPortFree(pxStack);
 800cb18:	6978      	ldr	r0, [r7, #20]
 800cb1a:	f001 fda1 	bl	800e660 <vPortFree>
 800cb1e:	e001      	b.n	800cb24 <xTaskCreate+0x44>
            }
        } else {
            pxNewTCB = NULL;
 800cb20:	2300      	movs	r3, #0
 800cb22:	61fb      	str	r3, [r7, #28]
        }
    }
#endif /* portSTACK_GROWTH */

    if (pxNewTCB != NULL) {
 800cb24:	69fb      	ldr	r3, [r7, #28]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d017      	beq.n	800cb5a <xTaskCreate+0x7a>
#if (tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
        {
            /* Tasks can be created statically or dynamically, so note this
            task was created dynamically in case it is later deleted. */
            pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cb2a:	69fb      	ldr	r3, [r7, #28]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
        }
#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

        prvInitialiseNewTask(pxTaskCode, pcName, (uint32_t)usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL);
 800cb32:	88fa      	ldrh	r2, [r7, #6]
 800cb34:	2300      	movs	r3, #0
 800cb36:	9303      	str	r3, [sp, #12]
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	9302      	str	r3, [sp, #8]
 800cb3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb3e:	9301      	str	r3, [sp, #4]
 800cb40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb42:	9300      	str	r3, [sp, #0]
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	68b9      	ldr	r1, [r7, #8]
 800cb48:	68f8      	ldr	r0, [r7, #12]
 800cb4a:	f000 f80e 	bl	800cb6a <prvInitialiseNewTask>
        prvAddNewTaskToReadyList(pxNewTCB);
 800cb4e:	69f8      	ldr	r0, [r7, #28]
 800cb50:	f000 f88e 	bl	800cc70 <prvAddNewTaskToReadyList>
        xReturn = pdPASS;
 800cb54:	2301      	movs	r3, #1
 800cb56:	61bb      	str	r3, [r7, #24]
 800cb58:	e002      	b.n	800cb60 <xTaskCreate+0x80>
    } else {
        xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cb5a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb5e:	61bb      	str	r3, [r7, #24]
    }

    return xReturn;
 800cb60:	69bb      	ldr	r3, [r7, #24]
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3720      	adds	r7, #32
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <prvInitialiseNewTask>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask(TaskFunction_t pxTaskCode, const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                 const uint32_t ulStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, TCB_t * pxNewTCB, const MemoryRegion_t * const xRegions) {
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b088      	sub	sp, #32
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	60f8      	str	r0, [r7, #12]
 800cb72:	60b9      	str	r1, [r7, #8]
 800cb74:	607a      	str	r2, [r7, #4]
 800cb76:	603b      	str	r3, [r7, #0]
grows from high memory to low (as per the 80x86) or vice versa.
portSTACK_GROWTH is used to make the result positive or negative as required
by the port. */
#if (portSTACK_GROWTH < 0)
    {
        pxTopOfStack = &(pxNewTCB->pxStack[ulStackDepth - (uint32_t)1]);
 800cb78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb82:	3b01      	subs	r3, #1
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	4413      	add	r3, r2
 800cb88:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = (StackType_t *)(((portPOINTER_SIZE_TYPE)pxTopOfStack) & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK))); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size
 800cb8a:	69bb      	ldr	r3, [r7, #24]
 800cb8c:	f023 0307 	bic.w	r3, r3, #7
 800cb90:	61bb      	str	r3, [r7, #24]
                                                                                                                                        differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT((((portPOINTER_SIZE_TYPE)pxTopOfStack & (portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK) == 0UL));
 800cb92:	69bb      	ldr	r3, [r7, #24]
 800cb94:	f003 0307 	and.w	r3, r3, #7
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d00b      	beq.n	800cbb4 <prvInitialiseNewTask+0x4a>
    __asm volatile("	mov %0, %1												\n"
 800cb9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cba0:	f383 8811 	msr	BASEPRI, r3
 800cba4:	f3bf 8f6f 	isb	sy
 800cba8:	f3bf 8f4f 	dsb	sy
 800cbac:	617b      	str	r3, [r7, #20]
}
 800cbae:	bf00      	nop
 800cbb0:	bf00      	nop
 800cbb2:	e7fd      	b.n	800cbb0 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    }
#endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if (pcName != NULL) {
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d01f      	beq.n	800cbfa <prvInitialiseNewTask+0x90>
        for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
 800cbba:	2300      	movs	r3, #0
 800cbbc:	61fb      	str	r3, [r7, #28]
 800cbbe:	e012      	b.n	800cbe6 <prvInitialiseNewTask+0x7c>
            pxNewTCB->pcTaskName[x] = pcName[x];
 800cbc0:	68ba      	ldr	r2, [r7, #8]
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	4413      	add	r3, r2
 800cbc6:	7819      	ldrb	r1, [r3, #0]
 800cbc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbca:	69fb      	ldr	r3, [r7, #28]
 800cbcc:	4413      	add	r3, r2
 800cbce:	3334      	adds	r3, #52	@ 0x34
 800cbd0:	460a      	mov	r2, r1
 800cbd2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
            configMAX_TASK_NAME_LEN characters just in case the memory after the
            string is not accessible (extremely unlikely). */
            if (pcName[x] == (char)0x00) {
 800cbd4:	68ba      	ldr	r2, [r7, #8]
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	4413      	add	r3, r2
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d006      	beq.n	800cbee <prvInitialiseNewTask+0x84>
        for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
 800cbe0:	69fb      	ldr	r3, [r7, #28]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	61fb      	str	r3, [r7, #28]
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	2b3f      	cmp	r3, #63	@ 0x3f
 800cbea:	d9e9      	bls.n	800cbc0 <prvInitialiseNewTask+0x56>
 800cbec:	e000      	b.n	800cbf0 <prvInitialiseNewTask+0x86>
                break;
 800cbee:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
        was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
 800cbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
 800cbf8:	e003      	b.n	800cc02 <prvInitialiseNewTask+0x98>
    } else {
        /* The task has not been given a name, so just ensure there is a NULL
        terminator when it is read out. */
        pxNewTCB->pcTaskName[0] = 0x00;
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
    remove the privilege bit if one is present. */
    if (uxPriority >= (UBaseType_t)configMAX_PRIORITIES) {
 800cc02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc04:	2b06      	cmp	r3, #6
 800cc06:	d901      	bls.n	800cc0c <prvInitialiseNewTask+0xa2>
        uxPriority = (UBaseType_t)configMAX_PRIORITIES - (UBaseType_t)1U;
 800cc08:	2306      	movs	r3, #6
 800cc0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800cc0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc10:	62da      	str	r2, [r3, #44]	@ 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
        pxNewTCB->uxMutexesHeld = 0;
    }
#endif /* configUSE_MUTEXES */

    vListInitialiseItem(&(pxNewTCB->xStateListItem));
 800cc12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc14:	3304      	adds	r3, #4
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7ff f986 	bl	800bf28 <vListInitialiseItem>
    vListInitialiseItem(&(pxNewTCB->xEventListItem));
 800cc1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc1e:	3318      	adds	r3, #24
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7ff f981 	bl	800bf28 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
    back to	the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
 800cc26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc2a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE(&(pxNewTCB->xEventListItem), (TickType_t)configMAX_PRIORITIES - (TickType_t)uxPriority); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc2e:	f1c3 0207 	rsb	r2, r3, #7
 800cc32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc34:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
 800cc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc3a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
#endif

#if (configUSE_TASK_NOTIFICATIONS == 1)
    {
        pxNewTCB->ulNotifiedValue = 0;
 800cc3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc3e:	2200      	movs	r2, #0
 800cc40:	675a      	str	r2, [r3, #116]	@ 0x74
        pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc44:	2200      	movs	r2, #0
 800cc46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
            }
#endif /* portSTACK_GROWTH */
        }
#else  /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
 800cc4a:	683a      	ldr	r2, [r7, #0]
 800cc4c:	68f9      	ldr	r1, [r7, #12]
 800cc4e:	69b8      	ldr	r0, [r7, #24]
 800cc50:	f001 fa9e 	bl	800e190 <pxPortInitialiseStack>
 800cc54:	4602      	mov	r2, r0
 800cc56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc58:	601a      	str	r2, [r3, #0]
        }
#endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
#endif /* portUSING_MPU_WRAPPERS */

    if (pxCreatedTask != NULL) {
 800cc5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d002      	beq.n	800cc66 <prvInitialiseNewTask+0xfc>
        /* Pass the handle out in an anonymous way.  The handle can be used to
        change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = (TaskHandle_t)pxNewTCB;
 800cc60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc64:	601a      	str	r2, [r3, #0]
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800cc66:	bf00      	nop
 800cc68:	3720      	adds	r7, #32
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
	...

0800cc70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList(TCB_t * pxNewTCB) {
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
    updated. */
    taskENTER_CRITICAL();
 800cc78:	f001 fbbe 	bl	800e3f8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800cc7c:	4b2a      	ldr	r3, [pc, #168]	@ (800cd28 <prvAddNewTaskToReadyList+0xb8>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	3301      	adds	r3, #1
 800cc82:	4a29      	ldr	r2, [pc, #164]	@ (800cd28 <prvAddNewTaskToReadyList+0xb8>)
 800cc84:	6013      	str	r3, [r2, #0]
        if (pxCurrentTCB == NULL) {
 800cc86:	4b29      	ldr	r3, [pc, #164]	@ (800cd2c <prvAddNewTaskToReadyList+0xbc>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d109      	bne.n	800cca2 <prvAddNewTaskToReadyList+0x32>
            /* There are no other tasks, or all the other tasks are in
            the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800cc8e:	4a27      	ldr	r2, [pc, #156]	@ (800cd2c <prvAddNewTaskToReadyList+0xbc>)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6013      	str	r3, [r2, #0]

            if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
 800cc94:	4b24      	ldr	r3, [pc, #144]	@ (800cd28 <prvAddNewTaskToReadyList+0xb8>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d110      	bne.n	800ccbe <prvAddNewTaskToReadyList+0x4e>
                /* This is the first task to be created so do the preliminary
                initialisation required.  We will not recover if this call
                fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800cc9c:	f000 fd3a 	bl	800d714 <prvInitialiseTaskLists>
 800cca0:	e00d      	b.n	800ccbe <prvAddNewTaskToReadyList+0x4e>
            }
        } else {
            /* If the scheduler is not already running, make this task the
            current task if it is the highest priority task to be created
            so far. */
            if (xSchedulerRunning == pdFALSE) {
 800cca2:	4b23      	ldr	r3, [pc, #140]	@ (800cd30 <prvAddNewTaskToReadyList+0xc0>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d109      	bne.n	800ccbe <prvAddNewTaskToReadyList+0x4e>
                if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
 800ccaa:	4b20      	ldr	r3, [pc, #128]	@ (800cd2c <prvAddNewTaskToReadyList+0xbc>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d802      	bhi.n	800ccbe <prvAddNewTaskToReadyList+0x4e>
                    pxCurrentTCB = pxNewTCB;
 800ccb8:	4a1c      	ldr	r2, [pc, #112]	@ (800cd2c <prvAddNewTaskToReadyList+0xbc>)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6013      	str	r3, [r2, #0]
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800ccbe:	4b1d      	ldr	r3, [pc, #116]	@ (800cd34 <prvAddNewTaskToReadyList+0xc4>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	4a1b      	ldr	r2, [pc, #108]	@ (800cd34 <prvAddNewTaskToReadyList+0xc4>)
 800ccc6:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
#endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE(pxNewTCB);

        prvAddTaskToReadyList(pxNewTCB);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cccc:	2201      	movs	r2, #1
 800ccce:	409a      	lsls	r2, r3
 800ccd0:	4b19      	ldr	r3, [pc, #100]	@ (800cd38 <prvAddNewTaskToReadyList+0xc8>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	4a18      	ldr	r2, [pc, #96]	@ (800cd38 <prvAddNewTaskToReadyList+0xc8>)
 800ccd8:	6013      	str	r3, [r2, #0]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccde:	4613      	mov	r3, r2
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	4413      	add	r3, r2
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	4a15      	ldr	r2, [pc, #84]	@ (800cd3c <prvAddNewTaskToReadyList+0xcc>)
 800cce8:	441a      	add	r2, r3
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	3304      	adds	r3, #4
 800ccee:	4619      	mov	r1, r3
 800ccf0:	4610      	mov	r0, r2
 800ccf2:	f7ff f926 	bl	800bf42 <vListInsertEnd>

        portSETUP_TCB(pxNewTCB);
    }
    taskEXIT_CRITICAL();
 800ccf6:	f001 fbb1 	bl	800e45c <vPortExitCritical>

    if (xSchedulerRunning != pdFALSE) {
 800ccfa:	4b0d      	ldr	r3, [pc, #52]	@ (800cd30 <prvAddNewTaskToReadyList+0xc0>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d00e      	beq.n	800cd20 <prvAddNewTaskToReadyList+0xb0>
        /* If the created task is of a higher priority than the current task
        then it should run now. */
        if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
 800cd02:	4b0a      	ldr	r3, [pc, #40]	@ (800cd2c <prvAddNewTaskToReadyList+0xbc>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d207      	bcs.n	800cd20 <prvAddNewTaskToReadyList+0xb0>
            taskYIELD_IF_USING_PREEMPTION();
 800cd10:	4b0b      	ldr	r3, [pc, #44]	@ (800cd40 <prvAddNewTaskToReadyList+0xd0>)
 800cd12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd16:	601a      	str	r2, [r3, #0]
 800cd18:	f3bf 8f4f 	dsb	sy
 800cd1c:	f3bf 8f6f 	isb	sy
            mtCOVERAGE_TEST_MARKER();
        }
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800cd20:	bf00      	nop
 800cd22:	3708      	adds	r7, #8
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	20000d40 	.word	0x20000d40
 800cd2c:	20000c40 	.word	0x20000c40
 800cd30:	20000d4c 	.word	0x20000d4c
 800cd34:	20000d5c 	.word	0x20000d5c
 800cd38:	20000d48 	.word	0x20000d48
 800cd3c:	20000c44 	.word	0x20000c44
 800cd40:	e000ed04 	.word	0xe000ed04

0800cd44 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelete == 1)

void vTaskDelete(TaskHandle_t xTaskToDelete) {
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b084      	sub	sp, #16
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
    TCB_t * pxTCB;

    taskENTER_CRITICAL();
 800cd4c:	f001 fb54 	bl	800e3f8 <vPortEnterCritical>
    {
        /* If null is passed in here then it is the calling task that is
        being deleted. */
        pxTCB = prvGetTCBFromHandle(xTaskToDelete);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d102      	bne.n	800cd5c <vTaskDelete+0x18>
 800cd56:	4b39      	ldr	r3, [pc, #228]	@ (800ce3c <vTaskDelete+0xf8>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	e000      	b.n	800cd5e <vTaskDelete+0x1a>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	60fb      	str	r3, [r7, #12]

        /* Remove task from the ready/delayed list. */
        if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	3304      	adds	r3, #4
 800cd64:	4618      	mov	r0, r3
 800cd66:	f7ff f949 	bl	800bffc <uxListRemove>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d115      	bne.n	800cd9c <vTaskDelete+0x58>
            taskRESET_READY_PRIORITY(pxTCB->uxPriority);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd74:	4932      	ldr	r1, [pc, #200]	@ (800ce40 <vTaskDelete+0xfc>)
 800cd76:	4613      	mov	r3, r2
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	4413      	add	r3, r2
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	440b      	add	r3, r1
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d10a      	bne.n	800cd9c <vTaskDelete+0x58>
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	fa02 f303 	lsl.w	r3, r2, r3
 800cd90:	43da      	mvns	r2, r3
 800cd92:	4b2c      	ldr	r3, [pc, #176]	@ (800ce44 <vTaskDelete+0x100>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	4013      	ands	r3, r2
 800cd98:	4a2a      	ldr	r2, [pc, #168]	@ (800ce44 <vTaskDelete+0x100>)
 800cd9a:	6013      	str	r3, [r2, #0]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        /* Is the task waiting on an event also? */
        if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d004      	beq.n	800cdae <vTaskDelete+0x6a>
            (void)uxListRemove(&(pxTCB->xEventListItem));
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	3318      	adds	r3, #24
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7ff f927 	bl	800bffc <uxListRemove>

        /* Increment the uxTaskNumber also so kernel aware debuggers can
        detect that the task lists need re-generating.  This is done before
        portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
        not return. */
        uxTaskNumber++;
 800cdae:	4b26      	ldr	r3, [pc, #152]	@ (800ce48 <vTaskDelete+0x104>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	4a24      	ldr	r2, [pc, #144]	@ (800ce48 <vTaskDelete+0x104>)
 800cdb6:	6013      	str	r3, [r2, #0]

        if (pxTCB == pxCurrentTCB) {
 800cdb8:	4b20      	ldr	r3, [pc, #128]	@ (800ce3c <vTaskDelete+0xf8>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	68fa      	ldr	r2, [r7, #12]
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d10b      	bne.n	800cdda <vTaskDelete+0x96>
            /* A task is deleting itself.  This cannot complete within the
            task itself, as a context switch to another task is required.
            Place the task in the termination list.  The idle task will
            check the termination list and free up any memory allocated by
            the scheduler for the TCB and stack of the deleted task. */
            vListInsertEnd(&xTasksWaitingTermination, &(pxTCB->xStateListItem));
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	3304      	adds	r3, #4
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	4820      	ldr	r0, [pc, #128]	@ (800ce4c <vTaskDelete+0x108>)
 800cdca:	f7ff f8ba 	bl	800bf42 <vListInsertEnd>

            /* Increment the ucTasksDeleted variable so the idle task knows
            there is a task that has been deleted and that it should therefore
            check the xTasksWaitingTermination list. */
            ++uxDeletedTasksWaitingCleanUp;
 800cdce:	4b20      	ldr	r3, [pc, #128]	@ (800ce50 <vTaskDelete+0x10c>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	4a1e      	ldr	r2, [pc, #120]	@ (800ce50 <vTaskDelete+0x10c>)
 800cdd6:	6013      	str	r3, [r2, #0]
 800cdd8:	e009      	b.n	800cdee <vTaskDelete+0xaa>
            after which it is not possible to yield away from this task -
            hence xYieldPending is used to latch that a context switch is
            required. */
            portPRE_TASK_DELETE_HOOK(pxTCB, &xYieldPending);
        } else {
            --uxCurrentNumberOfTasks;
 800cdda:	4b1e      	ldr	r3, [pc, #120]	@ (800ce54 <vTaskDelete+0x110>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	3b01      	subs	r3, #1
 800cde0:	4a1c      	ldr	r2, [pc, #112]	@ (800ce54 <vTaskDelete+0x110>)
 800cde2:	6013      	str	r3, [r2, #0]
            traceTASK_DELETE(pxTCB);
            prvDeleteTCB(pxTCB);
 800cde4:	68f8      	ldr	r0, [r7, #12]
 800cde6:	f000 fd03 	bl	800d7f0 <prvDeleteTCB>

            /* Reset the next expected unblock time in case it referred to
            the task that has just been deleted. */
            prvResetNextTaskUnblockTime();
 800cdea:	f000 fd31 	bl	800d850 <prvResetNextTaskUnblockTime>
        }
    }
    taskEXIT_CRITICAL();
 800cdee:	f001 fb35 	bl	800e45c <vPortExitCritical>

    /* Force a reschedule if it is the currently running task that has just
    been deleted. */
    if (xSchedulerRunning != pdFALSE) {
 800cdf2:	4b19      	ldr	r3, [pc, #100]	@ (800ce58 <vTaskDelete+0x114>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d01c      	beq.n	800ce34 <vTaskDelete+0xf0>
        if (pxTCB == pxCurrentTCB) {
 800cdfa:	4b10      	ldr	r3, [pc, #64]	@ (800ce3c <vTaskDelete+0xf8>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	68fa      	ldr	r2, [r7, #12]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d117      	bne.n	800ce34 <vTaskDelete+0xf0>
            configASSERT(uxSchedulerSuspended == 0);
 800ce04:	4b15      	ldr	r3, [pc, #84]	@ (800ce5c <vTaskDelete+0x118>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d00b      	beq.n	800ce24 <vTaskDelete+0xe0>
    __asm volatile("	mov %0, %1												\n"
 800ce0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce10:	f383 8811 	msr	BASEPRI, r3
 800ce14:	f3bf 8f6f 	isb	sy
 800ce18:	f3bf 8f4f 	dsb	sy
 800ce1c:	60bb      	str	r3, [r7, #8]
}
 800ce1e:	bf00      	nop
 800ce20:	bf00      	nop
 800ce22:	e7fd      	b.n	800ce20 <vTaskDelete+0xdc>
            portYIELD_WITHIN_API();
 800ce24:	4b0e      	ldr	r3, [pc, #56]	@ (800ce60 <vTaskDelete+0x11c>)
 800ce26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce2a:	601a      	str	r2, [r3, #0]
 800ce2c:	f3bf 8f4f 	dsb	sy
 800ce30:	f3bf 8f6f 	isb	sy
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800ce34:	bf00      	nop
 800ce36:	3710      	adds	r7, #16
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}
 800ce3c:	20000c40 	.word	0x20000c40
 800ce40:	20000c44 	.word	0x20000c44
 800ce44:	20000d48 	.word	0x20000d48
 800ce48:	20000d5c 	.word	0x20000d5c
 800ce4c:	20000d14 	.word	0x20000d14
 800ce50:	20000d28 	.word	0x20000d28
 800ce54:	20000d40 	.word	0x20000d40
 800ce58:	20000d4c 	.word	0x20000d4c
 800ce5c:	20000d68 	.word	0x20000d68
 800ce60:	e000ed04 	.word	0xe000ed04

0800ce64 <vTaskDelay>:
#endif /* INCLUDE_vTaskDelayUntil */
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelay == 1)

void vTaskDelay(const TickType_t xTicksToDelay) {
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
    BaseType_t xAlreadyYielded = pdFALSE;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	60fb      	str	r3, [r7, #12]

    /* A delay time of zero just forces a reschedule. */
    if (xTicksToDelay > (TickType_t)0U) {
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d018      	beq.n	800cea8 <vTaskDelay+0x44>
        configASSERT(uxSchedulerSuspended == 0);
 800ce76:	4b14      	ldr	r3, [pc, #80]	@ (800cec8 <vTaskDelay+0x64>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d00b      	beq.n	800ce96 <vTaskDelay+0x32>
    __asm volatile("	mov %0, %1												\n"
 800ce7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce82:	f383 8811 	msr	BASEPRI, r3
 800ce86:	f3bf 8f6f 	isb	sy
 800ce8a:	f3bf 8f4f 	dsb	sy
 800ce8e:	60bb      	str	r3, [r7, #8]
}
 800ce90:	bf00      	nop
 800ce92:	bf00      	nop
 800ce94:	e7fd      	b.n	800ce92 <vTaskDelay+0x2e>
        vTaskSuspendAll();
 800ce96:	f000 f917 	bl	800d0c8 <vTaskSuspendAll>
            list or removed from the blocked list until the scheduler
            is resumed.

            This task cannot be in an event list as it is the currently
            executing task. */
            prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
 800ce9a:	2100      	movs	r1, #0
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 fd15 	bl	800d8cc <prvAddCurrentTaskToDelayedList>
        }
        xAlreadyYielded = xTaskResumeAll();
 800cea2:	f000 f91f 	bl	800d0e4 <xTaskResumeAll>
 800cea6:	60f8      	str	r0, [r7, #12]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Force a reschedule if xTaskResumeAll has not already done so, we may
    have put ourselves to sleep. */
    if (xAlreadyYielded == pdFALSE) {
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d107      	bne.n	800cebe <vTaskDelay+0x5a>
        portYIELD_WITHIN_API();
 800ceae:	4b07      	ldr	r3, [pc, #28]	@ (800cecc <vTaskDelay+0x68>)
 800ceb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ceb4:	601a      	str	r2, [r3, #0]
 800ceb6:	f3bf 8f4f 	dsb	sy
 800ceba:	f3bf 8f6f 	isb	sy
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800cebe:	bf00      	nop
 800cec0:	3710      	adds	r7, #16
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	20000d68 	.word	0x20000d68
 800cecc:	e000ed04 	.word	0xe000ed04

0800ced0 <vTaskSuspend>:
#endif /* INCLUDE_vTaskPrioritySet */
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskSuspend == 1)

void vTaskSuspend(TaskHandle_t xTaskToSuspend) {
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
    TCB_t * pxTCB;

    taskENTER_CRITICAL();
 800ced8:	f001 fa8e 	bl	800e3f8 <vPortEnterCritical>
    {
        /* If null is passed in here then it is the running task that is
        being suspended. */
        pxTCB = prvGetTCBFromHandle(xTaskToSuspend);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d102      	bne.n	800cee8 <vTaskSuspend+0x18>
 800cee2:	4b3d      	ldr	r3, [pc, #244]	@ (800cfd8 <vTaskSuspend+0x108>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	e000      	b.n	800ceea <vTaskSuspend+0x1a>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	60fb      	str	r3, [r7, #12]

        traceTASK_SUSPEND(pxTCB);

        /* Remove task from the ready/delayed list and place in the
        suspended list. */
        if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	3304      	adds	r3, #4
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7ff f883 	bl	800bffc <uxListRemove>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d115      	bne.n	800cf28 <vTaskSuspend+0x58>
            taskRESET_READY_PRIORITY(pxTCB->uxPriority);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf00:	4936      	ldr	r1, [pc, #216]	@ (800cfdc <vTaskSuspend+0x10c>)
 800cf02:	4613      	mov	r3, r2
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4413      	add	r3, r2
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	440b      	add	r3, r1
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d10a      	bne.n	800cf28 <vTaskSuspend+0x58>
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf16:	2201      	movs	r2, #1
 800cf18:	fa02 f303 	lsl.w	r3, r2, r3
 800cf1c:	43da      	mvns	r2, r3
 800cf1e:	4b30      	ldr	r3, [pc, #192]	@ (800cfe0 <vTaskSuspend+0x110>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	4013      	ands	r3, r2
 800cf24:	4a2e      	ldr	r2, [pc, #184]	@ (800cfe0 <vTaskSuspend+0x110>)
 800cf26:	6013      	str	r3, [r2, #0]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        /* Is the task waiting on an event also? */
        if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d004      	beq.n	800cf3a <vTaskSuspend+0x6a>
            (void)uxListRemove(&(pxTCB->xEventListItem));
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	3318      	adds	r3, #24
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7ff f861 	bl	800bffc <uxListRemove>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        vListInsertEnd(&xSuspendedTaskList, &(pxTCB->xStateListItem));
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	3304      	adds	r3, #4
 800cf3e:	4619      	mov	r1, r3
 800cf40:	4828      	ldr	r0, [pc, #160]	@ (800cfe4 <vTaskSuspend+0x114>)
 800cf42:	f7fe fffe 	bl	800bf42 <vListInsertEnd>

#if (configUSE_TASK_NOTIFICATIONS == 1)
        {
            if (pxTCB->ucNotifyState == taskWAITING_NOTIFICATION) {
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800cf4c:	b2db      	uxtb	r3, r3
 800cf4e:	2b01      	cmp	r3, #1
 800cf50:	d103      	bne.n	800cf5a <vTaskSuspend+0x8a>
                /* The task was blocked to wait for a notification, but is
                now suspended, so no notification was received. */
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2200      	movs	r2, #0
 800cf56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
            }
        }
#endif
    }
    taskEXIT_CRITICAL();
 800cf5a:	f001 fa7f 	bl	800e45c <vPortExitCritical>

    if (xSchedulerRunning != pdFALSE) {
 800cf5e:	4b22      	ldr	r3, [pc, #136]	@ (800cfe8 <vTaskSuspend+0x118>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d005      	beq.n	800cf72 <vTaskSuspend+0xa2>
        /* Reset the next expected unblock time in case it referred to the
        task that is now in the Suspended state. */
        taskENTER_CRITICAL();
 800cf66:	f001 fa47 	bl	800e3f8 <vPortEnterCritical>
        { prvResetNextTaskUnblockTime(); }
 800cf6a:	f000 fc71 	bl	800d850 <prvResetNextTaskUnblockTime>
        taskEXIT_CRITICAL();
 800cf6e:	f001 fa75 	bl	800e45c <vPortExitCritical>
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    if (pxTCB == pxCurrentTCB) {
 800cf72:	4b19      	ldr	r3, [pc, #100]	@ (800cfd8 <vTaskSuspend+0x108>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	68fa      	ldr	r2, [r7, #12]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d128      	bne.n	800cfce <vTaskSuspend+0xfe>
        if (xSchedulerRunning != pdFALSE) {
 800cf7c:	4b1a      	ldr	r3, [pc, #104]	@ (800cfe8 <vTaskSuspend+0x118>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d018      	beq.n	800cfb6 <vTaskSuspend+0xe6>
            /* The current task has just been suspended. */
            configASSERT(uxSchedulerSuspended == 0);
 800cf84:	4b19      	ldr	r3, [pc, #100]	@ (800cfec <vTaskSuspend+0x11c>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00b      	beq.n	800cfa4 <vTaskSuspend+0xd4>
    __asm volatile("	mov %0, %1												\n"
 800cf8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf90:	f383 8811 	msr	BASEPRI, r3
 800cf94:	f3bf 8f6f 	isb	sy
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	60bb      	str	r3, [r7, #8]
}
 800cf9e:	bf00      	nop
 800cfa0:	bf00      	nop
 800cfa2:	e7fd      	b.n	800cfa0 <vTaskSuspend+0xd0>
            portYIELD_WITHIN_API();
 800cfa4:	4b12      	ldr	r3, [pc, #72]	@ (800cff0 <vTaskSuspend+0x120>)
 800cfa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfaa:	601a      	str	r2, [r3, #0]
 800cfac:	f3bf 8f4f 	dsb	sy
 800cfb0:	f3bf 8f6f 	isb	sy
            }
        }
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800cfb4:	e00b      	b.n	800cfce <vTaskSuspend+0xfe>
            if (listCURRENT_LIST_LENGTH(&xSuspendedTaskList) == uxCurrentNumberOfTasks) /*lint !e931 Right has no side effect, just volatile. */
 800cfb6:	4b0b      	ldr	r3, [pc, #44]	@ (800cfe4 <vTaskSuspend+0x114>)
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	4b0e      	ldr	r3, [pc, #56]	@ (800cff4 <vTaskSuspend+0x124>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d103      	bne.n	800cfca <vTaskSuspend+0xfa>
                pxCurrentTCB = NULL;
 800cfc2:	4b05      	ldr	r3, [pc, #20]	@ (800cfd8 <vTaskSuspend+0x108>)
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	601a      	str	r2, [r3, #0]
}
 800cfc8:	e001      	b.n	800cfce <vTaskSuspend+0xfe>
                vTaskSwitchContext();
 800cfca:	f000 f9f3 	bl	800d3b4 <vTaskSwitchContext>
}
 800cfce:	bf00      	nop
 800cfd0:	3710      	adds	r7, #16
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	20000c40 	.word	0x20000c40
 800cfdc:	20000c44 	.word	0x20000c44
 800cfe0:	20000d48 	.word	0x20000d48
 800cfe4:	20000d2c 	.word	0x20000d2c
 800cfe8:	20000d4c 	.word	0x20000d4c
 800cfec:	20000d68 	.word	0x20000d68
 800cff0:	e000ed04 	.word	0xe000ed04
 800cff4:	20000d40 	.word	0x20000d40

0800cff8 <vTaskStartScheduler>:
}

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler(void) {
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b08a      	sub	sp, #40	@ 0x28
 800cffc:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

/* Add the idle task at the lowest priority. */
#if (configSUPPORT_STATIC_ALLOCATION == 1)
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800cffe:	2300      	movs	r3, #0
 800d000:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800d002:	2300      	movs	r3, #0
 800d004:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
        address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory(&pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize);
 800d006:	463a      	mov	r2, r7
 800d008:	1d39      	adds	r1, r7, #4
 800d00a:	f107 0308 	add.w	r3, r7, #8
 800d00e:	4618      	mov	r0, r3
 800d010:	f7f4 fddc 	bl	8001bcc <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic(prvIdleTask, configIDLE_TASK_NAME, ulIdleTaskStackSize, (void *)NULL, /*lint !e961.  The cast is not redundant for all compilers. */
 800d014:	6839      	ldr	r1, [r7, #0]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	68ba      	ldr	r2, [r7, #8]
 800d01a:	9202      	str	r2, [sp, #8]
 800d01c:	9301      	str	r3, [sp, #4]
 800d01e:	2300      	movs	r3, #0
 800d020:	9300      	str	r3, [sp, #0]
 800d022:	2300      	movs	r3, #0
 800d024:	460a      	mov	r2, r1
 800d026:	4922      	ldr	r1, [pc, #136]	@ (800d0b0 <vTaskStartScheduler+0xb8>)
 800d028:	4822      	ldr	r0, [pc, #136]	@ (800d0b4 <vTaskStartScheduler+0xbc>)
 800d02a:	f7ff fcf9 	bl	800ca20 <xTaskCreateStatic>
 800d02e:	4603      	mov	r3, r0
 800d030:	4a21      	ldr	r2, [pc, #132]	@ (800d0b8 <vTaskStartScheduler+0xc0>)
 800d032:	6013      	str	r3, [r2, #0]
                                            portPRIVILEGE_BIT,                                                    /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                            pxIdleTaskStackBuffer, pxIdleTaskTCBBuffer);                          /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if (xIdleTaskHandle != NULL) {
 800d034:	4b20      	ldr	r3, [pc, #128]	@ (800d0b8 <vTaskStartScheduler+0xc0>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d002      	beq.n	800d042 <vTaskStartScheduler+0x4a>
            xReturn = pdPASS;
 800d03c:	2301      	movs	r3, #1
 800d03e:	617b      	str	r3, [r7, #20]
 800d040:	e001      	b.n	800d046 <vTaskStartScheduler+0x4e>
        } else {
            xReturn = pdFAIL;
 800d042:	2300      	movs	r3, #0
 800d044:	617b      	str	r3, [r7, #20]
    }
#endif /* configSUPPORT_STATIC_ALLOCATION */

#if (configUSE_TIMERS == 1)
    {
        if (xReturn == pdPASS) {
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d102      	bne.n	800d052 <vTaskStartScheduler+0x5a>
            xReturn = xTimerCreateTimerTask();
 800d04c:	f000 fca4 	bl	800d998 <xTimerCreateTimerTask>
 800d050:	6178      	str	r0, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
#endif /* configUSE_TIMERS */

    if (xReturn == pdPASS) {
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	2b01      	cmp	r3, #1
 800d056:	d116      	bne.n	800d086 <vTaskStartScheduler+0x8e>
    __asm volatile("	mov %0, %1												\n"
 800d058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d05c:	f383 8811 	msr	BASEPRI, r3
 800d060:	f3bf 8f6f 	isb	sy
 800d064:	f3bf 8f4f 	dsb	sy
 800d068:	613b      	str	r3, [r7, #16]
}
 800d06a:	bf00      	nop
            for additional information. */
            _impure_ptr = &(pxCurrentTCB->xNewLib_reent);
        }
#endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800d06c:	4b13      	ldr	r3, [pc, #76]	@ (800d0bc <vTaskStartScheduler+0xc4>)
 800d06e:	f04f 32ff 	mov.w	r2, #4294967295
 800d072:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800d074:	4b12      	ldr	r3, [pc, #72]	@ (800d0c0 <vTaskStartScheduler+0xc8>)
 800d076:	2201      	movs	r2, #1
 800d078:	601a      	str	r2, [r3, #0]
        xTickCount = (TickType_t)configINITIAL_TICK_COUNT;
 800d07a:	4b12      	ldr	r3, [pc, #72]	@ (800d0c4 <vTaskStartScheduler+0xcc>)
 800d07c:	2200      	movs	r2, #0
 800d07e:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
        portable interface. */
        if (xPortStartScheduler() != pdFALSE) {
 800d080:	f001 f916 	bl	800e2b0 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
    meaning xIdleTaskHandle is not used anywhere else. */
    (void)xIdleTaskHandle;
}
 800d084:	e00f      	b.n	800d0a6 <vTaskStartScheduler+0xae>
        configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d08c:	d10b      	bne.n	800d0a6 <vTaskStartScheduler+0xae>
    __asm volatile("	mov %0, %1												\n"
 800d08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d092:	f383 8811 	msr	BASEPRI, r3
 800d096:	f3bf 8f6f 	isb	sy
 800d09a:	f3bf 8f4f 	dsb	sy
 800d09e:	60fb      	str	r3, [r7, #12]
}
 800d0a0:	bf00      	nop
 800d0a2:	bf00      	nop
 800d0a4:	e7fd      	b.n	800d0a2 <vTaskStartScheduler+0xaa>
}
 800d0a6:	bf00      	nop
 800d0a8:	3718      	adds	r7, #24
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	08011d40 	.word	0x08011d40
 800d0b4:	0800d6e5 	.word	0x0800d6e5
 800d0b8:	20000d64 	.word	0x20000d64
 800d0bc:	20000d60 	.word	0x20000d60
 800d0c0:	20000d4c 	.word	0x20000d4c
 800d0c4:	20000d44 	.word	0x20000d44

0800d0c8 <vTaskSuspendAll>:
    xSchedulerRunning = pdFALSE;
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll(void) {
 800d0c8:	b480      	push	{r7}
 800d0ca:	af00      	add	r7, sp, #0
    do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
    is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800d0cc:	4b04      	ldr	r3, [pc, #16]	@ (800d0e0 <vTaskSuspendAll+0x18>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	4a03      	ldr	r2, [pc, #12]	@ (800d0e0 <vTaskSuspendAll+0x18>)
 800d0d4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
    the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800d0d6:	bf00      	nop
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr
 800d0e0:	20000d68 	.word	0x20000d68

0800d0e4 <xTaskResumeAll>:
}

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll(void) {
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
    previous call to vTaskSuspendAll(). */
    configASSERT(uxSchedulerSuspended);
 800d0f2:	4b42      	ldr	r3, [pc, #264]	@ (800d1fc <xTaskResumeAll+0x118>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d10b      	bne.n	800d112 <xTaskResumeAll+0x2e>
    __asm volatile("	mov %0, %1												\n"
 800d0fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0fe:	f383 8811 	msr	BASEPRI, r3
 800d102:	f3bf 8f6f 	isb	sy
 800d106:	f3bf 8f4f 	dsb	sy
 800d10a:	603b      	str	r3, [r7, #0]
}
 800d10c:	bf00      	nop
 800d10e:	bf00      	nop
 800d110:	e7fd      	b.n	800d10e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
    list while the scheduler was suspended.  If this was the case then the
    removed task will have been added to the xPendingReadyList.  Once the
    scheduler has been resumed it is safe to move all the pending ready
    tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800d112:	f001 f971 	bl	800e3f8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800d116:	4b39      	ldr	r3, [pc, #228]	@ (800d1fc <xTaskResumeAll+0x118>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	3b01      	subs	r3, #1
 800d11c:	4a37      	ldr	r2, [pc, #220]	@ (800d1fc <xTaskResumeAll+0x118>)
 800d11e:	6013      	str	r3, [r2, #0]

        if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800d120:	4b36      	ldr	r3, [pc, #216]	@ (800d1fc <xTaskResumeAll+0x118>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d161      	bne.n	800d1ec <xTaskResumeAll+0x108>
            if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
 800d128:	4b35      	ldr	r3, [pc, #212]	@ (800d200 <xTaskResumeAll+0x11c>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d05d      	beq.n	800d1ec <xTaskResumeAll+0x108>
                /* Move any readied tasks from the pending list into the
                appropriate ready list. */
                while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
 800d130:	e02e      	b.n	800d190 <xTaskResumeAll+0xac>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY(
 800d132:	4b34      	ldr	r3, [pc, #208]	@ (800d204 <xTaskResumeAll+0x120>)
 800d134:	68db      	ldr	r3, [r3, #12]
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	60fb      	str	r3, [r7, #12]
                        (&xPendingReadyList)); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
                    (void)uxListRemove(&(pxTCB->xEventListItem));
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	3318      	adds	r3, #24
 800d13e:	4618      	mov	r0, r3
 800d140:	f7fe ff5c 	bl	800bffc <uxListRemove>
                    (void)uxListRemove(&(pxTCB->xStateListItem));
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	3304      	adds	r3, #4
 800d148:	4618      	mov	r0, r3
 800d14a:	f7fe ff57 	bl	800bffc <uxListRemove>
                    prvAddTaskToReadyList(pxTCB);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d152:	2201      	movs	r2, #1
 800d154:	409a      	lsls	r2, r3
 800d156:	4b2c      	ldr	r3, [pc, #176]	@ (800d208 <xTaskResumeAll+0x124>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4313      	orrs	r3, r2
 800d15c:	4a2a      	ldr	r2, [pc, #168]	@ (800d208 <xTaskResumeAll+0x124>)
 800d15e:	6013      	str	r3, [r2, #0]
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d164:	4613      	mov	r3, r2
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	4413      	add	r3, r2
 800d16a:	009b      	lsls	r3, r3, #2
 800d16c:	4a27      	ldr	r2, [pc, #156]	@ (800d20c <xTaskResumeAll+0x128>)
 800d16e:	441a      	add	r2, r3
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	3304      	adds	r3, #4
 800d174:	4619      	mov	r1, r3
 800d176:	4610      	mov	r0, r2
 800d178:	f7fe fee3 	bl	800bf42 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                    task then a yield must be performed. */
                    if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d180:	4b23      	ldr	r3, [pc, #140]	@ (800d210 <xTaskResumeAll+0x12c>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d186:	429a      	cmp	r2, r3
 800d188:	d302      	bcc.n	800d190 <xTaskResumeAll+0xac>
                        xYieldPending = pdTRUE;
 800d18a:	4b22      	ldr	r3, [pc, #136]	@ (800d214 <xTaskResumeAll+0x130>)
 800d18c:	2201      	movs	r2, #1
 800d18e:	601a      	str	r2, [r3, #0]
                while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
 800d190:	4b1c      	ldr	r3, [pc, #112]	@ (800d204 <xTaskResumeAll+0x120>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d1cc      	bne.n	800d132 <xTaskResumeAll+0x4e>
                    } else {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if (pxTCB != NULL) {
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d001      	beq.n	800d1a2 <xTaskResumeAll+0xbe>
                    which may have prevented the next unblock time from being
                    re-calculated, in which case re-calculate it now.  Mainly
                    important for low power tickless implementations, where
                    this can prevent an unnecessary exit from low power
                    state. */
                    prvResetNextTaskUnblockTime();
 800d19e:	f000 fb57 	bl	800d850 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                they should be processed now.  This ensures the tick count does
                not	slip, and that any delayed tasks are resumed at the correct
                time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d1a2:	4b1d      	ldr	r3, [pc, #116]	@ (800d218 <xTaskResumeAll+0x134>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	607b      	str	r3, [r7, #4]

                    if (xPendedCounts > (TickType_t)0U) {
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d010      	beq.n	800d1d0 <xTaskResumeAll+0xec>
                        do {
                            if (xTaskIncrementTick() != pdFALSE) {
 800d1ae:	f000 f847 	bl	800d240 <xTaskIncrementTick>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d002      	beq.n	800d1be <xTaskResumeAll+0xda>
                                xYieldPending = pdTRUE;
 800d1b8:	4b16      	ldr	r3, [pc, #88]	@ (800d214 <xTaskResumeAll+0x130>)
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	601a      	str	r2, [r3, #0]
                            } else {
                                mtCOVERAGE_TEST_MARKER();
                            }
                            --xPendedCounts;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	3b01      	subs	r3, #1
 800d1c2:	607b      	str	r3, [r7, #4]
                        } while (xPendedCounts > (TickType_t)0U);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d1f1      	bne.n	800d1ae <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 800d1ca:	4b13      	ldr	r3, [pc, #76]	@ (800d218 <xTaskResumeAll+0x134>)
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	601a      	str	r2, [r3, #0]
                    } else {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if (xYieldPending != pdFALSE) {
 800d1d0:	4b10      	ldr	r3, [pc, #64]	@ (800d214 <xTaskResumeAll+0x130>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d009      	beq.n	800d1ec <xTaskResumeAll+0x108>
#if (configUSE_PREEMPTION != 0)
                    { xAlreadyYielded = pdTRUE; }
 800d1d8:	2301      	movs	r3, #1
 800d1da:	60bb      	str	r3, [r7, #8]
#endif
                    taskYIELD_IF_USING_PREEMPTION();
 800d1dc:	4b0f      	ldr	r3, [pc, #60]	@ (800d21c <xTaskResumeAll+0x138>)
 800d1de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1e2:	601a      	str	r2, [r3, #0]
 800d1e4:	f3bf 8f4f 	dsb	sy
 800d1e8:	f3bf 8f6f 	isb	sy
            }
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800d1ec:	f001 f936 	bl	800e45c <vPortExitCritical>

    return xAlreadyYielded;
 800d1f0:	68bb      	ldr	r3, [r7, #8]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
 800d1fa:	bf00      	nop
 800d1fc:	20000d68 	.word	0x20000d68
 800d200:	20000d40 	.word	0x20000d40
 800d204:	20000d00 	.word	0x20000d00
 800d208:	20000d48 	.word	0x20000d48
 800d20c:	20000c44 	.word	0x20000c44
 800d210:	20000c40 	.word	0x20000c40
 800d214:	20000d54 	.word	0x20000d54
 800d218:	20000d50 	.word	0x20000d50
 800d21c:	e000ed04 	.word	0xe000ed04

0800d220 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount(void) {
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    { xTicks = xTickCount; }
 800d226:	4b05      	ldr	r3, [pc, #20]	@ (800d23c <xTaskGetTickCount+0x1c>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	607b      	str	r3, [r7, #4]
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800d22c:	687b      	ldr	r3, [r7, #4]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	370c      	adds	r7, #12
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop
 800d23c:	20000d44 	.word	0x20000d44

0800d240 <xTaskIncrementTick>:
}

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick(void) {
 800d240:	b580      	push	{r7, lr}
 800d242:	b086      	sub	sp, #24
 800d244:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800d246:	2300      	movs	r3, #0
 800d248:	617b      	str	r3, [r7, #20]

    /* Called by the portable layer each time a tick interrupt occurs.
    Increments the tick then checks to see if the new tick value will cause any
    tasks to be unblocked. */
    traceTASK_INCREMENT_TICK(xTickCount);
    if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800d24a:	4b4f      	ldr	r3, [pc, #316]	@ (800d388 <xTaskIncrementTick+0x148>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	f040 808f 	bne.w	800d372 <xTaskIncrementTick+0x132>
        /* Minor optimisation.  The tick count cannot change in this
        block. */
        const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
 800d254:	4b4d      	ldr	r3, [pc, #308]	@ (800d38c <xTaskIncrementTick+0x14c>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	3301      	adds	r3, #1
 800d25a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
        delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800d25c:	4a4b      	ldr	r2, [pc, #300]	@ (800d38c <xTaskIncrementTick+0x14c>)
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	6013      	str	r3, [r2, #0]

        if (xConstTickCount == (TickType_t)0U) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d121      	bne.n	800d2ac <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800d268:	4b49      	ldr	r3, [pc, #292]	@ (800d390 <xTaskIncrementTick+0x150>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d00b      	beq.n	800d28a <xTaskIncrementTick+0x4a>
    __asm volatile("	mov %0, %1												\n"
 800d272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d276:	f383 8811 	msr	BASEPRI, r3
 800d27a:	f3bf 8f6f 	isb	sy
 800d27e:	f3bf 8f4f 	dsb	sy
 800d282:	603b      	str	r3, [r7, #0]
}
 800d284:	bf00      	nop
 800d286:	bf00      	nop
 800d288:	e7fd      	b.n	800d286 <xTaskIncrementTick+0x46>
 800d28a:	4b41      	ldr	r3, [pc, #260]	@ (800d390 <xTaskIncrementTick+0x150>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	60fb      	str	r3, [r7, #12]
 800d290:	4b40      	ldr	r3, [pc, #256]	@ (800d394 <xTaskIncrementTick+0x154>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a3e      	ldr	r2, [pc, #248]	@ (800d390 <xTaskIncrementTick+0x150>)
 800d296:	6013      	str	r3, [r2, #0]
 800d298:	4a3e      	ldr	r2, [pc, #248]	@ (800d394 <xTaskIncrementTick+0x154>)
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	6013      	str	r3, [r2, #0]
 800d29e:	4b3e      	ldr	r3, [pc, #248]	@ (800d398 <xTaskIncrementTick+0x158>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	4a3c      	ldr	r2, [pc, #240]	@ (800d398 <xTaskIncrementTick+0x158>)
 800d2a6:	6013      	str	r3, [r2, #0]
 800d2a8:	f000 fad2 	bl	800d850 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
        the	queue in the order of their wake time - meaning once one task
        has been found whose block time has not expired there is no need to
        look any further down the list. */
        if (xConstTickCount >= xNextTaskUnblockTime) {
 800d2ac:	4b3b      	ldr	r3, [pc, #236]	@ (800d39c <xTaskIncrementTick+0x15c>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	693a      	ldr	r2, [r7, #16]
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d348      	bcc.n	800d348 <xTaskIncrementTick+0x108>
            for (;;) {
                if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
 800d2b6:	4b36      	ldr	r3, [pc, #216]	@ (800d390 <xTaskIncrementTick+0x150>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d104      	bne.n	800d2ca <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                    to the maximum possible value so it is extremely
                    unlikely that the
                    if( xTickCount >= xNextTaskUnblockTime ) test will pass
                    next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2c0:	4b36      	ldr	r3, [pc, #216]	@ (800d39c <xTaskIncrementTick+0x15c>)
 800d2c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d2c6:	601a      	str	r2, [r3, #0]
                    break;
 800d2c8:	e03e      	b.n	800d348 <xTaskIncrementTick+0x108>
                    /* The delayed list is not empty, get the value of the
                    item at the head of the delayed list.  This is the time
                    at which the task at the head of the delayed list must
                    be removed from the Blocked state. */
                    pxTCB =
                        listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2ca:	4b31      	ldr	r3, [pc, #196]	@ (800d390 <xTaskIncrementTick+0x150>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	68db      	ldr	r3, [r3, #12]
                    pxTCB =
 800d2d0:	68db      	ldr	r3, [r3, #12]
 800d2d2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	607b      	str	r3, [r7, #4]

                    if (xConstTickCount < xItemValue) {
 800d2da:	693a      	ldr	r2, [r7, #16]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d203      	bcs.n	800d2ea <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                        item value is the time at which the task at the head
                        of the blocked list must be removed from the Blocked
                        state -	so record the item value in
                        xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800d2e2:	4a2e      	ldr	r2, [pc, #184]	@ (800d39c <xTaskIncrementTick+0x15c>)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d2e8:	e02e      	b.n	800d348 <xTaskIncrementTick+0x108>
                    } else {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    (void)uxListRemove(&(pxTCB->xStateListItem));
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	3304      	adds	r3, #4
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7fe fe84 	bl	800bffc <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                    it from the event list. */
                    if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d004      	beq.n	800d306 <xTaskIncrementTick+0xc6>
                        (void)uxListRemove(&(pxTCB->xEventListItem));
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	3318      	adds	r3, #24
 800d300:	4618      	mov	r0, r3
 800d302:	f7fe fe7b 	bl	800bffc <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                    list. */
                    prvAddTaskToReadyList(pxTCB);
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d30a:	2201      	movs	r2, #1
 800d30c:	409a      	lsls	r2, r3
 800d30e:	4b24      	ldr	r3, [pc, #144]	@ (800d3a0 <xTaskIncrementTick+0x160>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4313      	orrs	r3, r2
 800d314:	4a22      	ldr	r2, [pc, #136]	@ (800d3a0 <xTaskIncrementTick+0x160>)
 800d316:	6013      	str	r3, [r2, #0]
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d31c:	4613      	mov	r3, r2
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	4413      	add	r3, r2
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	4a1f      	ldr	r2, [pc, #124]	@ (800d3a4 <xTaskIncrementTick+0x164>)
 800d326:	441a      	add	r2, r3
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	3304      	adds	r3, #4
 800d32c:	4619      	mov	r1, r3
 800d32e:	4610      	mov	r0, r2
 800d330:	f7fe fe07 	bl	800bf42 <vListInsertEnd>
                    {
                        /* Preemption is on, but a context switch should
                        only be performed if the unblocked task has a
                        priority that is equal to or higher than the
                        currently executing task. */
                        if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d338:	4b1b      	ldr	r3, [pc, #108]	@ (800d3a8 <xTaskIncrementTick+0x168>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d33e:	429a      	cmp	r2, r3
 800d340:	d3b9      	bcc.n	800d2b6 <xTaskIncrementTick+0x76>
                            xSwitchRequired = pdTRUE;
 800d342:	2301      	movs	r3, #1
 800d344:	617b      	str	r3, [r7, #20]
                if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
 800d346:	e7b6      	b.n	800d2b6 <xTaskIncrementTick+0x76>
/* Tasks of equal priority to the currently running task will share
processing time (time slice) if preemption is on, and the application
writer has not explicitly turned time slicing off. */
#if ((configUSE_PREEMPTION == 1) && (configUSE_TIME_SLICING == 1))
        {
            if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
 800d348:	4b17      	ldr	r3, [pc, #92]	@ (800d3a8 <xTaskIncrementTick+0x168>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d34e:	4915      	ldr	r1, [pc, #84]	@ (800d3a4 <xTaskIncrementTick+0x164>)
 800d350:	4613      	mov	r3, r2
 800d352:	009b      	lsls	r3, r3, #2
 800d354:	4413      	add	r3, r2
 800d356:	009b      	lsls	r3, r3, #2
 800d358:	440b      	add	r3, r1
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d901      	bls.n	800d364 <xTaskIncrementTick+0x124>
                xSwitchRequired = pdTRUE;
 800d360:	2301      	movs	r3, #1
 800d362:	617b      	str	r3, [r7, #20]
        }
#endif /* configUSE_TICK_HOOK */

#if (configUSE_PREEMPTION == 1)
        {
            if (xYieldPending != pdFALSE) {
 800d364:	4b11      	ldr	r3, [pc, #68]	@ (800d3ac <xTaskIncrementTick+0x16c>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d007      	beq.n	800d37c <xTaskIncrementTick+0x13c>
                xSwitchRequired = pdTRUE;
 800d36c:	2301      	movs	r3, #1
 800d36e:	617b      	str	r3, [r7, #20]
 800d370:	e004      	b.n	800d37c <xTaskIncrementTick+0x13c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
#endif /* configUSE_PREEMPTION */
    } else {
        ++xPendedTicks;
 800d372:	4b0f      	ldr	r3, [pc, #60]	@ (800d3b0 <xTaskIncrementTick+0x170>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	3301      	adds	r3, #1
 800d378:	4a0d      	ldr	r2, [pc, #52]	@ (800d3b0 <xTaskIncrementTick+0x170>)
 800d37a:	6013      	str	r3, [r2, #0]
#if (configUSE_TICK_HOOK == 1)
        { vApplicationTickHook(); }
#endif
    }

    return xSwitchRequired;
 800d37c:	697b      	ldr	r3, [r7, #20]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3718      	adds	r7, #24
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	20000d68 	.word	0x20000d68
 800d38c:	20000d44 	.word	0x20000d44
 800d390:	20000cf8 	.word	0x20000cf8
 800d394:	20000cfc 	.word	0x20000cfc
 800d398:	20000d58 	.word	0x20000d58
 800d39c:	20000d60 	.word	0x20000d60
 800d3a0:	20000d48 	.word	0x20000d48
 800d3a4:	20000c44 	.word	0x20000c44
 800d3a8:	20000c40 	.word	0x20000c40
 800d3ac:	20000d54 	.word	0x20000d54
 800d3b0:	20000d50 	.word	0x20000d50

0800d3b4 <vTaskSwitchContext>:
}

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext(void) {
 800d3b4:	b480      	push	{r7}
 800d3b6:	b087      	sub	sp, #28
 800d3b8:	af00      	add	r7, sp, #0
    if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
 800d3ba:	4b27      	ldr	r3, [pc, #156]	@ (800d458 <vTaskSwitchContext+0xa4>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d003      	beq.n	800d3ca <vTaskSwitchContext+0x16>
        /* The scheduler is currently suspended - do not allow a context
        switch. */
        xYieldPending = pdTRUE;
 800d3c2:	4b26      	ldr	r3, [pc, #152]	@ (800d45c <vTaskSwitchContext+0xa8>)
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	601a      	str	r2, [r3, #0]
            for additional information. */
            _impure_ptr = &(pxCurrentTCB->xNewLib_reent);
        }
#endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800d3c8:	e040      	b.n	800d44c <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800d3ca:	4b24      	ldr	r3, [pc, #144]	@ (800d45c <vTaskSwitchContext+0xa8>)
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3d0:	4b23      	ldr	r3, [pc, #140]	@ (800d460 <vTaskSwitchContext+0xac>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	60fb      	str	r3, [r7, #12]
    __asm volatile("clz %0, %1" : "=r"(ucReturn) : "r"(ulBitmap) : "memory");
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	fab3 f383 	clz	r3, r3
 800d3dc:	72fb      	strb	r3, [r7, #11]
    return ucReturn;
 800d3de:	7afb      	ldrb	r3, [r7, #11]
 800d3e0:	f1c3 031f 	rsb	r3, r3, #31
 800d3e4:	617b      	str	r3, [r7, #20]
 800d3e6:	491f      	ldr	r1, [pc, #124]	@ (800d464 <vTaskSwitchContext+0xb0>)
 800d3e8:	697a      	ldr	r2, [r7, #20]
 800d3ea:	4613      	mov	r3, r2
 800d3ec:	009b      	lsls	r3, r3, #2
 800d3ee:	4413      	add	r3, r2
 800d3f0:	009b      	lsls	r3, r3, #2
 800d3f2:	440b      	add	r3, r1
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d10b      	bne.n	800d412 <vTaskSwitchContext+0x5e>
    __asm volatile("	mov %0, %1												\n"
 800d3fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3fe:	f383 8811 	msr	BASEPRI, r3
 800d402:	f3bf 8f6f 	isb	sy
 800d406:	f3bf 8f4f 	dsb	sy
 800d40a:	607b      	str	r3, [r7, #4]
}
 800d40c:	bf00      	nop
 800d40e:	bf00      	nop
 800d410:	e7fd      	b.n	800d40e <vTaskSwitchContext+0x5a>
 800d412:	697a      	ldr	r2, [r7, #20]
 800d414:	4613      	mov	r3, r2
 800d416:	009b      	lsls	r3, r3, #2
 800d418:	4413      	add	r3, r2
 800d41a:	009b      	lsls	r3, r3, #2
 800d41c:	4a11      	ldr	r2, [pc, #68]	@ (800d464 <vTaskSwitchContext+0xb0>)
 800d41e:	4413      	add	r3, r2
 800d420:	613b      	str	r3, [r7, #16]
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	685a      	ldr	r2, [r3, #4]
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	605a      	str	r2, [r3, #4]
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	685a      	ldr	r2, [r3, #4]
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	3308      	adds	r3, #8
 800d434:	429a      	cmp	r2, r3
 800d436:	d104      	bne.n	800d442 <vTaskSwitchContext+0x8e>
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	685a      	ldr	r2, [r3, #4]
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	605a      	str	r2, [r3, #4]
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	68db      	ldr	r3, [r3, #12]
 800d448:	4a07      	ldr	r2, [pc, #28]	@ (800d468 <vTaskSwitchContext+0xb4>)
 800d44a:	6013      	str	r3, [r2, #0]
}
 800d44c:	bf00      	nop
 800d44e:	371c      	adds	r7, #28
 800d450:	46bd      	mov	sp, r7
 800d452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d456:	4770      	bx	lr
 800d458:	20000d68 	.word	0x20000d68
 800d45c:	20000d54 	.word	0x20000d54
 800d460:	20000d48 	.word	0x20000d48
 800d464:	20000c44 	.word	0x20000c44
 800d468:	20000c40 	.word	0x20000c40

0800d46c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList(List_t * const pxEventList, const TickType_t xTicksToWait) {
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
    configASSERT(pxEventList);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d10b      	bne.n	800d494 <vTaskPlaceOnEventList+0x28>
    __asm volatile("	mov %0, %1												\n"
 800d47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d480:	f383 8811 	msr	BASEPRI, r3
 800d484:	f3bf 8f6f 	isb	sy
 800d488:	f3bf 8f4f 	dsb	sy
 800d48c:	60fb      	str	r3, [r7, #12]
}
 800d48e:	bf00      	nop
 800d490:	bf00      	nop
 800d492:	e7fd      	b.n	800d490 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
    This is placed in the list in priority order so the highest priority task
    is the first to be woken by the event.  The queue that contains the event
    list is locked, preventing simultaneous access from interrupts. */
    vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
 800d494:	4b07      	ldr	r3, [pc, #28]	@ (800d4b4 <vTaskPlaceOnEventList+0x48>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	3318      	adds	r3, #24
 800d49a:	4619      	mov	r1, r3
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f7fe fd74 	bl	800bf8a <vListInsert>

    prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
 800d4a2:	2101      	movs	r1, #1
 800d4a4:	6838      	ldr	r0, [r7, #0]
 800d4a6:	f000 fa11 	bl	800d8cc <prvAddCurrentTaskToDelayedList>
}
 800d4aa:	bf00      	nop
 800d4ac:	3710      	adds	r7, #16
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	20000c40 	.word	0x20000c40

0800d4b8 <vTaskPlaceOnEventListRestricted>:
}
/*-----------------------------------------------------------*/

#if (configUSE_TIMERS == 1)

void vTaskPlaceOnEventListRestricted(List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely) {
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b086      	sub	sp, #24
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	60f8      	str	r0, [r7, #12]
 800d4c0:	60b9      	str	r1, [r7, #8]
 800d4c2:	607a      	str	r2, [r7, #4]
    configASSERT(pxEventList);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d10b      	bne.n	800d4e2 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800d4ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ce:	f383 8811 	msr	BASEPRI, r3
 800d4d2:	f3bf 8f6f 	isb	sy
 800d4d6:	f3bf 8f4f 	dsb	sy
 800d4da:	617b      	str	r3, [r7, #20]
}
 800d4dc:	bf00      	nop
 800d4de:	bf00      	nop
 800d4e0:	e7fd      	b.n	800d4de <vTaskPlaceOnEventListRestricted+0x26>

    /* Place the event list item of the TCB in the appropriate event list.
    In this case it is assume that this is the only task that is going to
    be waiting on this event list, so the faster vListInsertEnd() function
    can be used in place of vListInsert. */
    vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
 800d4e2:	4b0a      	ldr	r3, [pc, #40]	@ (800d50c <vTaskPlaceOnEventListRestricted+0x54>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	3318      	adds	r3, #24
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	68f8      	ldr	r0, [r7, #12]
 800d4ec:	f7fe fd29 	bl	800bf42 <vListInsertEnd>

    /* If the task should block indefinitely then set the block time to a
    value that will be recognised as an indefinite delay inside the
    prvAddCurrentTaskToDelayedList() function. */
    if (xWaitIndefinitely != pdFALSE) {
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d002      	beq.n	800d4fc <vTaskPlaceOnEventListRestricted+0x44>
        xTicksToWait = portMAX_DELAY;
 800d4f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d4fa:	60bb      	str	r3, [r7, #8]
    }

    traceTASK_DELAY_UNTIL((xTickCount + xTicksToWait));
    prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
 800d4fc:	6879      	ldr	r1, [r7, #4]
 800d4fe:	68b8      	ldr	r0, [r7, #8]
 800d500:	f000 f9e4 	bl	800d8cc <prvAddCurrentTaskToDelayedList>
}
 800d504:	bf00      	nop
 800d506:	3718      	adds	r7, #24
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}
 800d50c:	20000c40 	.word	0x20000c40

0800d510 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList(const List_t * const pxEventList) {
 800d510:	b580      	push	{r7, lr}
 800d512:	b086      	sub	sp, #24
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
    get called - the lock count on the queue will get modified instead.  This
    means exclusive access to the event list is guaranteed here.

    This function assumes that a check has already been made to ensure that
    pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY(pxEventList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	68db      	ldr	r3, [r3, #12]
 800d51e:	613b      	str	r3, [r7, #16]
    configASSERT(pxUnblockedTCB);
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d10b      	bne.n	800d53e <xTaskRemoveFromEventList+0x2e>
    __asm volatile("	mov %0, %1												\n"
 800d526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d52a:	f383 8811 	msr	BASEPRI, r3
 800d52e:	f3bf 8f6f 	isb	sy
 800d532:	f3bf 8f4f 	dsb	sy
 800d536:	60fb      	str	r3, [r7, #12]
}
 800d538:	bf00      	nop
 800d53a:	bf00      	nop
 800d53c:	e7fd      	b.n	800d53a <xTaskRemoveFromEventList+0x2a>
    (void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	3318      	adds	r3, #24
 800d542:	4618      	mov	r0, r3
 800d544:	f7fe fd5a 	bl	800bffc <uxListRemove>

    if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800d548:	4b1d      	ldr	r3, [pc, #116]	@ (800d5c0 <xTaskRemoveFromEventList+0xb0>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d11c      	bne.n	800d58a <xTaskRemoveFromEventList+0x7a>
        (void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	3304      	adds	r3, #4
 800d554:	4618      	mov	r0, r3
 800d556:	f7fe fd51 	bl	800bffc <uxListRemove>
        prvAddTaskToReadyList(pxUnblockedTCB);
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d55e:	2201      	movs	r2, #1
 800d560:	409a      	lsls	r2, r3
 800d562:	4b18      	ldr	r3, [pc, #96]	@ (800d5c4 <xTaskRemoveFromEventList+0xb4>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	4313      	orrs	r3, r2
 800d568:	4a16      	ldr	r2, [pc, #88]	@ (800d5c4 <xTaskRemoveFromEventList+0xb4>)
 800d56a:	6013      	str	r3, [r2, #0]
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d570:	4613      	mov	r3, r2
 800d572:	009b      	lsls	r3, r3, #2
 800d574:	4413      	add	r3, r2
 800d576:	009b      	lsls	r3, r3, #2
 800d578:	4a13      	ldr	r2, [pc, #76]	@ (800d5c8 <xTaskRemoveFromEventList+0xb8>)
 800d57a:	441a      	add	r2, r3
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	3304      	adds	r3, #4
 800d580:	4619      	mov	r1, r3
 800d582:	4610      	mov	r0, r2
 800d584:	f7fe fcdd 	bl	800bf42 <vListInsertEnd>
 800d588:	e005      	b.n	800d596 <xTaskRemoveFromEventList+0x86>
        }
#endif
    } else {
        /* The delayed and ready lists cannot be accessed, so hold this task
        pending until the scheduler is resumed. */
        vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	3318      	adds	r3, #24
 800d58e:	4619      	mov	r1, r3
 800d590:	480e      	ldr	r0, [pc, #56]	@ (800d5cc <xTaskRemoveFromEventList+0xbc>)
 800d592:	f7fe fcd6 	bl	800bf42 <vListInsertEnd>
    }

    if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d59a:	4b0d      	ldr	r3, [pc, #52]	@ (800d5d0 <xTaskRemoveFromEventList+0xc0>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d905      	bls.n	800d5b0 <xTaskRemoveFromEventList+0xa0>
        /* Return true if the task removed from the event list has a higher
        priority than the calling task.  This allows the calling task to know if
        it should force a context switch now. */
        xReturn = pdTRUE;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
        "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800d5a8:	4b0a      	ldr	r3, [pc, #40]	@ (800d5d4 <xTaskRemoveFromEventList+0xc4>)
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	601a      	str	r2, [r3, #0]
 800d5ae:	e001      	b.n	800d5b4 <xTaskRemoveFromEventList+0xa4>
    } else {
        xReturn = pdFALSE;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800d5b4:	697b      	ldr	r3, [r7, #20]
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3718      	adds	r7, #24
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	20000d68 	.word	0x20000d68
 800d5c4:	20000d48 	.word	0x20000d48
 800d5c8:	20000c44 	.word	0x20000c44
 800d5cc:	20000d00 	.word	0x20000d00
 800d5d0:	20000c40 	.word	0x20000c40
 800d5d4:	20000d54 	.word	0x20000d54

0800d5d8 <vTaskInternalSetTimeOutState>:
    }
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState(TimeOut_t * const pxTimeOut) {
 800d5d8:	b480      	push	{r7}
 800d5da:	b083      	sub	sp, #12
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d5e0:	4b06      	ldr	r3, [pc, #24]	@ (800d5fc <vTaskInternalSetTimeOutState+0x24>)
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800d5e8:	4b05      	ldr	r3, [pc, #20]	@ (800d600 <vTaskInternalSetTimeOutState+0x28>)
 800d5ea:	681a      	ldr	r2, [r3, #0]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	605a      	str	r2, [r3, #4]
}
 800d5f0:	bf00      	nop
 800d5f2:	370c      	adds	r7, #12
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr
 800d5fc:	20000d58 	.word	0x20000d58
 800d600:	20000d44 	.word	0x20000d44

0800d604 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut(TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait) {
 800d604:	b580      	push	{r7, lr}
 800d606:	b088      	sub	sp, #32
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT(pxTimeOut);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d10b      	bne.n	800d62c <xTaskCheckForTimeOut+0x28>
    __asm volatile("	mov %0, %1												\n"
 800d614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d618:	f383 8811 	msr	BASEPRI, r3
 800d61c:	f3bf 8f6f 	isb	sy
 800d620:	f3bf 8f4f 	dsb	sy
 800d624:	613b      	str	r3, [r7, #16]
}
 800d626:	bf00      	nop
 800d628:	bf00      	nop
 800d62a:	e7fd      	b.n	800d628 <xTaskCheckForTimeOut+0x24>
    configASSERT(pxTicksToWait);
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d10b      	bne.n	800d64a <xTaskCheckForTimeOut+0x46>
    __asm volatile("	mov %0, %1												\n"
 800d632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d636:	f383 8811 	msr	BASEPRI, r3
 800d63a:	f3bf 8f6f 	isb	sy
 800d63e:	f3bf 8f4f 	dsb	sy
 800d642:	60fb      	str	r3, [r7, #12]
}
 800d644:	bf00      	nop
 800d646:	bf00      	nop
 800d648:	e7fd      	b.n	800d646 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800d64a:	f000 fed5 	bl	800e3f8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800d64e:	4b1d      	ldr	r3, [pc, #116]	@ (800d6c4 <xTaskCheckForTimeOut+0xc0>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	685b      	ldr	r3, [r3, #4]
 800d658:	69ba      	ldr	r2, [r7, #24]
 800d65a:	1ad3      	subs	r3, r2, r3
 800d65c:	617b      	str	r3, [r7, #20]
            xReturn = pdTRUE;
        } else
#endif

#if (INCLUDE_vTaskSuspend == 1)
            if (*pxTicksToWait == portMAX_DELAY) {
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d666:	d102      	bne.n	800d66e <xTaskCheckForTimeOut+0x6a>
            /* If INCLUDE_vTaskSuspend is set to 1 and the block time
            specified is the maximum block time then the task should block
            indefinitely, and therefore never time out. */
            xReturn = pdFALSE;
 800d668:	2300      	movs	r3, #0
 800d66a:	61fb      	str	r3, [r7, #28]
 800d66c:	e023      	b.n	800d6b6 <xTaskCheckForTimeOut+0xb2>
        } else
#endif

            if ((xNumOfOverflows != pxTimeOut->xOverflowCount) && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	4b15      	ldr	r3, [pc, #84]	@ (800d6c8 <xTaskCheckForTimeOut+0xc4>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	429a      	cmp	r2, r3
 800d678:	d007      	beq.n	800d68a <xTaskCheckForTimeOut+0x86>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	685b      	ldr	r3, [r3, #4]
 800d67e:	69ba      	ldr	r2, [r7, #24]
 800d680:	429a      	cmp	r2, r3
 800d682:	d302      	bcc.n	800d68a <xTaskCheckForTimeOut+0x86>
            /* The tick count is greater than the time at which
            vTaskSetTimeout() was called, but has also overflowed since
            vTaskSetTimeOut() was called.  It must have wrapped all the way
            around and gone past again. This passed since vTaskSetTimeout()
            was called. */
            xReturn = pdTRUE;
 800d684:	2301      	movs	r3, #1
 800d686:	61fb      	str	r3, [r7, #28]
 800d688:	e015      	b.n	800d6b6 <xTaskCheckForTimeOut+0xb2>
        } else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	697a      	ldr	r2, [r7, #20]
 800d690:	429a      	cmp	r2, r3
 800d692:	d20b      	bcs.n	800d6ac <xTaskCheckForTimeOut+0xa8>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	681a      	ldr	r2, [r3, #0]
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	1ad2      	subs	r2, r2, r3
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState(pxTimeOut);
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f7ff ff99 	bl	800d5d8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	61fb      	str	r3, [r7, #28]
 800d6aa:	e004      	b.n	800d6b6 <xTaskCheckForTimeOut+0xb2>
        } else {
            *pxTicksToWait = 0;
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800d6b6:	f000 fed1 	bl	800e45c <vPortExitCritical>

    return xReturn;
 800d6ba:	69fb      	ldr	r3, [r7, #28]
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3720      	adds	r7, #32
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	20000d44 	.word	0x20000d44
 800d6c8:	20000d58 	.word	0x20000d58

0800d6cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield(void) {
 800d6cc:	b480      	push	{r7}
 800d6ce:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800d6d0:	4b03      	ldr	r3, [pc, #12]	@ (800d6e0 <vTaskMissedYield+0x14>)
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	601a      	str	r2, [r3, #0]
}
 800d6d6:	bf00      	nop
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr
 800d6e0:	20000d54 	.word	0x20000d54

0800d6e4 <prvIdleTask>:
 * language extensions.  The equivalent prototype for this function is:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION(prvIdleTask, pvParameters) {
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
    portALLOCATE_SECURE_CONTEXT(configMINIMAL_SECURE_STACK_SIZE);

    for (;;) {
        /* See if any tasks have deleted themselves - if so then the idle task
        is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800d6ec:	f000 f852 	bl	800d794 <prvCheckTasksWaitingTermination>

            A critical region is not required here as we are just reading from
            the list, and an occasional incorrect value will not matter.  If
            the ready list at the idle priority contains more than one task
            then a task other than the idle task is ready to execute. */
            if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
 800d6f0:	4b06      	ldr	r3, [pc, #24]	@ (800d70c <prvIdleTask+0x28>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d9f9      	bls.n	800d6ec <prvIdleTask+0x8>
                taskYIELD();
 800d6f8:	4b05      	ldr	r3, [pc, #20]	@ (800d710 <prvIdleTask+0x2c>)
 800d6fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6fe:	601a      	str	r2, [r3, #0]
 800d700:	f3bf 8f4f 	dsb	sy
 800d704:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800d708:	e7f0      	b.n	800d6ec <prvIdleTask+0x8>
 800d70a:	bf00      	nop
 800d70c:	20000c44 	.word	0x20000c44
 800d710:	e000ed04 	.word	0xe000ed04

0800d714 <prvInitialiseTaskLists>:
}

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists(void) {
 800d714:	b580      	push	{r7, lr}
 800d716:	b082      	sub	sp, #8
 800d718:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
 800d71a:	2300      	movs	r3, #0
 800d71c:	607b      	str	r3, [r7, #4]
 800d71e:	e00c      	b.n	800d73a <prvInitialiseTaskLists+0x26>
        vListInitialise(&(pxReadyTasksLists[uxPriority]));
 800d720:	687a      	ldr	r2, [r7, #4]
 800d722:	4613      	mov	r3, r2
 800d724:	009b      	lsls	r3, r3, #2
 800d726:	4413      	add	r3, r2
 800d728:	009b      	lsls	r3, r3, #2
 800d72a:	4a12      	ldr	r2, [pc, #72]	@ (800d774 <prvInitialiseTaskLists+0x60>)
 800d72c:	4413      	add	r3, r2
 800d72e:	4618      	mov	r0, r3
 800d730:	f7fe fbda 	bl	800bee8 <vListInitialise>
    for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	3301      	adds	r3, #1
 800d738:	607b      	str	r3, [r7, #4]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2b06      	cmp	r3, #6
 800d73e:	d9ef      	bls.n	800d720 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise(&xDelayedTaskList1);
 800d740:	480d      	ldr	r0, [pc, #52]	@ (800d778 <prvInitialiseTaskLists+0x64>)
 800d742:	f7fe fbd1 	bl	800bee8 <vListInitialise>
    vListInitialise(&xDelayedTaskList2);
 800d746:	480d      	ldr	r0, [pc, #52]	@ (800d77c <prvInitialiseTaskLists+0x68>)
 800d748:	f7fe fbce 	bl	800bee8 <vListInitialise>
    vListInitialise(&xPendingReadyList);
 800d74c:	480c      	ldr	r0, [pc, #48]	@ (800d780 <prvInitialiseTaskLists+0x6c>)
 800d74e:	f7fe fbcb 	bl	800bee8 <vListInitialise>

#if (INCLUDE_vTaskDelete == 1)
    { vListInitialise(&xTasksWaitingTermination); }
 800d752:	480c      	ldr	r0, [pc, #48]	@ (800d784 <prvInitialiseTaskLists+0x70>)
 800d754:	f7fe fbc8 	bl	800bee8 <vListInitialise>
#endif /* INCLUDE_vTaskDelete */

#if (INCLUDE_vTaskSuspend == 1)
    { vListInitialise(&xSuspendedTaskList); }
 800d758:	480b      	ldr	r0, [pc, #44]	@ (800d788 <prvInitialiseTaskLists+0x74>)
 800d75a:	f7fe fbc5 	bl	800bee8 <vListInitialise>
#endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
    using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800d75e:	4b0b      	ldr	r3, [pc, #44]	@ (800d78c <prvInitialiseTaskLists+0x78>)
 800d760:	4a05      	ldr	r2, [pc, #20]	@ (800d778 <prvInitialiseTaskLists+0x64>)
 800d762:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d764:	4b0a      	ldr	r3, [pc, #40]	@ (800d790 <prvInitialiseTaskLists+0x7c>)
 800d766:	4a05      	ldr	r2, [pc, #20]	@ (800d77c <prvInitialiseTaskLists+0x68>)
 800d768:	601a      	str	r2, [r3, #0]
}
 800d76a:	bf00      	nop
 800d76c:	3708      	adds	r7, #8
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	20000c44 	.word	0x20000c44
 800d778:	20000cd0 	.word	0x20000cd0
 800d77c:	20000ce4 	.word	0x20000ce4
 800d780:	20000d00 	.word	0x20000d00
 800d784:	20000d14 	.word	0x20000d14
 800d788:	20000d2c 	.word	0x20000d2c
 800d78c:	20000cf8 	.word	0x20000cf8
 800d790:	20000cfc 	.word	0x20000cfc

0800d794 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination(void) {
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
        being called too often in the idle task. */
        while (uxDeletedTasksWaitingCleanUp > (UBaseType_t)0U) {
 800d79a:	e019      	b.n	800d7d0 <prvCheckTasksWaitingTermination+0x3c>
            taskENTER_CRITICAL();
 800d79c:	f000 fe2c 	bl	800e3f8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY(
 800d7a0:	4b10      	ldr	r3, [pc, #64]	@ (800d7e4 <prvCheckTasksWaitingTermination+0x50>)
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	68db      	ldr	r3, [r3, #12]
 800d7a6:	607b      	str	r3, [r7, #4]
                    (&xTasksWaitingTermination)); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
                (void)uxListRemove(&(pxTCB->xStateListItem));
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	3304      	adds	r3, #4
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7fe fc25 	bl	800bffc <uxListRemove>
                --uxCurrentNumberOfTasks;
 800d7b2:	4b0d      	ldr	r3, [pc, #52]	@ (800d7e8 <prvCheckTasksWaitingTermination+0x54>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	3b01      	subs	r3, #1
 800d7b8:	4a0b      	ldr	r2, [pc, #44]	@ (800d7e8 <prvCheckTasksWaitingTermination+0x54>)
 800d7ba:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800d7bc:	4b0b      	ldr	r3, [pc, #44]	@ (800d7ec <prvCheckTasksWaitingTermination+0x58>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	3b01      	subs	r3, #1
 800d7c2:	4a0a      	ldr	r2, [pc, #40]	@ (800d7ec <prvCheckTasksWaitingTermination+0x58>)
 800d7c4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800d7c6:	f000 fe49 	bl	800e45c <vPortExitCritical>

            prvDeleteTCB(pxTCB);
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f000 f810 	bl	800d7f0 <prvDeleteTCB>
        while (uxDeletedTasksWaitingCleanUp > (UBaseType_t)0U) {
 800d7d0:	4b06      	ldr	r3, [pc, #24]	@ (800d7ec <prvCheckTasksWaitingTermination+0x58>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d1e1      	bne.n	800d79c <prvCheckTasksWaitingTermination+0x8>
        }
    }
#endif /* INCLUDE_vTaskDelete */
}
 800d7d8:	bf00      	nop
 800d7da:	bf00      	nop
 800d7dc:	3708      	adds	r7, #8
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	20000d14 	.word	0x20000d14
 800d7e8:	20000d40 	.word	0x20000d40
 800d7ec:	20000d28 	.word	0x20000d28

0800d7f0 <prvDeleteTCB>:
#endif /* INCLUDE_uxTaskGetStackHighWaterMark */
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelete == 1)

static void prvDeleteTCB(TCB_t * pxTCB) {
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
#elif (tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
    {
        /* The task could have been allocated statically or dynamically, so
        check what was statically allocated before trying to free the
        memory. */
        if (pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB) {
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d108      	bne.n	800d814 <prvDeleteTCB+0x24>
            /* Both the stack and TCB were allocated dynamically, so both
            must be freed. */
            vPortFree(pxTCB->pxStack);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d806:	4618      	mov	r0, r3
 800d808:	f000 ff2a 	bl	800e660 <vPortFree>
            vPortFree(pxTCB);
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 ff27 	bl	800e660 <vPortFree>
            configASSERT(pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB);
            mtCOVERAGE_TEST_MARKER();
        }
    }
#endif                                                 /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d812:	e019      	b.n	800d848 <prvDeleteTCB+0x58>
        } else if (pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY) {
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d103      	bne.n	800d826 <prvDeleteTCB+0x36>
            vPortFree(pxTCB);
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 ff1e 	bl	800e660 <vPortFree>
}
 800d824:	e010      	b.n	800d848 <prvDeleteTCB+0x58>
            configASSERT(pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800d82c:	2b02      	cmp	r3, #2
 800d82e:	d00b      	beq.n	800d848 <prvDeleteTCB+0x58>
    __asm volatile("	mov %0, %1												\n"
 800d830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d834:	f383 8811 	msr	BASEPRI, r3
 800d838:	f3bf 8f6f 	isb	sy
 800d83c:	f3bf 8f4f 	dsb	sy
 800d840:	60fb      	str	r3, [r7, #12]
}
 800d842:	bf00      	nop
 800d844:	bf00      	nop
 800d846:	e7fd      	b.n	800d844 <prvDeleteTCB+0x54>
}
 800d848:	bf00      	nop
 800d84a:	3710      	adds	r7, #16
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}

0800d850 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime(void) {
 800d850:	b480      	push	{r7}
 800d852:	b083      	sub	sp, #12
 800d854:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;

    if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
 800d856:	4b0c      	ldr	r3, [pc, #48]	@ (800d888 <prvResetNextTaskUnblockTime+0x38>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d104      	bne.n	800d86a <prvResetNextTaskUnblockTime+0x1a>
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
        the maximum possible value so it is	extremely unlikely that the
        if( xTickCount >= xNextTaskUnblockTime ) test will pass until
        there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800d860:	4b0a      	ldr	r3, [pc, #40]	@ (800d88c <prvResetNextTaskUnblockTime+0x3c>)
 800d862:	f04f 32ff 	mov.w	r2, #4294967295
 800d866:	601a      	str	r2, [r3, #0]
        which the task at the head of the delayed list should be removed
        from the Blocked state. */
        (pxTCB) = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
        xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    }
}
 800d868:	e008      	b.n	800d87c <prvResetNextTaskUnblockTime+0x2c>
        (pxTCB) = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d86a:	4b07      	ldr	r3, [pc, #28]	@ (800d888 <prvResetNextTaskUnblockTime+0x38>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	68db      	ldr	r3, [r3, #12]
 800d872:	607b      	str	r3, [r7, #4]
        xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	4a04      	ldr	r2, [pc, #16]	@ (800d88c <prvResetNextTaskUnblockTime+0x3c>)
 800d87a:	6013      	str	r3, [r2, #0]
}
 800d87c:	bf00      	nop
 800d87e:	370c      	adds	r7, #12
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr
 800d888:	20000cf8 	.word	0x20000cf8
 800d88c:	20000d60 	.word	0x20000d60

0800d890 <xTaskGetSchedulerState>:
#endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
/*-----------------------------------------------------------*/

#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))

BaseType_t xTaskGetSchedulerState(void) {
 800d890:	b480      	push	{r7}
 800d892:	b083      	sub	sp, #12
 800d894:	af00      	add	r7, sp, #0
    BaseType_t xReturn;

    if (xSchedulerRunning == pdFALSE) {
 800d896:	4b0b      	ldr	r3, [pc, #44]	@ (800d8c4 <xTaskGetSchedulerState+0x34>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d102      	bne.n	800d8a4 <xTaskGetSchedulerState+0x14>
        xReturn = taskSCHEDULER_NOT_STARTED;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	607b      	str	r3, [r7, #4]
 800d8a2:	e008      	b.n	800d8b6 <xTaskGetSchedulerState+0x26>
    } else {
        if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800d8a4:	4b08      	ldr	r3, [pc, #32]	@ (800d8c8 <xTaskGetSchedulerState+0x38>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d102      	bne.n	800d8b2 <xTaskGetSchedulerState+0x22>
            xReturn = taskSCHEDULER_RUNNING;
 800d8ac:	2302      	movs	r3, #2
 800d8ae:	607b      	str	r3, [r7, #4]
 800d8b0:	e001      	b.n	800d8b6 <xTaskGetSchedulerState+0x26>
        } else {
            xReturn = taskSCHEDULER_SUSPENDED;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	607b      	str	r3, [r7, #4]
        }
    }

    return xReturn;
 800d8b6:	687b      	ldr	r3, [r7, #4]
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	370c      	adds	r7, #12
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr
 800d8c4:	20000d4c 	.word	0x20000d4c
 800d8c8:	20000d68 	.word	0x20000d68

0800d8cc <prvAddCurrentTaskToDelayedList>:
}

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely) {
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800d8d6:	4b29      	ldr	r3, [pc, #164]	@ (800d97c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	60fb      	str	r3, [r7, #12]
    }
#endif

    /* Remove the task from the ready list before adding it to the blocked list
    as the same list item is used for both lists. */
    if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
 800d8dc:	4b28      	ldr	r3, [pc, #160]	@ (800d980 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	3304      	adds	r3, #4
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fe fb8a 	bl	800bffc <uxListRemove>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d10b      	bne.n	800d906 <prvAddCurrentTaskToDelayedList+0x3a>
        /* The current task must be in a ready list, so there is no need to
        check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY(pxCurrentTCB->uxPriority,
 800d8ee:	4b24      	ldr	r3, [pc, #144]	@ (800d980 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d8fa:	43da      	mvns	r2, r3
 800d8fc:	4b21      	ldr	r3, [pc, #132]	@ (800d984 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4013      	ands	r3, r2
 800d902:	4a20      	ldr	r2, [pc, #128]	@ (800d984 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d904:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

#if (INCLUDE_vTaskSuspend == 1)
    {
        if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d90c:	d10a      	bne.n	800d924 <prvAddCurrentTaskToDelayedList+0x58>
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d007      	beq.n	800d924 <prvAddCurrentTaskToDelayedList+0x58>
            /* Add the task to the suspended task list instead of a delayed task
            list to ensure it is not woken by a timing event.  It will block
            indefinitely. */
            vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
 800d914:	4b1a      	ldr	r3, [pc, #104]	@ (800d980 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	3304      	adds	r3, #4
 800d91a:	4619      	mov	r1, r3
 800d91c:	481a      	ldr	r0, [pc, #104]	@ (800d988 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d91e:	f7fe fb10 	bl	800bf42 <vListInsertEnd>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        (void)xCanBlockIndefinitely;
    }
#endif /* INCLUDE_vTaskSuspend */
}
 800d922:	e026      	b.n	800d972 <prvAddCurrentTaskToDelayedList+0xa6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800d924:	68fa      	ldr	r2, [r7, #12]
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	4413      	add	r3, r2
 800d92a:	60bb      	str	r3, [r7, #8]
            listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
 800d92c:	4b14      	ldr	r3, [pc, #80]	@ (800d980 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	68ba      	ldr	r2, [r7, #8]
 800d932:	605a      	str	r2, [r3, #4]
            if (xTimeToWake < xConstTickCount) {
 800d934:	68ba      	ldr	r2, [r7, #8]
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d209      	bcs.n	800d950 <prvAddCurrentTaskToDelayedList+0x84>
                vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
 800d93c:	4b13      	ldr	r3, [pc, #76]	@ (800d98c <prvAddCurrentTaskToDelayedList+0xc0>)
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	4b0f      	ldr	r3, [pc, #60]	@ (800d980 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	3304      	adds	r3, #4
 800d946:	4619      	mov	r1, r3
 800d948:	4610      	mov	r0, r2
 800d94a:	f7fe fb1e 	bl	800bf8a <vListInsert>
}
 800d94e:	e010      	b.n	800d972 <prvAddCurrentTaskToDelayedList+0xa6>
                vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
 800d950:	4b0f      	ldr	r3, [pc, #60]	@ (800d990 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	4b0a      	ldr	r3, [pc, #40]	@ (800d980 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	3304      	adds	r3, #4
 800d95a:	4619      	mov	r1, r3
 800d95c:	4610      	mov	r0, r2
 800d95e:	f7fe fb14 	bl	800bf8a <vListInsert>
                if (xTimeToWake < xNextTaskUnblockTime) {
 800d962:	4b0c      	ldr	r3, [pc, #48]	@ (800d994 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	68ba      	ldr	r2, [r7, #8]
 800d968:	429a      	cmp	r2, r3
 800d96a:	d202      	bcs.n	800d972 <prvAddCurrentTaskToDelayedList+0xa6>
                    xNextTaskUnblockTime = xTimeToWake;
 800d96c:	4a09      	ldr	r2, [pc, #36]	@ (800d994 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	6013      	str	r3, [r2, #0]
}
 800d972:	bf00      	nop
 800d974:	3710      	adds	r7, #16
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	20000d44 	.word	0x20000d44
 800d980:	20000c40 	.word	0x20000c40
 800d984:	20000d48 	.word	0x20000d48
 800d988:	20000d2c 	.word	0x20000d2c
 800d98c:	20000cfc 	.word	0x20000cfc
 800d990:	20000cf8 	.word	0x20000cf8
 800d994:	20000d60 	.word	0x20000d60

0800d998 <xTimerCreateTimerTask>:
 */
static void prvInitialiseNewTimer(const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                  const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction, Timer_t * pxNewTimer) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask(void) {
 800d998:	b580      	push	{r7, lr}
 800d99a:	b08a      	sub	sp, #40	@ 0x28
 800d99c:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdFAIL;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	617b      	str	r3, [r7, #20]

    /* This function is called when the scheduler is started if
    configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
    timer service task has been created/initialised.  If timers have already
    been created then the initialisation will already have been performed. */
    prvCheckForValidListAndQueue();
 800d9a2:	f000 fb73 	bl	800e08c <prvCheckForValidListAndQueue>

    if (xTimerQueue != NULL) {
 800d9a6:	4b1d      	ldr	r3, [pc, #116]	@ (800da1c <xTimerCreateTimerTask+0x84>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d021      	beq.n	800d9f2 <xTimerCreateTimerTask+0x5a>
#if (configSUPPORT_STATIC_ALLOCATION == 1)
        {
            StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	60fb      	str	r3, [r7, #12]
            StackType_t * pxTimerTaskStackBuffer = NULL;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	60bb      	str	r3, [r7, #8]
            uint32_t ulTimerTaskStackSize;

            vApplicationGetTimerTaskMemory(&pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize);
 800d9b6:	1d3a      	adds	r2, r7, #4
 800d9b8:	f107 0108 	add.w	r1, r7, #8
 800d9bc:	f107 030c 	add.w	r3, r7, #12
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7f4 f91d 	bl	8001c00 <vApplicationGetTimerTaskMemory>
            xTimerTaskHandle = xTaskCreateStatic(prvTimerTask, configTIMER_SERVICE_TASK_NAME, ulTimerTaskStackSize, NULL, ((UBaseType_t)configTIMER_TASK_PRIORITY) | portPRIVILEGE_BIT, pxTimerTaskStackBuffer, pxTimerTaskTCBBuffer);
 800d9c6:	6879      	ldr	r1, [r7, #4]
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	68fa      	ldr	r2, [r7, #12]
 800d9cc:	9202      	str	r2, [sp, #8]
 800d9ce:	9301      	str	r3, [sp, #4]
 800d9d0:	2303      	movs	r3, #3
 800d9d2:	9300      	str	r3, [sp, #0]
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	460a      	mov	r2, r1
 800d9d8:	4911      	ldr	r1, [pc, #68]	@ (800da20 <xTimerCreateTimerTask+0x88>)
 800d9da:	4812      	ldr	r0, [pc, #72]	@ (800da24 <xTimerCreateTimerTask+0x8c>)
 800d9dc:	f7ff f820 	bl	800ca20 <xTaskCreateStatic>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	4a11      	ldr	r2, [pc, #68]	@ (800da28 <xTimerCreateTimerTask+0x90>)
 800d9e4:	6013      	str	r3, [r2, #0]

            if (xTimerTaskHandle != NULL) {
 800d9e6:	4b10      	ldr	r3, [pc, #64]	@ (800da28 <xTimerCreateTimerTask+0x90>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d001      	beq.n	800d9f2 <xTimerCreateTimerTask+0x5a>
                xReturn = pdPASS;
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	617b      	str	r3, [r7, #20]
#endif /* configSUPPORT_STATIC_ALLOCATION */
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    configASSERT(xReturn);
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d10b      	bne.n	800da10 <xTimerCreateTimerTask+0x78>
    __asm volatile("	mov %0, %1												\n"
 800d9f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9fc:	f383 8811 	msr	BASEPRI, r3
 800da00:	f3bf 8f6f 	isb	sy
 800da04:	f3bf 8f4f 	dsb	sy
 800da08:	613b      	str	r3, [r7, #16]
}
 800da0a:	bf00      	nop
 800da0c:	bf00      	nop
 800da0e:	e7fd      	b.n	800da0c <xTimerCreateTimerTask+0x74>
    return xReturn;
 800da10:	697b      	ldr	r3, [r7, #20]
}
 800da12:	4618      	mov	r0, r3
 800da14:	3718      	adds	r7, #24
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	20000d9c 	.word	0x20000d9c
 800da20:	08011d48 	.word	0x08011d48
 800da24:	0800dc5d 	.word	0x0800dc5d
 800da28:	20000da0 	.word	0x20000da0

0800da2c <xTimerCreate>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)

TimerHandle_t xTimerCreate(const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                           const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction) {
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b088      	sub	sp, #32
 800da30:	af02      	add	r7, sp, #8
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	607a      	str	r2, [r7, #4]
 800da38:	603b      	str	r3, [r7, #0]
    Timer_t * pxNewTimer;

    pxNewTimer = (Timer_t *)pvPortMalloc(sizeof(Timer_t)); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800da3a:	2028      	movs	r0, #40	@ 0x28
 800da3c:	f000 fdfe 	bl	800e63c <pvPortMalloc>
 800da40:	6178      	str	r0, [r7, #20]

    if (pxNewTimer != NULL) {
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d00d      	beq.n	800da64 <xTimerCreate+0x38>
        /* Status is thus far zero as the timer is not created statically
        and has not been started.  The auto-reload bit may get set in
        prvInitialiseNewTimer. */
        pxNewTimer->ucStatus = 0x00;
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	2200      	movs	r2, #0
 800da4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        prvInitialiseNewTimer(pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer);
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	9301      	str	r3, [sp, #4]
 800da54:	6a3b      	ldr	r3, [r7, #32]
 800da56:	9300      	str	r3, [sp, #0]
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	687a      	ldr	r2, [r7, #4]
 800da5c:	68b9      	ldr	r1, [r7, #8]
 800da5e:	68f8      	ldr	r0, [r7, #12]
 800da60:	f000 f805 	bl	800da6e <prvInitialiseNewTimer>
    }

    return pxNewTimer;
 800da64:	697b      	ldr	r3, [r7, #20]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3718      	adds	r7, #24
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}

0800da6e <prvInitialiseNewTimer>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTimer(const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                  const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction, Timer_t * pxNewTimer) {
 800da6e:	b580      	push	{r7, lr}
 800da70:	b086      	sub	sp, #24
 800da72:	af00      	add	r7, sp, #0
 800da74:	60f8      	str	r0, [r7, #12]
 800da76:	60b9      	str	r1, [r7, #8]
 800da78:	607a      	str	r2, [r7, #4]
 800da7a:	603b      	str	r3, [r7, #0]
    /* 0 is not a valid value for xTimerPeriodInTicks. */
    configASSERT((xTimerPeriodInTicks > 0));
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d10b      	bne.n	800da9a <prvInitialiseNewTimer+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800da82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da86:	f383 8811 	msr	BASEPRI, r3
 800da8a:	f3bf 8f6f 	isb	sy
 800da8e:	f3bf 8f4f 	dsb	sy
 800da92:	617b      	str	r3, [r7, #20]
}
 800da94:	bf00      	nop
 800da96:	bf00      	nop
 800da98:	e7fd      	b.n	800da96 <prvInitialiseNewTimer+0x28>

    if (pxNewTimer != NULL) {
 800da9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d01e      	beq.n	800dade <prvInitialiseNewTimer+0x70>
        /* Ensure the infrastructure used by the timer service task has been
        created/initialised. */
        prvCheckForValidListAndQueue();
 800daa0:	f000 faf4 	bl	800e08c <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
        parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 800daa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daa6:	68fa      	ldr	r2, [r7, #12]
 800daa8:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800daaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daac:	68ba      	ldr	r2, [r7, #8]
 800daae:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 800dab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dab2:	683a      	ldr	r2, [r7, #0]
 800dab4:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800dab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dab8:	6a3a      	ldr	r2, [r7, #32]
 800daba:	621a      	str	r2, [r3, #32]
        vListInitialiseItem(&(pxNewTimer->xTimerListItem));
 800dabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dabe:	3304      	adds	r3, #4
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7fe fa31 	bl	800bf28 <vListInitialiseItem>
        if (uxAutoReload != pdFALSE) {
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d008      	beq.n	800dade <prvInitialiseNewTimer+0x70>
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800dacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dace:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dad2:	f043 0304 	orr.w	r3, r3, #4
 800dad6:	b2da      	uxtb	r2, r3
 800dad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dada:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }
        traceTIMER_CREATE(pxNewTimer);
    }
}
 800dade:	bf00      	nop
 800dae0:	3718      	adds	r7, #24
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
	...

0800dae8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand(TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait) {
 800dae8:	b580      	push	{r7, lr}
 800daea:	b08a      	sub	sp, #40	@ 0x28
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	607a      	str	r2, [r7, #4]
 800daf4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdFAIL;
 800daf6:	2300      	movs	r3, #0
 800daf8:	627b      	str	r3, [r7, #36]	@ 0x24
    DaemonTaskMessage_t xMessage;

    configASSERT(xTimer);
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d10b      	bne.n	800db18 <xTimerGenericCommand+0x30>
    __asm volatile("	mov %0, %1												\n"
 800db00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db04:	f383 8811 	msr	BASEPRI, r3
 800db08:	f3bf 8f6f 	isb	sy
 800db0c:	f3bf 8f4f 	dsb	sy
 800db10:	623b      	str	r3, [r7, #32]
}
 800db12:	bf00      	nop
 800db14:	bf00      	nop
 800db16:	e7fd      	b.n	800db14 <xTimerGenericCommand+0x2c>

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if (xTimerQueue != NULL) {
 800db18:	4b19      	ldr	r3, [pc, #100]	@ (800db80 <xTimerGenericCommand+0x98>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d02a      	beq.n	800db76 <xTimerGenericCommand+0x8e>
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	617b      	str	r3, [r7, #20]
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	61bb      	str	r3, [r7, #24]
        xMessage.u.xTimerParameters.pxTimer = xTimer;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	61fb      	str	r3, [r7, #28]

        if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	2b05      	cmp	r3, #5
 800db30:	dc18      	bgt.n	800db64 <xTimerGenericCommand+0x7c>
            if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
 800db32:	f7ff fead 	bl	800d890 <xTaskGetSchedulerState>
 800db36:	4603      	mov	r3, r0
 800db38:	2b02      	cmp	r3, #2
 800db3a:	d109      	bne.n	800db50 <xTimerGenericCommand+0x68>
                xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
 800db3c:	4b10      	ldr	r3, [pc, #64]	@ (800db80 <xTimerGenericCommand+0x98>)
 800db3e:	6818      	ldr	r0, [r3, #0]
 800db40:	f107 0114 	add.w	r1, r7, #20
 800db44:	2300      	movs	r3, #0
 800db46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db48:	f7fe fb88 	bl	800c25c <xQueueGenericSend>
 800db4c:	6278      	str	r0, [r7, #36]	@ 0x24
 800db4e:	e012      	b.n	800db76 <xTimerGenericCommand+0x8e>
            } else {
                xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
 800db50:	4b0b      	ldr	r3, [pc, #44]	@ (800db80 <xTimerGenericCommand+0x98>)
 800db52:	6818      	ldr	r0, [r3, #0]
 800db54:	f107 0114 	add.w	r1, r7, #20
 800db58:	2300      	movs	r3, #0
 800db5a:	2200      	movs	r2, #0
 800db5c:	f7fe fb7e 	bl	800c25c <xQueueGenericSend>
 800db60:	6278      	str	r0, [r7, #36]	@ 0x24
 800db62:	e008      	b.n	800db76 <xTimerGenericCommand+0x8e>
            }
        } else {
            xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
 800db64:	4b06      	ldr	r3, [pc, #24]	@ (800db80 <xTimerGenericCommand+0x98>)
 800db66:	6818      	ldr	r0, [r3, #0]
 800db68:	f107 0114 	add.w	r1, r7, #20
 800db6c:	2300      	movs	r3, #0
 800db6e:	683a      	ldr	r2, [r7, #0]
 800db70:	f7fe fc76 	bl	800c460 <xQueueGenericSendFromISR>
 800db74:	6278      	str	r0, [r7, #36]	@ 0x24
        traceTIMER_COMMAND_SEND(xTimer, xCommandID, xOptionalValue, xReturn);
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
 800db76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3728      	adds	r7, #40	@ 0x28
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}
 800db80:	20000d9c 	.word	0x20000d9c

0800db84 <xTimerGetPeriod>:
    configASSERT((xTimerTaskHandle != NULL));
    return xTimerTaskHandle;
}
/*-----------------------------------------------------------*/

TickType_t xTimerGetPeriod(TimerHandle_t xTimer) {
 800db84:	b480      	push	{r7}
 800db86:	b085      	sub	sp, #20
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
    Timer_t * pxTimer = xTimer;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	60fb      	str	r3, [r7, #12]

    configASSERT(xTimer);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d10b      	bne.n	800dbae <xTimerGetPeriod+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800db96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db9a:	f383 8811 	msr	BASEPRI, r3
 800db9e:	f3bf 8f6f 	isb	sy
 800dba2:	f3bf 8f4f 	dsb	sy
 800dba6:	60bb      	str	r3, [r7, #8]
}
 800dba8:	bf00      	nop
 800dbaa:	bf00      	nop
 800dbac:	e7fd      	b.n	800dbaa <xTimerGetPeriod+0x26>
    return pxTimer->xTimerPeriodInTicks;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	699b      	ldr	r3, [r3, #24]
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3714      	adds	r7, #20
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbc:	4770      	bx	lr
	...

0800dbc0 <prvProcessExpiredTimer>:
    configASSERT(xTimer);
    return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer(const TickType_t xNextExpireTime, const TickType_t xTimeNow) {
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b088      	sub	sp, #32
 800dbc4:	af02      	add	r7, sp, #8
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	6039      	str	r1, [r7, #0]
    BaseType_t xResult;
    Timer_t * const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(
 800dbca:	4b23      	ldr	r3, [pc, #140]	@ (800dc58 <prvProcessExpiredTimer+0x98>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	68db      	ldr	r3, [r3, #12]
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    (void)uxListRemove(&(pxTimer->xTimerListItem));
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	3304      	adds	r3, #4
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7fe fa0f 	bl	800bffc <uxListRemove>
    traceTIMER_EXPIRED(pxTimer);

    /* If the timer is an auto-reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if ((pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD) != 0) {
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dbe4:	f003 0304 	and.w	r3, r3, #4
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d023      	beq.n	800dc34 <prvProcessExpiredTimer+0x74>
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if (prvInsertTimerInActiveList(pxTimer, (xNextExpireTime + pxTimer->xTimerPeriodInTicks), xTimeNow, xNextExpireTime) != pdFALSE) {
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	699a      	ldr	r2, [r3, #24]
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	18d1      	adds	r1, r2, r3
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	683a      	ldr	r2, [r7, #0]
 800dbf8:	6978      	ldr	r0, [r7, #20]
 800dbfa:	f000 f8d5 	bl	800dda8 <prvInsertTimerInActiveList>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d020      	beq.n	800dc46 <prvProcessExpiredTimer+0x86>
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
 800dc04:	2300      	movs	r3, #0
 800dc06:	9300      	str	r3, [sp, #0]
 800dc08:	2300      	movs	r3, #0
 800dc0a:	687a      	ldr	r2, [r7, #4]
 800dc0c:	2100      	movs	r1, #0
 800dc0e:	6978      	ldr	r0, [r7, #20]
 800dc10:	f7ff ff6a 	bl	800dae8 <xTimerGenericCommand>
 800dc14:	6138      	str	r0, [r7, #16]
            configASSERT(xResult);
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d114      	bne.n	800dc46 <prvProcessExpiredTimer+0x86>
    __asm volatile("	mov %0, %1												\n"
 800dc1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc20:	f383 8811 	msr	BASEPRI, r3
 800dc24:	f3bf 8f6f 	isb	sy
 800dc28:	f3bf 8f4f 	dsb	sy
 800dc2c:	60fb      	str	r3, [r7, #12]
}
 800dc2e:	bf00      	nop
 800dc30:	bf00      	nop
 800dc32:	e7fd      	b.n	800dc30 <prvProcessExpiredTimer+0x70>
            (void)xResult;
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    } else {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dc3a:	f023 0301 	bic.w	r3, r3, #1
 800dc3e:	b2da      	uxtb	r2, r3
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	6a1b      	ldr	r3, [r3, #32]
 800dc4a:	6978      	ldr	r0, [r7, #20]
 800dc4c:	4798      	blx	r3
}
 800dc4e:	bf00      	nop
 800dc50:	3718      	adds	r7, #24
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	20000d94 	.word	0x20000d94

0800dc5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION(prvTimerTask, pvParameters) {
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b084      	sub	sp, #16
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */

    for (;;) {
        /* Query the timers list to see if it contains any timers, and if so,
        obtain the time at which the next timer will expire. */
        xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
 800dc64:	f107 0308 	add.w	r3, r7, #8
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f000 f859 	bl	800dd20 <prvGetNextExpireTime>
 800dc6e:	60f8      	str	r0, [r7, #12]

        /* If a timer has expired, process it.  Otherwise, block this task
        until either a timer does expire, or a command is received. */
        prvProcessTimerOrBlockTask(xNextExpireTime, xListWasEmpty);
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	4619      	mov	r1, r3
 800dc74:	68f8      	ldr	r0, [r7, #12]
 800dc76:	f000 f805 	bl	800dc84 <prvProcessTimerOrBlockTask>

        /* Empty the command queue. */
        prvProcessReceivedCommands();
 800dc7a:	f000 f8d7 	bl	800de2c <prvProcessReceivedCommands>
        xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
 800dc7e:	bf00      	nop
 800dc80:	e7f0      	b.n	800dc64 <prvTimerTask+0x8>
	...

0800dc84 <prvProcessTimerOrBlockTask>:
    }
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask(const TickType_t xNextExpireTime, BaseType_t xListWasEmpty) {
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b084      	sub	sp, #16
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeNow;
    BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
 800dc8e:	f7ff fa1b 	bl	800d0c8 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
 800dc92:	f107 0308 	add.w	r3, r7, #8
 800dc96:	4618      	mov	r0, r3
 800dc98:	f000 f866 	bl	800dd68 <prvSampleTimeNow>
 800dc9c:	60f8      	str	r0, [r7, #12]
        if (xTimerListsWereSwitched == pdFALSE) {
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d130      	bne.n	800dd06 <prvProcessTimerOrBlockTask+0x82>
            /* The tick count has not overflowed, has the timer expired? */
            if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d10a      	bne.n	800dcc0 <prvProcessTimerOrBlockTask+0x3c>
 800dcaa:	687a      	ldr	r2, [r7, #4]
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d806      	bhi.n	800dcc0 <prvProcessTimerOrBlockTask+0x3c>
                (void)xTaskResumeAll();
 800dcb2:	f7ff fa17 	bl	800d0e4 <xTaskResumeAll>
                prvProcessExpiredTimer(xNextExpireTime, xTimeNow);
 800dcb6:	68f9      	ldr	r1, [r7, #12]
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f7ff ff81 	bl	800dbc0 <prvProcessExpiredTimer>
            }
        } else {
            (void)xTaskResumeAll();
        }
    }
}
 800dcbe:	e024      	b.n	800dd0a <prvProcessTimerOrBlockTask+0x86>
                if (xListWasEmpty != pdFALSE) {
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d008      	beq.n	800dcd8 <prvProcessTimerOrBlockTask+0x54>
                    xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
 800dcc6:	4b13      	ldr	r3, [pc, #76]	@ (800dd14 <prvProcessTimerOrBlockTask+0x90>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d101      	bne.n	800dcd4 <prvProcessTimerOrBlockTask+0x50>
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	e000      	b.n	800dcd6 <prvProcessTimerOrBlockTask+0x52>
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	603b      	str	r3, [r7, #0]
                vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
 800dcd8:	4b0f      	ldr	r3, [pc, #60]	@ (800dd18 <prvProcessTimerOrBlockTask+0x94>)
 800dcda:	6818      	ldr	r0, [r3, #0]
 800dcdc:	687a      	ldr	r2, [r7, #4]
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	1ad3      	subs	r3, r2, r3
 800dce2:	683a      	ldr	r2, [r7, #0]
 800dce4:	4619      	mov	r1, r3
 800dce6:	f7fe fe67 	bl	800c9b8 <vQueueWaitForMessageRestricted>
                if (xTaskResumeAll() == pdFALSE) {
 800dcea:	f7ff f9fb 	bl	800d0e4 <xTaskResumeAll>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d10a      	bne.n	800dd0a <prvProcessTimerOrBlockTask+0x86>
                    portYIELD_WITHIN_API();
 800dcf4:	4b09      	ldr	r3, [pc, #36]	@ (800dd1c <prvProcessTimerOrBlockTask+0x98>)
 800dcf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcfa:	601a      	str	r2, [r3, #0]
 800dcfc:	f3bf 8f4f 	dsb	sy
 800dd00:	f3bf 8f6f 	isb	sy
}
 800dd04:	e001      	b.n	800dd0a <prvProcessTimerOrBlockTask+0x86>
            (void)xTaskResumeAll();
 800dd06:	f7ff f9ed 	bl	800d0e4 <xTaskResumeAll>
}
 800dd0a:	bf00      	nop
 800dd0c:	3710      	adds	r7, #16
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	20000d98 	.word	0x20000d98
 800dd18:	20000d9c 	.word	0x20000d9c
 800dd1c:	e000ed04 	.word	0xe000ed04

0800dd20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime(BaseType_t * const pxListWasEmpty) {
 800dd20:	b480      	push	{r7}
 800dd22:	b085      	sub	sp, #20
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
 800dd28:	4b0e      	ldr	r3, [pc, #56]	@ (800dd64 <prvGetNextExpireTime+0x44>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d101      	bne.n	800dd36 <prvGetNextExpireTime+0x16>
 800dd32:	2201      	movs	r2, #1
 800dd34:	e000      	b.n	800dd38 <prvGetNextExpireTime+0x18>
 800dd36:	2200      	movs	r2, #0
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	601a      	str	r2, [r3, #0]
    if (*pxListWasEmpty == pdFALSE) {
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d105      	bne.n	800dd50 <prvGetNextExpireTime+0x30>
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
 800dd44:	4b07      	ldr	r3, [pc, #28]	@ (800dd64 <prvGetNextExpireTime+0x44>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	68db      	ldr	r3, [r3, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	60fb      	str	r3, [r7, #12]
 800dd4e:	e001      	b.n	800dd54 <prvGetNextExpireTime+0x34>
    } else {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = (TickType_t)0U;
 800dd50:	2300      	movs	r3, #0
 800dd52:	60fb      	str	r3, [r7, #12]
    }

    return xNextExpireTime;
 800dd54:	68fb      	ldr	r3, [r7, #12]
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3714      	adds	r7, #20
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd60:	4770      	bx	lr
 800dd62:	bf00      	nop
 800dd64:	20000d94 	.word	0x20000d94

0800dd68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow(BaseType_t * const pxTimerListsWereSwitched) {
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b084      	sub	sp, #16
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
    TickType_t xTimeNow;
    PRIVILEGED_DATA static TickType_t xLastTime = (TickType_t)0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
 800dd70:	f7ff fa56 	bl	800d220 <xTaskGetTickCount>
 800dd74:	60f8      	str	r0, [r7, #12]

    if (xTimeNow < xLastTime) {
 800dd76:	4b0b      	ldr	r3, [pc, #44]	@ (800dda4 <prvSampleTimeNow+0x3c>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	68fa      	ldr	r2, [r7, #12]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d205      	bcs.n	800dd8c <prvSampleTimeNow+0x24>
        prvSwitchTimerLists();
 800dd80:	f000 f91e 	bl	800dfc0 <prvSwitchTimerLists>
        *pxTimerListsWereSwitched = pdTRUE;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2201      	movs	r2, #1
 800dd88:	601a      	str	r2, [r3, #0]
 800dd8a:	e002      	b.n	800dd92 <prvSampleTimeNow+0x2a>
    } else {
        *pxTimerListsWereSwitched = pdFALSE;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	601a      	str	r2, [r3, #0]
    }

    xLastTime = xTimeNow;
 800dd92:	4a04      	ldr	r2, [pc, #16]	@ (800dda4 <prvSampleTimeNow+0x3c>)
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	6013      	str	r3, [r2, #0]

    return xTimeNow;
 800dd98:	68fb      	ldr	r3, [r7, #12]
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3710      	adds	r7, #16
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	20000da4 	.word	0x20000da4

0800dda8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime) {
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b086      	sub	sp, #24
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	607a      	str	r2, [r7, #4]
 800ddb4:	603b      	str	r3, [r7, #0]
    BaseType_t xProcessTimerNow = pdFALSE;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	617b      	str	r3, [r7, #20]

    listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	68ba      	ldr	r2, [r7, #8]
 800ddbe:	605a      	str	r2, [r3, #4]
    listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	68fa      	ldr	r2, [r7, #12]
 800ddc4:	611a      	str	r2, [r3, #16]

    if (xNextExpiryTime <= xTimeNow) {
 800ddc6:	68ba      	ldr	r2, [r7, #8]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d812      	bhi.n	800ddf4 <prvInsertTimerInActiveList+0x4c>
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if (((TickType_t)(xTimeNow - xCommandTime)) >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddce:	687a      	ldr	r2, [r7, #4]
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	1ad2      	subs	r2, r2, r3
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	699b      	ldr	r3, [r3, #24]
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d302      	bcc.n	800dde2 <prvInsertTimerInActiveList+0x3a>
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
 800dddc:	2301      	movs	r3, #1
 800ddde:	617b      	str	r3, [r7, #20]
 800dde0:	e01b      	b.n	800de1a <prvInsertTimerInActiveList+0x72>
        } else {
            vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
 800dde2:	4b10      	ldr	r3, [pc, #64]	@ (800de24 <prvInsertTimerInActiveList+0x7c>)
 800dde4:	681a      	ldr	r2, [r3, #0]
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	3304      	adds	r3, #4
 800ddea:	4619      	mov	r1, r3
 800ddec:	4610      	mov	r0, r2
 800ddee:	f7fe f8cc 	bl	800bf8a <vListInsert>
 800ddf2:	e012      	b.n	800de1a <prvInsertTimerInActiveList+0x72>
        }
    } else {
        if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
 800ddf4:	687a      	ldr	r2, [r7, #4]
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d206      	bcs.n	800de0a <prvInsertTimerInActiveList+0x62>
 800ddfc:	68ba      	ldr	r2, [r7, #8]
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	429a      	cmp	r2, r3
 800de02:	d302      	bcc.n	800de0a <prvInsertTimerInActiveList+0x62>
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
 800de04:	2301      	movs	r3, #1
 800de06:	617b      	str	r3, [r7, #20]
 800de08:	e007      	b.n	800de1a <prvInsertTimerInActiveList+0x72>
        } else {
            vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
 800de0a:	4b07      	ldr	r3, [pc, #28]	@ (800de28 <prvInsertTimerInActiveList+0x80>)
 800de0c:	681a      	ldr	r2, [r3, #0]
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	3304      	adds	r3, #4
 800de12:	4619      	mov	r1, r3
 800de14:	4610      	mov	r0, r2
 800de16:	f7fe f8b8 	bl	800bf8a <vListInsert>
        }
    }

    return xProcessTimerNow;
 800de1a:	697b      	ldr	r3, [r7, #20]
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3718      	adds	r7, #24
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}
 800de24:	20000d98 	.word	0x20000d98
 800de28:	20000d94 	.word	0x20000d94

0800de2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void prvProcessReceivedCommands(void) {
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b08c      	sub	sp, #48	@ 0x30
 800de30:	af02      	add	r7, sp, #8
    DaemonTaskMessage_t xMessage;
    Timer_t * pxTimer;
    BaseType_t xTimerListsWereSwitched, xResult;
    TickType_t xTimeNow;

    while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY) != pdFAIL) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800de32:	e0b2      	b.n	800df9a <prvProcessReceivedCommands+0x16e>
        }
#endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if (xMessage.xMessageID >= (BaseType_t)0) {
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	2b00      	cmp	r3, #0
 800de38:	f2c0 80af 	blt.w	800df9a <prvProcessReceivedCommands+0x16e>
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	627b      	str	r3, [r7, #36]	@ 0x24

            if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem)) == pdFALSE) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800de40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de42:	695b      	ldr	r3, [r3, #20]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d004      	beq.n	800de52 <prvProcessReceivedCommands+0x26>
            {
                /* The timer is in a list, remove it. */
                (void)uxListRemove(&(pxTimer->xTimerListItem));
 800de48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de4a:	3304      	adds	r3, #4
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7fe f8d5 	bl	800bffc <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
 800de52:	1d3b      	adds	r3, r7, #4
 800de54:	4618      	mov	r0, r3
 800de56:	f7ff ff87 	bl	800dd68 <prvSampleTimeNow>
 800de5a:	6238      	str	r0, [r7, #32]

            switch (xMessage.xMessageID) {
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	2b09      	cmp	r3, #9
 800de60:	f200 8098 	bhi.w	800df94 <prvProcessReceivedCommands+0x168>
 800de64:	a201      	add	r2, pc, #4	@ (adr r2, 800de6c <prvProcessReceivedCommands+0x40>)
 800de66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de6a:	bf00      	nop
 800de6c:	0800de95 	.word	0x0800de95
 800de70:	0800de95 	.word	0x0800de95
 800de74:	0800de95 	.word	0x0800de95
 800de78:	0800df0b 	.word	0x0800df0b
 800de7c:	0800df1f 	.word	0x0800df1f
 800de80:	0800df6b 	.word	0x0800df6b
 800de84:	0800de95 	.word	0x0800de95
 800de88:	0800de95 	.word	0x0800de95
 800de8c:	0800df0b 	.word	0x0800df0b
 800de90:	0800df1f 	.word	0x0800df1f
            case tmrCOMMAND_START_FROM_ISR:
            case tmrCOMMAND_RESET:
            case tmrCOMMAND_RESET_FROM_ISR:
            case tmrCOMMAND_START_DONT_TRACE:
                /* Start or restart a timer. */
                pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de96:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800de9a:	f043 0301 	orr.w	r3, r3, #1
 800de9e:	b2da      	uxtb	r2, r3
 800dea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                if (prvInsertTimerInActiveList(pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue) != pdFALSE) {
 800dea6:	68fa      	ldr	r2, [r7, #12]
 800dea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deaa:	699b      	ldr	r3, [r3, #24]
 800deac:	18d1      	adds	r1, r2, r3
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	6a3a      	ldr	r2, [r7, #32]
 800deb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800deb4:	f7ff ff78 	bl	800dda8 <prvInsertTimerInActiveList>
 800deb8:	4603      	mov	r3, r0
 800deba:	2b00      	cmp	r3, #0
 800debc:	d06c      	beq.n	800df98 <prvProcessReceivedCommands+0x16c>
                    /* The timer expired before it was added to the active
                    timer list.  Process it now. */
                    pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
 800debe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dec0:	6a1b      	ldr	r3, [r3, #32]
 800dec2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dec4:	4798      	blx	r3
                    traceTIMER_EXPIRED(pxTimer);

                    if ((pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD) != 0) {
 800dec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dec8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800decc:	f003 0304 	and.w	r3, r3, #4
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d061      	beq.n	800df98 <prvProcessReceivedCommands+0x16c>
                        xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY);
 800ded4:	68fa      	ldr	r2, [r7, #12]
 800ded6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ded8:	699b      	ldr	r3, [r3, #24]
 800deda:	441a      	add	r2, r3
 800dedc:	2300      	movs	r3, #0
 800dede:	9300      	str	r3, [sp, #0]
 800dee0:	2300      	movs	r3, #0
 800dee2:	2100      	movs	r1, #0
 800dee4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dee6:	f7ff fdff 	bl	800dae8 <xTimerGenericCommand>
 800deea:	61f8      	str	r0, [r7, #28]
                        configASSERT(xResult);
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d152      	bne.n	800df98 <prvProcessReceivedCommands+0x16c>
    __asm volatile("	mov %0, %1												\n"
 800def2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800def6:	f383 8811 	msr	BASEPRI, r3
 800defa:	f3bf 8f6f 	isb	sy
 800defe:	f3bf 8f4f 	dsb	sy
 800df02:	61bb      	str	r3, [r7, #24]
}
 800df04:	bf00      	nop
 800df06:	bf00      	nop
 800df08:	e7fd      	b.n	800df06 <prvProcessReceivedCommands+0xda>
                break;

            case tmrCOMMAND_STOP:
            case tmrCOMMAND_STOP_FROM_ISR:
                /* The timer has already been removed from the active list. */
                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800df10:	f023 0301 	bic.w	r3, r3, #1
 800df14:	b2da      	uxtb	r2, r3
 800df16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                break;
 800df1c:	e03d      	b.n	800df9a <prvProcessReceivedCommands+0x16e>

            case tmrCOMMAND_CHANGE_PERIOD:
            case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800df1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800df24:	f043 0301 	orr.w	r3, r3, #1
 800df28:	b2da      	uxtb	r2, r3
 800df2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800df30:	68fa      	ldr	r2, [r7, #12]
 800df32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df34:	619a      	str	r2, [r3, #24]
                configASSERT((pxTimer->xTimerPeriodInTicks > 0));
 800df36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df38:	699b      	ldr	r3, [r3, #24]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d10b      	bne.n	800df56 <prvProcessReceivedCommands+0x12a>
    __asm volatile("	mov %0, %1												\n"
 800df3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df42:	f383 8811 	msr	BASEPRI, r3
 800df46:	f3bf 8f6f 	isb	sy
 800df4a:	f3bf 8f4f 	dsb	sy
 800df4e:	617b      	str	r3, [r7, #20]
}
 800df50:	bf00      	nop
 800df52:	bf00      	nop
 800df54:	e7fd      	b.n	800df52 <prvProcessReceivedCommands+0x126>
                be longer or shorter than the old one.  The command time is
                therefore set to the current time, and as the period cannot
                be zero the next expiry time can only be in the future,
                meaning (unlike for the xTimerStart() case above) there is
                no fail case that needs to be handled here. */
                (void)prvInsertTimerInActiveList(pxTimer, (xTimeNow + pxTimer->xTimerPeriodInTicks), xTimeNow, xTimeNow);
 800df56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df58:	699a      	ldr	r2, [r3, #24]
 800df5a:	6a3b      	ldr	r3, [r7, #32]
 800df5c:	18d1      	adds	r1, r2, r3
 800df5e:	6a3b      	ldr	r3, [r7, #32]
 800df60:	6a3a      	ldr	r2, [r7, #32]
 800df62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800df64:	f7ff ff20 	bl	800dda8 <prvInsertTimerInActiveList>
                break;
 800df68:	e017      	b.n	800df9a <prvProcessReceivedCommands+0x16e>
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            {
                /* The timer has already been removed from the active list,
                just free up the memory if the memory was dynamically
                allocated. */
                if ((pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED) == (uint8_t)0) {
 800df6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800df70:	f003 0302 	and.w	r3, r3, #2
 800df74:	2b00      	cmp	r3, #0
 800df76:	d103      	bne.n	800df80 <prvProcessReceivedCommands+0x154>
                    vPortFree(pxTimer);
 800df78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800df7a:	f000 fb71 	bl	800e660 <vPortFree>
                no need to free the memory - just mark the timer as
                "not active". */
                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
            }
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
            break;
 800df7e:	e00c      	b.n	800df9a <prvProcessReceivedCommands+0x16e>
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800df86:	f023 0301 	bic.w	r3, r3, #1
 800df8a:	b2da      	uxtb	r2, r3
 800df8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 800df92:	e002      	b.n	800df9a <prvProcessReceivedCommands+0x16e>

            default:
                /* Don't expect to get here. */
                break;
 800df94:	bf00      	nop
 800df96:	e000      	b.n	800df9a <prvProcessReceivedCommands+0x16e>
                break;
 800df98:	bf00      	nop
    while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY) != pdFAIL) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800df9a:	4b08      	ldr	r3, [pc, #32]	@ (800dfbc <prvProcessReceivedCommands+0x190>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f107 0108 	add.w	r1, r7, #8
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f7fe faf9 	bl	800c59c <xQueueReceive>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	f47f af41 	bne.w	800de34 <prvProcessReceivedCommands+0x8>
            }
        }
    }
}
 800dfb2:	bf00      	nop
 800dfb4:	bf00      	nop
 800dfb6:	3728      	adds	r7, #40	@ 0x28
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	20000d9c 	.word	0x20000d9c

0800dfc0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists(void) {
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b088      	sub	sp, #32
 800dfc4:	af02      	add	r7, sp, #8

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
 800dfc6:	e049      	b.n	800e05c <prvSwitchTimerLists+0x9c>
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
 800dfc8:	4b2e      	ldr	r3, [pc, #184]	@ (800e084 <prvSwitchTimerLists+0xc4>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	68db      	ldr	r3, [r3, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	613b      	str	r3, [r7, #16]

        /* Remove the timer from the list. */
        pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(
 800dfd2:	4b2c      	ldr	r3, [pc, #176]	@ (800e084 <prvSwitchTimerLists+0xc4>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	68db      	ldr	r3, [r3, #12]
 800dfd8:	68db      	ldr	r3, [r3, #12]
 800dfda:	60fb      	str	r3, [r7, #12]
            pxCurrentTimerList); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
        (void)uxListRemove(&(pxTimer->xTimerListItem));
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	3304      	adds	r3, #4
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f7fe f80b 	bl	800bffc <uxListRemove>
        traceTIMER_EXPIRED(pxTimer);

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	6a1b      	ldr	r3, [r3, #32]
 800dfea:	68f8      	ldr	r0, [r7, #12]
 800dfec:	4798      	blx	r3

        if ((pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD) != 0) {
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dff4:	f003 0304 	and.w	r3, r3, #4
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d02f      	beq.n	800e05c <prvSwitchTimerLists+0x9c>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	699b      	ldr	r3, [r3, #24]
 800e000:	693a      	ldr	r2, [r7, #16]
 800e002:	4413      	add	r3, r2
 800e004:	60bb      	str	r3, [r7, #8]
            if (xReloadTime > xNextExpireTime) {
 800e006:	68ba      	ldr	r2, [r7, #8]
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d90e      	bls.n	800e02c <prvSwitchTimerLists+0x6c>
                listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	68ba      	ldr	r2, [r7, #8]
 800e012:	605a      	str	r2, [r3, #4]
                listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	68fa      	ldr	r2, [r7, #12]
 800e018:	611a      	str	r2, [r3, #16]
                vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
 800e01a:	4b1a      	ldr	r3, [pc, #104]	@ (800e084 <prvSwitchTimerLists+0xc4>)
 800e01c:	681a      	ldr	r2, [r3, #0]
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	3304      	adds	r3, #4
 800e022:	4619      	mov	r1, r3
 800e024:	4610      	mov	r0, r2
 800e026:	f7fd ffb0 	bl	800bf8a <vListInsert>
 800e02a:	e017      	b.n	800e05c <prvSwitchTimerLists+0x9c>
            } else {
                xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
 800e02c:	2300      	movs	r3, #0
 800e02e:	9300      	str	r3, [sp, #0]
 800e030:	2300      	movs	r3, #0
 800e032:	693a      	ldr	r2, [r7, #16]
 800e034:	2100      	movs	r1, #0
 800e036:	68f8      	ldr	r0, [r7, #12]
 800e038:	f7ff fd56 	bl	800dae8 <xTimerGenericCommand>
 800e03c:	6078      	str	r0, [r7, #4]
                configASSERT(xResult);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d10b      	bne.n	800e05c <prvSwitchTimerLists+0x9c>
    __asm volatile("	mov %0, %1												\n"
 800e044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e048:	f383 8811 	msr	BASEPRI, r3
 800e04c:	f3bf 8f6f 	isb	sy
 800e050:	f3bf 8f4f 	dsb	sy
 800e054:	603b      	str	r3, [r7, #0]
}
 800e056:	bf00      	nop
 800e058:	bf00      	nop
 800e05a:	e7fd      	b.n	800e058 <prvSwitchTimerLists+0x98>
    while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
 800e05c:	4b09      	ldr	r3, [pc, #36]	@ (800e084 <prvSwitchTimerLists+0xc4>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d1b0      	bne.n	800dfc8 <prvSwitchTimerLists+0x8>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
 800e066:	4b07      	ldr	r3, [pc, #28]	@ (800e084 <prvSwitchTimerLists+0xc4>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	617b      	str	r3, [r7, #20]
    pxCurrentTimerList = pxOverflowTimerList;
 800e06c:	4b06      	ldr	r3, [pc, #24]	@ (800e088 <prvSwitchTimerLists+0xc8>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	4a04      	ldr	r2, [pc, #16]	@ (800e084 <prvSwitchTimerLists+0xc4>)
 800e072:	6013      	str	r3, [r2, #0]
    pxOverflowTimerList = pxTemp;
 800e074:	4a04      	ldr	r2, [pc, #16]	@ (800e088 <prvSwitchTimerLists+0xc8>)
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	6013      	str	r3, [r2, #0]
}
 800e07a:	bf00      	nop
 800e07c:	3718      	adds	r7, #24
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
 800e082:	bf00      	nop
 800e084:	20000d94 	.word	0x20000d94
 800e088:	20000d98 	.word	0x20000d98

0800e08c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void) {
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b082      	sub	sp, #8
 800e090:	af02      	add	r7, sp, #8
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
 800e092:	f000 f9b1 	bl	800e3f8 <vPortEnterCritical>
    {
        if (xTimerQueue == NULL) {
 800e096:	4b15      	ldr	r3, [pc, #84]	@ (800e0ec <prvCheckForValidListAndQueue+0x60>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d120      	bne.n	800e0e0 <prvCheckForValidListAndQueue+0x54>
            vListInitialise(&xActiveTimerList1);
 800e09e:	4814      	ldr	r0, [pc, #80]	@ (800e0f0 <prvCheckForValidListAndQueue+0x64>)
 800e0a0:	f7fd ff22 	bl	800bee8 <vListInitialise>
            vListInitialise(&xActiveTimerList2);
 800e0a4:	4813      	ldr	r0, [pc, #76]	@ (800e0f4 <prvCheckForValidListAndQueue+0x68>)
 800e0a6:	f7fd ff1f 	bl	800bee8 <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
 800e0aa:	4b13      	ldr	r3, [pc, #76]	@ (800e0f8 <prvCheckForValidListAndQueue+0x6c>)
 800e0ac:	4a10      	ldr	r2, [pc, #64]	@ (800e0f0 <prvCheckForValidListAndQueue+0x64>)
 800e0ae:	601a      	str	r2, [r3, #0]
            pxOverflowTimerList = &xActiveTimerList2;
 800e0b0:	4b12      	ldr	r3, [pc, #72]	@ (800e0fc <prvCheckForValidListAndQueue+0x70>)
 800e0b2:	4a10      	ldr	r2, [pc, #64]	@ (800e0f4 <prvCheckForValidListAndQueue+0x68>)
 800e0b4:	601a      	str	r2, [r3, #0]
                /* The timer queue is allocated statically in case
                configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                static StaticQueue_t xStaticTimerQueue;                                                                   /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                static uint8_t ucStaticTimerQueueStorage[(size_t)configTIMER_QUEUE_LENGTH * sizeof(DaemonTaskMessage_t)]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                xTimerQueue = xQueueCreateStatic((UBaseType_t)configTIMER_QUEUE_LENGTH, (UBaseType_t)sizeof(DaemonTaskMessage_t), &(ucStaticTimerQueueStorage[0]), &xStaticTimerQueue);
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	9300      	str	r3, [sp, #0]
 800e0ba:	4b11      	ldr	r3, [pc, #68]	@ (800e100 <prvCheckForValidListAndQueue+0x74>)
 800e0bc:	4a11      	ldr	r2, [pc, #68]	@ (800e104 <prvCheckForValidListAndQueue+0x78>)
 800e0be:	210c      	movs	r1, #12
 800e0c0:	200a      	movs	r0, #10
 800e0c2:	f7fe f82f 	bl	800c124 <xQueueGenericCreateStatic>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	4a08      	ldr	r2, [pc, #32]	@ (800e0ec <prvCheckForValidListAndQueue+0x60>)
 800e0ca:	6013      	str	r3, [r2, #0]
            }
#endif

#if (configQUEUE_REGISTRY_SIZE > 0)
            {
                if (xTimerQueue != NULL) {
 800e0cc:	4b07      	ldr	r3, [pc, #28]	@ (800e0ec <prvCheckForValidListAndQueue+0x60>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d005      	beq.n	800e0e0 <prvCheckForValidListAndQueue+0x54>
                    vQueueAddToRegistry(xTimerQueue, "TmrQ");
 800e0d4:	4b05      	ldr	r3, [pc, #20]	@ (800e0ec <prvCheckForValidListAndQueue+0x60>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	490b      	ldr	r1, [pc, #44]	@ (800e108 <prvCheckForValidListAndQueue+0x7c>)
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7fe fc42 	bl	800c964 <vQueueAddToRegistry>
#endif /* configQUEUE_REGISTRY_SIZE */
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800e0e0:	f000 f9bc 	bl	800e45c <vPortExitCritical>
}
 800e0e4:	bf00      	nop
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}
 800e0ea:	bf00      	nop
 800e0ec:	20000d9c 	.word	0x20000d9c
 800e0f0:	20000d6c 	.word	0x20000d6c
 800e0f4:	20000d80 	.word	0x20000d80
 800e0f8:	20000d94 	.word	0x20000d94
 800e0fc:	20000d98 	.word	0x20000d98
 800e100:	20000e20 	.word	0x20000e20
 800e104:	20000da8 	.word	0x20000da8
 800e108:	08011d50 	.word	0x08011d50

0800e10c <pvTimerGetTimerID>:

    return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void * pvTimerGetTimerID(const TimerHandle_t xTimer) {
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b086      	sub	sp, #24
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
    Timer_t * const pxTimer = xTimer;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	617b      	str	r3, [r7, #20]
    void * pvReturn;

    configASSERT(xTimer);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d10b      	bne.n	800e136 <pvTimerGetTimerID+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800e11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e122:	f383 8811 	msr	BASEPRI, r3
 800e126:	f3bf 8f6f 	isb	sy
 800e12a:	f3bf 8f4f 	dsb	sy
 800e12e:	60fb      	str	r3, [r7, #12]
}
 800e130:	bf00      	nop
 800e132:	bf00      	nop
 800e134:	e7fd      	b.n	800e132 <pvTimerGetTimerID+0x26>

    taskENTER_CRITICAL();
 800e136:	f000 f95f 	bl	800e3f8 <vPortEnterCritical>
    { pvReturn = pxTimer->pvTimerID; }
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	69db      	ldr	r3, [r3, #28]
 800e13e:	613b      	str	r3, [r7, #16]
    taskEXIT_CRITICAL();
 800e140:	f000 f98c 	bl	800e45c <vPortExitCritical>

    return pvReturn;
 800e144:	693b      	ldr	r3, [r7, #16]
}
 800e146:	4618      	mov	r0, r3
 800e148:	3718      	adds	r7, #24
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}

0800e14e <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID(TimerHandle_t xTimer, void * pvNewID) {
 800e14e:	b580      	push	{r7, lr}
 800e150:	b084      	sub	sp, #16
 800e152:	af00      	add	r7, sp, #0
 800e154:	6078      	str	r0, [r7, #4]
 800e156:	6039      	str	r1, [r7, #0]
    Timer_t * const pxTimer = xTimer;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	60fb      	str	r3, [r7, #12]

    configASSERT(xTimer);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d10b      	bne.n	800e17a <vTimerSetTimerID+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800e162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e166:	f383 8811 	msr	BASEPRI, r3
 800e16a:	f3bf 8f6f 	isb	sy
 800e16e:	f3bf 8f4f 	dsb	sy
 800e172:	60bb      	str	r3, [r7, #8]
}
 800e174:	bf00      	nop
 800e176:	bf00      	nop
 800e178:	e7fd      	b.n	800e176 <vTimerSetTimerID+0x28>

    taskENTER_CRITICAL();
 800e17a:	f000 f93d 	bl	800e3f8 <vPortEnterCritical>
    { pxTimer->pvTimerID = pvNewID; }
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	683a      	ldr	r2, [r7, #0]
 800e182:	61da      	str	r2, [r3, #28]
    taskEXIT_CRITICAL();
 800e184:	f000 f96a 	bl	800e45c <vPortExitCritical>
}
 800e188:	bf00      	nop
 800e18a:	3710      	adds	r7, #16
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}

0800e190 <pxPortInitialiseStack>:
/*-----------------------------------------------------------*/

/*
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack(StackType_t * pxTopOfStack, TaskFunction_t pxCode, void * pvParameters) {
 800e190:	b480      	push	{r7}
 800e192:	b085      	sub	sp, #20
 800e194:	af00      	add	r7, sp, #0
 800e196:	60f8      	str	r0, [r7, #12]
 800e198:	60b9      	str	r1, [r7, #8]
 800e19a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
    interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
    of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	3b04      	subs	r3, #4
 800e1a0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR; /* xPSR */
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e1a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	3b04      	subs	r3, #4
 800e1ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	f023 0201 	bic.w	r2, r3, #1
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	3b04      	subs	r3, #4
 800e1be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
 800e1c0:	4a0c      	ldr	r2, [pc, #48]	@ (800e1f4 <pxPortInitialiseStack+0x64>)
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                         /* R12, R3, R2 and R1. */
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	3b14      	subs	r3, #20
 800e1ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = (StackType_t)pvParameters; /* R0 */
 800e1cc:	687a      	ldr	r2, [r7, #4]
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
    own exec return value. */
    pxTopOfStack--;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	3b04      	subs	r3, #4
 800e1d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	f06f 0202 	mvn.w	r2, #2
 800e1de:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	3b20      	subs	r3, #32
 800e1e4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3714      	adds	r7, #20
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f2:	4770      	bx	lr
 800e1f4:	0800e1f9 	.word	0x0800e1f9

0800e1f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError(void) {
 800e1f8:	b480      	push	{r7}
 800e1fa:	b085      	sub	sp, #20
 800e1fc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800e1fe:	2300      	movs	r3, #0
 800e200:	607b      	str	r3, [r7, #4]
    its caller as there is nothing to return to.  If a task wants to exit it
    should instead call vTaskDelete( NULL ).

    Artificially force an assert() to be triggered if configASSERT() is
    defined, then stop here so application writers can catch the error. */
    configASSERT(uxCriticalNesting == ~0UL);
 800e202:	4b13      	ldr	r3, [pc, #76]	@ (800e250 <prvTaskExitError+0x58>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e20a:	d00b      	beq.n	800e224 <prvTaskExitError+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800e20c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e210:	f383 8811 	msr	BASEPRI, r3
 800e214:	f3bf 8f6f 	isb	sy
 800e218:	f3bf 8f4f 	dsb	sy
 800e21c:	60fb      	str	r3, [r7, #12]
}
 800e21e:	bf00      	nop
 800e220:	bf00      	nop
 800e222:	e7fd      	b.n	800e220 <prvTaskExitError+0x28>
    __asm volatile("	mov %0, %1												\n"
 800e224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e228:	f383 8811 	msr	BASEPRI, r3
 800e22c:	f3bf 8f6f 	isb	sy
 800e230:	f3bf 8f4f 	dsb	sy
 800e234:	60bb      	str	r3, [r7, #8]
}
 800e236:	bf00      	nop
    portDISABLE_INTERRUPTS();
    while (ulDummy == 0) {
 800e238:	bf00      	nop
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d0fc      	beq.n	800e23a <prvTaskExitError+0x42>
        about code appearing after this function is called - making ulDummy
        volatile makes the compiler think the function could return and
        therefore not output an 'unreachable code' warning for code that appears
        after it. */
    }
}
 800e240:	bf00      	nop
 800e242:	bf00      	nop
 800e244:	3714      	adds	r7, #20
 800e246:	46bd      	mov	sp, r7
 800e248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24c:	4770      	bx	lr
 800e24e:	bf00      	nop
 800e250:	200000c4 	.word	0x200000c4
	...

0800e260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler(void) {
    __asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 800e260:	4b07      	ldr	r3, [pc, #28]	@ (800e280 <pxCurrentTCBConst2>)
 800e262:	6819      	ldr	r1, [r3, #0]
 800e264:	6808      	ldr	r0, [r1, #0]
 800e266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e26a:	f380 8809 	msr	PSP, r0
 800e26e:	f3bf 8f6f 	isb	sy
 800e272:	f04f 0000 	mov.w	r0, #0
 800e276:	f380 8811 	msr	BASEPRI, r0
 800e27a:	4770      	bx	lr
 800e27c:	f3af 8000 	nop.w

0800e280 <pxCurrentTCBConst2>:
 800e280:	20000c40 	.word	0x20000c40
                   "	msr	basepri, r0					\n"
                   "	bx r14							\n"
                   "									\n"
                   "	.align 4						\n"
                   "pxCurrentTCBConst2: .word pxCurrentTCB				\n");
}
 800e284:	bf00      	nop
 800e286:	bf00      	nop

0800e288 <prvPortStartFirstTask>:
static void prvPortStartFirstTask(void) {
    /* Start the first task.  This also clears the bit that indicates the FPU is
    in use in case the FPU was used before the scheduler was started - which
    would otherwise result in the unnecessary leaving of space in the SVC stack
    for lazy saving of FPU registers. */
    __asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 800e288:	4808      	ldr	r0, [pc, #32]	@ (800e2ac <prvPortStartFirstTask+0x24>)
 800e28a:	6800      	ldr	r0, [r0, #0]
 800e28c:	6800      	ldr	r0, [r0, #0]
 800e28e:	f380 8808 	msr	MSP, r0
 800e292:	f04f 0000 	mov.w	r0, #0
 800e296:	f380 8814 	msr	CONTROL, r0
 800e29a:	b662      	cpsie	i
 800e29c:	b661      	cpsie	f
 800e29e:	f3bf 8f4f 	dsb	sy
 800e2a2:	f3bf 8f6f 	isb	sy
 800e2a6:	df00      	svc	0
 800e2a8:	bf00      	nop
                   " cpsie f				\n"
                   " dsb					\n"
                   " isb					\n"
                   " svc 0					\n" /* System call to start first task. */
                   " nop					\n");
}
 800e2aa:	bf00      	nop
 800e2ac:	e000ed08 	.word	0xe000ed08

0800e2b0 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler(void) {
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b086      	sub	sp, #24
 800e2b4:	af00      	add	r7, sp, #0
    configASSERT(configMAX_SYSCALL_INTERRUPT_PRIORITY);

    /* This port can be used on all revisions of the Cortex-M7 core other than
    the r0p1 parts.  r0p1 parts should use the port from the
    /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
 800e2b6:	4b47      	ldr	r3, [pc, #284]	@ (800e3d4 <xPortStartScheduler+0x124>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	4a47      	ldr	r2, [pc, #284]	@ (800e3d8 <xPortStartScheduler+0x128>)
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d10b      	bne.n	800e2d8 <xPortStartScheduler+0x28>
    __asm volatile("	mov %0, %1												\n"
 800e2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c4:	f383 8811 	msr	BASEPRI, r3
 800e2c8:	f3bf 8f6f 	isb	sy
 800e2cc:	f3bf 8f4f 	dsb	sy
 800e2d0:	613b      	str	r3, [r7, #16]
}
 800e2d2:	bf00      	nop
 800e2d4:	bf00      	nop
 800e2d6:	e7fd      	b.n	800e2d4 <xPortStartScheduler+0x24>
    configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
 800e2d8:	4b3e      	ldr	r3, [pc, #248]	@ (800e3d4 <xPortStartScheduler+0x124>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	4a3f      	ldr	r2, [pc, #252]	@ (800e3dc <xPortStartScheduler+0x12c>)
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	d10b      	bne.n	800e2fa <xPortStartScheduler+0x4a>
    __asm volatile("	mov %0, %1												\n"
 800e2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2e6:	f383 8811 	msr	BASEPRI, r3
 800e2ea:	f3bf 8f6f 	isb	sy
 800e2ee:	f3bf 8f4f 	dsb	sy
 800e2f2:	60fb      	str	r3, [r7, #12]
}
 800e2f4:	bf00      	nop
 800e2f6:	bf00      	nop
 800e2f8:	e7fd      	b.n	800e2f6 <xPortStartScheduler+0x46>

#if (configASSERT_DEFINED == 1)
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = (volatile uint8_t * const)(portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER);
 800e2fa:	4b39      	ldr	r3, [pc, #228]	@ (800e3e0 <xPortStartScheduler+0x130>)
 800e2fc:	617b      	str	r3, [r7, #20]
        functions can be called.  ISR safe functions are those that end in
        "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
        ensure interrupt entry is as fast and simple as possible.

        Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	b2db      	uxtb	r3, r3
 800e304:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
        possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	22ff      	movs	r2, #255	@ 0xff
 800e30a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	b2db      	uxtb	r3, r3
 800e312:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e314:	78fb      	ldrb	r3, [r7, #3]
 800e316:	b2db      	uxtb	r3, r3
 800e318:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e31c:	b2da      	uxtb	r2, r3
 800e31e:	4b31      	ldr	r3, [pc, #196]	@ (800e3e4 <xPortStartScheduler+0x134>)
 800e320:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
        of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e322:	4b31      	ldr	r3, [pc, #196]	@ (800e3e8 <xPortStartScheduler+0x138>)
 800e324:	2207      	movs	r2, #7
 800e326:	601a      	str	r2, [r3, #0]
        while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 800e328:	e009      	b.n	800e33e <xPortStartScheduler+0x8e>
            ulMaxPRIGROUPValue--;
 800e32a:	4b2f      	ldr	r3, [pc, #188]	@ (800e3e8 <xPortStartScheduler+0x138>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	3b01      	subs	r3, #1
 800e330:	4a2d      	ldr	r2, [pc, #180]	@ (800e3e8 <xPortStartScheduler+0x138>)
 800e332:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= (uint8_t)0x01;
 800e334:	78fb      	ldrb	r3, [r7, #3]
 800e336:	b2db      	uxtb	r3, r3
 800e338:	005b      	lsls	r3, r3, #1
 800e33a:	b2db      	uxtb	r3, r3
 800e33c:	70fb      	strb	r3, [r7, #3]
        while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 800e33e:	78fb      	ldrb	r3, [r7, #3]
 800e340:	b2db      	uxtb	r3, r3
 800e342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e346:	2b80      	cmp	r3, #128	@ 0x80
 800e348:	d0ef      	beq.n	800e32a <xPortStartScheduler+0x7a>
#ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
            priority bits matches the number of priority bits actually queried
            from the hardware. */
            configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
 800e34a:	4b27      	ldr	r3, [pc, #156]	@ (800e3e8 <xPortStartScheduler+0x138>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f1c3 0307 	rsb	r3, r3, #7
 800e352:	2b04      	cmp	r3, #4
 800e354:	d00b      	beq.n	800e36e <xPortStartScheduler+0xbe>
    __asm volatile("	mov %0, %1												\n"
 800e356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e35a:	f383 8811 	msr	BASEPRI, r3
 800e35e:	f3bf 8f6f 	isb	sy
 800e362:	f3bf 8f4f 	dsb	sy
 800e366:	60bb      	str	r3, [r7, #8]
}
 800e368:	bf00      	nop
 800e36a:	bf00      	nop
 800e36c:	e7fd      	b.n	800e36a <xPortStartScheduler+0xba>
        }
#endif

        /* Shift the priority group value back to its position within the AIRCR
        register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e36e:	4b1e      	ldr	r3, [pc, #120]	@ (800e3e8 <xPortStartScheduler+0x138>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	021b      	lsls	r3, r3, #8
 800e374:	4a1c      	ldr	r2, [pc, #112]	@ (800e3e8 <xPortStartScheduler+0x138>)
 800e376:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e378:	4b1b      	ldr	r3, [pc, #108]	@ (800e3e8 <xPortStartScheduler+0x138>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e380:	4a19      	ldr	r2, [pc, #100]	@ (800e3e8 <xPortStartScheduler+0x138>)
 800e382:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
        value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	b2da      	uxtb	r2, r3
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	701a      	strb	r2, [r3, #0]
    }
#endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e38c:	4b17      	ldr	r3, [pc, #92]	@ (800e3ec <xPortStartScheduler+0x13c>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4a16      	ldr	r2, [pc, #88]	@ (800e3ec <xPortStartScheduler+0x13c>)
 800e392:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e396:	6013      	str	r3, [r2, #0]
    portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e398:	4b14      	ldr	r3, [pc, #80]	@ (800e3ec <xPortStartScheduler+0x13c>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	4a13      	ldr	r2, [pc, #76]	@ (800e3ec <xPortStartScheduler+0x13c>)
 800e39e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e3a2:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
    here already. */
    vPortSetupTimerInterrupt();
 800e3a4:	f000 f8da 	bl	800e55c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800e3a8:	4b11      	ldr	r3, [pc, #68]	@ (800e3f0 <xPortStartScheduler+0x140>)
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800e3ae:	f000 f8f9 	bl	800e5a4 <vPortEnableVFP>

    /* Lazy save always. */
    *(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
 800e3b2:	4b10      	ldr	r3, [pc, #64]	@ (800e3f4 <xPortStartScheduler+0x144>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	4a0f      	ldr	r2, [pc, #60]	@ (800e3f4 <xPortStartScheduler+0x144>)
 800e3b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e3bc:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800e3be:	f7ff ff63 	bl	800e288 <prvPortStartFirstTask>
    exit error function to prevent compiler warnings about a static function
    not being called in the case that the application writer overrides this
    functionality by defining configTASK_RETURN_ADDRESS.  Call
    vTaskSwitchContext() so link time optimisation does not remove the
    symbol. */
    vTaskSwitchContext();
 800e3c2:	f7fe fff7 	bl	800d3b4 <vTaskSwitchContext>
    prvTaskExitError();
 800e3c6:	f7ff ff17 	bl	800e1f8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800e3ca:	2300      	movs	r3, #0
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3718      	adds	r7, #24
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}
 800e3d4:	e000ed00 	.word	0xe000ed00
 800e3d8:	410fc271 	.word	0x410fc271
 800e3dc:	410fc270 	.word	0x410fc270
 800e3e0:	e000e400 	.word	0xe000e400
 800e3e4:	20000e68 	.word	0x20000e68
 800e3e8:	20000e6c 	.word	0x20000e6c
 800e3ec:	e000ed20 	.word	0xe000ed20
 800e3f0:	200000c4 	.word	0x200000c4
 800e3f4:	e000ef34 	.word	0xe000ef34

0800e3f8 <vPortEnterCritical>:
    Artificially force an assert. */
    configASSERT(uxCriticalNesting == 1000UL);
}
/*-----------------------------------------------------------*/

void vPortEnterCritical(void) {
 800e3f8:	b480      	push	{r7}
 800e3fa:	b083      	sub	sp, #12
 800e3fc:	af00      	add	r7, sp, #0
    __asm volatile("	mov %0, %1												\n"
 800e3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e402:	f383 8811 	msr	BASEPRI, r3
 800e406:	f3bf 8f6f 	isb	sy
 800e40a:	f3bf 8f4f 	dsb	sy
 800e40e:	607b      	str	r3, [r7, #4]
}
 800e410:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800e412:	4b10      	ldr	r3, [pc, #64]	@ (800e454 <vPortEnterCritical+0x5c>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	3301      	adds	r3, #1
 800e418:	4a0e      	ldr	r2, [pc, #56]	@ (800e454 <vPortEnterCritical+0x5c>)
 800e41a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
    assert() if it is being called from an interrupt context.  Only API
    functions that end in "FromISR" can be used in an interrupt.  Only assert if
    the critical nesting count is 1 to protect against recursive calls if the
    assert function also uses a critical section. */
    if (uxCriticalNesting == 1) {
 800e41c:	4b0d      	ldr	r3, [pc, #52]	@ (800e454 <vPortEnterCritical+0x5c>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	2b01      	cmp	r3, #1
 800e422:	d110      	bne.n	800e446 <vPortEnterCritical+0x4e>
        configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
 800e424:	4b0c      	ldr	r3, [pc, #48]	@ (800e458 <vPortEnterCritical+0x60>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	b2db      	uxtb	r3, r3
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d00b      	beq.n	800e446 <vPortEnterCritical+0x4e>
    __asm volatile("	mov %0, %1												\n"
 800e42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e432:	f383 8811 	msr	BASEPRI, r3
 800e436:	f3bf 8f6f 	isb	sy
 800e43a:	f3bf 8f4f 	dsb	sy
 800e43e:	603b      	str	r3, [r7, #0]
}
 800e440:	bf00      	nop
 800e442:	bf00      	nop
 800e444:	e7fd      	b.n	800e442 <vPortEnterCritical+0x4a>
    }
}
 800e446:	bf00      	nop
 800e448:	370c      	adds	r7, #12
 800e44a:	46bd      	mov	sp, r7
 800e44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e450:	4770      	bx	lr
 800e452:	bf00      	nop
 800e454:	200000c4 	.word	0x200000c4
 800e458:	e000ed04 	.word	0xe000ed04

0800e45c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical(void) {
 800e45c:	b480      	push	{r7}
 800e45e:	b083      	sub	sp, #12
 800e460:	af00      	add	r7, sp, #0
    configASSERT(uxCriticalNesting);
 800e462:	4b12      	ldr	r3, [pc, #72]	@ (800e4ac <vPortExitCritical+0x50>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d10b      	bne.n	800e482 <vPortExitCritical+0x26>
    __asm volatile("	mov %0, %1												\n"
 800e46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e46e:	f383 8811 	msr	BASEPRI, r3
 800e472:	f3bf 8f6f 	isb	sy
 800e476:	f3bf 8f4f 	dsb	sy
 800e47a:	607b      	str	r3, [r7, #4]
}
 800e47c:	bf00      	nop
 800e47e:	bf00      	nop
 800e480:	e7fd      	b.n	800e47e <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800e482:	4b0a      	ldr	r3, [pc, #40]	@ (800e4ac <vPortExitCritical+0x50>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	3b01      	subs	r3, #1
 800e488:	4a08      	ldr	r2, [pc, #32]	@ (800e4ac <vPortExitCritical+0x50>)
 800e48a:	6013      	str	r3, [r2, #0]
    if (uxCriticalNesting == 0) {
 800e48c:	4b07      	ldr	r3, [pc, #28]	@ (800e4ac <vPortExitCritical+0x50>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d105      	bne.n	800e4a0 <vPortExitCritical+0x44>
 800e494:	2300      	movs	r3, #0
 800e496:	603b      	str	r3, [r7, #0]
    __asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	f383 8811 	msr	BASEPRI, r3
}
 800e49e:	bf00      	nop
        portENABLE_INTERRUPTS();
    }
}
 800e4a0:	bf00      	nop
 800e4a2:	370c      	adds	r7, #12
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr
 800e4ac:	200000c4 	.word	0x200000c4

0800e4b0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void xPortPendSVHandler(void) {
    /* This is a naked function. */

    __asm volatile("	mrs r0, psp							\n"
 800e4b0:	f3ef 8009 	mrs	r0, PSP
 800e4b4:	f3bf 8f6f 	isb	sy
 800e4b8:	4b15      	ldr	r3, [pc, #84]	@ (800e510 <pxCurrentTCBConst>)
 800e4ba:	681a      	ldr	r2, [r3, #0]
 800e4bc:	f01e 0f10 	tst.w	lr, #16
 800e4c0:	bf08      	it	eq
 800e4c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e4c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4ca:	6010      	str	r0, [r2, #0]
 800e4cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e4d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e4d4:	f380 8811 	msr	BASEPRI, r0
 800e4d8:	f3bf 8f4f 	dsb	sy
 800e4dc:	f3bf 8f6f 	isb	sy
 800e4e0:	f7fe ff68 	bl	800d3b4 <vTaskSwitchContext>
 800e4e4:	f04f 0000 	mov.w	r0, #0
 800e4e8:	f380 8811 	msr	BASEPRI, r0
 800e4ec:	bc09      	pop	{r0, r3}
 800e4ee:	6819      	ldr	r1, [r3, #0]
 800e4f0:	6808      	ldr	r0, [r1, #0]
 800e4f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4f6:	f01e 0f10 	tst.w	lr, #16
 800e4fa:	bf08      	it	eq
 800e4fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e500:	f380 8809 	msr	PSP, r0
 800e504:	f3bf 8f6f 	isb	sy
 800e508:	4770      	bx	lr
 800e50a:	bf00      	nop
 800e50c:	f3af 8000 	nop.w

0800e510 <pxCurrentTCBConst>:
 800e510:	20000c40 	.word	0x20000c40
                   "										\n"
                   "	bx r14								\n"
                   "										\n"
                   "	.align 4							\n"
                   "pxCurrentTCBConst: .word pxCurrentTCB	\n" ::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY));
}
 800e514:	bf00      	nop
 800e516:	bf00      	nop

0800e518 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void) {
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
    __asm volatile("	mov %0, %1												\n"
 800e51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e522:	f383 8811 	msr	BASEPRI, r3
 800e526:	f3bf 8f6f 	isb	sy
 800e52a:	f3bf 8f4f 	dsb	sy
 800e52e:	607b      	str	r3, [r7, #4]
}
 800e530:	bf00      	nop
    save and then restore the interrupt mask value as its value is already
    known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if (xTaskIncrementTick() != pdFALSE) {
 800e532:	f7fe fe85 	bl	800d240 <xTaskIncrementTick>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d003      	beq.n	800e544 <xPortSysTickHandler+0x2c>
            /* A context switch is required.  Context switching is performed in
            the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e53c:	4b06      	ldr	r3, [pc, #24]	@ (800e558 <xPortSysTickHandler+0x40>)
 800e53e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e542:	601a      	str	r2, [r3, #0]
 800e544:	2300      	movs	r3, #0
 800e546:	603b      	str	r3, [r7, #0]
    __asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	f383 8811 	msr	BASEPRI, r3
}
 800e54e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800e550:	bf00      	nop
 800e552:	3708      	adds	r7, #8
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}
 800e558:	e000ed04 	.word	0xe000ed04

0800e55c <vPortSetupTimerInterrupt>:

/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__((weak)) void vPortSetupTimerInterrupt(void) {
 800e55c:	b480      	push	{r7}
 800e55e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / (configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ);
    }
#endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e560:	4b0b      	ldr	r3, [pc, #44]	@ (800e590 <vPortSetupTimerInterrupt+0x34>)
 800e562:	2200      	movs	r2, #0
 800e564:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e566:	4b0b      	ldr	r3, [pc, #44]	@ (800e594 <vPortSetupTimerInterrupt+0x38>)
 800e568:	2200      	movs	r2, #0
 800e56a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 800e56c:	4b0a      	ldr	r3, [pc, #40]	@ (800e598 <vPortSetupTimerInterrupt+0x3c>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4a0a      	ldr	r2, [pc, #40]	@ (800e59c <vPortSetupTimerInterrupt+0x40>)
 800e572:	fba2 2303 	umull	r2, r3, r2, r3
 800e576:	0b5b      	lsrs	r3, r3, #13
 800e578:	4a09      	ldr	r2, [pc, #36]	@ (800e5a0 <vPortSetupTimerInterrupt+0x44>)
 800e57a:	3b01      	subs	r3, #1
 800e57c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
 800e57e:	4b04      	ldr	r3, [pc, #16]	@ (800e590 <vPortSetupTimerInterrupt+0x34>)
 800e580:	2207      	movs	r2, #7
 800e582:	601a      	str	r2, [r3, #0]
}
 800e584:	bf00      	nop
 800e586:	46bd      	mov	sp, r7
 800e588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58c:	4770      	bx	lr
 800e58e:	bf00      	nop
 800e590:	e000e010 	.word	0xe000e010
 800e594:	e000e018 	.word	0xe000e018
 800e598:	2000000c 	.word	0x2000000c
 800e59c:	d1b71759 	.word	0xd1b71759
 800e5a0:	e000e014 	.word	0xe000e014

0800e5a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void) {
    __asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
 800e5a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e5b4 <vPortEnableVFP+0x10>
 800e5a8:	6801      	ldr	r1, [r0, #0]
 800e5aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e5ae:	6001      	str	r1, [r0, #0]
 800e5b0:	4770      	bx	lr
                   "	ldr r1, [r0]				\n"
                   "								\n"
                   "	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
                   "	str r1, [r0]				\n"
                   "	bx r14						");
}
 800e5b2:	bf00      	nop
 800e5b4:	e000ed88 	.word	0xe000ed88

0800e5b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if (configASSERT_DEFINED == 1)

void vPortValidateInterruptPriority(void) {
 800e5b8:	b480      	push	{r7}
 800e5ba:	b085      	sub	sp, #20
 800e5bc:	af00      	add	r7, sp, #0
    uint32_t ulCurrentInterrupt;
    uint8_t ucCurrentPriority;

    /* Obtain the number of the currently executing interrupt. */
    __asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
 800e5be:	f3ef 8305 	mrs	r3, IPSR
 800e5c2:	60fb      	str	r3, [r7, #12]

    /* Is the interrupt number a user defined interrupt? */
    if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2b0f      	cmp	r3, #15
 800e5c8:	d915      	bls.n	800e5f6 <vPortValidateInterruptPriority+0x3e>
        /* Look up the interrupt's priority. */
        ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
 800e5ca:	4a18      	ldr	r2, [pc, #96]	@ (800e62c <vPortValidateInterruptPriority+0x74>)
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	4413      	add	r3, r2
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	72fb      	strb	r3, [r7, #11]
        interrupt entry is as fast and simple as possible.

        The following links provide detailed information:
        http://www.freertos.org/RTOS-Cortex-M3-M4.html
        http://www.freertos.org/FAQHelp.html */
        configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
 800e5d4:	4b16      	ldr	r3, [pc, #88]	@ (800e630 <vPortValidateInterruptPriority+0x78>)
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	7afa      	ldrb	r2, [r7, #11]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d20b      	bcs.n	800e5f6 <vPortValidateInterruptPriority+0x3e>
    __asm volatile("	mov %0, %1												\n"
 800e5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5e2:	f383 8811 	msr	BASEPRI, r3
 800e5e6:	f3bf 8f6f 	isb	sy
 800e5ea:	f3bf 8f4f 	dsb	sy
 800e5ee:	607b      	str	r3, [r7, #4]
}
 800e5f0:	bf00      	nop
 800e5f2:	bf00      	nop
 800e5f4:	e7fd      	b.n	800e5f2 <vPortValidateInterruptPriority+0x3a>
    configuration then the correct setting can be achieved on all Cortex-M
    devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
    scheduler.  Note however that some vendor specific peripheral libraries
    assume a non-zero priority group setting, in which cases using a value
    of zero will result in unpredictable behaviour. */
    configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
 800e5f6:	4b0f      	ldr	r3, [pc, #60]	@ (800e634 <vPortValidateInterruptPriority+0x7c>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e5fe:	4b0e      	ldr	r3, [pc, #56]	@ (800e638 <vPortValidateInterruptPriority+0x80>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	429a      	cmp	r2, r3
 800e604:	d90b      	bls.n	800e61e <vPortValidateInterruptPriority+0x66>
    __asm volatile("	mov %0, %1												\n"
 800e606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e60a:	f383 8811 	msr	BASEPRI, r3
 800e60e:	f3bf 8f6f 	isb	sy
 800e612:	f3bf 8f4f 	dsb	sy
 800e616:	603b      	str	r3, [r7, #0]
}
 800e618:	bf00      	nop
 800e61a:	bf00      	nop
 800e61c:	e7fd      	b.n	800e61a <vPortValidateInterruptPriority+0x62>
}
 800e61e:	bf00      	nop
 800e620:	3714      	adds	r7, #20
 800e622:	46bd      	mov	sp, r7
 800e624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e628:	4770      	bx	lr
 800e62a:	bf00      	nop
 800e62c:	e000e3f0 	.word	0xe000e3f0
 800e630:	20000e68 	.word	0x20000e68
 800e634:	e000ed0c 	.word	0xe000ed0c
 800e638:	20000e6c 	.word	0x20000e6c

0800e63c <pvPortMalloc>:
#error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc(size_t xWantedSize) {
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b084      	sub	sp, #16
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 800e644:	f7fe fd40 	bl	800d0c8 <vTaskSuspendAll>
    {
        pvReturn = malloc(xWantedSize);
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f000 fd2b 	bl	800f0a4 <malloc>
 800e64e:	4603      	mov	r3, r0
 800e650:	60fb      	str	r3, [r7, #12]
        traceMALLOC(pvReturn, xWantedSize);
    }
    (void)xTaskResumeAll();
 800e652:	f7fe fd47 	bl	800d0e4 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
#endif

    return pvReturn;
 800e656:	68fb      	ldr	r3, [r7, #12]
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3710      	adds	r7, #16
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree(void * pv) {
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
    if (pv) {
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d006      	beq.n	800e67c <vPortFree+0x1c>
        vTaskSuspendAll();
 800e66e:	f7fe fd2b 	bl	800d0c8 <vTaskSuspendAll>
        {
            free(pv);
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f000 fd1e 	bl	800f0b4 <free>
            traceFREE(pv, 0);
        }
        (void)xTaskResumeAll();
 800e678:	f7fe fd34 	bl	800d0e4 <xTaskResumeAll>
    }
}
 800e67c:	bf00      	nop
 800e67e:	3708      	adds	r7, #8
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}

0800e684 <MX_USB_DEVICE_Init>:

/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(void) {
 800e684:	b580      	push	{r7, lr}
 800e686:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800e688:	2200      	movs	r2, #0
 800e68a:	4912      	ldr	r1, [pc, #72]	@ (800e6d4 <MX_USB_DEVICE_Init+0x50>)
 800e68c:	4812      	ldr	r0, [pc, #72]	@ (800e6d8 <MX_USB_DEVICE_Init+0x54>)
 800e68e:	f7fc f8b9 	bl	800a804 <USBD_Init>
 800e692:	4603      	mov	r3, r0
 800e694:	2b00      	cmp	r3, #0
 800e696:	d001      	beq.n	800e69c <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 800e698:	f7f3 fd47 	bl	800212a <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800e69c:	490f      	ldr	r1, [pc, #60]	@ (800e6dc <MX_USB_DEVICE_Init+0x58>)
 800e69e:	480e      	ldr	r0, [pc, #56]	@ (800e6d8 <MX_USB_DEVICE_Init+0x54>)
 800e6a0:	f7fc f8e0 	bl	800a864 <USBD_RegisterClass>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d001      	beq.n	800e6ae <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 800e6aa:	f7f3 fd3e 	bl	800212a <Error_Handler>
    }
    if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800e6ae:	490c      	ldr	r1, [pc, #48]	@ (800e6e0 <MX_USB_DEVICE_Init+0x5c>)
 800e6b0:	4809      	ldr	r0, [pc, #36]	@ (800e6d8 <MX_USB_DEVICE_Init+0x54>)
 800e6b2:	f7fb ffd1 	bl	800a658 <USBD_CDC_RegisterInterface>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d001      	beq.n	800e6c0 <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 800e6bc:	f7f3 fd35 	bl	800212a <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e6c0:	4805      	ldr	r0, [pc, #20]	@ (800e6d8 <MX_USB_DEVICE_Init+0x54>)
 800e6c2:	f7fc f905 	bl	800a8d0 <USBD_Start>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d001      	beq.n	800e6d0 <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 800e6cc:	f7f3 fd2d 	bl	800212a <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e6d0:	bf00      	nop
 800e6d2:	bd80      	pop	{r7, pc}
 800e6d4:	200000dc 	.word	0x200000dc
 800e6d8:	20000e70 	.word	0x20000e70
 800e6dc:	20000044 	.word	0x20000044
 800e6e0:	200000c8 	.word	0x200000c8

0800e6e4 <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	4905      	ldr	r1, [pc, #20]	@ (800e700 <CDC_Init_FS+0x1c>)
 800e6ec:	4805      	ldr	r0, [pc, #20]	@ (800e704 <CDC_Init_FS+0x20>)
 800e6ee:	f7fb ffcd 	bl	800a68c <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e6f2:	4905      	ldr	r1, [pc, #20]	@ (800e708 <CDC_Init_FS+0x24>)
 800e6f4:	4803      	ldr	r0, [pc, #12]	@ (800e704 <CDC_Init_FS+0x20>)
 800e6f6:	f7fb ffeb 	bl	800a6d0 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 800e6fa:	2300      	movs	r3, #0
    /* USER CODE END 3 */
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	2000124c 	.word	0x2000124c
 800e704:	20000e70 	.word	0x20000e70
 800e708:	2000114c 	.word	0x2000114c

0800e70c <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 800e70c:	b480      	push	{r7}
 800e70e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 4 */
    return (USBD_OK);
 800e710:	2300      	movs	r3, #0
    /* USER CODE END 4 */
}
 800e712:	4618      	mov	r0, r3
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr

0800e71c <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t * pbuf, uint16_t length) {
 800e71c:	b480      	push	{r7}
 800e71e:	b083      	sub	sp, #12
 800e720:	af00      	add	r7, sp, #0
 800e722:	4603      	mov	r3, r0
 800e724:	6039      	str	r1, [r7, #0]
 800e726:	71fb      	strb	r3, [r7, #7]
 800e728:	4613      	mov	r3, r2
 800e72a:	80bb      	strh	r3, [r7, #4]
    /* USER CODE BEGIN 5 */
    switch (cmd) {
 800e72c:	79fb      	ldrb	r3, [r7, #7]
 800e72e:	2b23      	cmp	r3, #35	@ 0x23
 800e730:	d84a      	bhi.n	800e7c8 <CDC_Control_FS+0xac>
 800e732:	a201      	add	r2, pc, #4	@ (adr r2, 800e738 <CDC_Control_FS+0x1c>)
 800e734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e738:	0800e7c9 	.word	0x0800e7c9
 800e73c:	0800e7c9 	.word	0x0800e7c9
 800e740:	0800e7c9 	.word	0x0800e7c9
 800e744:	0800e7c9 	.word	0x0800e7c9
 800e748:	0800e7c9 	.word	0x0800e7c9
 800e74c:	0800e7c9 	.word	0x0800e7c9
 800e750:	0800e7c9 	.word	0x0800e7c9
 800e754:	0800e7c9 	.word	0x0800e7c9
 800e758:	0800e7c9 	.word	0x0800e7c9
 800e75c:	0800e7c9 	.word	0x0800e7c9
 800e760:	0800e7c9 	.word	0x0800e7c9
 800e764:	0800e7c9 	.word	0x0800e7c9
 800e768:	0800e7c9 	.word	0x0800e7c9
 800e76c:	0800e7c9 	.word	0x0800e7c9
 800e770:	0800e7c9 	.word	0x0800e7c9
 800e774:	0800e7c9 	.word	0x0800e7c9
 800e778:	0800e7c9 	.word	0x0800e7c9
 800e77c:	0800e7c9 	.word	0x0800e7c9
 800e780:	0800e7c9 	.word	0x0800e7c9
 800e784:	0800e7c9 	.word	0x0800e7c9
 800e788:	0800e7c9 	.word	0x0800e7c9
 800e78c:	0800e7c9 	.word	0x0800e7c9
 800e790:	0800e7c9 	.word	0x0800e7c9
 800e794:	0800e7c9 	.word	0x0800e7c9
 800e798:	0800e7c9 	.word	0x0800e7c9
 800e79c:	0800e7c9 	.word	0x0800e7c9
 800e7a0:	0800e7c9 	.word	0x0800e7c9
 800e7a4:	0800e7c9 	.word	0x0800e7c9
 800e7a8:	0800e7c9 	.word	0x0800e7c9
 800e7ac:	0800e7c9 	.word	0x0800e7c9
 800e7b0:	0800e7c9 	.word	0x0800e7c9
 800e7b4:	0800e7c9 	.word	0x0800e7c9
 800e7b8:	0800e7c9 	.word	0x0800e7c9
 800e7bc:	0800e7c9 	.word	0x0800e7c9
 800e7c0:	0800e7c9 	.word	0x0800e7c9
 800e7c4:	0800e7c9 	.word	0x0800e7c9
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 800e7c8:	bf00      	nop
    }

    return (USBD_OK);
 800e7ca:	2300      	movs	r3, #0
    /* USER CODE END 5 */
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	370c      	adds	r7, #12
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d6:	4770      	bx	lr

0800e7d8 <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t * Buf, uint32_t * Len) {
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6039      	str	r1, [r7, #0]
    /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e7e2:	6879      	ldr	r1, [r7, #4]
 800e7e4:	4805      	ldr	r0, [pc, #20]	@ (800e7fc <CDC_Receive_FS+0x24>)
 800e7e6:	f7fb ff73 	bl	800a6d0 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e7ea:	4804      	ldr	r0, [pc, #16]	@ (800e7fc <CDC_Receive_FS+0x24>)
 800e7ec:	f7fb ffd4 	bl	800a798 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800e7f0:	2300      	movs	r3, #0
    /* USER CODE END 6 */
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3708      	adds	r7, #8
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	20000e70 	.word	0x20000e70

0800e800 <CDC_Transmit_FS>:
 *
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t * Buf, uint16_t Len) {
 800e800:	b580      	push	{r7, lr}
 800e802:	b084      	sub	sp, #16
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	460b      	mov	r3, r1
 800e80a:	807b      	strh	r3, [r7, #2]
    uint8_t result = USBD_OK;
 800e80c:	2300      	movs	r3, #0
 800e80e:	73fb      	strb	r3, [r7, #15]
    /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800e810:	4b0d      	ldr	r3, [pc, #52]	@ (800e848 <CDC_Transmit_FS+0x48>)
 800e812:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e816:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d001      	beq.n	800e826 <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 800e822:	2301      	movs	r3, #1
 800e824:	e00b      	b.n	800e83e <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e826:	887b      	ldrh	r3, [r7, #2]
 800e828:	461a      	mov	r2, r3
 800e82a:	6879      	ldr	r1, [r7, #4]
 800e82c:	4806      	ldr	r0, [pc, #24]	@ (800e848 <CDC_Transmit_FS+0x48>)
 800e82e:	f7fb ff2d 	bl	800a68c <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e832:	4805      	ldr	r0, [pc, #20]	@ (800e848 <CDC_Transmit_FS+0x48>)
 800e834:	f7fb ff6a 	bl	800a70c <USBD_CDC_TransmitPacket>
 800e838:	4603      	mov	r3, r0
 800e83a:	73fb      	strb	r3, [r7, #15]
    /* USER CODE END 7 */
    return result;
 800e83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3710      	adds	r7, #16
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}
 800e846:	bf00      	nop
 800e848:	20000e70 	.word	0x20000e70

0800e84c <CDC_TransmitCplt_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t * Buf, uint32_t * Len, uint8_t epnum) {
 800e84c:	b480      	push	{r7}
 800e84e:	b087      	sub	sp, #28
 800e850:	af00      	add	r7, sp, #0
 800e852:	60f8      	str	r0, [r7, #12]
 800e854:	60b9      	str	r1, [r7, #8]
 800e856:	4613      	mov	r3, r2
 800e858:	71fb      	strb	r3, [r7, #7]
    uint8_t result = USBD_OK;
 800e85a:	2300      	movs	r3, #0
 800e85c:	75fb      	strb	r3, [r7, #23]
    /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
    /* USER CODE END 13 */
    return result;
 800e85e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e862:	4618      	mov	r0, r3
 800e864:	371c      	adds	r7, #28
 800e866:	46bd      	mov	sp, r7
 800e868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86c:	4770      	bx	lr
	...

0800e870 <USBD_FS_DeviceDescriptor>:
 * @brief  Return the device descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800e870:	b480      	push	{r7}
 800e872:	b083      	sub	sp, #12
 800e874:	af00      	add	r7, sp, #0
 800e876:	4603      	mov	r3, r0
 800e878:	6039      	str	r1, [r7, #0]
 800e87a:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = sizeof(USBD_FS_DeviceDesc);
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	2212      	movs	r2, #18
 800e880:	801a      	strh	r2, [r3, #0]
    return USBD_FS_DeviceDesc;
 800e882:	4b03      	ldr	r3, [pc, #12]	@ (800e890 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e884:	4618      	mov	r0, r3
 800e886:	370c      	adds	r7, #12
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr
 800e890:	200000f8 	.word	0x200000f8

0800e894 <USBD_FS_LangIDStrDescriptor>:
 * @brief  Return the LangID string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800e894:	b480      	push	{r7}
 800e896:	b083      	sub	sp, #12
 800e898:	af00      	add	r7, sp, #0
 800e89a:	4603      	mov	r3, r0
 800e89c:	6039      	str	r1, [r7, #0]
 800e89e:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = sizeof(USBD_LangIDDesc);
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	2204      	movs	r2, #4
 800e8a4:	801a      	strh	r2, [r3, #0]
    return USBD_LangIDDesc;
 800e8a6:	4b03      	ldr	r3, [pc, #12]	@ (800e8b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	370c      	adds	r7, #12
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr
 800e8b4:	2000010c 	.word	0x2000010c

0800e8b8 <USBD_FS_ProductStrDescriptor>:
 * @brief  Return the product string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	4603      	mov	r3, r0
 800e8c0:	6039      	str	r1, [r7, #0]
 800e8c2:	71fb      	strb	r3, [r7, #7]
    if (speed == 0) {
 800e8c4:	79fb      	ldrb	r3, [r7, #7]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d105      	bne.n	800e8d6 <USBD_FS_ProductStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e8ca:	683a      	ldr	r2, [r7, #0]
 800e8cc:	4907      	ldr	r1, [pc, #28]	@ (800e8ec <USBD_FS_ProductStrDescriptor+0x34>)
 800e8ce:	4808      	ldr	r0, [pc, #32]	@ (800e8f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800e8d0:	f7fd f9a8 	bl	800bc24 <USBD_GetString>
 800e8d4:	e004      	b.n	800e8e0 <USBD_FS_ProductStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e8d6:	683a      	ldr	r2, [r7, #0]
 800e8d8:	4904      	ldr	r1, [pc, #16]	@ (800e8ec <USBD_FS_ProductStrDescriptor+0x34>)
 800e8da:	4805      	ldr	r0, [pc, #20]	@ (800e8f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800e8dc:	f7fd f9a2 	bl	800bc24 <USBD_GetString>
    }
    return USBD_StrDesc;
 800e8e0:	4b02      	ldr	r3, [pc, #8]	@ (800e8ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3708      	adds	r7, #8
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	2000134c 	.word	0x2000134c
 800e8f0:	08011d58 	.word	0x08011d58

0800e8f4 <USBD_FS_ManufacturerStrDescriptor>:
 * @brief  Return the manufacturer string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b082      	sub	sp, #8
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	6039      	str	r1, [r7, #0]
 800e8fe:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e900:	683a      	ldr	r2, [r7, #0]
 800e902:	4904      	ldr	r1, [pc, #16]	@ (800e914 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e904:	4804      	ldr	r0, [pc, #16]	@ (800e918 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e906:	f7fd f98d 	bl	800bc24 <USBD_GetString>
    return USBD_StrDesc;
 800e90a:	4b02      	ldr	r3, [pc, #8]	@ (800e914 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3708      	adds	r7, #8
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}
 800e914:	2000134c 	.word	0x2000134c
 800e918:	08011d70 	.word	0x08011d70

0800e91c <USBD_FS_SerialStrDescriptor>:
 * @brief  Return the serial number string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b082      	sub	sp, #8
 800e920:	af00      	add	r7, sp, #0
 800e922:	4603      	mov	r3, r0
 800e924:	6039      	str	r1, [r7, #0]
 800e926:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = USB_SIZ_STRING_SERIAL;
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	221a      	movs	r2, #26
 800e92c:	801a      	strh	r2, [r3, #0]

    /* Update the serial number string descriptor with the data from the unique
     * ID */
    Get_SerialNum();
 800e92e:	f000 f843 	bl	800e9b8 <Get_SerialNum>
    /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

    /* USER CODE END USBD_FS_SerialStrDescriptor */
    return (uint8_t *)USBD_StringSerial;
 800e932:	4b02      	ldr	r3, [pc, #8]	@ (800e93c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e934:	4618      	mov	r0, r3
 800e936:	3708      	adds	r7, #8
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}
 800e93c:	20000110 	.word	0x20000110

0800e940 <USBD_FS_ConfigStrDescriptor>:
 * @brief  Return the configuration string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	4603      	mov	r3, r0
 800e948:	6039      	str	r1, [r7, #0]
 800e94a:	71fb      	strb	r3, [r7, #7]
    if (speed == USBD_SPEED_HIGH) {
 800e94c:	79fb      	ldrb	r3, [r7, #7]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d105      	bne.n	800e95e <USBD_FS_ConfigStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e952:	683a      	ldr	r2, [r7, #0]
 800e954:	4907      	ldr	r1, [pc, #28]	@ (800e974 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e956:	4808      	ldr	r0, [pc, #32]	@ (800e978 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e958:	f7fd f964 	bl	800bc24 <USBD_GetString>
 800e95c:	e004      	b.n	800e968 <USBD_FS_ConfigStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e95e:	683a      	ldr	r2, [r7, #0]
 800e960:	4904      	ldr	r1, [pc, #16]	@ (800e974 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e962:	4805      	ldr	r0, [pc, #20]	@ (800e978 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e964:	f7fd f95e 	bl	800bc24 <USBD_GetString>
    }
    return USBD_StrDesc;
 800e968:	4b02      	ldr	r3, [pc, #8]	@ (800e974 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3708      	adds	r7, #8
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	2000134c 	.word	0x2000134c
 800e978:	08011d84 	.word	0x08011d84

0800e97c <USBD_FS_InterfaceStrDescriptor>:
 * @brief  Return the interface string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	4603      	mov	r3, r0
 800e984:	6039      	str	r1, [r7, #0]
 800e986:	71fb      	strb	r3, [r7, #7]
    if (speed == 0) {
 800e988:	79fb      	ldrb	r3, [r7, #7]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d105      	bne.n	800e99a <USBD_FS_InterfaceStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e98e:	683a      	ldr	r2, [r7, #0]
 800e990:	4907      	ldr	r1, [pc, #28]	@ (800e9b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e992:	4808      	ldr	r0, [pc, #32]	@ (800e9b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e994:	f7fd f946 	bl	800bc24 <USBD_GetString>
 800e998:	e004      	b.n	800e9a4 <USBD_FS_InterfaceStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e99a:	683a      	ldr	r2, [r7, #0]
 800e99c:	4904      	ldr	r1, [pc, #16]	@ (800e9b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e99e:	4805      	ldr	r0, [pc, #20]	@ (800e9b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e9a0:	f7fd f940 	bl	800bc24 <USBD_GetString>
    }
    return USBD_StrDesc;
 800e9a4:	4b02      	ldr	r3, [pc, #8]	@ (800e9b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3708      	adds	r7, #8
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	2000134c 	.word	0x2000134c
 800e9b4:	08011d90 	.word	0x08011d90

0800e9b8 <Get_SerialNum>:
/**
 * @brief  Create the serial number string descriptor
 * @param  None
 * @retval None
 */
static void Get_SerialNum(void) {
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b084      	sub	sp, #16
 800e9bc:	af00      	add	r7, sp, #0
    uint32_t deviceserial0;
    uint32_t deviceserial1;
    uint32_t deviceserial2;

    deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800e9be:	4b0f      	ldr	r3, [pc, #60]	@ (800e9fc <Get_SerialNum+0x44>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	60fb      	str	r3, [r7, #12]
    deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800e9c4:	4b0e      	ldr	r3, [pc, #56]	@ (800ea00 <Get_SerialNum+0x48>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	60bb      	str	r3, [r7, #8]
    deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800e9ca:	4b0e      	ldr	r3, [pc, #56]	@ (800ea04 <Get_SerialNum+0x4c>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	607b      	str	r3, [r7, #4]

    deviceserial0 += deviceserial2;
 800e9d0:	68fa      	ldr	r2, [r7, #12]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	4413      	add	r3, r2
 800e9d6:	60fb      	str	r3, [r7, #12]

    if (deviceserial0 != 0) {
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d009      	beq.n	800e9f2 <Get_SerialNum+0x3a>
        IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e9de:	2208      	movs	r2, #8
 800e9e0:	4909      	ldr	r1, [pc, #36]	@ (800ea08 <Get_SerialNum+0x50>)
 800e9e2:	68f8      	ldr	r0, [r7, #12]
 800e9e4:	f000 f814 	bl	800ea10 <IntToUnicode>
        IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e9e8:	2204      	movs	r2, #4
 800e9ea:	4908      	ldr	r1, [pc, #32]	@ (800ea0c <Get_SerialNum+0x54>)
 800e9ec:	68b8      	ldr	r0, [r7, #8]
 800e9ee:	f000 f80f 	bl	800ea10 <IntToUnicode>
    }
}
 800e9f2:	bf00      	nop
 800e9f4:	3710      	adds	r7, #16
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	1fff7a10 	.word	0x1fff7a10
 800ea00:	1fff7a14 	.word	0x1fff7a14
 800ea04:	1fff7a18 	.word	0x1fff7a18
 800ea08:	20000112 	.word	0x20000112
 800ea0c:	20000122 	.word	0x20000122

0800ea10 <IntToUnicode>:
 * @param  value: value to convert
 * @param  pbuf: pointer to the buffer
 * @param  len: buffer length
 * @retval None
 */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len) {
 800ea10:	b480      	push	{r7}
 800ea12:	b087      	sub	sp, #28
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	60f8      	str	r0, [r7, #12]
 800ea18:	60b9      	str	r1, [r7, #8]
 800ea1a:	4613      	mov	r3, r2
 800ea1c:	71fb      	strb	r3, [r7, #7]
    uint8_t idx = 0;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	75fb      	strb	r3, [r7, #23]

    for (idx = 0; idx < len; idx++) {
 800ea22:	2300      	movs	r3, #0
 800ea24:	75fb      	strb	r3, [r7, #23]
 800ea26:	e027      	b.n	800ea78 <IntToUnicode+0x68>
        if (((value >> 28)) < 0xA) {
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	0f1b      	lsrs	r3, r3, #28
 800ea2c:	2b09      	cmp	r3, #9
 800ea2e:	d80b      	bhi.n	800ea48 <IntToUnicode+0x38>
            pbuf[2 * idx] = (value >> 28) + '0';
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	0f1b      	lsrs	r3, r3, #28
 800ea34:	b2da      	uxtb	r2, r3
 800ea36:	7dfb      	ldrb	r3, [r7, #23]
 800ea38:	005b      	lsls	r3, r3, #1
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	440b      	add	r3, r1
 800ea40:	3230      	adds	r2, #48	@ 0x30
 800ea42:	b2d2      	uxtb	r2, r2
 800ea44:	701a      	strb	r2, [r3, #0]
 800ea46:	e00a      	b.n	800ea5e <IntToUnicode+0x4e>
        } else {
            pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	0f1b      	lsrs	r3, r3, #28
 800ea4c:	b2da      	uxtb	r2, r3
 800ea4e:	7dfb      	ldrb	r3, [r7, #23]
 800ea50:	005b      	lsls	r3, r3, #1
 800ea52:	4619      	mov	r1, r3
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	440b      	add	r3, r1
 800ea58:	3237      	adds	r2, #55	@ 0x37
 800ea5a:	b2d2      	uxtb	r2, r2
 800ea5c:	701a      	strb	r2, [r3, #0]
        }

        value = value << 4;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	011b      	lsls	r3, r3, #4
 800ea62:	60fb      	str	r3, [r7, #12]

        pbuf[2 * idx + 1] = 0;
 800ea64:	7dfb      	ldrb	r3, [r7, #23]
 800ea66:	005b      	lsls	r3, r3, #1
 800ea68:	3301      	adds	r3, #1
 800ea6a:	68ba      	ldr	r2, [r7, #8]
 800ea6c:	4413      	add	r3, r2
 800ea6e:	2200      	movs	r2, #0
 800ea70:	701a      	strb	r2, [r3, #0]
    for (idx = 0; idx < len; idx++) {
 800ea72:	7dfb      	ldrb	r3, [r7, #23]
 800ea74:	3301      	adds	r3, #1
 800ea76:	75fb      	strb	r3, [r7, #23]
 800ea78:	7dfa      	ldrb	r2, [r7, #23]
 800ea7a:	79fb      	ldrb	r3, [r7, #7]
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d3d3      	bcc.n	800ea28 <IntToUnicode+0x18>
    }
}
 800ea80:	bf00      	nop
 800ea82:	bf00      	nop
 800ea84:	371c      	adds	r7, #28
 800ea86:	46bd      	mov	sp, r7
 800ea88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8c:	4770      	bx	lr
	...

0800ea90 <HAL_PCD_MspInit>:
/*******************************************************************************
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef * pcdHandle) {
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b08a      	sub	sp, #40	@ 0x28
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ea98:	f107 0314 	add.w	r3, r7, #20
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	601a      	str	r2, [r3, #0]
 800eaa0:	605a      	str	r2, [r3, #4]
 800eaa2:	609a      	str	r2, [r3, #8]
 800eaa4:	60da      	str	r2, [r3, #12]
 800eaa6:	611a      	str	r2, [r3, #16]
    if (pcdHandle->Instance == USB_OTG_FS) {
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800eab0:	d13a      	bne.n	800eb28 <HAL_PCD_MspInit+0x98>
        /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

        /* USER CODE END USB_OTG_FS_MspInit 0 */

        __HAL_RCC_GPIOA_CLK_ENABLE();
 800eab2:	2300      	movs	r3, #0
 800eab4:	613b      	str	r3, [r7, #16]
 800eab6:	4b1e      	ldr	r3, [pc, #120]	@ (800eb30 <HAL_PCD_MspInit+0xa0>)
 800eab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eaba:	4a1d      	ldr	r2, [pc, #116]	@ (800eb30 <HAL_PCD_MspInit+0xa0>)
 800eabc:	f043 0301 	orr.w	r3, r3, #1
 800eac0:	6313      	str	r3, [r2, #48]	@ 0x30
 800eac2:	4b1b      	ldr	r3, [pc, #108]	@ (800eb30 <HAL_PCD_MspInit+0xa0>)
 800eac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eac6:	f003 0301 	and.w	r3, r3, #1
 800eaca:	613b      	str	r3, [r7, #16]
 800eacc:	693b      	ldr	r3, [r7, #16]
        /**USB_OTG_FS GPIO Configuration
        PA11     ------> USB_OTG_FS_DM
        PA12     ------> USB_OTG_FS_DP
        */
        GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 800eace:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ead2:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ead4:	2302      	movs	r3, #2
 800ead6:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ead8:	2300      	movs	r3, #0
 800eada:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eadc:	2303      	movs	r3, #3
 800eade:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800eae0:	230a      	movs	r3, #10
 800eae2:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eae4:	f107 0314 	add.w	r3, r7, #20
 800eae8:	4619      	mov	r1, r3
 800eaea:	4812      	ldr	r0, [pc, #72]	@ (800eb34 <HAL_PCD_MspInit+0xa4>)
 800eaec:	f7f5 fb7c 	bl	80041e8 <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800eaf0:	4b0f      	ldr	r3, [pc, #60]	@ (800eb30 <HAL_PCD_MspInit+0xa0>)
 800eaf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eaf4:	4a0e      	ldr	r2, [pc, #56]	@ (800eb30 <HAL_PCD_MspInit+0xa0>)
 800eaf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eafa:	6353      	str	r3, [r2, #52]	@ 0x34
 800eafc:	2300      	movs	r3, #0
 800eafe:	60fb      	str	r3, [r7, #12]
 800eb00:	4b0b      	ldr	r3, [pc, #44]	@ (800eb30 <HAL_PCD_MspInit+0xa0>)
 800eb02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb04:	4a0a      	ldr	r2, [pc, #40]	@ (800eb30 <HAL_PCD_MspInit+0xa0>)
 800eb06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800eb0a:	6453      	str	r3, [r2, #68]	@ 0x44
 800eb0c:	4b08      	ldr	r3, [pc, #32]	@ (800eb30 <HAL_PCD_MspInit+0xa0>)
 800eb0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eb14:	60fb      	str	r3, [r7, #12]
 800eb16:	68fb      	ldr	r3, [r7, #12]

        /* Peripheral interrupt init */
        HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 0);
 800eb18:	2200      	movs	r2, #0
 800eb1a:	2102      	movs	r1, #2
 800eb1c:	2043      	movs	r0, #67	@ 0x43
 800eb1e:	f7f5 f942 	bl	8003da6 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800eb22:	2043      	movs	r0, #67	@ 0x43
 800eb24:	f7f5 f95b 	bl	8003dde <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

        /* USER CODE END USB_OTG_FS_MspInit 1 */
    }
}
 800eb28:	bf00      	nop
 800eb2a:	3728      	adds	r7, #40	@ 0x28
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	40023800 	.word	0x40023800
 800eb34:	40020000 	.word	0x40020000

0800eb38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
    USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800eb4c:	4619      	mov	r1, r3
 800eb4e:	4610      	mov	r0, r2
 800eb50:	f7fb ff0b 	bl	800a96a <USBD_LL_SetupStage>
}
 800eb54:	bf00      	nop
 800eb56:	3708      	adds	r7, #8
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b082      	sub	sp, #8
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	460b      	mov	r3, r1
 800eb66:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800eb6e:	78fa      	ldrb	r2, [r7, #3]
 800eb70:	6879      	ldr	r1, [r7, #4]
 800eb72:	4613      	mov	r3, r2
 800eb74:	00db      	lsls	r3, r3, #3
 800eb76:	4413      	add	r3, r2
 800eb78:	009b      	lsls	r3, r3, #2
 800eb7a:	440b      	add	r3, r1
 800eb7c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800eb80:	681a      	ldr	r2, [r3, #0]
 800eb82:	78fb      	ldrb	r3, [r7, #3]
 800eb84:	4619      	mov	r1, r3
 800eb86:	f7fb ff45 	bl	800aa14 <USBD_LL_DataOutStage>
}
 800eb8a:	bf00      	nop
 800eb8c:	3708      	adds	r7, #8
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}

0800eb92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb92:	b580      	push	{r7, lr}
 800eb94:	b082      	sub	sp, #8
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	6078      	str	r0, [r7, #4]
 800eb9a:	460b      	mov	r3, r1
 800eb9c:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800eba4:	78fa      	ldrb	r2, [r7, #3]
 800eba6:	6879      	ldr	r1, [r7, #4]
 800eba8:	4613      	mov	r3, r2
 800ebaa:	00db      	lsls	r3, r3, #3
 800ebac:	4413      	add	r3, r2
 800ebae:	009b      	lsls	r3, r3, #2
 800ebb0:	440b      	add	r3, r1
 800ebb2:	334c      	adds	r3, #76	@ 0x4c
 800ebb4:	681a      	ldr	r2, [r3, #0]
 800ebb6:	78fb      	ldrb	r3, [r7, #3]
 800ebb8:	4619      	mov	r1, r3
 800ebba:	f7fb ffde 	bl	800ab7a <USBD_LL_DataInStage>
}
 800ebbe:	bf00      	nop
 800ebc0:	3708      	adds	r7, #8
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}

0800ebc6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebc6:	b580      	push	{r7, lr}
 800ebc8:	b082      	sub	sp, #8
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6078      	str	r0, [r7, #4]
    USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f7fc f912 	bl	800adfe <USBD_LL_SOF>
}
 800ebda:	bf00      	nop
 800ebdc:	3708      	adds	r7, #8
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}

0800ebe2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebe2:	b580      	push	{r7, lr}
 800ebe4:	b084      	sub	sp, #16
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	6078      	str	r0, [r7, #4]
    USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ebea:	2301      	movs	r3, #1
 800ebec:	73fb      	strb	r3, [r7, #15]

    if (hpcd->Init.speed != PCD_SPEED_FULL) {
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	68db      	ldr	r3, [r3, #12]
 800ebf2:	2b02      	cmp	r3, #2
 800ebf4:	d001      	beq.n	800ebfa <HAL_PCD_ResetCallback+0x18>
        Error_Handler();
 800ebf6:	f7f3 fa98 	bl	800212a <Error_Handler>
    }
    /* Set Speed. */
    USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ec00:	7bfa      	ldrb	r2, [r7, #15]
 800ec02:	4611      	mov	r1, r2
 800ec04:	4618      	mov	r0, r3
 800ec06:	f7fc f8bc 	bl	800ad82 <USBD_LL_SetSpeed>

    /* Reset Device. */
    USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7fc f864 	bl	800acde <USBD_LL_Reset>
}
 800ec16:	bf00      	nop
 800ec18:	3710      	adds	r7, #16
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
	...

0800ec20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
    /* Inform USB library that core enters in suspend Mode. */
    USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7fc f8b7 	bl	800ada2 <USBD_LL_Suspend>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	687a      	ldr	r2, [r7, #4]
 800ec40:	6812      	ldr	r2, [r2, #0]
 800ec42:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ec46:	f043 0301 	orr.w	r3, r3, #1
 800ec4a:	6013      	str	r3, [r2, #0]
    /* Enter in STOP mode. */
    /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6a1b      	ldr	r3, [r3, #32]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d005      	beq.n	800ec60 <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ec54:	4b04      	ldr	r3, [pc, #16]	@ (800ec68 <HAL_PCD_SuspendCallback+0x48>)
 800ec56:	691b      	ldr	r3, [r3, #16]
 800ec58:	4a03      	ldr	r2, [pc, #12]	@ (800ec68 <HAL_PCD_SuspendCallback+0x48>)
 800ec5a:	f043 0306 	orr.w	r3, r3, #6
 800ec5e:	6113      	str	r3, [r2, #16]
    }
    /* USER CODE END 2 */
}
 800ec60:	bf00      	nop
 800ec62:	3708      	adds	r7, #8
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	e000ed00 	.word	0xe000ed00

0800ec6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b082      	sub	sp, #8
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN 3 */

    /* USER CODE END 3 */
    USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7fc f8a7 	bl	800adce <USBD_LL_Resume>
}
 800ec80:	bf00      	nop
 800ec82:	3708      	adds	r7, #8
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b082      	sub	sp, #8
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	460b      	mov	r3, r1
 800ec92:	70fb      	strb	r3, [r7, #3]
    USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ec9a:	78fa      	ldrb	r2, [r7, #3]
 800ec9c:	4611      	mov	r1, r2
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7fc f8ff 	bl	800aea2 <USBD_LL_IsoOUTIncomplete>
}
 800eca4:	bf00      	nop
 800eca6:	3708      	adds	r7, #8
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b082      	sub	sp, #8
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
 800ecb4:	460b      	mov	r3, r1
 800ecb6:	70fb      	strb	r3, [r7, #3]
    USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ecbe:	78fa      	ldrb	r2, [r7, #3]
 800ecc0:	4611      	mov	r1, r2
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7fc f8bb 	bl	800ae3e <USBD_LL_IsoINIncomplete>
}
 800ecc8:	bf00      	nop
 800ecca:	3708      	adds	r7, #8
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
    USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7fc f911 	bl	800af06 <USBD_LL_DevConnected>
}
 800ece4:	bf00      	nop
 800ece6:	3708      	adds	r7, #8
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b082      	sub	sp, #8
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
    USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7fc f90e 	bl	800af1c <USBD_LL_DevDisconnected>
}
 800ed00:	bf00      	nop
 800ed02:	3708      	adds	r7, #8
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <USBD_LL_Init>:
/**
 * @brief  Initializes the low level portion of the device driver.
 * @param  pdev: Device handle
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef * pdev) {
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
    /* Init USB Ip. */
    if (pdev->id == DEVICE_FS) {
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d13c      	bne.n	800ed92 <USBD_LL_Init+0x8a>
        /* Link the driver to the stack. */
        hpcd_USB_OTG_FS.pData = pdev;
 800ed18:	4a20      	ldr	r2, [pc, #128]	@ (800ed9c <USBD_LL_Init+0x94>)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
        pdev->pData = &hpcd_USB_OTG_FS;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	4a1e      	ldr	r2, [pc, #120]	@ (800ed9c <USBD_LL_Init+0x94>)
 800ed24:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

        hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ed28:	4b1c      	ldr	r3, [pc, #112]	@ (800ed9c <USBD_LL_Init+0x94>)
 800ed2a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ed2e:	601a      	str	r2, [r3, #0]
        hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ed30:	4b1a      	ldr	r3, [pc, #104]	@ (800ed9c <USBD_LL_Init+0x94>)
 800ed32:	2204      	movs	r2, #4
 800ed34:	605a      	str	r2, [r3, #4]
        hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ed36:	4b19      	ldr	r3, [pc, #100]	@ (800ed9c <USBD_LL_Init+0x94>)
 800ed38:	2202      	movs	r2, #2
 800ed3a:	60da      	str	r2, [r3, #12]
        hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ed3c:	4b17      	ldr	r3, [pc, #92]	@ (800ed9c <USBD_LL_Init+0x94>)
 800ed3e:	2200      	movs	r2, #0
 800ed40:	611a      	str	r2, [r3, #16]
        hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ed42:	4b16      	ldr	r3, [pc, #88]	@ (800ed9c <USBD_LL_Init+0x94>)
 800ed44:	2202      	movs	r2, #2
 800ed46:	619a      	str	r2, [r3, #24]
        hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ed48:	4b14      	ldr	r3, [pc, #80]	@ (800ed9c <USBD_LL_Init+0x94>)
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	61da      	str	r2, [r3, #28]
        hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ed4e:	4b13      	ldr	r3, [pc, #76]	@ (800ed9c <USBD_LL_Init+0x94>)
 800ed50:	2200      	movs	r2, #0
 800ed52:	621a      	str	r2, [r3, #32]
        hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ed54:	4b11      	ldr	r3, [pc, #68]	@ (800ed9c <USBD_LL_Init+0x94>)
 800ed56:	2200      	movs	r2, #0
 800ed58:	625a      	str	r2, [r3, #36]	@ 0x24
        hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ed5a:	4b10      	ldr	r3, [pc, #64]	@ (800ed9c <USBD_LL_Init+0x94>)
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ed60:	4b0e      	ldr	r3, [pc, #56]	@ (800ed9c <USBD_LL_Init+0x94>)
 800ed62:	2200      	movs	r2, #0
 800ed64:	631a      	str	r2, [r3, #48]	@ 0x30
        if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 800ed66:	480d      	ldr	r0, [pc, #52]	@ (800ed9c <USBD_LL_Init+0x94>)
 800ed68:	f7f6 fbb3 	bl	80054d2 <HAL_PCD_Init>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d001      	beq.n	800ed76 <USBD_LL_Init+0x6e>
            Error_Handler();
 800ed72:	f7f3 f9da 	bl	800212a <Error_Handler>
        HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
        HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
        HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
        HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ed76:	2180      	movs	r1, #128	@ 0x80
 800ed78:	4808      	ldr	r0, [pc, #32]	@ (800ed9c <USBD_LL_Init+0x94>)
 800ed7a:	f7f7 fe0a 	bl	8006992 <HAL_PCDEx_SetRxFiFo>
        HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ed7e:	2240      	movs	r2, #64	@ 0x40
 800ed80:	2100      	movs	r1, #0
 800ed82:	4806      	ldr	r0, [pc, #24]	@ (800ed9c <USBD_LL_Init+0x94>)
 800ed84:	f7f7 fdbe 	bl	8006904 <HAL_PCDEx_SetTxFiFo>
        HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ed88:	2280      	movs	r2, #128	@ 0x80
 800ed8a:	2101      	movs	r1, #1
 800ed8c:	4803      	ldr	r0, [pc, #12]	@ (800ed9c <USBD_LL_Init+0x94>)
 800ed8e:	f7f7 fdb9 	bl	8006904 <HAL_PCDEx_SetTxFiFo>
    }
    return USBD_OK;
 800ed92:	2300      	movs	r3, #0
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3708      	adds	r7, #8
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}
 800ed9c:	2000154c 	.word	0x2000154c

0800eda0 <USBD_LL_Start>:
/**
 * @brief  Starts the low level portion of the device driver.
 * @param  pdev: Device handle
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef * pdev) {
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b084      	sub	sp, #16
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800eda8:	2300      	movs	r3, #0
 800edaa:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800edac:	2300      	movs	r3, #0
 800edae:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_Start(pdev->pData);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7f6 fca8 	bl	800570c <HAL_PCD_Start>
 800edbc:	4603      	mov	r3, r0
 800edbe:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800edc0:	7bfb      	ldrb	r3, [r7, #15]
 800edc2:	4618      	mov	r0, r3
 800edc4:	f000 f942 	bl	800f04c <USBD_Get_USB_Status>
 800edc8:	4603      	mov	r3, r0
 800edca:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800edcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3710      	adds	r7, #16
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}

0800edd6 <USBD_LL_OpenEP>:
 * @param  ep_addr: Endpoint number
 * @param  ep_type: Endpoint type
 * @param  ep_mps: Endpoint max packet size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps) {
 800edd6:	b580      	push	{r7, lr}
 800edd8:	b084      	sub	sp, #16
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6078      	str	r0, [r7, #4]
 800edde:	4608      	mov	r0, r1
 800ede0:	4611      	mov	r1, r2
 800ede2:	461a      	mov	r2, r3
 800ede4:	4603      	mov	r3, r0
 800ede6:	70fb      	strb	r3, [r7, #3]
 800ede8:	460b      	mov	r3, r1
 800edea:	70bb      	strb	r3, [r7, #2]
 800edec:	4613      	mov	r3, r2
 800edee:	803b      	strh	r3, [r7, #0]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800edf0:	2300      	movs	r3, #0
 800edf2:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800edf4:	2300      	movs	r3, #0
 800edf6:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800edfe:	78bb      	ldrb	r3, [r7, #2]
 800ee00:	883a      	ldrh	r2, [r7, #0]
 800ee02:	78f9      	ldrb	r1, [r7, #3]
 800ee04:	f7f7 f979 	bl	80060fa <HAL_PCD_EP_Open>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800ee0c:	7bfb      	ldrb	r3, [r7, #15]
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f000 f91c 	bl	800f04c <USBD_Get_USB_Status>
 800ee14:	4603      	mov	r3, r0
 800ee16:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800ee18:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3710      	adds	r7, #16
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}

0800ee22 <USBD_LL_CloseEP>:
 * @brief  Closes an endpoint of the low level driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 800ee22:	b580      	push	{r7, lr}
 800ee24:	b084      	sub	sp, #16
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	6078      	str	r0, [r7, #4]
 800ee2a:	460b      	mov	r3, r1
 800ee2c:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800ee32:	2300      	movs	r3, #0
 800ee34:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ee3c:	78fa      	ldrb	r2, [r7, #3]
 800ee3e:	4611      	mov	r1, r2
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7f7 f9c2 	bl	80061ca <HAL_PCD_EP_Close>
 800ee46:	4603      	mov	r3, r0
 800ee48:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800ee4a:	7bfb      	ldrb	r3, [r7, #15]
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f000 f8fd 	bl	800f04c <USBD_Get_USB_Status>
 800ee52:	4603      	mov	r3, r0
 800ee54:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800ee56:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3710      	adds	r7, #16
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <USBD_LL_StallEP>:
 * @brief  Sets a Stall condition on an endpoint of the Low Level Driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b084      	sub	sp, #16
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	460b      	mov	r3, r1
 800ee6a:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800ee70:	2300      	movs	r3, #0
 800ee72:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ee7a:	78fa      	ldrb	r2, [r7, #3]
 800ee7c:	4611      	mov	r1, r2
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7f7 fa9a 	bl	80063b8 <HAL_PCD_EP_SetStall>
 800ee84:	4603      	mov	r3, r0
 800ee86:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800ee88:	7bfb      	ldrb	r3, [r7, #15]
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f000 f8de 	bl	800f04c <USBD_Get_USB_Status>
 800ee90:	4603      	mov	r3, r0
 800ee92:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800ee94:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3710      	adds	r7, #16
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}

0800ee9e <USBD_LL_ClearStallEP>:
 * @brief  Clears a Stall condition on an endpoint of the Low Level Driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 800ee9e:	b580      	push	{r7, lr}
 800eea0:	b084      	sub	sp, #16
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	6078      	str	r0, [r7, #4]
 800eea6:	460b      	mov	r3, r1
 800eea8:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eeb8:	78fa      	ldrb	r2, [r7, #3]
 800eeba:	4611      	mov	r1, r2
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7f7 fadf 	bl	8006480 <HAL_PCD_EP_ClrStall>
 800eec2:	4603      	mov	r3, r0
 800eec4:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800eec6:	7bfb      	ldrb	r3, [r7, #15]
 800eec8:	4618      	mov	r0, r3
 800eeca:	f000 f8bf 	bl	800f04c <USBD_Get_USB_Status>
 800eece:	4603      	mov	r3, r0
 800eed0:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800eed2:	7bbb      	ldrb	r3, [r7, #14]
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	3710      	adds	r7, #16
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}

0800eedc <USBD_LL_IsStallEP>:
 * @brief  Returns Stall condition.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval Stall (1: Yes, 0: No)
 */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 800eedc:	b480      	push	{r7}
 800eede:	b085      	sub	sp, #20
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	460b      	mov	r3, r1
 800eee6:	70fb      	strb	r3, [r7, #3]
    PCD_HandleTypeDef * hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eeee:	60fb      	str	r3, [r7, #12]

    if ((ep_addr & 0x80) == 0x80) {
 800eef0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	da0b      	bge.n	800ef10 <USBD_LL_IsStallEP+0x34>
        return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eef8:	78fb      	ldrb	r3, [r7, #3]
 800eefa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eefe:	68f9      	ldr	r1, [r7, #12]
 800ef00:	4613      	mov	r3, r2
 800ef02:	00db      	lsls	r3, r3, #3
 800ef04:	4413      	add	r3, r2
 800ef06:	009b      	lsls	r3, r3, #2
 800ef08:	440b      	add	r3, r1
 800ef0a:	333e      	adds	r3, #62	@ 0x3e
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	e00b      	b.n	800ef28 <USBD_LL_IsStallEP+0x4c>
    } else {
        return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ef10:	78fb      	ldrb	r3, [r7, #3]
 800ef12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ef16:	68f9      	ldr	r1, [r7, #12]
 800ef18:	4613      	mov	r3, r2
 800ef1a:	00db      	lsls	r3, r3, #3
 800ef1c:	4413      	add	r3, r2
 800ef1e:	009b      	lsls	r3, r3, #2
 800ef20:	440b      	add	r3, r1
 800ef22:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800ef26:	781b      	ldrb	r3, [r3, #0]
    }
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3714      	adds	r7, #20
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr

0800ef34 <USBD_LL_SetUSBAddress>:
 * @brief  Assigns a USB address to the device.
 * @param  pdev: Device handle
 * @param  dev_addr: Device address
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef * pdev, uint8_t dev_addr) {
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b084      	sub	sp, #16
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	460b      	mov	r3, r1
 800ef3e:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800ef40:	2300      	movs	r3, #0
 800ef42:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800ef44:	2300      	movs	r3, #0
 800ef46:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ef4e:	78fa      	ldrb	r2, [r7, #3]
 800ef50:	4611      	mov	r1, r2
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7f7 f8ac 	bl	80060b0 <HAL_PCD_SetAddress>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800ef5c:	7bfb      	ldrb	r3, [r7, #15]
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f000 f874 	bl	800f04c <USBD_Get_USB_Status>
 800ef64:	4603      	mov	r3, r0
 800ef66:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800ef68:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3710      	adds	r7, #16
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}

0800ef72 <USBD_LL_Transmit>:
 * @param  ep_addr: Endpoint number
 * @param  pbuf: Pointer to data to be sent
 * @param  size: Data size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef * pdev, uint8_t ep_addr, uint8_t * pbuf, uint32_t size) {
 800ef72:	b580      	push	{r7, lr}
 800ef74:	b086      	sub	sp, #24
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	60f8      	str	r0, [r7, #12]
 800ef7a:	607a      	str	r2, [r7, #4]
 800ef7c:	603b      	str	r3, [r7, #0]
 800ef7e:	460b      	mov	r3, r1
 800ef80:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800ef82:	2300      	movs	r3, #0
 800ef84:	75fb      	strb	r3, [r7, #23]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800ef86:	2300      	movs	r3, #0
 800ef88:	75bb      	strb	r3, [r7, #22]

    hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ef90:	7af9      	ldrb	r1, [r7, #11]
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	687a      	ldr	r2, [r7, #4]
 800ef96:	f7f7 f9c5 	bl	8006324 <HAL_PCD_EP_Transmit>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	75fb      	strb	r3, [r7, #23]

    usb_status = USBD_Get_USB_Status(hal_status);
 800ef9e:	7dfb      	ldrb	r3, [r7, #23]
 800efa0:	4618      	mov	r0, r3
 800efa2:	f000 f853 	bl	800f04c <USBD_Get_USB_Status>
 800efa6:	4603      	mov	r3, r0
 800efa8:	75bb      	strb	r3, [r7, #22]

    return usb_status;
 800efaa:	7dbb      	ldrb	r3, [r7, #22]
}
 800efac:	4618      	mov	r0, r3
 800efae:	3718      	adds	r7, #24
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}

0800efb4 <USBD_LL_PrepareReceive>:
 * @param  ep_addr: Endpoint number
 * @param  pbuf: Pointer to data to be received
 * @param  size: Data size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef * pdev, uint8_t ep_addr, uint8_t * pbuf, uint32_t size) {
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b086      	sub	sp, #24
 800efb8:	af00      	add	r7, sp, #0
 800efba:	60f8      	str	r0, [r7, #12]
 800efbc:	607a      	str	r2, [r7, #4]
 800efbe:	603b      	str	r3, [r7, #0]
 800efc0:	460b      	mov	r3, r1
 800efc2:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800efc4:	2300      	movs	r3, #0
 800efc6:	75fb      	strb	r3, [r7, #23]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800efc8:	2300      	movs	r3, #0
 800efca:	75bb      	strb	r3, [r7, #22]

    hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800efd2:	7af9      	ldrb	r1, [r7, #11]
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	687a      	ldr	r2, [r7, #4]
 800efd8:	f7f7 f941 	bl	800625e <HAL_PCD_EP_Receive>
 800efdc:	4603      	mov	r3, r0
 800efde:	75fb      	strb	r3, [r7, #23]

    usb_status = USBD_Get_USB_Status(hal_status);
 800efe0:	7dfb      	ldrb	r3, [r7, #23]
 800efe2:	4618      	mov	r0, r3
 800efe4:	f000 f832 	bl	800f04c <USBD_Get_USB_Status>
 800efe8:	4603      	mov	r3, r0
 800efea:	75bb      	strb	r3, [r7, #22]

    return usb_status;
 800efec:	7dbb      	ldrb	r3, [r7, #22]
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3718      	adds	r7, #24
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}

0800eff6 <USBD_LL_GetRxDataSize>:
 * @brief  Returns the last transferred packet size.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval Received Data Size
 */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 800eff6:	b580      	push	{r7, lr}
 800eff8:	b082      	sub	sp, #8
 800effa:	af00      	add	r7, sp, #0
 800effc:	6078      	str	r0, [r7, #4]
 800effe:	460b      	mov	r3, r1
 800f000:	70fb      	strb	r3, [r7, #3]
    return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f008:	78fa      	ldrb	r2, [r7, #3]
 800f00a:	4611      	mov	r1, r2
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7f7 f971 	bl	80062f4 <HAL_PCD_EP_GetRxCount>
 800f012:	4603      	mov	r3, r0
}
 800f014:	4618      	mov	r0, r3
 800f016:	3708      	adds	r7, #8
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <USBD_static_malloc>:
/**
 * @brief  Static single allocation.
 * @param  size: Size of allocated memory
 * @retval None
 */
void * USBD_static_malloc(uint32_t size) {
 800f01c:	b480      	push	{r7}
 800f01e:	b083      	sub	sp, #12
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
    static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
    return mem;
 800f024:	4b03      	ldr	r3, [pc, #12]	@ (800f034 <USBD_static_malloc+0x18>)
}
 800f026:	4618      	mov	r0, r3
 800f028:	370c      	adds	r7, #12
 800f02a:	46bd      	mov	sp, r7
 800f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f030:	4770      	bx	lr
 800f032:	bf00      	nop
 800f034:	20001a58 	.word	0x20001a58

0800f038 <USBD_static_free>:
/**
 * @brief  Dummy memory free
 * @param  p: Pointer to allocated  memory address
 * @retval None
 */
void USBD_static_free(void * p) {
 800f038:	b480      	push	{r7}
 800f03a:	b083      	sub	sp, #12
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
}
 800f040:	bf00      	nop
 800f042:	370c      	adds	r7, #12
 800f044:	46bd      	mov	sp, r7
 800f046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04a:	4770      	bx	lr

0800f04c <USBD_Get_USB_Status>:
/**
 * @brief  Returns the USB status depending on the HAL status:
 * @param  hal_status: HAL status
 * @retval USB status
 */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status) {
 800f04c:	b480      	push	{r7}
 800f04e:	b085      	sub	sp, #20
 800f050:	af00      	add	r7, sp, #0
 800f052:	4603      	mov	r3, r0
 800f054:	71fb      	strb	r3, [r7, #7]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800f056:	2300      	movs	r3, #0
 800f058:	73fb      	strb	r3, [r7, #15]

    switch (hal_status) {
 800f05a:	79fb      	ldrb	r3, [r7, #7]
 800f05c:	2b03      	cmp	r3, #3
 800f05e:	d817      	bhi.n	800f090 <USBD_Get_USB_Status+0x44>
 800f060:	a201      	add	r2, pc, #4	@ (adr r2, 800f068 <USBD_Get_USB_Status+0x1c>)
 800f062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f066:	bf00      	nop
 800f068:	0800f079 	.word	0x0800f079
 800f06c:	0800f07f 	.word	0x0800f07f
 800f070:	0800f085 	.word	0x0800f085
 800f074:	0800f08b 	.word	0x0800f08b
    case HAL_OK:
        usb_status = USBD_OK;
 800f078:	2300      	movs	r3, #0
 800f07a:	73fb      	strb	r3, [r7, #15]
        break;
 800f07c:	e00b      	b.n	800f096 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR:
        usb_status = USBD_FAIL;
 800f07e:	2303      	movs	r3, #3
 800f080:	73fb      	strb	r3, [r7, #15]
        break;
 800f082:	e008      	b.n	800f096 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY:
        usb_status = USBD_BUSY;
 800f084:	2301      	movs	r3, #1
 800f086:	73fb      	strb	r3, [r7, #15]
        break;
 800f088:	e005      	b.n	800f096 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT:
        usb_status = USBD_FAIL;
 800f08a:	2303      	movs	r3, #3
 800f08c:	73fb      	strb	r3, [r7, #15]
        break;
 800f08e:	e002      	b.n	800f096 <USBD_Get_USB_Status+0x4a>
    default:
        usb_status = USBD_FAIL;
 800f090:	2303      	movs	r3, #3
 800f092:	73fb      	strb	r3, [r7, #15]
        break;
 800f094:	bf00      	nop
    }
    return usb_status;
 800f096:	7bfb      	ldrb	r3, [r7, #15]
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3714      	adds	r7, #20
 800f09c:	46bd      	mov	sp, r7
 800f09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a2:	4770      	bx	lr

0800f0a4 <malloc>:
 800f0a4:	4b02      	ldr	r3, [pc, #8]	@ (800f0b0 <malloc+0xc>)
 800f0a6:	4601      	mov	r1, r0
 800f0a8:	6818      	ldr	r0, [r3, #0]
 800f0aa:	f000 b82d 	b.w	800f108 <_malloc_r>
 800f0ae:	bf00      	nop
 800f0b0:	20000138 	.word	0x20000138

0800f0b4 <free>:
 800f0b4:	4b02      	ldr	r3, [pc, #8]	@ (800f0c0 <free+0xc>)
 800f0b6:	4601      	mov	r1, r0
 800f0b8:	6818      	ldr	r0, [r3, #0]
 800f0ba:	f001 bd09 	b.w	8010ad0 <_free_r>
 800f0be:	bf00      	nop
 800f0c0:	20000138 	.word	0x20000138

0800f0c4 <sbrk_aligned>:
 800f0c4:	b570      	push	{r4, r5, r6, lr}
 800f0c6:	4e0f      	ldr	r6, [pc, #60]	@ (800f104 <sbrk_aligned+0x40>)
 800f0c8:	460c      	mov	r4, r1
 800f0ca:	6831      	ldr	r1, [r6, #0]
 800f0cc:	4605      	mov	r5, r0
 800f0ce:	b911      	cbnz	r1, 800f0d6 <sbrk_aligned+0x12>
 800f0d0:	f000 fe52 	bl	800fd78 <_sbrk_r>
 800f0d4:	6030      	str	r0, [r6, #0]
 800f0d6:	4621      	mov	r1, r4
 800f0d8:	4628      	mov	r0, r5
 800f0da:	f000 fe4d 	bl	800fd78 <_sbrk_r>
 800f0de:	1c43      	adds	r3, r0, #1
 800f0e0:	d103      	bne.n	800f0ea <sbrk_aligned+0x26>
 800f0e2:	f04f 34ff 	mov.w	r4, #4294967295
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	bd70      	pop	{r4, r5, r6, pc}
 800f0ea:	1cc4      	adds	r4, r0, #3
 800f0ec:	f024 0403 	bic.w	r4, r4, #3
 800f0f0:	42a0      	cmp	r0, r4
 800f0f2:	d0f8      	beq.n	800f0e6 <sbrk_aligned+0x22>
 800f0f4:	1a21      	subs	r1, r4, r0
 800f0f6:	4628      	mov	r0, r5
 800f0f8:	f000 fe3e 	bl	800fd78 <_sbrk_r>
 800f0fc:	3001      	adds	r0, #1
 800f0fe:	d1f2      	bne.n	800f0e6 <sbrk_aligned+0x22>
 800f100:	e7ef      	b.n	800f0e2 <sbrk_aligned+0x1e>
 800f102:	bf00      	nop
 800f104:	20001c78 	.word	0x20001c78

0800f108 <_malloc_r>:
 800f108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f10c:	1ccd      	adds	r5, r1, #3
 800f10e:	f025 0503 	bic.w	r5, r5, #3
 800f112:	3508      	adds	r5, #8
 800f114:	2d0c      	cmp	r5, #12
 800f116:	bf38      	it	cc
 800f118:	250c      	movcc	r5, #12
 800f11a:	2d00      	cmp	r5, #0
 800f11c:	4606      	mov	r6, r0
 800f11e:	db01      	blt.n	800f124 <_malloc_r+0x1c>
 800f120:	42a9      	cmp	r1, r5
 800f122:	d904      	bls.n	800f12e <_malloc_r+0x26>
 800f124:	230c      	movs	r3, #12
 800f126:	6033      	str	r3, [r6, #0]
 800f128:	2000      	movs	r0, #0
 800f12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f12e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f204 <_malloc_r+0xfc>
 800f132:	f000 f869 	bl	800f208 <__malloc_lock>
 800f136:	f8d8 3000 	ldr.w	r3, [r8]
 800f13a:	461c      	mov	r4, r3
 800f13c:	bb44      	cbnz	r4, 800f190 <_malloc_r+0x88>
 800f13e:	4629      	mov	r1, r5
 800f140:	4630      	mov	r0, r6
 800f142:	f7ff ffbf 	bl	800f0c4 <sbrk_aligned>
 800f146:	1c43      	adds	r3, r0, #1
 800f148:	4604      	mov	r4, r0
 800f14a:	d158      	bne.n	800f1fe <_malloc_r+0xf6>
 800f14c:	f8d8 4000 	ldr.w	r4, [r8]
 800f150:	4627      	mov	r7, r4
 800f152:	2f00      	cmp	r7, #0
 800f154:	d143      	bne.n	800f1de <_malloc_r+0xd6>
 800f156:	2c00      	cmp	r4, #0
 800f158:	d04b      	beq.n	800f1f2 <_malloc_r+0xea>
 800f15a:	6823      	ldr	r3, [r4, #0]
 800f15c:	4639      	mov	r1, r7
 800f15e:	4630      	mov	r0, r6
 800f160:	eb04 0903 	add.w	r9, r4, r3
 800f164:	f000 fe08 	bl	800fd78 <_sbrk_r>
 800f168:	4581      	cmp	r9, r0
 800f16a:	d142      	bne.n	800f1f2 <_malloc_r+0xea>
 800f16c:	6821      	ldr	r1, [r4, #0]
 800f16e:	1a6d      	subs	r5, r5, r1
 800f170:	4629      	mov	r1, r5
 800f172:	4630      	mov	r0, r6
 800f174:	f7ff ffa6 	bl	800f0c4 <sbrk_aligned>
 800f178:	3001      	adds	r0, #1
 800f17a:	d03a      	beq.n	800f1f2 <_malloc_r+0xea>
 800f17c:	6823      	ldr	r3, [r4, #0]
 800f17e:	442b      	add	r3, r5
 800f180:	6023      	str	r3, [r4, #0]
 800f182:	f8d8 3000 	ldr.w	r3, [r8]
 800f186:	685a      	ldr	r2, [r3, #4]
 800f188:	bb62      	cbnz	r2, 800f1e4 <_malloc_r+0xdc>
 800f18a:	f8c8 7000 	str.w	r7, [r8]
 800f18e:	e00f      	b.n	800f1b0 <_malloc_r+0xa8>
 800f190:	6822      	ldr	r2, [r4, #0]
 800f192:	1b52      	subs	r2, r2, r5
 800f194:	d420      	bmi.n	800f1d8 <_malloc_r+0xd0>
 800f196:	2a0b      	cmp	r2, #11
 800f198:	d917      	bls.n	800f1ca <_malloc_r+0xc2>
 800f19a:	1961      	adds	r1, r4, r5
 800f19c:	42a3      	cmp	r3, r4
 800f19e:	6025      	str	r5, [r4, #0]
 800f1a0:	bf18      	it	ne
 800f1a2:	6059      	strne	r1, [r3, #4]
 800f1a4:	6863      	ldr	r3, [r4, #4]
 800f1a6:	bf08      	it	eq
 800f1a8:	f8c8 1000 	streq.w	r1, [r8]
 800f1ac:	5162      	str	r2, [r4, r5]
 800f1ae:	604b      	str	r3, [r1, #4]
 800f1b0:	4630      	mov	r0, r6
 800f1b2:	f000 f82f 	bl	800f214 <__malloc_unlock>
 800f1b6:	f104 000b 	add.w	r0, r4, #11
 800f1ba:	1d23      	adds	r3, r4, #4
 800f1bc:	f020 0007 	bic.w	r0, r0, #7
 800f1c0:	1ac2      	subs	r2, r0, r3
 800f1c2:	bf1c      	itt	ne
 800f1c4:	1a1b      	subne	r3, r3, r0
 800f1c6:	50a3      	strne	r3, [r4, r2]
 800f1c8:	e7af      	b.n	800f12a <_malloc_r+0x22>
 800f1ca:	6862      	ldr	r2, [r4, #4]
 800f1cc:	42a3      	cmp	r3, r4
 800f1ce:	bf0c      	ite	eq
 800f1d0:	f8c8 2000 	streq.w	r2, [r8]
 800f1d4:	605a      	strne	r2, [r3, #4]
 800f1d6:	e7eb      	b.n	800f1b0 <_malloc_r+0xa8>
 800f1d8:	4623      	mov	r3, r4
 800f1da:	6864      	ldr	r4, [r4, #4]
 800f1dc:	e7ae      	b.n	800f13c <_malloc_r+0x34>
 800f1de:	463c      	mov	r4, r7
 800f1e0:	687f      	ldr	r7, [r7, #4]
 800f1e2:	e7b6      	b.n	800f152 <_malloc_r+0x4a>
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	685b      	ldr	r3, [r3, #4]
 800f1e8:	42a3      	cmp	r3, r4
 800f1ea:	d1fb      	bne.n	800f1e4 <_malloc_r+0xdc>
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	6053      	str	r3, [r2, #4]
 800f1f0:	e7de      	b.n	800f1b0 <_malloc_r+0xa8>
 800f1f2:	230c      	movs	r3, #12
 800f1f4:	6033      	str	r3, [r6, #0]
 800f1f6:	4630      	mov	r0, r6
 800f1f8:	f000 f80c 	bl	800f214 <__malloc_unlock>
 800f1fc:	e794      	b.n	800f128 <_malloc_r+0x20>
 800f1fe:	6005      	str	r5, [r0, #0]
 800f200:	e7d6      	b.n	800f1b0 <_malloc_r+0xa8>
 800f202:	bf00      	nop
 800f204:	20001c7c 	.word	0x20001c7c

0800f208 <__malloc_lock>:
 800f208:	4801      	ldr	r0, [pc, #4]	@ (800f210 <__malloc_lock+0x8>)
 800f20a:	f000 be02 	b.w	800fe12 <__retarget_lock_acquire_recursive>
 800f20e:	bf00      	nop
 800f210:	20001dc0 	.word	0x20001dc0

0800f214 <__malloc_unlock>:
 800f214:	4801      	ldr	r0, [pc, #4]	@ (800f21c <__malloc_unlock+0x8>)
 800f216:	f000 bdfd 	b.w	800fe14 <__retarget_lock_release_recursive>
 800f21a:	bf00      	nop
 800f21c:	20001dc0 	.word	0x20001dc0

0800f220 <__cvt>:
 800f220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f224:	ec57 6b10 	vmov	r6, r7, d0
 800f228:	2f00      	cmp	r7, #0
 800f22a:	460c      	mov	r4, r1
 800f22c:	4619      	mov	r1, r3
 800f22e:	463b      	mov	r3, r7
 800f230:	bfbb      	ittet	lt
 800f232:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f236:	461f      	movlt	r7, r3
 800f238:	2300      	movge	r3, #0
 800f23a:	232d      	movlt	r3, #45	@ 0x2d
 800f23c:	700b      	strb	r3, [r1, #0]
 800f23e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f240:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f244:	4691      	mov	r9, r2
 800f246:	f023 0820 	bic.w	r8, r3, #32
 800f24a:	bfbc      	itt	lt
 800f24c:	4632      	movlt	r2, r6
 800f24e:	4616      	movlt	r6, r2
 800f250:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f254:	d005      	beq.n	800f262 <__cvt+0x42>
 800f256:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f25a:	d100      	bne.n	800f25e <__cvt+0x3e>
 800f25c:	3401      	adds	r4, #1
 800f25e:	2102      	movs	r1, #2
 800f260:	e000      	b.n	800f264 <__cvt+0x44>
 800f262:	2103      	movs	r1, #3
 800f264:	ab03      	add	r3, sp, #12
 800f266:	9301      	str	r3, [sp, #4]
 800f268:	ab02      	add	r3, sp, #8
 800f26a:	9300      	str	r3, [sp, #0]
 800f26c:	ec47 6b10 	vmov	d0, r6, r7
 800f270:	4653      	mov	r3, sl
 800f272:	4622      	mov	r2, r4
 800f274:	f000 fe68 	bl	800ff48 <_dtoa_r>
 800f278:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f27c:	4605      	mov	r5, r0
 800f27e:	d119      	bne.n	800f2b4 <__cvt+0x94>
 800f280:	f019 0f01 	tst.w	r9, #1
 800f284:	d00e      	beq.n	800f2a4 <__cvt+0x84>
 800f286:	eb00 0904 	add.w	r9, r0, r4
 800f28a:	2200      	movs	r2, #0
 800f28c:	2300      	movs	r3, #0
 800f28e:	4630      	mov	r0, r6
 800f290:	4639      	mov	r1, r7
 800f292:	f7f1 fc21 	bl	8000ad8 <__aeabi_dcmpeq>
 800f296:	b108      	cbz	r0, 800f29c <__cvt+0x7c>
 800f298:	f8cd 900c 	str.w	r9, [sp, #12]
 800f29c:	2230      	movs	r2, #48	@ 0x30
 800f29e:	9b03      	ldr	r3, [sp, #12]
 800f2a0:	454b      	cmp	r3, r9
 800f2a2:	d31e      	bcc.n	800f2e2 <__cvt+0xc2>
 800f2a4:	9b03      	ldr	r3, [sp, #12]
 800f2a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f2a8:	1b5b      	subs	r3, r3, r5
 800f2aa:	4628      	mov	r0, r5
 800f2ac:	6013      	str	r3, [r2, #0]
 800f2ae:	b004      	add	sp, #16
 800f2b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f2b8:	eb00 0904 	add.w	r9, r0, r4
 800f2bc:	d1e5      	bne.n	800f28a <__cvt+0x6a>
 800f2be:	7803      	ldrb	r3, [r0, #0]
 800f2c0:	2b30      	cmp	r3, #48	@ 0x30
 800f2c2:	d10a      	bne.n	800f2da <__cvt+0xba>
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	4630      	mov	r0, r6
 800f2ca:	4639      	mov	r1, r7
 800f2cc:	f7f1 fc04 	bl	8000ad8 <__aeabi_dcmpeq>
 800f2d0:	b918      	cbnz	r0, 800f2da <__cvt+0xba>
 800f2d2:	f1c4 0401 	rsb	r4, r4, #1
 800f2d6:	f8ca 4000 	str.w	r4, [sl]
 800f2da:	f8da 3000 	ldr.w	r3, [sl]
 800f2de:	4499      	add	r9, r3
 800f2e0:	e7d3      	b.n	800f28a <__cvt+0x6a>
 800f2e2:	1c59      	adds	r1, r3, #1
 800f2e4:	9103      	str	r1, [sp, #12]
 800f2e6:	701a      	strb	r2, [r3, #0]
 800f2e8:	e7d9      	b.n	800f29e <__cvt+0x7e>

0800f2ea <__exponent>:
 800f2ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2ec:	2900      	cmp	r1, #0
 800f2ee:	bfba      	itte	lt
 800f2f0:	4249      	neglt	r1, r1
 800f2f2:	232d      	movlt	r3, #45	@ 0x2d
 800f2f4:	232b      	movge	r3, #43	@ 0x2b
 800f2f6:	2909      	cmp	r1, #9
 800f2f8:	7002      	strb	r2, [r0, #0]
 800f2fa:	7043      	strb	r3, [r0, #1]
 800f2fc:	dd29      	ble.n	800f352 <__exponent+0x68>
 800f2fe:	f10d 0307 	add.w	r3, sp, #7
 800f302:	461d      	mov	r5, r3
 800f304:	270a      	movs	r7, #10
 800f306:	461a      	mov	r2, r3
 800f308:	fbb1 f6f7 	udiv	r6, r1, r7
 800f30c:	fb07 1416 	mls	r4, r7, r6, r1
 800f310:	3430      	adds	r4, #48	@ 0x30
 800f312:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f316:	460c      	mov	r4, r1
 800f318:	2c63      	cmp	r4, #99	@ 0x63
 800f31a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f31e:	4631      	mov	r1, r6
 800f320:	dcf1      	bgt.n	800f306 <__exponent+0x1c>
 800f322:	3130      	adds	r1, #48	@ 0x30
 800f324:	1e94      	subs	r4, r2, #2
 800f326:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f32a:	1c41      	adds	r1, r0, #1
 800f32c:	4623      	mov	r3, r4
 800f32e:	42ab      	cmp	r3, r5
 800f330:	d30a      	bcc.n	800f348 <__exponent+0x5e>
 800f332:	f10d 0309 	add.w	r3, sp, #9
 800f336:	1a9b      	subs	r3, r3, r2
 800f338:	42ac      	cmp	r4, r5
 800f33a:	bf88      	it	hi
 800f33c:	2300      	movhi	r3, #0
 800f33e:	3302      	adds	r3, #2
 800f340:	4403      	add	r3, r0
 800f342:	1a18      	subs	r0, r3, r0
 800f344:	b003      	add	sp, #12
 800f346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f348:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f34c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f350:	e7ed      	b.n	800f32e <__exponent+0x44>
 800f352:	2330      	movs	r3, #48	@ 0x30
 800f354:	3130      	adds	r1, #48	@ 0x30
 800f356:	7083      	strb	r3, [r0, #2]
 800f358:	70c1      	strb	r1, [r0, #3]
 800f35a:	1d03      	adds	r3, r0, #4
 800f35c:	e7f1      	b.n	800f342 <__exponent+0x58>
	...

0800f360 <_printf_float>:
 800f360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f364:	b08d      	sub	sp, #52	@ 0x34
 800f366:	460c      	mov	r4, r1
 800f368:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f36c:	4616      	mov	r6, r2
 800f36e:	461f      	mov	r7, r3
 800f370:	4605      	mov	r5, r0
 800f372:	f000 fcc9 	bl	800fd08 <_localeconv_r>
 800f376:	6803      	ldr	r3, [r0, #0]
 800f378:	9304      	str	r3, [sp, #16]
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7f0 ff80 	bl	8000280 <strlen>
 800f380:	2300      	movs	r3, #0
 800f382:	930a      	str	r3, [sp, #40]	@ 0x28
 800f384:	f8d8 3000 	ldr.w	r3, [r8]
 800f388:	9005      	str	r0, [sp, #20]
 800f38a:	3307      	adds	r3, #7
 800f38c:	f023 0307 	bic.w	r3, r3, #7
 800f390:	f103 0208 	add.w	r2, r3, #8
 800f394:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f398:	f8d4 b000 	ldr.w	fp, [r4]
 800f39c:	f8c8 2000 	str.w	r2, [r8]
 800f3a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f3a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f3a8:	9307      	str	r3, [sp, #28]
 800f3aa:	f8cd 8018 	str.w	r8, [sp, #24]
 800f3ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f3b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f3b6:	4b9c      	ldr	r3, [pc, #624]	@ (800f628 <_printf_float+0x2c8>)
 800f3b8:	f04f 32ff 	mov.w	r2, #4294967295
 800f3bc:	f7f1 fbbe 	bl	8000b3c <__aeabi_dcmpun>
 800f3c0:	bb70      	cbnz	r0, 800f420 <_printf_float+0xc0>
 800f3c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f3c6:	4b98      	ldr	r3, [pc, #608]	@ (800f628 <_printf_float+0x2c8>)
 800f3c8:	f04f 32ff 	mov.w	r2, #4294967295
 800f3cc:	f7f1 fb98 	bl	8000b00 <__aeabi_dcmple>
 800f3d0:	bb30      	cbnz	r0, 800f420 <_printf_float+0xc0>
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	4640      	mov	r0, r8
 800f3d8:	4649      	mov	r1, r9
 800f3da:	f7f1 fb87 	bl	8000aec <__aeabi_dcmplt>
 800f3de:	b110      	cbz	r0, 800f3e6 <_printf_float+0x86>
 800f3e0:	232d      	movs	r3, #45	@ 0x2d
 800f3e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f3e6:	4a91      	ldr	r2, [pc, #580]	@ (800f62c <_printf_float+0x2cc>)
 800f3e8:	4b91      	ldr	r3, [pc, #580]	@ (800f630 <_printf_float+0x2d0>)
 800f3ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f3ee:	bf94      	ite	ls
 800f3f0:	4690      	movls	r8, r2
 800f3f2:	4698      	movhi	r8, r3
 800f3f4:	2303      	movs	r3, #3
 800f3f6:	6123      	str	r3, [r4, #16]
 800f3f8:	f02b 0304 	bic.w	r3, fp, #4
 800f3fc:	6023      	str	r3, [r4, #0]
 800f3fe:	f04f 0900 	mov.w	r9, #0
 800f402:	9700      	str	r7, [sp, #0]
 800f404:	4633      	mov	r3, r6
 800f406:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f408:	4621      	mov	r1, r4
 800f40a:	4628      	mov	r0, r5
 800f40c:	f000 f9d2 	bl	800f7b4 <_printf_common>
 800f410:	3001      	adds	r0, #1
 800f412:	f040 808d 	bne.w	800f530 <_printf_float+0x1d0>
 800f416:	f04f 30ff 	mov.w	r0, #4294967295
 800f41a:	b00d      	add	sp, #52	@ 0x34
 800f41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f420:	4642      	mov	r2, r8
 800f422:	464b      	mov	r3, r9
 800f424:	4640      	mov	r0, r8
 800f426:	4649      	mov	r1, r9
 800f428:	f7f1 fb88 	bl	8000b3c <__aeabi_dcmpun>
 800f42c:	b140      	cbz	r0, 800f440 <_printf_float+0xe0>
 800f42e:	464b      	mov	r3, r9
 800f430:	2b00      	cmp	r3, #0
 800f432:	bfbc      	itt	lt
 800f434:	232d      	movlt	r3, #45	@ 0x2d
 800f436:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f43a:	4a7e      	ldr	r2, [pc, #504]	@ (800f634 <_printf_float+0x2d4>)
 800f43c:	4b7e      	ldr	r3, [pc, #504]	@ (800f638 <_printf_float+0x2d8>)
 800f43e:	e7d4      	b.n	800f3ea <_printf_float+0x8a>
 800f440:	6863      	ldr	r3, [r4, #4]
 800f442:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f446:	9206      	str	r2, [sp, #24]
 800f448:	1c5a      	adds	r2, r3, #1
 800f44a:	d13b      	bne.n	800f4c4 <_printf_float+0x164>
 800f44c:	2306      	movs	r3, #6
 800f44e:	6063      	str	r3, [r4, #4]
 800f450:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f454:	2300      	movs	r3, #0
 800f456:	6022      	str	r2, [r4, #0]
 800f458:	9303      	str	r3, [sp, #12]
 800f45a:	ab0a      	add	r3, sp, #40	@ 0x28
 800f45c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f460:	ab09      	add	r3, sp, #36	@ 0x24
 800f462:	9300      	str	r3, [sp, #0]
 800f464:	6861      	ldr	r1, [r4, #4]
 800f466:	ec49 8b10 	vmov	d0, r8, r9
 800f46a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f46e:	4628      	mov	r0, r5
 800f470:	f7ff fed6 	bl	800f220 <__cvt>
 800f474:	9b06      	ldr	r3, [sp, #24]
 800f476:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f478:	2b47      	cmp	r3, #71	@ 0x47
 800f47a:	4680      	mov	r8, r0
 800f47c:	d129      	bne.n	800f4d2 <_printf_float+0x172>
 800f47e:	1cc8      	adds	r0, r1, #3
 800f480:	db02      	blt.n	800f488 <_printf_float+0x128>
 800f482:	6863      	ldr	r3, [r4, #4]
 800f484:	4299      	cmp	r1, r3
 800f486:	dd41      	ble.n	800f50c <_printf_float+0x1ac>
 800f488:	f1aa 0a02 	sub.w	sl, sl, #2
 800f48c:	fa5f fa8a 	uxtb.w	sl, sl
 800f490:	3901      	subs	r1, #1
 800f492:	4652      	mov	r2, sl
 800f494:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f498:	9109      	str	r1, [sp, #36]	@ 0x24
 800f49a:	f7ff ff26 	bl	800f2ea <__exponent>
 800f49e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f4a0:	1813      	adds	r3, r2, r0
 800f4a2:	2a01      	cmp	r2, #1
 800f4a4:	4681      	mov	r9, r0
 800f4a6:	6123      	str	r3, [r4, #16]
 800f4a8:	dc02      	bgt.n	800f4b0 <_printf_float+0x150>
 800f4aa:	6822      	ldr	r2, [r4, #0]
 800f4ac:	07d2      	lsls	r2, r2, #31
 800f4ae:	d501      	bpl.n	800f4b4 <_printf_float+0x154>
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	6123      	str	r3, [r4, #16]
 800f4b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d0a2      	beq.n	800f402 <_printf_float+0xa2>
 800f4bc:	232d      	movs	r3, #45	@ 0x2d
 800f4be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f4c2:	e79e      	b.n	800f402 <_printf_float+0xa2>
 800f4c4:	9a06      	ldr	r2, [sp, #24]
 800f4c6:	2a47      	cmp	r2, #71	@ 0x47
 800f4c8:	d1c2      	bne.n	800f450 <_printf_float+0xf0>
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d1c0      	bne.n	800f450 <_printf_float+0xf0>
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	e7bd      	b.n	800f44e <_printf_float+0xee>
 800f4d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f4d6:	d9db      	bls.n	800f490 <_printf_float+0x130>
 800f4d8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f4dc:	d118      	bne.n	800f510 <_printf_float+0x1b0>
 800f4de:	2900      	cmp	r1, #0
 800f4e0:	6863      	ldr	r3, [r4, #4]
 800f4e2:	dd0b      	ble.n	800f4fc <_printf_float+0x19c>
 800f4e4:	6121      	str	r1, [r4, #16]
 800f4e6:	b913      	cbnz	r3, 800f4ee <_printf_float+0x18e>
 800f4e8:	6822      	ldr	r2, [r4, #0]
 800f4ea:	07d0      	lsls	r0, r2, #31
 800f4ec:	d502      	bpl.n	800f4f4 <_printf_float+0x194>
 800f4ee:	3301      	adds	r3, #1
 800f4f0:	440b      	add	r3, r1
 800f4f2:	6123      	str	r3, [r4, #16]
 800f4f4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f4f6:	f04f 0900 	mov.w	r9, #0
 800f4fa:	e7db      	b.n	800f4b4 <_printf_float+0x154>
 800f4fc:	b913      	cbnz	r3, 800f504 <_printf_float+0x1a4>
 800f4fe:	6822      	ldr	r2, [r4, #0]
 800f500:	07d2      	lsls	r2, r2, #31
 800f502:	d501      	bpl.n	800f508 <_printf_float+0x1a8>
 800f504:	3302      	adds	r3, #2
 800f506:	e7f4      	b.n	800f4f2 <_printf_float+0x192>
 800f508:	2301      	movs	r3, #1
 800f50a:	e7f2      	b.n	800f4f2 <_printf_float+0x192>
 800f50c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f510:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f512:	4299      	cmp	r1, r3
 800f514:	db05      	blt.n	800f522 <_printf_float+0x1c2>
 800f516:	6823      	ldr	r3, [r4, #0]
 800f518:	6121      	str	r1, [r4, #16]
 800f51a:	07d8      	lsls	r0, r3, #31
 800f51c:	d5ea      	bpl.n	800f4f4 <_printf_float+0x194>
 800f51e:	1c4b      	adds	r3, r1, #1
 800f520:	e7e7      	b.n	800f4f2 <_printf_float+0x192>
 800f522:	2900      	cmp	r1, #0
 800f524:	bfd4      	ite	le
 800f526:	f1c1 0202 	rsble	r2, r1, #2
 800f52a:	2201      	movgt	r2, #1
 800f52c:	4413      	add	r3, r2
 800f52e:	e7e0      	b.n	800f4f2 <_printf_float+0x192>
 800f530:	6823      	ldr	r3, [r4, #0]
 800f532:	055a      	lsls	r2, r3, #21
 800f534:	d407      	bmi.n	800f546 <_printf_float+0x1e6>
 800f536:	6923      	ldr	r3, [r4, #16]
 800f538:	4642      	mov	r2, r8
 800f53a:	4631      	mov	r1, r6
 800f53c:	4628      	mov	r0, r5
 800f53e:	47b8      	blx	r7
 800f540:	3001      	adds	r0, #1
 800f542:	d12b      	bne.n	800f59c <_printf_float+0x23c>
 800f544:	e767      	b.n	800f416 <_printf_float+0xb6>
 800f546:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f54a:	f240 80dd 	bls.w	800f708 <_printf_float+0x3a8>
 800f54e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f552:	2200      	movs	r2, #0
 800f554:	2300      	movs	r3, #0
 800f556:	f7f1 fabf 	bl	8000ad8 <__aeabi_dcmpeq>
 800f55a:	2800      	cmp	r0, #0
 800f55c:	d033      	beq.n	800f5c6 <_printf_float+0x266>
 800f55e:	4a37      	ldr	r2, [pc, #220]	@ (800f63c <_printf_float+0x2dc>)
 800f560:	2301      	movs	r3, #1
 800f562:	4631      	mov	r1, r6
 800f564:	4628      	mov	r0, r5
 800f566:	47b8      	blx	r7
 800f568:	3001      	adds	r0, #1
 800f56a:	f43f af54 	beq.w	800f416 <_printf_float+0xb6>
 800f56e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f572:	4543      	cmp	r3, r8
 800f574:	db02      	blt.n	800f57c <_printf_float+0x21c>
 800f576:	6823      	ldr	r3, [r4, #0]
 800f578:	07d8      	lsls	r0, r3, #31
 800f57a:	d50f      	bpl.n	800f59c <_printf_float+0x23c>
 800f57c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f580:	4631      	mov	r1, r6
 800f582:	4628      	mov	r0, r5
 800f584:	47b8      	blx	r7
 800f586:	3001      	adds	r0, #1
 800f588:	f43f af45 	beq.w	800f416 <_printf_float+0xb6>
 800f58c:	f04f 0900 	mov.w	r9, #0
 800f590:	f108 38ff 	add.w	r8, r8, #4294967295
 800f594:	f104 0a1a 	add.w	sl, r4, #26
 800f598:	45c8      	cmp	r8, r9
 800f59a:	dc09      	bgt.n	800f5b0 <_printf_float+0x250>
 800f59c:	6823      	ldr	r3, [r4, #0]
 800f59e:	079b      	lsls	r3, r3, #30
 800f5a0:	f100 8103 	bmi.w	800f7aa <_printf_float+0x44a>
 800f5a4:	68e0      	ldr	r0, [r4, #12]
 800f5a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f5a8:	4298      	cmp	r0, r3
 800f5aa:	bfb8      	it	lt
 800f5ac:	4618      	movlt	r0, r3
 800f5ae:	e734      	b.n	800f41a <_printf_float+0xba>
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	4652      	mov	r2, sl
 800f5b4:	4631      	mov	r1, r6
 800f5b6:	4628      	mov	r0, r5
 800f5b8:	47b8      	blx	r7
 800f5ba:	3001      	adds	r0, #1
 800f5bc:	f43f af2b 	beq.w	800f416 <_printf_float+0xb6>
 800f5c0:	f109 0901 	add.w	r9, r9, #1
 800f5c4:	e7e8      	b.n	800f598 <_printf_float+0x238>
 800f5c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	dc39      	bgt.n	800f640 <_printf_float+0x2e0>
 800f5cc:	4a1b      	ldr	r2, [pc, #108]	@ (800f63c <_printf_float+0x2dc>)
 800f5ce:	2301      	movs	r3, #1
 800f5d0:	4631      	mov	r1, r6
 800f5d2:	4628      	mov	r0, r5
 800f5d4:	47b8      	blx	r7
 800f5d6:	3001      	adds	r0, #1
 800f5d8:	f43f af1d 	beq.w	800f416 <_printf_float+0xb6>
 800f5dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f5e0:	ea59 0303 	orrs.w	r3, r9, r3
 800f5e4:	d102      	bne.n	800f5ec <_printf_float+0x28c>
 800f5e6:	6823      	ldr	r3, [r4, #0]
 800f5e8:	07d9      	lsls	r1, r3, #31
 800f5ea:	d5d7      	bpl.n	800f59c <_printf_float+0x23c>
 800f5ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f5f0:	4631      	mov	r1, r6
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	47b8      	blx	r7
 800f5f6:	3001      	adds	r0, #1
 800f5f8:	f43f af0d 	beq.w	800f416 <_printf_float+0xb6>
 800f5fc:	f04f 0a00 	mov.w	sl, #0
 800f600:	f104 0b1a 	add.w	fp, r4, #26
 800f604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f606:	425b      	negs	r3, r3
 800f608:	4553      	cmp	r3, sl
 800f60a:	dc01      	bgt.n	800f610 <_printf_float+0x2b0>
 800f60c:	464b      	mov	r3, r9
 800f60e:	e793      	b.n	800f538 <_printf_float+0x1d8>
 800f610:	2301      	movs	r3, #1
 800f612:	465a      	mov	r2, fp
 800f614:	4631      	mov	r1, r6
 800f616:	4628      	mov	r0, r5
 800f618:	47b8      	blx	r7
 800f61a:	3001      	adds	r0, #1
 800f61c:	f43f aefb 	beq.w	800f416 <_printf_float+0xb6>
 800f620:	f10a 0a01 	add.w	sl, sl, #1
 800f624:	e7ee      	b.n	800f604 <_printf_float+0x2a4>
 800f626:	bf00      	nop
 800f628:	7fefffff 	.word	0x7fefffff
 800f62c:	08011dc0 	.word	0x08011dc0
 800f630:	08011dc4 	.word	0x08011dc4
 800f634:	08011dc8 	.word	0x08011dc8
 800f638:	08011dcc 	.word	0x08011dcc
 800f63c:	08011dd0 	.word	0x08011dd0
 800f640:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f642:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f646:	4553      	cmp	r3, sl
 800f648:	bfa8      	it	ge
 800f64a:	4653      	movge	r3, sl
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	4699      	mov	r9, r3
 800f650:	dc36      	bgt.n	800f6c0 <_printf_float+0x360>
 800f652:	f04f 0b00 	mov.w	fp, #0
 800f656:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f65a:	f104 021a 	add.w	r2, r4, #26
 800f65e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f660:	9306      	str	r3, [sp, #24]
 800f662:	eba3 0309 	sub.w	r3, r3, r9
 800f666:	455b      	cmp	r3, fp
 800f668:	dc31      	bgt.n	800f6ce <_printf_float+0x36e>
 800f66a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f66c:	459a      	cmp	sl, r3
 800f66e:	dc3a      	bgt.n	800f6e6 <_printf_float+0x386>
 800f670:	6823      	ldr	r3, [r4, #0]
 800f672:	07da      	lsls	r2, r3, #31
 800f674:	d437      	bmi.n	800f6e6 <_printf_float+0x386>
 800f676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f678:	ebaa 0903 	sub.w	r9, sl, r3
 800f67c:	9b06      	ldr	r3, [sp, #24]
 800f67e:	ebaa 0303 	sub.w	r3, sl, r3
 800f682:	4599      	cmp	r9, r3
 800f684:	bfa8      	it	ge
 800f686:	4699      	movge	r9, r3
 800f688:	f1b9 0f00 	cmp.w	r9, #0
 800f68c:	dc33      	bgt.n	800f6f6 <_printf_float+0x396>
 800f68e:	f04f 0800 	mov.w	r8, #0
 800f692:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f696:	f104 0b1a 	add.w	fp, r4, #26
 800f69a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f69c:	ebaa 0303 	sub.w	r3, sl, r3
 800f6a0:	eba3 0309 	sub.w	r3, r3, r9
 800f6a4:	4543      	cmp	r3, r8
 800f6a6:	f77f af79 	ble.w	800f59c <_printf_float+0x23c>
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	465a      	mov	r2, fp
 800f6ae:	4631      	mov	r1, r6
 800f6b0:	4628      	mov	r0, r5
 800f6b2:	47b8      	blx	r7
 800f6b4:	3001      	adds	r0, #1
 800f6b6:	f43f aeae 	beq.w	800f416 <_printf_float+0xb6>
 800f6ba:	f108 0801 	add.w	r8, r8, #1
 800f6be:	e7ec      	b.n	800f69a <_printf_float+0x33a>
 800f6c0:	4642      	mov	r2, r8
 800f6c2:	4631      	mov	r1, r6
 800f6c4:	4628      	mov	r0, r5
 800f6c6:	47b8      	blx	r7
 800f6c8:	3001      	adds	r0, #1
 800f6ca:	d1c2      	bne.n	800f652 <_printf_float+0x2f2>
 800f6cc:	e6a3      	b.n	800f416 <_printf_float+0xb6>
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	4631      	mov	r1, r6
 800f6d2:	4628      	mov	r0, r5
 800f6d4:	9206      	str	r2, [sp, #24]
 800f6d6:	47b8      	blx	r7
 800f6d8:	3001      	adds	r0, #1
 800f6da:	f43f ae9c 	beq.w	800f416 <_printf_float+0xb6>
 800f6de:	9a06      	ldr	r2, [sp, #24]
 800f6e0:	f10b 0b01 	add.w	fp, fp, #1
 800f6e4:	e7bb      	b.n	800f65e <_printf_float+0x2fe>
 800f6e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6ea:	4631      	mov	r1, r6
 800f6ec:	4628      	mov	r0, r5
 800f6ee:	47b8      	blx	r7
 800f6f0:	3001      	adds	r0, #1
 800f6f2:	d1c0      	bne.n	800f676 <_printf_float+0x316>
 800f6f4:	e68f      	b.n	800f416 <_printf_float+0xb6>
 800f6f6:	9a06      	ldr	r2, [sp, #24]
 800f6f8:	464b      	mov	r3, r9
 800f6fa:	4442      	add	r2, r8
 800f6fc:	4631      	mov	r1, r6
 800f6fe:	4628      	mov	r0, r5
 800f700:	47b8      	blx	r7
 800f702:	3001      	adds	r0, #1
 800f704:	d1c3      	bne.n	800f68e <_printf_float+0x32e>
 800f706:	e686      	b.n	800f416 <_printf_float+0xb6>
 800f708:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f70c:	f1ba 0f01 	cmp.w	sl, #1
 800f710:	dc01      	bgt.n	800f716 <_printf_float+0x3b6>
 800f712:	07db      	lsls	r3, r3, #31
 800f714:	d536      	bpl.n	800f784 <_printf_float+0x424>
 800f716:	2301      	movs	r3, #1
 800f718:	4642      	mov	r2, r8
 800f71a:	4631      	mov	r1, r6
 800f71c:	4628      	mov	r0, r5
 800f71e:	47b8      	blx	r7
 800f720:	3001      	adds	r0, #1
 800f722:	f43f ae78 	beq.w	800f416 <_printf_float+0xb6>
 800f726:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f72a:	4631      	mov	r1, r6
 800f72c:	4628      	mov	r0, r5
 800f72e:	47b8      	blx	r7
 800f730:	3001      	adds	r0, #1
 800f732:	f43f ae70 	beq.w	800f416 <_printf_float+0xb6>
 800f736:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f73a:	2200      	movs	r2, #0
 800f73c:	2300      	movs	r3, #0
 800f73e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f742:	f7f1 f9c9 	bl	8000ad8 <__aeabi_dcmpeq>
 800f746:	b9c0      	cbnz	r0, 800f77a <_printf_float+0x41a>
 800f748:	4653      	mov	r3, sl
 800f74a:	f108 0201 	add.w	r2, r8, #1
 800f74e:	4631      	mov	r1, r6
 800f750:	4628      	mov	r0, r5
 800f752:	47b8      	blx	r7
 800f754:	3001      	adds	r0, #1
 800f756:	d10c      	bne.n	800f772 <_printf_float+0x412>
 800f758:	e65d      	b.n	800f416 <_printf_float+0xb6>
 800f75a:	2301      	movs	r3, #1
 800f75c:	465a      	mov	r2, fp
 800f75e:	4631      	mov	r1, r6
 800f760:	4628      	mov	r0, r5
 800f762:	47b8      	blx	r7
 800f764:	3001      	adds	r0, #1
 800f766:	f43f ae56 	beq.w	800f416 <_printf_float+0xb6>
 800f76a:	f108 0801 	add.w	r8, r8, #1
 800f76e:	45d0      	cmp	r8, sl
 800f770:	dbf3      	blt.n	800f75a <_printf_float+0x3fa>
 800f772:	464b      	mov	r3, r9
 800f774:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f778:	e6df      	b.n	800f53a <_printf_float+0x1da>
 800f77a:	f04f 0800 	mov.w	r8, #0
 800f77e:	f104 0b1a 	add.w	fp, r4, #26
 800f782:	e7f4      	b.n	800f76e <_printf_float+0x40e>
 800f784:	2301      	movs	r3, #1
 800f786:	4642      	mov	r2, r8
 800f788:	e7e1      	b.n	800f74e <_printf_float+0x3ee>
 800f78a:	2301      	movs	r3, #1
 800f78c:	464a      	mov	r2, r9
 800f78e:	4631      	mov	r1, r6
 800f790:	4628      	mov	r0, r5
 800f792:	47b8      	blx	r7
 800f794:	3001      	adds	r0, #1
 800f796:	f43f ae3e 	beq.w	800f416 <_printf_float+0xb6>
 800f79a:	f108 0801 	add.w	r8, r8, #1
 800f79e:	68e3      	ldr	r3, [r4, #12]
 800f7a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f7a2:	1a5b      	subs	r3, r3, r1
 800f7a4:	4543      	cmp	r3, r8
 800f7a6:	dcf0      	bgt.n	800f78a <_printf_float+0x42a>
 800f7a8:	e6fc      	b.n	800f5a4 <_printf_float+0x244>
 800f7aa:	f04f 0800 	mov.w	r8, #0
 800f7ae:	f104 0919 	add.w	r9, r4, #25
 800f7b2:	e7f4      	b.n	800f79e <_printf_float+0x43e>

0800f7b4 <_printf_common>:
 800f7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7b8:	4616      	mov	r6, r2
 800f7ba:	4698      	mov	r8, r3
 800f7bc:	688a      	ldr	r2, [r1, #8]
 800f7be:	690b      	ldr	r3, [r1, #16]
 800f7c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f7c4:	4293      	cmp	r3, r2
 800f7c6:	bfb8      	it	lt
 800f7c8:	4613      	movlt	r3, r2
 800f7ca:	6033      	str	r3, [r6, #0]
 800f7cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f7d0:	4607      	mov	r7, r0
 800f7d2:	460c      	mov	r4, r1
 800f7d4:	b10a      	cbz	r2, 800f7da <_printf_common+0x26>
 800f7d6:	3301      	adds	r3, #1
 800f7d8:	6033      	str	r3, [r6, #0]
 800f7da:	6823      	ldr	r3, [r4, #0]
 800f7dc:	0699      	lsls	r1, r3, #26
 800f7de:	bf42      	ittt	mi
 800f7e0:	6833      	ldrmi	r3, [r6, #0]
 800f7e2:	3302      	addmi	r3, #2
 800f7e4:	6033      	strmi	r3, [r6, #0]
 800f7e6:	6825      	ldr	r5, [r4, #0]
 800f7e8:	f015 0506 	ands.w	r5, r5, #6
 800f7ec:	d106      	bne.n	800f7fc <_printf_common+0x48>
 800f7ee:	f104 0a19 	add.w	sl, r4, #25
 800f7f2:	68e3      	ldr	r3, [r4, #12]
 800f7f4:	6832      	ldr	r2, [r6, #0]
 800f7f6:	1a9b      	subs	r3, r3, r2
 800f7f8:	42ab      	cmp	r3, r5
 800f7fa:	dc26      	bgt.n	800f84a <_printf_common+0x96>
 800f7fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f800:	6822      	ldr	r2, [r4, #0]
 800f802:	3b00      	subs	r3, #0
 800f804:	bf18      	it	ne
 800f806:	2301      	movne	r3, #1
 800f808:	0692      	lsls	r2, r2, #26
 800f80a:	d42b      	bmi.n	800f864 <_printf_common+0xb0>
 800f80c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f810:	4641      	mov	r1, r8
 800f812:	4638      	mov	r0, r7
 800f814:	47c8      	blx	r9
 800f816:	3001      	adds	r0, #1
 800f818:	d01e      	beq.n	800f858 <_printf_common+0xa4>
 800f81a:	6823      	ldr	r3, [r4, #0]
 800f81c:	6922      	ldr	r2, [r4, #16]
 800f81e:	f003 0306 	and.w	r3, r3, #6
 800f822:	2b04      	cmp	r3, #4
 800f824:	bf02      	ittt	eq
 800f826:	68e5      	ldreq	r5, [r4, #12]
 800f828:	6833      	ldreq	r3, [r6, #0]
 800f82a:	1aed      	subeq	r5, r5, r3
 800f82c:	68a3      	ldr	r3, [r4, #8]
 800f82e:	bf0c      	ite	eq
 800f830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f834:	2500      	movne	r5, #0
 800f836:	4293      	cmp	r3, r2
 800f838:	bfc4      	itt	gt
 800f83a:	1a9b      	subgt	r3, r3, r2
 800f83c:	18ed      	addgt	r5, r5, r3
 800f83e:	2600      	movs	r6, #0
 800f840:	341a      	adds	r4, #26
 800f842:	42b5      	cmp	r5, r6
 800f844:	d11a      	bne.n	800f87c <_printf_common+0xc8>
 800f846:	2000      	movs	r0, #0
 800f848:	e008      	b.n	800f85c <_printf_common+0xa8>
 800f84a:	2301      	movs	r3, #1
 800f84c:	4652      	mov	r2, sl
 800f84e:	4641      	mov	r1, r8
 800f850:	4638      	mov	r0, r7
 800f852:	47c8      	blx	r9
 800f854:	3001      	adds	r0, #1
 800f856:	d103      	bne.n	800f860 <_printf_common+0xac>
 800f858:	f04f 30ff 	mov.w	r0, #4294967295
 800f85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f860:	3501      	adds	r5, #1
 800f862:	e7c6      	b.n	800f7f2 <_printf_common+0x3e>
 800f864:	18e1      	adds	r1, r4, r3
 800f866:	1c5a      	adds	r2, r3, #1
 800f868:	2030      	movs	r0, #48	@ 0x30
 800f86a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f86e:	4422      	add	r2, r4
 800f870:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f874:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f878:	3302      	adds	r3, #2
 800f87a:	e7c7      	b.n	800f80c <_printf_common+0x58>
 800f87c:	2301      	movs	r3, #1
 800f87e:	4622      	mov	r2, r4
 800f880:	4641      	mov	r1, r8
 800f882:	4638      	mov	r0, r7
 800f884:	47c8      	blx	r9
 800f886:	3001      	adds	r0, #1
 800f888:	d0e6      	beq.n	800f858 <_printf_common+0xa4>
 800f88a:	3601      	adds	r6, #1
 800f88c:	e7d9      	b.n	800f842 <_printf_common+0x8e>
	...

0800f890 <_printf_i>:
 800f890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f894:	7e0f      	ldrb	r7, [r1, #24]
 800f896:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f898:	2f78      	cmp	r7, #120	@ 0x78
 800f89a:	4691      	mov	r9, r2
 800f89c:	4680      	mov	r8, r0
 800f89e:	460c      	mov	r4, r1
 800f8a0:	469a      	mov	sl, r3
 800f8a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f8a6:	d807      	bhi.n	800f8b8 <_printf_i+0x28>
 800f8a8:	2f62      	cmp	r7, #98	@ 0x62
 800f8aa:	d80a      	bhi.n	800f8c2 <_printf_i+0x32>
 800f8ac:	2f00      	cmp	r7, #0
 800f8ae:	f000 80d2 	beq.w	800fa56 <_printf_i+0x1c6>
 800f8b2:	2f58      	cmp	r7, #88	@ 0x58
 800f8b4:	f000 80b9 	beq.w	800fa2a <_printf_i+0x19a>
 800f8b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f8bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f8c0:	e03a      	b.n	800f938 <_printf_i+0xa8>
 800f8c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f8c6:	2b15      	cmp	r3, #21
 800f8c8:	d8f6      	bhi.n	800f8b8 <_printf_i+0x28>
 800f8ca:	a101      	add	r1, pc, #4	@ (adr r1, 800f8d0 <_printf_i+0x40>)
 800f8cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f8d0:	0800f929 	.word	0x0800f929
 800f8d4:	0800f93d 	.word	0x0800f93d
 800f8d8:	0800f8b9 	.word	0x0800f8b9
 800f8dc:	0800f8b9 	.word	0x0800f8b9
 800f8e0:	0800f8b9 	.word	0x0800f8b9
 800f8e4:	0800f8b9 	.word	0x0800f8b9
 800f8e8:	0800f93d 	.word	0x0800f93d
 800f8ec:	0800f8b9 	.word	0x0800f8b9
 800f8f0:	0800f8b9 	.word	0x0800f8b9
 800f8f4:	0800f8b9 	.word	0x0800f8b9
 800f8f8:	0800f8b9 	.word	0x0800f8b9
 800f8fc:	0800fa3d 	.word	0x0800fa3d
 800f900:	0800f967 	.word	0x0800f967
 800f904:	0800f9f7 	.word	0x0800f9f7
 800f908:	0800f8b9 	.word	0x0800f8b9
 800f90c:	0800f8b9 	.word	0x0800f8b9
 800f910:	0800fa5f 	.word	0x0800fa5f
 800f914:	0800f8b9 	.word	0x0800f8b9
 800f918:	0800f967 	.word	0x0800f967
 800f91c:	0800f8b9 	.word	0x0800f8b9
 800f920:	0800f8b9 	.word	0x0800f8b9
 800f924:	0800f9ff 	.word	0x0800f9ff
 800f928:	6833      	ldr	r3, [r6, #0]
 800f92a:	1d1a      	adds	r2, r3, #4
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	6032      	str	r2, [r6, #0]
 800f930:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f934:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f938:	2301      	movs	r3, #1
 800f93a:	e09d      	b.n	800fa78 <_printf_i+0x1e8>
 800f93c:	6833      	ldr	r3, [r6, #0]
 800f93e:	6820      	ldr	r0, [r4, #0]
 800f940:	1d19      	adds	r1, r3, #4
 800f942:	6031      	str	r1, [r6, #0]
 800f944:	0606      	lsls	r6, r0, #24
 800f946:	d501      	bpl.n	800f94c <_printf_i+0xbc>
 800f948:	681d      	ldr	r5, [r3, #0]
 800f94a:	e003      	b.n	800f954 <_printf_i+0xc4>
 800f94c:	0645      	lsls	r5, r0, #25
 800f94e:	d5fb      	bpl.n	800f948 <_printf_i+0xb8>
 800f950:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f954:	2d00      	cmp	r5, #0
 800f956:	da03      	bge.n	800f960 <_printf_i+0xd0>
 800f958:	232d      	movs	r3, #45	@ 0x2d
 800f95a:	426d      	negs	r5, r5
 800f95c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f960:	4859      	ldr	r0, [pc, #356]	@ (800fac8 <_printf_i+0x238>)
 800f962:	230a      	movs	r3, #10
 800f964:	e011      	b.n	800f98a <_printf_i+0xfa>
 800f966:	6821      	ldr	r1, [r4, #0]
 800f968:	6833      	ldr	r3, [r6, #0]
 800f96a:	0608      	lsls	r0, r1, #24
 800f96c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f970:	d402      	bmi.n	800f978 <_printf_i+0xe8>
 800f972:	0649      	lsls	r1, r1, #25
 800f974:	bf48      	it	mi
 800f976:	b2ad      	uxthmi	r5, r5
 800f978:	2f6f      	cmp	r7, #111	@ 0x6f
 800f97a:	4853      	ldr	r0, [pc, #332]	@ (800fac8 <_printf_i+0x238>)
 800f97c:	6033      	str	r3, [r6, #0]
 800f97e:	bf14      	ite	ne
 800f980:	230a      	movne	r3, #10
 800f982:	2308      	moveq	r3, #8
 800f984:	2100      	movs	r1, #0
 800f986:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f98a:	6866      	ldr	r6, [r4, #4]
 800f98c:	60a6      	str	r6, [r4, #8]
 800f98e:	2e00      	cmp	r6, #0
 800f990:	bfa2      	ittt	ge
 800f992:	6821      	ldrge	r1, [r4, #0]
 800f994:	f021 0104 	bicge.w	r1, r1, #4
 800f998:	6021      	strge	r1, [r4, #0]
 800f99a:	b90d      	cbnz	r5, 800f9a0 <_printf_i+0x110>
 800f99c:	2e00      	cmp	r6, #0
 800f99e:	d04b      	beq.n	800fa38 <_printf_i+0x1a8>
 800f9a0:	4616      	mov	r6, r2
 800f9a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800f9a6:	fb03 5711 	mls	r7, r3, r1, r5
 800f9aa:	5dc7      	ldrb	r7, [r0, r7]
 800f9ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f9b0:	462f      	mov	r7, r5
 800f9b2:	42bb      	cmp	r3, r7
 800f9b4:	460d      	mov	r5, r1
 800f9b6:	d9f4      	bls.n	800f9a2 <_printf_i+0x112>
 800f9b8:	2b08      	cmp	r3, #8
 800f9ba:	d10b      	bne.n	800f9d4 <_printf_i+0x144>
 800f9bc:	6823      	ldr	r3, [r4, #0]
 800f9be:	07df      	lsls	r7, r3, #31
 800f9c0:	d508      	bpl.n	800f9d4 <_printf_i+0x144>
 800f9c2:	6923      	ldr	r3, [r4, #16]
 800f9c4:	6861      	ldr	r1, [r4, #4]
 800f9c6:	4299      	cmp	r1, r3
 800f9c8:	bfde      	ittt	le
 800f9ca:	2330      	movle	r3, #48	@ 0x30
 800f9cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f9d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f9d4:	1b92      	subs	r2, r2, r6
 800f9d6:	6122      	str	r2, [r4, #16]
 800f9d8:	f8cd a000 	str.w	sl, [sp]
 800f9dc:	464b      	mov	r3, r9
 800f9de:	aa03      	add	r2, sp, #12
 800f9e0:	4621      	mov	r1, r4
 800f9e2:	4640      	mov	r0, r8
 800f9e4:	f7ff fee6 	bl	800f7b4 <_printf_common>
 800f9e8:	3001      	adds	r0, #1
 800f9ea:	d14a      	bne.n	800fa82 <_printf_i+0x1f2>
 800f9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f9f0:	b004      	add	sp, #16
 800f9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9f6:	6823      	ldr	r3, [r4, #0]
 800f9f8:	f043 0320 	orr.w	r3, r3, #32
 800f9fc:	6023      	str	r3, [r4, #0]
 800f9fe:	4833      	ldr	r0, [pc, #204]	@ (800facc <_printf_i+0x23c>)
 800fa00:	2778      	movs	r7, #120	@ 0x78
 800fa02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fa06:	6823      	ldr	r3, [r4, #0]
 800fa08:	6831      	ldr	r1, [r6, #0]
 800fa0a:	061f      	lsls	r7, r3, #24
 800fa0c:	f851 5b04 	ldr.w	r5, [r1], #4
 800fa10:	d402      	bmi.n	800fa18 <_printf_i+0x188>
 800fa12:	065f      	lsls	r7, r3, #25
 800fa14:	bf48      	it	mi
 800fa16:	b2ad      	uxthmi	r5, r5
 800fa18:	6031      	str	r1, [r6, #0]
 800fa1a:	07d9      	lsls	r1, r3, #31
 800fa1c:	bf44      	itt	mi
 800fa1e:	f043 0320 	orrmi.w	r3, r3, #32
 800fa22:	6023      	strmi	r3, [r4, #0]
 800fa24:	b11d      	cbz	r5, 800fa2e <_printf_i+0x19e>
 800fa26:	2310      	movs	r3, #16
 800fa28:	e7ac      	b.n	800f984 <_printf_i+0xf4>
 800fa2a:	4827      	ldr	r0, [pc, #156]	@ (800fac8 <_printf_i+0x238>)
 800fa2c:	e7e9      	b.n	800fa02 <_printf_i+0x172>
 800fa2e:	6823      	ldr	r3, [r4, #0]
 800fa30:	f023 0320 	bic.w	r3, r3, #32
 800fa34:	6023      	str	r3, [r4, #0]
 800fa36:	e7f6      	b.n	800fa26 <_printf_i+0x196>
 800fa38:	4616      	mov	r6, r2
 800fa3a:	e7bd      	b.n	800f9b8 <_printf_i+0x128>
 800fa3c:	6833      	ldr	r3, [r6, #0]
 800fa3e:	6825      	ldr	r5, [r4, #0]
 800fa40:	6961      	ldr	r1, [r4, #20]
 800fa42:	1d18      	adds	r0, r3, #4
 800fa44:	6030      	str	r0, [r6, #0]
 800fa46:	062e      	lsls	r6, r5, #24
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	d501      	bpl.n	800fa50 <_printf_i+0x1c0>
 800fa4c:	6019      	str	r1, [r3, #0]
 800fa4e:	e002      	b.n	800fa56 <_printf_i+0x1c6>
 800fa50:	0668      	lsls	r0, r5, #25
 800fa52:	d5fb      	bpl.n	800fa4c <_printf_i+0x1bc>
 800fa54:	8019      	strh	r1, [r3, #0]
 800fa56:	2300      	movs	r3, #0
 800fa58:	6123      	str	r3, [r4, #16]
 800fa5a:	4616      	mov	r6, r2
 800fa5c:	e7bc      	b.n	800f9d8 <_printf_i+0x148>
 800fa5e:	6833      	ldr	r3, [r6, #0]
 800fa60:	1d1a      	adds	r2, r3, #4
 800fa62:	6032      	str	r2, [r6, #0]
 800fa64:	681e      	ldr	r6, [r3, #0]
 800fa66:	6862      	ldr	r2, [r4, #4]
 800fa68:	2100      	movs	r1, #0
 800fa6a:	4630      	mov	r0, r6
 800fa6c:	f7f0 fbb8 	bl	80001e0 <memchr>
 800fa70:	b108      	cbz	r0, 800fa76 <_printf_i+0x1e6>
 800fa72:	1b80      	subs	r0, r0, r6
 800fa74:	6060      	str	r0, [r4, #4]
 800fa76:	6863      	ldr	r3, [r4, #4]
 800fa78:	6123      	str	r3, [r4, #16]
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa80:	e7aa      	b.n	800f9d8 <_printf_i+0x148>
 800fa82:	6923      	ldr	r3, [r4, #16]
 800fa84:	4632      	mov	r2, r6
 800fa86:	4649      	mov	r1, r9
 800fa88:	4640      	mov	r0, r8
 800fa8a:	47d0      	blx	sl
 800fa8c:	3001      	adds	r0, #1
 800fa8e:	d0ad      	beq.n	800f9ec <_printf_i+0x15c>
 800fa90:	6823      	ldr	r3, [r4, #0]
 800fa92:	079b      	lsls	r3, r3, #30
 800fa94:	d413      	bmi.n	800fabe <_printf_i+0x22e>
 800fa96:	68e0      	ldr	r0, [r4, #12]
 800fa98:	9b03      	ldr	r3, [sp, #12]
 800fa9a:	4298      	cmp	r0, r3
 800fa9c:	bfb8      	it	lt
 800fa9e:	4618      	movlt	r0, r3
 800faa0:	e7a6      	b.n	800f9f0 <_printf_i+0x160>
 800faa2:	2301      	movs	r3, #1
 800faa4:	4632      	mov	r2, r6
 800faa6:	4649      	mov	r1, r9
 800faa8:	4640      	mov	r0, r8
 800faaa:	47d0      	blx	sl
 800faac:	3001      	adds	r0, #1
 800faae:	d09d      	beq.n	800f9ec <_printf_i+0x15c>
 800fab0:	3501      	adds	r5, #1
 800fab2:	68e3      	ldr	r3, [r4, #12]
 800fab4:	9903      	ldr	r1, [sp, #12]
 800fab6:	1a5b      	subs	r3, r3, r1
 800fab8:	42ab      	cmp	r3, r5
 800faba:	dcf2      	bgt.n	800faa2 <_printf_i+0x212>
 800fabc:	e7eb      	b.n	800fa96 <_printf_i+0x206>
 800fabe:	2500      	movs	r5, #0
 800fac0:	f104 0619 	add.w	r6, r4, #25
 800fac4:	e7f5      	b.n	800fab2 <_printf_i+0x222>
 800fac6:	bf00      	nop
 800fac8:	08011dd2 	.word	0x08011dd2
 800facc:	08011de3 	.word	0x08011de3

0800fad0 <std>:
 800fad0:	2300      	movs	r3, #0
 800fad2:	b510      	push	{r4, lr}
 800fad4:	4604      	mov	r4, r0
 800fad6:	e9c0 3300 	strd	r3, r3, [r0]
 800fada:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fade:	6083      	str	r3, [r0, #8]
 800fae0:	8181      	strh	r1, [r0, #12]
 800fae2:	6643      	str	r3, [r0, #100]	@ 0x64
 800fae4:	81c2      	strh	r2, [r0, #14]
 800fae6:	6183      	str	r3, [r0, #24]
 800fae8:	4619      	mov	r1, r3
 800faea:	2208      	movs	r2, #8
 800faec:	305c      	adds	r0, #92	@ 0x5c
 800faee:	f000 f8f4 	bl	800fcda <memset>
 800faf2:	4b0d      	ldr	r3, [pc, #52]	@ (800fb28 <std+0x58>)
 800faf4:	6263      	str	r3, [r4, #36]	@ 0x24
 800faf6:	4b0d      	ldr	r3, [pc, #52]	@ (800fb2c <std+0x5c>)
 800faf8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fafa:	4b0d      	ldr	r3, [pc, #52]	@ (800fb30 <std+0x60>)
 800fafc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fafe:	4b0d      	ldr	r3, [pc, #52]	@ (800fb34 <std+0x64>)
 800fb00:	6323      	str	r3, [r4, #48]	@ 0x30
 800fb02:	4b0d      	ldr	r3, [pc, #52]	@ (800fb38 <std+0x68>)
 800fb04:	6224      	str	r4, [r4, #32]
 800fb06:	429c      	cmp	r4, r3
 800fb08:	d006      	beq.n	800fb18 <std+0x48>
 800fb0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fb0e:	4294      	cmp	r4, r2
 800fb10:	d002      	beq.n	800fb18 <std+0x48>
 800fb12:	33d0      	adds	r3, #208	@ 0xd0
 800fb14:	429c      	cmp	r4, r3
 800fb16:	d105      	bne.n	800fb24 <std+0x54>
 800fb18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fb1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb20:	f000 b976 	b.w	800fe10 <__retarget_lock_init_recursive>
 800fb24:	bd10      	pop	{r4, pc}
 800fb26:	bf00      	nop
 800fb28:	0800fc55 	.word	0x0800fc55
 800fb2c:	0800fc77 	.word	0x0800fc77
 800fb30:	0800fcaf 	.word	0x0800fcaf
 800fb34:	0800fcd3 	.word	0x0800fcd3
 800fb38:	20001c80 	.word	0x20001c80

0800fb3c <stdio_exit_handler>:
 800fb3c:	4a02      	ldr	r2, [pc, #8]	@ (800fb48 <stdio_exit_handler+0xc>)
 800fb3e:	4903      	ldr	r1, [pc, #12]	@ (800fb4c <stdio_exit_handler+0x10>)
 800fb40:	4803      	ldr	r0, [pc, #12]	@ (800fb50 <stdio_exit_handler+0x14>)
 800fb42:	f000 b869 	b.w	800fc18 <_fwalk_sglue>
 800fb46:	bf00      	nop
 800fb48:	2000012c 	.word	0x2000012c
 800fb4c:	08011371 	.word	0x08011371
 800fb50:	2000013c 	.word	0x2000013c

0800fb54 <cleanup_stdio>:
 800fb54:	6841      	ldr	r1, [r0, #4]
 800fb56:	4b0c      	ldr	r3, [pc, #48]	@ (800fb88 <cleanup_stdio+0x34>)
 800fb58:	4299      	cmp	r1, r3
 800fb5a:	b510      	push	{r4, lr}
 800fb5c:	4604      	mov	r4, r0
 800fb5e:	d001      	beq.n	800fb64 <cleanup_stdio+0x10>
 800fb60:	f001 fc06 	bl	8011370 <_fflush_r>
 800fb64:	68a1      	ldr	r1, [r4, #8]
 800fb66:	4b09      	ldr	r3, [pc, #36]	@ (800fb8c <cleanup_stdio+0x38>)
 800fb68:	4299      	cmp	r1, r3
 800fb6a:	d002      	beq.n	800fb72 <cleanup_stdio+0x1e>
 800fb6c:	4620      	mov	r0, r4
 800fb6e:	f001 fbff 	bl	8011370 <_fflush_r>
 800fb72:	68e1      	ldr	r1, [r4, #12]
 800fb74:	4b06      	ldr	r3, [pc, #24]	@ (800fb90 <cleanup_stdio+0x3c>)
 800fb76:	4299      	cmp	r1, r3
 800fb78:	d004      	beq.n	800fb84 <cleanup_stdio+0x30>
 800fb7a:	4620      	mov	r0, r4
 800fb7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb80:	f001 bbf6 	b.w	8011370 <_fflush_r>
 800fb84:	bd10      	pop	{r4, pc}
 800fb86:	bf00      	nop
 800fb88:	20001c80 	.word	0x20001c80
 800fb8c:	20001ce8 	.word	0x20001ce8
 800fb90:	20001d50 	.word	0x20001d50

0800fb94 <global_stdio_init.part.0>:
 800fb94:	b510      	push	{r4, lr}
 800fb96:	4b0b      	ldr	r3, [pc, #44]	@ (800fbc4 <global_stdio_init.part.0+0x30>)
 800fb98:	4c0b      	ldr	r4, [pc, #44]	@ (800fbc8 <global_stdio_init.part.0+0x34>)
 800fb9a:	4a0c      	ldr	r2, [pc, #48]	@ (800fbcc <global_stdio_init.part.0+0x38>)
 800fb9c:	601a      	str	r2, [r3, #0]
 800fb9e:	4620      	mov	r0, r4
 800fba0:	2200      	movs	r2, #0
 800fba2:	2104      	movs	r1, #4
 800fba4:	f7ff ff94 	bl	800fad0 <std>
 800fba8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fbac:	2201      	movs	r2, #1
 800fbae:	2109      	movs	r1, #9
 800fbb0:	f7ff ff8e 	bl	800fad0 <std>
 800fbb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fbb8:	2202      	movs	r2, #2
 800fbba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbbe:	2112      	movs	r1, #18
 800fbc0:	f7ff bf86 	b.w	800fad0 <std>
 800fbc4:	20001db8 	.word	0x20001db8
 800fbc8:	20001c80 	.word	0x20001c80
 800fbcc:	0800fb3d 	.word	0x0800fb3d

0800fbd0 <__sfp_lock_acquire>:
 800fbd0:	4801      	ldr	r0, [pc, #4]	@ (800fbd8 <__sfp_lock_acquire+0x8>)
 800fbd2:	f000 b91e 	b.w	800fe12 <__retarget_lock_acquire_recursive>
 800fbd6:	bf00      	nop
 800fbd8:	20001dc1 	.word	0x20001dc1

0800fbdc <__sfp_lock_release>:
 800fbdc:	4801      	ldr	r0, [pc, #4]	@ (800fbe4 <__sfp_lock_release+0x8>)
 800fbde:	f000 b919 	b.w	800fe14 <__retarget_lock_release_recursive>
 800fbe2:	bf00      	nop
 800fbe4:	20001dc1 	.word	0x20001dc1

0800fbe8 <__sinit>:
 800fbe8:	b510      	push	{r4, lr}
 800fbea:	4604      	mov	r4, r0
 800fbec:	f7ff fff0 	bl	800fbd0 <__sfp_lock_acquire>
 800fbf0:	6a23      	ldr	r3, [r4, #32]
 800fbf2:	b11b      	cbz	r3, 800fbfc <__sinit+0x14>
 800fbf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbf8:	f7ff bff0 	b.w	800fbdc <__sfp_lock_release>
 800fbfc:	4b04      	ldr	r3, [pc, #16]	@ (800fc10 <__sinit+0x28>)
 800fbfe:	6223      	str	r3, [r4, #32]
 800fc00:	4b04      	ldr	r3, [pc, #16]	@ (800fc14 <__sinit+0x2c>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d1f5      	bne.n	800fbf4 <__sinit+0xc>
 800fc08:	f7ff ffc4 	bl	800fb94 <global_stdio_init.part.0>
 800fc0c:	e7f2      	b.n	800fbf4 <__sinit+0xc>
 800fc0e:	bf00      	nop
 800fc10:	0800fb55 	.word	0x0800fb55
 800fc14:	20001db8 	.word	0x20001db8

0800fc18 <_fwalk_sglue>:
 800fc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc1c:	4607      	mov	r7, r0
 800fc1e:	4688      	mov	r8, r1
 800fc20:	4614      	mov	r4, r2
 800fc22:	2600      	movs	r6, #0
 800fc24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fc28:	f1b9 0901 	subs.w	r9, r9, #1
 800fc2c:	d505      	bpl.n	800fc3a <_fwalk_sglue+0x22>
 800fc2e:	6824      	ldr	r4, [r4, #0]
 800fc30:	2c00      	cmp	r4, #0
 800fc32:	d1f7      	bne.n	800fc24 <_fwalk_sglue+0xc>
 800fc34:	4630      	mov	r0, r6
 800fc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc3a:	89ab      	ldrh	r3, [r5, #12]
 800fc3c:	2b01      	cmp	r3, #1
 800fc3e:	d907      	bls.n	800fc50 <_fwalk_sglue+0x38>
 800fc40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fc44:	3301      	adds	r3, #1
 800fc46:	d003      	beq.n	800fc50 <_fwalk_sglue+0x38>
 800fc48:	4629      	mov	r1, r5
 800fc4a:	4638      	mov	r0, r7
 800fc4c:	47c0      	blx	r8
 800fc4e:	4306      	orrs	r6, r0
 800fc50:	3568      	adds	r5, #104	@ 0x68
 800fc52:	e7e9      	b.n	800fc28 <_fwalk_sglue+0x10>

0800fc54 <__sread>:
 800fc54:	b510      	push	{r4, lr}
 800fc56:	460c      	mov	r4, r1
 800fc58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc5c:	f000 f87a 	bl	800fd54 <_read_r>
 800fc60:	2800      	cmp	r0, #0
 800fc62:	bfab      	itete	ge
 800fc64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fc66:	89a3      	ldrhlt	r3, [r4, #12]
 800fc68:	181b      	addge	r3, r3, r0
 800fc6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fc6e:	bfac      	ite	ge
 800fc70:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fc72:	81a3      	strhlt	r3, [r4, #12]
 800fc74:	bd10      	pop	{r4, pc}

0800fc76 <__swrite>:
 800fc76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc7a:	461f      	mov	r7, r3
 800fc7c:	898b      	ldrh	r3, [r1, #12]
 800fc7e:	05db      	lsls	r3, r3, #23
 800fc80:	4605      	mov	r5, r0
 800fc82:	460c      	mov	r4, r1
 800fc84:	4616      	mov	r6, r2
 800fc86:	d505      	bpl.n	800fc94 <__swrite+0x1e>
 800fc88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc8c:	2302      	movs	r3, #2
 800fc8e:	2200      	movs	r2, #0
 800fc90:	f000 f84e 	bl	800fd30 <_lseek_r>
 800fc94:	89a3      	ldrh	r3, [r4, #12]
 800fc96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fc9e:	81a3      	strh	r3, [r4, #12]
 800fca0:	4632      	mov	r2, r6
 800fca2:	463b      	mov	r3, r7
 800fca4:	4628      	mov	r0, r5
 800fca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcaa:	f000 b875 	b.w	800fd98 <_write_r>

0800fcae <__sseek>:
 800fcae:	b510      	push	{r4, lr}
 800fcb0:	460c      	mov	r4, r1
 800fcb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcb6:	f000 f83b 	bl	800fd30 <_lseek_r>
 800fcba:	1c43      	adds	r3, r0, #1
 800fcbc:	89a3      	ldrh	r3, [r4, #12]
 800fcbe:	bf15      	itete	ne
 800fcc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fcc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fcc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fcca:	81a3      	strheq	r3, [r4, #12]
 800fccc:	bf18      	it	ne
 800fcce:	81a3      	strhne	r3, [r4, #12]
 800fcd0:	bd10      	pop	{r4, pc}

0800fcd2 <__sclose>:
 800fcd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcd6:	f000 b81b 	b.w	800fd10 <_close_r>

0800fcda <memset>:
 800fcda:	4402      	add	r2, r0
 800fcdc:	4603      	mov	r3, r0
 800fcde:	4293      	cmp	r3, r2
 800fce0:	d100      	bne.n	800fce4 <memset+0xa>
 800fce2:	4770      	bx	lr
 800fce4:	f803 1b01 	strb.w	r1, [r3], #1
 800fce8:	e7f9      	b.n	800fcde <memset+0x4>

0800fcea <strcat>:
 800fcea:	b510      	push	{r4, lr}
 800fcec:	4602      	mov	r2, r0
 800fcee:	7814      	ldrb	r4, [r2, #0]
 800fcf0:	4613      	mov	r3, r2
 800fcf2:	3201      	adds	r2, #1
 800fcf4:	2c00      	cmp	r4, #0
 800fcf6:	d1fa      	bne.n	800fcee <strcat+0x4>
 800fcf8:	3b01      	subs	r3, #1
 800fcfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fcfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd02:	2a00      	cmp	r2, #0
 800fd04:	d1f9      	bne.n	800fcfa <strcat+0x10>
 800fd06:	bd10      	pop	{r4, pc}

0800fd08 <_localeconv_r>:
 800fd08:	4800      	ldr	r0, [pc, #0]	@ (800fd0c <_localeconv_r+0x4>)
 800fd0a:	4770      	bx	lr
 800fd0c:	20000278 	.word	0x20000278

0800fd10 <_close_r>:
 800fd10:	b538      	push	{r3, r4, r5, lr}
 800fd12:	4d06      	ldr	r5, [pc, #24]	@ (800fd2c <_close_r+0x1c>)
 800fd14:	2300      	movs	r3, #0
 800fd16:	4604      	mov	r4, r0
 800fd18:	4608      	mov	r0, r1
 800fd1a:	602b      	str	r3, [r5, #0]
 800fd1c:	f7f2 fc46 	bl	80025ac <_close>
 800fd20:	1c43      	adds	r3, r0, #1
 800fd22:	d102      	bne.n	800fd2a <_close_r+0x1a>
 800fd24:	682b      	ldr	r3, [r5, #0]
 800fd26:	b103      	cbz	r3, 800fd2a <_close_r+0x1a>
 800fd28:	6023      	str	r3, [r4, #0]
 800fd2a:	bd38      	pop	{r3, r4, r5, pc}
 800fd2c:	20001dbc 	.word	0x20001dbc

0800fd30 <_lseek_r>:
 800fd30:	b538      	push	{r3, r4, r5, lr}
 800fd32:	4d07      	ldr	r5, [pc, #28]	@ (800fd50 <_lseek_r+0x20>)
 800fd34:	4604      	mov	r4, r0
 800fd36:	4608      	mov	r0, r1
 800fd38:	4611      	mov	r1, r2
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	602a      	str	r2, [r5, #0]
 800fd3e:	461a      	mov	r2, r3
 800fd40:	f7f2 fc5b 	bl	80025fa <_lseek>
 800fd44:	1c43      	adds	r3, r0, #1
 800fd46:	d102      	bne.n	800fd4e <_lseek_r+0x1e>
 800fd48:	682b      	ldr	r3, [r5, #0]
 800fd4a:	b103      	cbz	r3, 800fd4e <_lseek_r+0x1e>
 800fd4c:	6023      	str	r3, [r4, #0]
 800fd4e:	bd38      	pop	{r3, r4, r5, pc}
 800fd50:	20001dbc 	.word	0x20001dbc

0800fd54 <_read_r>:
 800fd54:	b538      	push	{r3, r4, r5, lr}
 800fd56:	4d07      	ldr	r5, [pc, #28]	@ (800fd74 <_read_r+0x20>)
 800fd58:	4604      	mov	r4, r0
 800fd5a:	4608      	mov	r0, r1
 800fd5c:	4611      	mov	r1, r2
 800fd5e:	2200      	movs	r2, #0
 800fd60:	602a      	str	r2, [r5, #0]
 800fd62:	461a      	mov	r2, r3
 800fd64:	f7f2 fbe9 	bl	800253a <_read>
 800fd68:	1c43      	adds	r3, r0, #1
 800fd6a:	d102      	bne.n	800fd72 <_read_r+0x1e>
 800fd6c:	682b      	ldr	r3, [r5, #0]
 800fd6e:	b103      	cbz	r3, 800fd72 <_read_r+0x1e>
 800fd70:	6023      	str	r3, [r4, #0]
 800fd72:	bd38      	pop	{r3, r4, r5, pc}
 800fd74:	20001dbc 	.word	0x20001dbc

0800fd78 <_sbrk_r>:
 800fd78:	b538      	push	{r3, r4, r5, lr}
 800fd7a:	4d06      	ldr	r5, [pc, #24]	@ (800fd94 <_sbrk_r+0x1c>)
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	4604      	mov	r4, r0
 800fd80:	4608      	mov	r0, r1
 800fd82:	602b      	str	r3, [r5, #0]
 800fd84:	f7f2 fc46 	bl	8002614 <_sbrk>
 800fd88:	1c43      	adds	r3, r0, #1
 800fd8a:	d102      	bne.n	800fd92 <_sbrk_r+0x1a>
 800fd8c:	682b      	ldr	r3, [r5, #0]
 800fd8e:	b103      	cbz	r3, 800fd92 <_sbrk_r+0x1a>
 800fd90:	6023      	str	r3, [r4, #0]
 800fd92:	bd38      	pop	{r3, r4, r5, pc}
 800fd94:	20001dbc 	.word	0x20001dbc

0800fd98 <_write_r>:
 800fd98:	b538      	push	{r3, r4, r5, lr}
 800fd9a:	4d07      	ldr	r5, [pc, #28]	@ (800fdb8 <_write_r+0x20>)
 800fd9c:	4604      	mov	r4, r0
 800fd9e:	4608      	mov	r0, r1
 800fda0:	4611      	mov	r1, r2
 800fda2:	2200      	movs	r2, #0
 800fda4:	602a      	str	r2, [r5, #0]
 800fda6:	461a      	mov	r2, r3
 800fda8:	f7f2 fbe4 	bl	8002574 <_write>
 800fdac:	1c43      	adds	r3, r0, #1
 800fdae:	d102      	bne.n	800fdb6 <_write_r+0x1e>
 800fdb0:	682b      	ldr	r3, [r5, #0]
 800fdb2:	b103      	cbz	r3, 800fdb6 <_write_r+0x1e>
 800fdb4:	6023      	str	r3, [r4, #0]
 800fdb6:	bd38      	pop	{r3, r4, r5, pc}
 800fdb8:	20001dbc 	.word	0x20001dbc

0800fdbc <__errno>:
 800fdbc:	4b01      	ldr	r3, [pc, #4]	@ (800fdc4 <__errno+0x8>)
 800fdbe:	6818      	ldr	r0, [r3, #0]
 800fdc0:	4770      	bx	lr
 800fdc2:	bf00      	nop
 800fdc4:	20000138 	.word	0x20000138

0800fdc8 <__libc_init_array>:
 800fdc8:	b570      	push	{r4, r5, r6, lr}
 800fdca:	4d0d      	ldr	r5, [pc, #52]	@ (800fe00 <__libc_init_array+0x38>)
 800fdcc:	4c0d      	ldr	r4, [pc, #52]	@ (800fe04 <__libc_init_array+0x3c>)
 800fdce:	1b64      	subs	r4, r4, r5
 800fdd0:	10a4      	asrs	r4, r4, #2
 800fdd2:	2600      	movs	r6, #0
 800fdd4:	42a6      	cmp	r6, r4
 800fdd6:	d109      	bne.n	800fdec <__libc_init_array+0x24>
 800fdd8:	4d0b      	ldr	r5, [pc, #44]	@ (800fe08 <__libc_init_array+0x40>)
 800fdda:	4c0c      	ldr	r4, [pc, #48]	@ (800fe0c <__libc_init_array+0x44>)
 800fddc:	f001 fdf8 	bl	80119d0 <_init>
 800fde0:	1b64      	subs	r4, r4, r5
 800fde2:	10a4      	asrs	r4, r4, #2
 800fde4:	2600      	movs	r6, #0
 800fde6:	42a6      	cmp	r6, r4
 800fde8:	d105      	bne.n	800fdf6 <__libc_init_array+0x2e>
 800fdea:	bd70      	pop	{r4, r5, r6, pc}
 800fdec:	f855 3b04 	ldr.w	r3, [r5], #4
 800fdf0:	4798      	blx	r3
 800fdf2:	3601      	adds	r6, #1
 800fdf4:	e7ee      	b.n	800fdd4 <__libc_init_array+0xc>
 800fdf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800fdfa:	4798      	blx	r3
 800fdfc:	3601      	adds	r6, #1
 800fdfe:	e7f2      	b.n	800fde6 <__libc_init_array+0x1e>
 800fe00:	08012138 	.word	0x08012138
 800fe04:	08012138 	.word	0x08012138
 800fe08:	08012138 	.word	0x08012138
 800fe0c:	0801213c 	.word	0x0801213c

0800fe10 <__retarget_lock_init_recursive>:
 800fe10:	4770      	bx	lr

0800fe12 <__retarget_lock_acquire_recursive>:
 800fe12:	4770      	bx	lr

0800fe14 <__retarget_lock_release_recursive>:
 800fe14:	4770      	bx	lr

0800fe16 <memcpy>:
 800fe16:	440a      	add	r2, r1
 800fe18:	4291      	cmp	r1, r2
 800fe1a:	f100 33ff 	add.w	r3, r0, #4294967295
 800fe1e:	d100      	bne.n	800fe22 <memcpy+0xc>
 800fe20:	4770      	bx	lr
 800fe22:	b510      	push	{r4, lr}
 800fe24:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe28:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe2c:	4291      	cmp	r1, r2
 800fe2e:	d1f9      	bne.n	800fe24 <memcpy+0xe>
 800fe30:	bd10      	pop	{r4, pc}

0800fe32 <quorem>:
 800fe32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe36:	6903      	ldr	r3, [r0, #16]
 800fe38:	690c      	ldr	r4, [r1, #16]
 800fe3a:	42a3      	cmp	r3, r4
 800fe3c:	4607      	mov	r7, r0
 800fe3e:	db7e      	blt.n	800ff3e <quorem+0x10c>
 800fe40:	3c01      	subs	r4, #1
 800fe42:	f101 0814 	add.w	r8, r1, #20
 800fe46:	00a3      	lsls	r3, r4, #2
 800fe48:	f100 0514 	add.w	r5, r0, #20
 800fe4c:	9300      	str	r3, [sp, #0]
 800fe4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe52:	9301      	str	r3, [sp, #4]
 800fe54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fe58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe5c:	3301      	adds	r3, #1
 800fe5e:	429a      	cmp	r2, r3
 800fe60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fe64:	fbb2 f6f3 	udiv	r6, r2, r3
 800fe68:	d32e      	bcc.n	800fec8 <quorem+0x96>
 800fe6a:	f04f 0a00 	mov.w	sl, #0
 800fe6e:	46c4      	mov	ip, r8
 800fe70:	46ae      	mov	lr, r5
 800fe72:	46d3      	mov	fp, sl
 800fe74:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fe78:	b298      	uxth	r0, r3
 800fe7a:	fb06 a000 	mla	r0, r6, r0, sl
 800fe7e:	0c02      	lsrs	r2, r0, #16
 800fe80:	0c1b      	lsrs	r3, r3, #16
 800fe82:	fb06 2303 	mla	r3, r6, r3, r2
 800fe86:	f8de 2000 	ldr.w	r2, [lr]
 800fe8a:	b280      	uxth	r0, r0
 800fe8c:	b292      	uxth	r2, r2
 800fe8e:	1a12      	subs	r2, r2, r0
 800fe90:	445a      	add	r2, fp
 800fe92:	f8de 0000 	ldr.w	r0, [lr]
 800fe96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe9a:	b29b      	uxth	r3, r3
 800fe9c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fea0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fea4:	b292      	uxth	r2, r2
 800fea6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800feaa:	45e1      	cmp	r9, ip
 800feac:	f84e 2b04 	str.w	r2, [lr], #4
 800feb0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800feb4:	d2de      	bcs.n	800fe74 <quorem+0x42>
 800feb6:	9b00      	ldr	r3, [sp, #0]
 800feb8:	58eb      	ldr	r3, [r5, r3]
 800feba:	b92b      	cbnz	r3, 800fec8 <quorem+0x96>
 800febc:	9b01      	ldr	r3, [sp, #4]
 800febe:	3b04      	subs	r3, #4
 800fec0:	429d      	cmp	r5, r3
 800fec2:	461a      	mov	r2, r3
 800fec4:	d32f      	bcc.n	800ff26 <quorem+0xf4>
 800fec6:	613c      	str	r4, [r7, #16]
 800fec8:	4638      	mov	r0, r7
 800feca:	f001 f8c5 	bl	8011058 <__mcmp>
 800fece:	2800      	cmp	r0, #0
 800fed0:	db25      	blt.n	800ff1e <quorem+0xec>
 800fed2:	4629      	mov	r1, r5
 800fed4:	2000      	movs	r0, #0
 800fed6:	f858 2b04 	ldr.w	r2, [r8], #4
 800feda:	f8d1 c000 	ldr.w	ip, [r1]
 800fede:	fa1f fe82 	uxth.w	lr, r2
 800fee2:	fa1f f38c 	uxth.w	r3, ip
 800fee6:	eba3 030e 	sub.w	r3, r3, lr
 800feea:	4403      	add	r3, r0
 800feec:	0c12      	lsrs	r2, r2, #16
 800feee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fef2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fefc:	45c1      	cmp	r9, r8
 800fefe:	f841 3b04 	str.w	r3, [r1], #4
 800ff02:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ff06:	d2e6      	bcs.n	800fed6 <quorem+0xa4>
 800ff08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ff0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ff10:	b922      	cbnz	r2, 800ff1c <quorem+0xea>
 800ff12:	3b04      	subs	r3, #4
 800ff14:	429d      	cmp	r5, r3
 800ff16:	461a      	mov	r2, r3
 800ff18:	d30b      	bcc.n	800ff32 <quorem+0x100>
 800ff1a:	613c      	str	r4, [r7, #16]
 800ff1c:	3601      	adds	r6, #1
 800ff1e:	4630      	mov	r0, r6
 800ff20:	b003      	add	sp, #12
 800ff22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff26:	6812      	ldr	r2, [r2, #0]
 800ff28:	3b04      	subs	r3, #4
 800ff2a:	2a00      	cmp	r2, #0
 800ff2c:	d1cb      	bne.n	800fec6 <quorem+0x94>
 800ff2e:	3c01      	subs	r4, #1
 800ff30:	e7c6      	b.n	800fec0 <quorem+0x8e>
 800ff32:	6812      	ldr	r2, [r2, #0]
 800ff34:	3b04      	subs	r3, #4
 800ff36:	2a00      	cmp	r2, #0
 800ff38:	d1ef      	bne.n	800ff1a <quorem+0xe8>
 800ff3a:	3c01      	subs	r4, #1
 800ff3c:	e7ea      	b.n	800ff14 <quorem+0xe2>
 800ff3e:	2000      	movs	r0, #0
 800ff40:	e7ee      	b.n	800ff20 <quorem+0xee>
 800ff42:	0000      	movs	r0, r0
 800ff44:	0000      	movs	r0, r0
	...

0800ff48 <_dtoa_r>:
 800ff48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff4c:	69c7      	ldr	r7, [r0, #28]
 800ff4e:	b099      	sub	sp, #100	@ 0x64
 800ff50:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ff54:	ec55 4b10 	vmov	r4, r5, d0
 800ff58:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ff5a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ff5c:	4683      	mov	fp, r0
 800ff5e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ff60:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ff62:	b97f      	cbnz	r7, 800ff84 <_dtoa_r+0x3c>
 800ff64:	2010      	movs	r0, #16
 800ff66:	f7ff f89d 	bl	800f0a4 <malloc>
 800ff6a:	4602      	mov	r2, r0
 800ff6c:	f8cb 001c 	str.w	r0, [fp, #28]
 800ff70:	b920      	cbnz	r0, 800ff7c <_dtoa_r+0x34>
 800ff72:	4ba7      	ldr	r3, [pc, #668]	@ (8010210 <_dtoa_r+0x2c8>)
 800ff74:	21ef      	movs	r1, #239	@ 0xef
 800ff76:	48a7      	ldr	r0, [pc, #668]	@ (8010214 <_dtoa_r+0x2cc>)
 800ff78:	f001 fa22 	bl	80113c0 <__assert_func>
 800ff7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ff80:	6007      	str	r7, [r0, #0]
 800ff82:	60c7      	str	r7, [r0, #12]
 800ff84:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ff88:	6819      	ldr	r1, [r3, #0]
 800ff8a:	b159      	cbz	r1, 800ffa4 <_dtoa_r+0x5c>
 800ff8c:	685a      	ldr	r2, [r3, #4]
 800ff8e:	604a      	str	r2, [r1, #4]
 800ff90:	2301      	movs	r3, #1
 800ff92:	4093      	lsls	r3, r2
 800ff94:	608b      	str	r3, [r1, #8]
 800ff96:	4658      	mov	r0, fp
 800ff98:	f000 fe24 	bl	8010be4 <_Bfree>
 800ff9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	601a      	str	r2, [r3, #0]
 800ffa4:	1e2b      	subs	r3, r5, #0
 800ffa6:	bfb9      	ittee	lt
 800ffa8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ffac:	9303      	strlt	r3, [sp, #12]
 800ffae:	2300      	movge	r3, #0
 800ffb0:	6033      	strge	r3, [r6, #0]
 800ffb2:	9f03      	ldr	r7, [sp, #12]
 800ffb4:	4b98      	ldr	r3, [pc, #608]	@ (8010218 <_dtoa_r+0x2d0>)
 800ffb6:	bfbc      	itt	lt
 800ffb8:	2201      	movlt	r2, #1
 800ffba:	6032      	strlt	r2, [r6, #0]
 800ffbc:	43bb      	bics	r3, r7
 800ffbe:	d112      	bne.n	800ffe6 <_dtoa_r+0x9e>
 800ffc0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ffc2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ffc6:	6013      	str	r3, [r2, #0]
 800ffc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ffcc:	4323      	orrs	r3, r4
 800ffce:	f000 854d 	beq.w	8010a6c <_dtoa_r+0xb24>
 800ffd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ffd4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801022c <_dtoa_r+0x2e4>
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	f000 854f 	beq.w	8010a7c <_dtoa_r+0xb34>
 800ffde:	f10a 0303 	add.w	r3, sl, #3
 800ffe2:	f000 bd49 	b.w	8010a78 <_dtoa_r+0xb30>
 800ffe6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ffea:	2200      	movs	r2, #0
 800ffec:	ec51 0b17 	vmov	r0, r1, d7
 800fff0:	2300      	movs	r3, #0
 800fff2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fff6:	f7f0 fd6f 	bl	8000ad8 <__aeabi_dcmpeq>
 800fffa:	4680      	mov	r8, r0
 800fffc:	b158      	cbz	r0, 8010016 <_dtoa_r+0xce>
 800fffe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010000:	2301      	movs	r3, #1
 8010002:	6013      	str	r3, [r2, #0]
 8010004:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010006:	b113      	cbz	r3, 801000e <_dtoa_r+0xc6>
 8010008:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801000a:	4b84      	ldr	r3, [pc, #528]	@ (801021c <_dtoa_r+0x2d4>)
 801000c:	6013      	str	r3, [r2, #0]
 801000e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010230 <_dtoa_r+0x2e8>
 8010012:	f000 bd33 	b.w	8010a7c <_dtoa_r+0xb34>
 8010016:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801001a:	aa16      	add	r2, sp, #88	@ 0x58
 801001c:	a917      	add	r1, sp, #92	@ 0x5c
 801001e:	4658      	mov	r0, fp
 8010020:	f001 f8ca 	bl	80111b8 <__d2b>
 8010024:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010028:	4681      	mov	r9, r0
 801002a:	2e00      	cmp	r6, #0
 801002c:	d077      	beq.n	801011e <_dtoa_r+0x1d6>
 801002e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010030:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010038:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801003c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010040:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010044:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010048:	4619      	mov	r1, r3
 801004a:	2200      	movs	r2, #0
 801004c:	4b74      	ldr	r3, [pc, #464]	@ (8010220 <_dtoa_r+0x2d8>)
 801004e:	f7f0 f923 	bl	8000298 <__aeabi_dsub>
 8010052:	a369      	add	r3, pc, #420	@ (adr r3, 80101f8 <_dtoa_r+0x2b0>)
 8010054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010058:	f7f0 fad6 	bl	8000608 <__aeabi_dmul>
 801005c:	a368      	add	r3, pc, #416	@ (adr r3, 8010200 <_dtoa_r+0x2b8>)
 801005e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010062:	f7f0 f91b 	bl	800029c <__adddf3>
 8010066:	4604      	mov	r4, r0
 8010068:	4630      	mov	r0, r6
 801006a:	460d      	mov	r5, r1
 801006c:	f7f0 fa62 	bl	8000534 <__aeabi_i2d>
 8010070:	a365      	add	r3, pc, #404	@ (adr r3, 8010208 <_dtoa_r+0x2c0>)
 8010072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010076:	f7f0 fac7 	bl	8000608 <__aeabi_dmul>
 801007a:	4602      	mov	r2, r0
 801007c:	460b      	mov	r3, r1
 801007e:	4620      	mov	r0, r4
 8010080:	4629      	mov	r1, r5
 8010082:	f7f0 f90b 	bl	800029c <__adddf3>
 8010086:	4604      	mov	r4, r0
 8010088:	460d      	mov	r5, r1
 801008a:	f7f0 fd6d 	bl	8000b68 <__aeabi_d2iz>
 801008e:	2200      	movs	r2, #0
 8010090:	4607      	mov	r7, r0
 8010092:	2300      	movs	r3, #0
 8010094:	4620      	mov	r0, r4
 8010096:	4629      	mov	r1, r5
 8010098:	f7f0 fd28 	bl	8000aec <__aeabi_dcmplt>
 801009c:	b140      	cbz	r0, 80100b0 <_dtoa_r+0x168>
 801009e:	4638      	mov	r0, r7
 80100a0:	f7f0 fa48 	bl	8000534 <__aeabi_i2d>
 80100a4:	4622      	mov	r2, r4
 80100a6:	462b      	mov	r3, r5
 80100a8:	f7f0 fd16 	bl	8000ad8 <__aeabi_dcmpeq>
 80100ac:	b900      	cbnz	r0, 80100b0 <_dtoa_r+0x168>
 80100ae:	3f01      	subs	r7, #1
 80100b0:	2f16      	cmp	r7, #22
 80100b2:	d851      	bhi.n	8010158 <_dtoa_r+0x210>
 80100b4:	4b5b      	ldr	r3, [pc, #364]	@ (8010224 <_dtoa_r+0x2dc>)
 80100b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80100ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80100c2:	f7f0 fd13 	bl	8000aec <__aeabi_dcmplt>
 80100c6:	2800      	cmp	r0, #0
 80100c8:	d048      	beq.n	801015c <_dtoa_r+0x214>
 80100ca:	3f01      	subs	r7, #1
 80100cc:	2300      	movs	r3, #0
 80100ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80100d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80100d2:	1b9b      	subs	r3, r3, r6
 80100d4:	1e5a      	subs	r2, r3, #1
 80100d6:	bf44      	itt	mi
 80100d8:	f1c3 0801 	rsbmi	r8, r3, #1
 80100dc:	2300      	movmi	r3, #0
 80100de:	9208      	str	r2, [sp, #32]
 80100e0:	bf54      	ite	pl
 80100e2:	f04f 0800 	movpl.w	r8, #0
 80100e6:	9308      	strmi	r3, [sp, #32]
 80100e8:	2f00      	cmp	r7, #0
 80100ea:	db39      	blt.n	8010160 <_dtoa_r+0x218>
 80100ec:	9b08      	ldr	r3, [sp, #32]
 80100ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 80100f0:	443b      	add	r3, r7
 80100f2:	9308      	str	r3, [sp, #32]
 80100f4:	2300      	movs	r3, #0
 80100f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80100f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100fa:	2b09      	cmp	r3, #9
 80100fc:	d864      	bhi.n	80101c8 <_dtoa_r+0x280>
 80100fe:	2b05      	cmp	r3, #5
 8010100:	bfc4      	itt	gt
 8010102:	3b04      	subgt	r3, #4
 8010104:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010108:	f1a3 0302 	sub.w	r3, r3, #2
 801010c:	bfcc      	ite	gt
 801010e:	2400      	movgt	r4, #0
 8010110:	2401      	movle	r4, #1
 8010112:	2b03      	cmp	r3, #3
 8010114:	d863      	bhi.n	80101de <_dtoa_r+0x296>
 8010116:	e8df f003 	tbb	[pc, r3]
 801011a:	372a      	.short	0x372a
 801011c:	5535      	.short	0x5535
 801011e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010122:	441e      	add	r6, r3
 8010124:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010128:	2b20      	cmp	r3, #32
 801012a:	bfc1      	itttt	gt
 801012c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010130:	409f      	lslgt	r7, r3
 8010132:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010136:	fa24 f303 	lsrgt.w	r3, r4, r3
 801013a:	bfd6      	itet	le
 801013c:	f1c3 0320 	rsble	r3, r3, #32
 8010140:	ea47 0003 	orrgt.w	r0, r7, r3
 8010144:	fa04 f003 	lslle.w	r0, r4, r3
 8010148:	f7f0 f9e4 	bl	8000514 <__aeabi_ui2d>
 801014c:	2201      	movs	r2, #1
 801014e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010152:	3e01      	subs	r6, #1
 8010154:	9214      	str	r2, [sp, #80]	@ 0x50
 8010156:	e777      	b.n	8010048 <_dtoa_r+0x100>
 8010158:	2301      	movs	r3, #1
 801015a:	e7b8      	b.n	80100ce <_dtoa_r+0x186>
 801015c:	9012      	str	r0, [sp, #72]	@ 0x48
 801015e:	e7b7      	b.n	80100d0 <_dtoa_r+0x188>
 8010160:	427b      	negs	r3, r7
 8010162:	930a      	str	r3, [sp, #40]	@ 0x28
 8010164:	2300      	movs	r3, #0
 8010166:	eba8 0807 	sub.w	r8, r8, r7
 801016a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801016c:	e7c4      	b.n	80100f8 <_dtoa_r+0x1b0>
 801016e:	2300      	movs	r3, #0
 8010170:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010172:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010174:	2b00      	cmp	r3, #0
 8010176:	dc35      	bgt.n	80101e4 <_dtoa_r+0x29c>
 8010178:	2301      	movs	r3, #1
 801017a:	9300      	str	r3, [sp, #0]
 801017c:	9307      	str	r3, [sp, #28]
 801017e:	461a      	mov	r2, r3
 8010180:	920e      	str	r2, [sp, #56]	@ 0x38
 8010182:	e00b      	b.n	801019c <_dtoa_r+0x254>
 8010184:	2301      	movs	r3, #1
 8010186:	e7f3      	b.n	8010170 <_dtoa_r+0x228>
 8010188:	2300      	movs	r3, #0
 801018a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801018c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801018e:	18fb      	adds	r3, r7, r3
 8010190:	9300      	str	r3, [sp, #0]
 8010192:	3301      	adds	r3, #1
 8010194:	2b01      	cmp	r3, #1
 8010196:	9307      	str	r3, [sp, #28]
 8010198:	bfb8      	it	lt
 801019a:	2301      	movlt	r3, #1
 801019c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80101a0:	2100      	movs	r1, #0
 80101a2:	2204      	movs	r2, #4
 80101a4:	f102 0514 	add.w	r5, r2, #20
 80101a8:	429d      	cmp	r5, r3
 80101aa:	d91f      	bls.n	80101ec <_dtoa_r+0x2a4>
 80101ac:	6041      	str	r1, [r0, #4]
 80101ae:	4658      	mov	r0, fp
 80101b0:	f000 fcd8 	bl	8010b64 <_Balloc>
 80101b4:	4682      	mov	sl, r0
 80101b6:	2800      	cmp	r0, #0
 80101b8:	d13c      	bne.n	8010234 <_dtoa_r+0x2ec>
 80101ba:	4b1b      	ldr	r3, [pc, #108]	@ (8010228 <_dtoa_r+0x2e0>)
 80101bc:	4602      	mov	r2, r0
 80101be:	f240 11af 	movw	r1, #431	@ 0x1af
 80101c2:	e6d8      	b.n	800ff76 <_dtoa_r+0x2e>
 80101c4:	2301      	movs	r3, #1
 80101c6:	e7e0      	b.n	801018a <_dtoa_r+0x242>
 80101c8:	2401      	movs	r4, #1
 80101ca:	2300      	movs	r3, #0
 80101cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80101ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80101d0:	f04f 33ff 	mov.w	r3, #4294967295
 80101d4:	9300      	str	r3, [sp, #0]
 80101d6:	9307      	str	r3, [sp, #28]
 80101d8:	2200      	movs	r2, #0
 80101da:	2312      	movs	r3, #18
 80101dc:	e7d0      	b.n	8010180 <_dtoa_r+0x238>
 80101de:	2301      	movs	r3, #1
 80101e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80101e2:	e7f5      	b.n	80101d0 <_dtoa_r+0x288>
 80101e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80101e6:	9300      	str	r3, [sp, #0]
 80101e8:	9307      	str	r3, [sp, #28]
 80101ea:	e7d7      	b.n	801019c <_dtoa_r+0x254>
 80101ec:	3101      	adds	r1, #1
 80101ee:	0052      	lsls	r2, r2, #1
 80101f0:	e7d8      	b.n	80101a4 <_dtoa_r+0x25c>
 80101f2:	bf00      	nop
 80101f4:	f3af 8000 	nop.w
 80101f8:	636f4361 	.word	0x636f4361
 80101fc:	3fd287a7 	.word	0x3fd287a7
 8010200:	8b60c8b3 	.word	0x8b60c8b3
 8010204:	3fc68a28 	.word	0x3fc68a28
 8010208:	509f79fb 	.word	0x509f79fb
 801020c:	3fd34413 	.word	0x3fd34413
 8010210:	08011e01 	.word	0x08011e01
 8010214:	08011e18 	.word	0x08011e18
 8010218:	7ff00000 	.word	0x7ff00000
 801021c:	08011dd1 	.word	0x08011dd1
 8010220:	3ff80000 	.word	0x3ff80000
 8010224:	08011f10 	.word	0x08011f10
 8010228:	08011e70 	.word	0x08011e70
 801022c:	08011dfd 	.word	0x08011dfd
 8010230:	08011dd0 	.word	0x08011dd0
 8010234:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010238:	6018      	str	r0, [r3, #0]
 801023a:	9b07      	ldr	r3, [sp, #28]
 801023c:	2b0e      	cmp	r3, #14
 801023e:	f200 80a4 	bhi.w	801038a <_dtoa_r+0x442>
 8010242:	2c00      	cmp	r4, #0
 8010244:	f000 80a1 	beq.w	801038a <_dtoa_r+0x442>
 8010248:	2f00      	cmp	r7, #0
 801024a:	dd33      	ble.n	80102b4 <_dtoa_r+0x36c>
 801024c:	4bad      	ldr	r3, [pc, #692]	@ (8010504 <_dtoa_r+0x5bc>)
 801024e:	f007 020f 	and.w	r2, r7, #15
 8010252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010256:	ed93 7b00 	vldr	d7, [r3]
 801025a:	05f8      	lsls	r0, r7, #23
 801025c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010260:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010264:	d516      	bpl.n	8010294 <_dtoa_r+0x34c>
 8010266:	4ba8      	ldr	r3, [pc, #672]	@ (8010508 <_dtoa_r+0x5c0>)
 8010268:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801026c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010270:	f7f0 faf4 	bl	800085c <__aeabi_ddiv>
 8010274:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010278:	f004 040f 	and.w	r4, r4, #15
 801027c:	2603      	movs	r6, #3
 801027e:	4da2      	ldr	r5, [pc, #648]	@ (8010508 <_dtoa_r+0x5c0>)
 8010280:	b954      	cbnz	r4, 8010298 <_dtoa_r+0x350>
 8010282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801028a:	f7f0 fae7 	bl	800085c <__aeabi_ddiv>
 801028e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010292:	e028      	b.n	80102e6 <_dtoa_r+0x39e>
 8010294:	2602      	movs	r6, #2
 8010296:	e7f2      	b.n	801027e <_dtoa_r+0x336>
 8010298:	07e1      	lsls	r1, r4, #31
 801029a:	d508      	bpl.n	80102ae <_dtoa_r+0x366>
 801029c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80102a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80102a4:	f7f0 f9b0 	bl	8000608 <__aeabi_dmul>
 80102a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80102ac:	3601      	adds	r6, #1
 80102ae:	1064      	asrs	r4, r4, #1
 80102b0:	3508      	adds	r5, #8
 80102b2:	e7e5      	b.n	8010280 <_dtoa_r+0x338>
 80102b4:	f000 80d2 	beq.w	801045c <_dtoa_r+0x514>
 80102b8:	427c      	negs	r4, r7
 80102ba:	4b92      	ldr	r3, [pc, #584]	@ (8010504 <_dtoa_r+0x5bc>)
 80102bc:	4d92      	ldr	r5, [pc, #584]	@ (8010508 <_dtoa_r+0x5c0>)
 80102be:	f004 020f 	and.w	r2, r4, #15
 80102c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80102c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80102ce:	f7f0 f99b 	bl	8000608 <__aeabi_dmul>
 80102d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80102d6:	1124      	asrs	r4, r4, #4
 80102d8:	2300      	movs	r3, #0
 80102da:	2602      	movs	r6, #2
 80102dc:	2c00      	cmp	r4, #0
 80102de:	f040 80b2 	bne.w	8010446 <_dtoa_r+0x4fe>
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d1d3      	bne.n	801028e <_dtoa_r+0x346>
 80102e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80102e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	f000 80b7 	beq.w	8010460 <_dtoa_r+0x518>
 80102f2:	4b86      	ldr	r3, [pc, #536]	@ (801050c <_dtoa_r+0x5c4>)
 80102f4:	2200      	movs	r2, #0
 80102f6:	4620      	mov	r0, r4
 80102f8:	4629      	mov	r1, r5
 80102fa:	f7f0 fbf7 	bl	8000aec <__aeabi_dcmplt>
 80102fe:	2800      	cmp	r0, #0
 8010300:	f000 80ae 	beq.w	8010460 <_dtoa_r+0x518>
 8010304:	9b07      	ldr	r3, [sp, #28]
 8010306:	2b00      	cmp	r3, #0
 8010308:	f000 80aa 	beq.w	8010460 <_dtoa_r+0x518>
 801030c:	9b00      	ldr	r3, [sp, #0]
 801030e:	2b00      	cmp	r3, #0
 8010310:	dd37      	ble.n	8010382 <_dtoa_r+0x43a>
 8010312:	1e7b      	subs	r3, r7, #1
 8010314:	9304      	str	r3, [sp, #16]
 8010316:	4620      	mov	r0, r4
 8010318:	4b7d      	ldr	r3, [pc, #500]	@ (8010510 <_dtoa_r+0x5c8>)
 801031a:	2200      	movs	r2, #0
 801031c:	4629      	mov	r1, r5
 801031e:	f7f0 f973 	bl	8000608 <__aeabi_dmul>
 8010322:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010326:	9c00      	ldr	r4, [sp, #0]
 8010328:	3601      	adds	r6, #1
 801032a:	4630      	mov	r0, r6
 801032c:	f7f0 f902 	bl	8000534 <__aeabi_i2d>
 8010330:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010334:	f7f0 f968 	bl	8000608 <__aeabi_dmul>
 8010338:	4b76      	ldr	r3, [pc, #472]	@ (8010514 <_dtoa_r+0x5cc>)
 801033a:	2200      	movs	r2, #0
 801033c:	f7ef ffae 	bl	800029c <__adddf3>
 8010340:	4605      	mov	r5, r0
 8010342:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010346:	2c00      	cmp	r4, #0
 8010348:	f040 808d 	bne.w	8010466 <_dtoa_r+0x51e>
 801034c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010350:	4b71      	ldr	r3, [pc, #452]	@ (8010518 <_dtoa_r+0x5d0>)
 8010352:	2200      	movs	r2, #0
 8010354:	f7ef ffa0 	bl	8000298 <__aeabi_dsub>
 8010358:	4602      	mov	r2, r0
 801035a:	460b      	mov	r3, r1
 801035c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010360:	462a      	mov	r2, r5
 8010362:	4633      	mov	r3, r6
 8010364:	f7f0 fbe0 	bl	8000b28 <__aeabi_dcmpgt>
 8010368:	2800      	cmp	r0, #0
 801036a:	f040 828b 	bne.w	8010884 <_dtoa_r+0x93c>
 801036e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010372:	462a      	mov	r2, r5
 8010374:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010378:	f7f0 fbb8 	bl	8000aec <__aeabi_dcmplt>
 801037c:	2800      	cmp	r0, #0
 801037e:	f040 8128 	bne.w	80105d2 <_dtoa_r+0x68a>
 8010382:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010386:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801038a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801038c:	2b00      	cmp	r3, #0
 801038e:	f2c0 815a 	blt.w	8010646 <_dtoa_r+0x6fe>
 8010392:	2f0e      	cmp	r7, #14
 8010394:	f300 8157 	bgt.w	8010646 <_dtoa_r+0x6fe>
 8010398:	4b5a      	ldr	r3, [pc, #360]	@ (8010504 <_dtoa_r+0x5bc>)
 801039a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801039e:	ed93 7b00 	vldr	d7, [r3]
 80103a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	ed8d 7b00 	vstr	d7, [sp]
 80103aa:	da03      	bge.n	80103b4 <_dtoa_r+0x46c>
 80103ac:	9b07      	ldr	r3, [sp, #28]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	f340 8101 	ble.w	80105b6 <_dtoa_r+0x66e>
 80103b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80103b8:	4656      	mov	r6, sl
 80103ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80103be:	4620      	mov	r0, r4
 80103c0:	4629      	mov	r1, r5
 80103c2:	f7f0 fa4b 	bl	800085c <__aeabi_ddiv>
 80103c6:	f7f0 fbcf 	bl	8000b68 <__aeabi_d2iz>
 80103ca:	4680      	mov	r8, r0
 80103cc:	f7f0 f8b2 	bl	8000534 <__aeabi_i2d>
 80103d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80103d4:	f7f0 f918 	bl	8000608 <__aeabi_dmul>
 80103d8:	4602      	mov	r2, r0
 80103da:	460b      	mov	r3, r1
 80103dc:	4620      	mov	r0, r4
 80103de:	4629      	mov	r1, r5
 80103e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80103e4:	f7ef ff58 	bl	8000298 <__aeabi_dsub>
 80103e8:	f806 4b01 	strb.w	r4, [r6], #1
 80103ec:	9d07      	ldr	r5, [sp, #28]
 80103ee:	eba6 040a 	sub.w	r4, r6, sl
 80103f2:	42a5      	cmp	r5, r4
 80103f4:	4602      	mov	r2, r0
 80103f6:	460b      	mov	r3, r1
 80103f8:	f040 8117 	bne.w	801062a <_dtoa_r+0x6e2>
 80103fc:	f7ef ff4e 	bl	800029c <__adddf3>
 8010400:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010404:	4604      	mov	r4, r0
 8010406:	460d      	mov	r5, r1
 8010408:	f7f0 fb8e 	bl	8000b28 <__aeabi_dcmpgt>
 801040c:	2800      	cmp	r0, #0
 801040e:	f040 80f9 	bne.w	8010604 <_dtoa_r+0x6bc>
 8010412:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010416:	4620      	mov	r0, r4
 8010418:	4629      	mov	r1, r5
 801041a:	f7f0 fb5d 	bl	8000ad8 <__aeabi_dcmpeq>
 801041e:	b118      	cbz	r0, 8010428 <_dtoa_r+0x4e0>
 8010420:	f018 0f01 	tst.w	r8, #1
 8010424:	f040 80ee 	bne.w	8010604 <_dtoa_r+0x6bc>
 8010428:	4649      	mov	r1, r9
 801042a:	4658      	mov	r0, fp
 801042c:	f000 fbda 	bl	8010be4 <_Bfree>
 8010430:	2300      	movs	r3, #0
 8010432:	7033      	strb	r3, [r6, #0]
 8010434:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010436:	3701      	adds	r7, #1
 8010438:	601f      	str	r7, [r3, #0]
 801043a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801043c:	2b00      	cmp	r3, #0
 801043e:	f000 831d 	beq.w	8010a7c <_dtoa_r+0xb34>
 8010442:	601e      	str	r6, [r3, #0]
 8010444:	e31a      	b.n	8010a7c <_dtoa_r+0xb34>
 8010446:	07e2      	lsls	r2, r4, #31
 8010448:	d505      	bpl.n	8010456 <_dtoa_r+0x50e>
 801044a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801044e:	f7f0 f8db 	bl	8000608 <__aeabi_dmul>
 8010452:	3601      	adds	r6, #1
 8010454:	2301      	movs	r3, #1
 8010456:	1064      	asrs	r4, r4, #1
 8010458:	3508      	adds	r5, #8
 801045a:	e73f      	b.n	80102dc <_dtoa_r+0x394>
 801045c:	2602      	movs	r6, #2
 801045e:	e742      	b.n	80102e6 <_dtoa_r+0x39e>
 8010460:	9c07      	ldr	r4, [sp, #28]
 8010462:	9704      	str	r7, [sp, #16]
 8010464:	e761      	b.n	801032a <_dtoa_r+0x3e2>
 8010466:	4b27      	ldr	r3, [pc, #156]	@ (8010504 <_dtoa_r+0x5bc>)
 8010468:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801046a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801046e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010472:	4454      	add	r4, sl
 8010474:	2900      	cmp	r1, #0
 8010476:	d053      	beq.n	8010520 <_dtoa_r+0x5d8>
 8010478:	4928      	ldr	r1, [pc, #160]	@ (801051c <_dtoa_r+0x5d4>)
 801047a:	2000      	movs	r0, #0
 801047c:	f7f0 f9ee 	bl	800085c <__aeabi_ddiv>
 8010480:	4633      	mov	r3, r6
 8010482:	462a      	mov	r2, r5
 8010484:	f7ef ff08 	bl	8000298 <__aeabi_dsub>
 8010488:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801048c:	4656      	mov	r6, sl
 801048e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010492:	f7f0 fb69 	bl	8000b68 <__aeabi_d2iz>
 8010496:	4605      	mov	r5, r0
 8010498:	f7f0 f84c 	bl	8000534 <__aeabi_i2d>
 801049c:	4602      	mov	r2, r0
 801049e:	460b      	mov	r3, r1
 80104a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104a4:	f7ef fef8 	bl	8000298 <__aeabi_dsub>
 80104a8:	3530      	adds	r5, #48	@ 0x30
 80104aa:	4602      	mov	r2, r0
 80104ac:	460b      	mov	r3, r1
 80104ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80104b2:	f806 5b01 	strb.w	r5, [r6], #1
 80104b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80104ba:	f7f0 fb17 	bl	8000aec <__aeabi_dcmplt>
 80104be:	2800      	cmp	r0, #0
 80104c0:	d171      	bne.n	80105a6 <_dtoa_r+0x65e>
 80104c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80104c6:	4911      	ldr	r1, [pc, #68]	@ (801050c <_dtoa_r+0x5c4>)
 80104c8:	2000      	movs	r0, #0
 80104ca:	f7ef fee5 	bl	8000298 <__aeabi_dsub>
 80104ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80104d2:	f7f0 fb0b 	bl	8000aec <__aeabi_dcmplt>
 80104d6:	2800      	cmp	r0, #0
 80104d8:	f040 8095 	bne.w	8010606 <_dtoa_r+0x6be>
 80104dc:	42a6      	cmp	r6, r4
 80104de:	f43f af50 	beq.w	8010382 <_dtoa_r+0x43a>
 80104e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80104e6:	4b0a      	ldr	r3, [pc, #40]	@ (8010510 <_dtoa_r+0x5c8>)
 80104e8:	2200      	movs	r2, #0
 80104ea:	f7f0 f88d 	bl	8000608 <__aeabi_dmul>
 80104ee:	4b08      	ldr	r3, [pc, #32]	@ (8010510 <_dtoa_r+0x5c8>)
 80104f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80104f4:	2200      	movs	r2, #0
 80104f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104fa:	f7f0 f885 	bl	8000608 <__aeabi_dmul>
 80104fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010502:	e7c4      	b.n	801048e <_dtoa_r+0x546>
 8010504:	08011f10 	.word	0x08011f10
 8010508:	08011ee8 	.word	0x08011ee8
 801050c:	3ff00000 	.word	0x3ff00000
 8010510:	40240000 	.word	0x40240000
 8010514:	401c0000 	.word	0x401c0000
 8010518:	40140000 	.word	0x40140000
 801051c:	3fe00000 	.word	0x3fe00000
 8010520:	4631      	mov	r1, r6
 8010522:	4628      	mov	r0, r5
 8010524:	f7f0 f870 	bl	8000608 <__aeabi_dmul>
 8010528:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801052c:	9415      	str	r4, [sp, #84]	@ 0x54
 801052e:	4656      	mov	r6, sl
 8010530:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010534:	f7f0 fb18 	bl	8000b68 <__aeabi_d2iz>
 8010538:	4605      	mov	r5, r0
 801053a:	f7ef fffb 	bl	8000534 <__aeabi_i2d>
 801053e:	4602      	mov	r2, r0
 8010540:	460b      	mov	r3, r1
 8010542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010546:	f7ef fea7 	bl	8000298 <__aeabi_dsub>
 801054a:	3530      	adds	r5, #48	@ 0x30
 801054c:	f806 5b01 	strb.w	r5, [r6], #1
 8010550:	4602      	mov	r2, r0
 8010552:	460b      	mov	r3, r1
 8010554:	42a6      	cmp	r6, r4
 8010556:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801055a:	f04f 0200 	mov.w	r2, #0
 801055e:	d124      	bne.n	80105aa <_dtoa_r+0x662>
 8010560:	4bac      	ldr	r3, [pc, #688]	@ (8010814 <_dtoa_r+0x8cc>)
 8010562:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010566:	f7ef fe99 	bl	800029c <__adddf3>
 801056a:	4602      	mov	r2, r0
 801056c:	460b      	mov	r3, r1
 801056e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010572:	f7f0 fad9 	bl	8000b28 <__aeabi_dcmpgt>
 8010576:	2800      	cmp	r0, #0
 8010578:	d145      	bne.n	8010606 <_dtoa_r+0x6be>
 801057a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801057e:	49a5      	ldr	r1, [pc, #660]	@ (8010814 <_dtoa_r+0x8cc>)
 8010580:	2000      	movs	r0, #0
 8010582:	f7ef fe89 	bl	8000298 <__aeabi_dsub>
 8010586:	4602      	mov	r2, r0
 8010588:	460b      	mov	r3, r1
 801058a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801058e:	f7f0 faad 	bl	8000aec <__aeabi_dcmplt>
 8010592:	2800      	cmp	r0, #0
 8010594:	f43f aef5 	beq.w	8010382 <_dtoa_r+0x43a>
 8010598:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801059a:	1e73      	subs	r3, r6, #1
 801059c:	9315      	str	r3, [sp, #84]	@ 0x54
 801059e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80105a2:	2b30      	cmp	r3, #48	@ 0x30
 80105a4:	d0f8      	beq.n	8010598 <_dtoa_r+0x650>
 80105a6:	9f04      	ldr	r7, [sp, #16]
 80105a8:	e73e      	b.n	8010428 <_dtoa_r+0x4e0>
 80105aa:	4b9b      	ldr	r3, [pc, #620]	@ (8010818 <_dtoa_r+0x8d0>)
 80105ac:	f7f0 f82c 	bl	8000608 <__aeabi_dmul>
 80105b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105b4:	e7bc      	b.n	8010530 <_dtoa_r+0x5e8>
 80105b6:	d10c      	bne.n	80105d2 <_dtoa_r+0x68a>
 80105b8:	4b98      	ldr	r3, [pc, #608]	@ (801081c <_dtoa_r+0x8d4>)
 80105ba:	2200      	movs	r2, #0
 80105bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80105c0:	f7f0 f822 	bl	8000608 <__aeabi_dmul>
 80105c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80105c8:	f7f0 faa4 	bl	8000b14 <__aeabi_dcmpge>
 80105cc:	2800      	cmp	r0, #0
 80105ce:	f000 8157 	beq.w	8010880 <_dtoa_r+0x938>
 80105d2:	2400      	movs	r4, #0
 80105d4:	4625      	mov	r5, r4
 80105d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80105d8:	43db      	mvns	r3, r3
 80105da:	9304      	str	r3, [sp, #16]
 80105dc:	4656      	mov	r6, sl
 80105de:	2700      	movs	r7, #0
 80105e0:	4621      	mov	r1, r4
 80105e2:	4658      	mov	r0, fp
 80105e4:	f000 fafe 	bl	8010be4 <_Bfree>
 80105e8:	2d00      	cmp	r5, #0
 80105ea:	d0dc      	beq.n	80105a6 <_dtoa_r+0x65e>
 80105ec:	b12f      	cbz	r7, 80105fa <_dtoa_r+0x6b2>
 80105ee:	42af      	cmp	r7, r5
 80105f0:	d003      	beq.n	80105fa <_dtoa_r+0x6b2>
 80105f2:	4639      	mov	r1, r7
 80105f4:	4658      	mov	r0, fp
 80105f6:	f000 faf5 	bl	8010be4 <_Bfree>
 80105fa:	4629      	mov	r1, r5
 80105fc:	4658      	mov	r0, fp
 80105fe:	f000 faf1 	bl	8010be4 <_Bfree>
 8010602:	e7d0      	b.n	80105a6 <_dtoa_r+0x65e>
 8010604:	9704      	str	r7, [sp, #16]
 8010606:	4633      	mov	r3, r6
 8010608:	461e      	mov	r6, r3
 801060a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801060e:	2a39      	cmp	r2, #57	@ 0x39
 8010610:	d107      	bne.n	8010622 <_dtoa_r+0x6da>
 8010612:	459a      	cmp	sl, r3
 8010614:	d1f8      	bne.n	8010608 <_dtoa_r+0x6c0>
 8010616:	9a04      	ldr	r2, [sp, #16]
 8010618:	3201      	adds	r2, #1
 801061a:	9204      	str	r2, [sp, #16]
 801061c:	2230      	movs	r2, #48	@ 0x30
 801061e:	f88a 2000 	strb.w	r2, [sl]
 8010622:	781a      	ldrb	r2, [r3, #0]
 8010624:	3201      	adds	r2, #1
 8010626:	701a      	strb	r2, [r3, #0]
 8010628:	e7bd      	b.n	80105a6 <_dtoa_r+0x65e>
 801062a:	4b7b      	ldr	r3, [pc, #492]	@ (8010818 <_dtoa_r+0x8d0>)
 801062c:	2200      	movs	r2, #0
 801062e:	f7ef ffeb 	bl	8000608 <__aeabi_dmul>
 8010632:	2200      	movs	r2, #0
 8010634:	2300      	movs	r3, #0
 8010636:	4604      	mov	r4, r0
 8010638:	460d      	mov	r5, r1
 801063a:	f7f0 fa4d 	bl	8000ad8 <__aeabi_dcmpeq>
 801063e:	2800      	cmp	r0, #0
 8010640:	f43f aebb 	beq.w	80103ba <_dtoa_r+0x472>
 8010644:	e6f0      	b.n	8010428 <_dtoa_r+0x4e0>
 8010646:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010648:	2a00      	cmp	r2, #0
 801064a:	f000 80db 	beq.w	8010804 <_dtoa_r+0x8bc>
 801064e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010650:	2a01      	cmp	r2, #1
 8010652:	f300 80bf 	bgt.w	80107d4 <_dtoa_r+0x88c>
 8010656:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010658:	2a00      	cmp	r2, #0
 801065a:	f000 80b7 	beq.w	80107cc <_dtoa_r+0x884>
 801065e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010662:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010664:	4646      	mov	r6, r8
 8010666:	9a08      	ldr	r2, [sp, #32]
 8010668:	2101      	movs	r1, #1
 801066a:	441a      	add	r2, r3
 801066c:	4658      	mov	r0, fp
 801066e:	4498      	add	r8, r3
 8010670:	9208      	str	r2, [sp, #32]
 8010672:	f000 fb6b 	bl	8010d4c <__i2b>
 8010676:	4605      	mov	r5, r0
 8010678:	b15e      	cbz	r6, 8010692 <_dtoa_r+0x74a>
 801067a:	9b08      	ldr	r3, [sp, #32]
 801067c:	2b00      	cmp	r3, #0
 801067e:	dd08      	ble.n	8010692 <_dtoa_r+0x74a>
 8010680:	42b3      	cmp	r3, r6
 8010682:	9a08      	ldr	r2, [sp, #32]
 8010684:	bfa8      	it	ge
 8010686:	4633      	movge	r3, r6
 8010688:	eba8 0803 	sub.w	r8, r8, r3
 801068c:	1af6      	subs	r6, r6, r3
 801068e:	1ad3      	subs	r3, r2, r3
 8010690:	9308      	str	r3, [sp, #32]
 8010692:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010694:	b1f3      	cbz	r3, 80106d4 <_dtoa_r+0x78c>
 8010696:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010698:	2b00      	cmp	r3, #0
 801069a:	f000 80b7 	beq.w	801080c <_dtoa_r+0x8c4>
 801069e:	b18c      	cbz	r4, 80106c4 <_dtoa_r+0x77c>
 80106a0:	4629      	mov	r1, r5
 80106a2:	4622      	mov	r2, r4
 80106a4:	4658      	mov	r0, fp
 80106a6:	f000 fc11 	bl	8010ecc <__pow5mult>
 80106aa:	464a      	mov	r2, r9
 80106ac:	4601      	mov	r1, r0
 80106ae:	4605      	mov	r5, r0
 80106b0:	4658      	mov	r0, fp
 80106b2:	f000 fb61 	bl	8010d78 <__multiply>
 80106b6:	4649      	mov	r1, r9
 80106b8:	9004      	str	r0, [sp, #16]
 80106ba:	4658      	mov	r0, fp
 80106bc:	f000 fa92 	bl	8010be4 <_Bfree>
 80106c0:	9b04      	ldr	r3, [sp, #16]
 80106c2:	4699      	mov	r9, r3
 80106c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80106c6:	1b1a      	subs	r2, r3, r4
 80106c8:	d004      	beq.n	80106d4 <_dtoa_r+0x78c>
 80106ca:	4649      	mov	r1, r9
 80106cc:	4658      	mov	r0, fp
 80106ce:	f000 fbfd 	bl	8010ecc <__pow5mult>
 80106d2:	4681      	mov	r9, r0
 80106d4:	2101      	movs	r1, #1
 80106d6:	4658      	mov	r0, fp
 80106d8:	f000 fb38 	bl	8010d4c <__i2b>
 80106dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106de:	4604      	mov	r4, r0
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	f000 81cf 	beq.w	8010a84 <_dtoa_r+0xb3c>
 80106e6:	461a      	mov	r2, r3
 80106e8:	4601      	mov	r1, r0
 80106ea:	4658      	mov	r0, fp
 80106ec:	f000 fbee 	bl	8010ecc <__pow5mult>
 80106f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106f2:	2b01      	cmp	r3, #1
 80106f4:	4604      	mov	r4, r0
 80106f6:	f300 8095 	bgt.w	8010824 <_dtoa_r+0x8dc>
 80106fa:	9b02      	ldr	r3, [sp, #8]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	f040 8087 	bne.w	8010810 <_dtoa_r+0x8c8>
 8010702:	9b03      	ldr	r3, [sp, #12]
 8010704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010708:	2b00      	cmp	r3, #0
 801070a:	f040 8089 	bne.w	8010820 <_dtoa_r+0x8d8>
 801070e:	9b03      	ldr	r3, [sp, #12]
 8010710:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010714:	0d1b      	lsrs	r3, r3, #20
 8010716:	051b      	lsls	r3, r3, #20
 8010718:	b12b      	cbz	r3, 8010726 <_dtoa_r+0x7de>
 801071a:	9b08      	ldr	r3, [sp, #32]
 801071c:	3301      	adds	r3, #1
 801071e:	9308      	str	r3, [sp, #32]
 8010720:	f108 0801 	add.w	r8, r8, #1
 8010724:	2301      	movs	r3, #1
 8010726:	930a      	str	r3, [sp, #40]	@ 0x28
 8010728:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801072a:	2b00      	cmp	r3, #0
 801072c:	f000 81b0 	beq.w	8010a90 <_dtoa_r+0xb48>
 8010730:	6923      	ldr	r3, [r4, #16]
 8010732:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010736:	6918      	ldr	r0, [r3, #16]
 8010738:	f000 fabc 	bl	8010cb4 <__hi0bits>
 801073c:	f1c0 0020 	rsb	r0, r0, #32
 8010740:	9b08      	ldr	r3, [sp, #32]
 8010742:	4418      	add	r0, r3
 8010744:	f010 001f 	ands.w	r0, r0, #31
 8010748:	d077      	beq.n	801083a <_dtoa_r+0x8f2>
 801074a:	f1c0 0320 	rsb	r3, r0, #32
 801074e:	2b04      	cmp	r3, #4
 8010750:	dd6b      	ble.n	801082a <_dtoa_r+0x8e2>
 8010752:	9b08      	ldr	r3, [sp, #32]
 8010754:	f1c0 001c 	rsb	r0, r0, #28
 8010758:	4403      	add	r3, r0
 801075a:	4480      	add	r8, r0
 801075c:	4406      	add	r6, r0
 801075e:	9308      	str	r3, [sp, #32]
 8010760:	f1b8 0f00 	cmp.w	r8, #0
 8010764:	dd05      	ble.n	8010772 <_dtoa_r+0x82a>
 8010766:	4649      	mov	r1, r9
 8010768:	4642      	mov	r2, r8
 801076a:	4658      	mov	r0, fp
 801076c:	f000 fc08 	bl	8010f80 <__lshift>
 8010770:	4681      	mov	r9, r0
 8010772:	9b08      	ldr	r3, [sp, #32]
 8010774:	2b00      	cmp	r3, #0
 8010776:	dd05      	ble.n	8010784 <_dtoa_r+0x83c>
 8010778:	4621      	mov	r1, r4
 801077a:	461a      	mov	r2, r3
 801077c:	4658      	mov	r0, fp
 801077e:	f000 fbff 	bl	8010f80 <__lshift>
 8010782:	4604      	mov	r4, r0
 8010784:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010786:	2b00      	cmp	r3, #0
 8010788:	d059      	beq.n	801083e <_dtoa_r+0x8f6>
 801078a:	4621      	mov	r1, r4
 801078c:	4648      	mov	r0, r9
 801078e:	f000 fc63 	bl	8011058 <__mcmp>
 8010792:	2800      	cmp	r0, #0
 8010794:	da53      	bge.n	801083e <_dtoa_r+0x8f6>
 8010796:	1e7b      	subs	r3, r7, #1
 8010798:	9304      	str	r3, [sp, #16]
 801079a:	4649      	mov	r1, r9
 801079c:	2300      	movs	r3, #0
 801079e:	220a      	movs	r2, #10
 80107a0:	4658      	mov	r0, fp
 80107a2:	f000 fa41 	bl	8010c28 <__multadd>
 80107a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80107a8:	4681      	mov	r9, r0
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	f000 8172 	beq.w	8010a94 <_dtoa_r+0xb4c>
 80107b0:	2300      	movs	r3, #0
 80107b2:	4629      	mov	r1, r5
 80107b4:	220a      	movs	r2, #10
 80107b6:	4658      	mov	r0, fp
 80107b8:	f000 fa36 	bl	8010c28 <__multadd>
 80107bc:	9b00      	ldr	r3, [sp, #0]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	4605      	mov	r5, r0
 80107c2:	dc67      	bgt.n	8010894 <_dtoa_r+0x94c>
 80107c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107c6:	2b02      	cmp	r3, #2
 80107c8:	dc41      	bgt.n	801084e <_dtoa_r+0x906>
 80107ca:	e063      	b.n	8010894 <_dtoa_r+0x94c>
 80107cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80107ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80107d2:	e746      	b.n	8010662 <_dtoa_r+0x71a>
 80107d4:	9b07      	ldr	r3, [sp, #28]
 80107d6:	1e5c      	subs	r4, r3, #1
 80107d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107da:	42a3      	cmp	r3, r4
 80107dc:	bfbf      	itttt	lt
 80107de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80107e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80107e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80107e4:	1ae3      	sublt	r3, r4, r3
 80107e6:	bfb4      	ite	lt
 80107e8:	18d2      	addlt	r2, r2, r3
 80107ea:	1b1c      	subge	r4, r3, r4
 80107ec:	9b07      	ldr	r3, [sp, #28]
 80107ee:	bfbc      	itt	lt
 80107f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80107f2:	2400      	movlt	r4, #0
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	bfb5      	itete	lt
 80107f8:	eba8 0603 	sublt.w	r6, r8, r3
 80107fc:	9b07      	ldrge	r3, [sp, #28]
 80107fe:	2300      	movlt	r3, #0
 8010800:	4646      	movge	r6, r8
 8010802:	e730      	b.n	8010666 <_dtoa_r+0x71e>
 8010804:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010806:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010808:	4646      	mov	r6, r8
 801080a:	e735      	b.n	8010678 <_dtoa_r+0x730>
 801080c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801080e:	e75c      	b.n	80106ca <_dtoa_r+0x782>
 8010810:	2300      	movs	r3, #0
 8010812:	e788      	b.n	8010726 <_dtoa_r+0x7de>
 8010814:	3fe00000 	.word	0x3fe00000
 8010818:	40240000 	.word	0x40240000
 801081c:	40140000 	.word	0x40140000
 8010820:	9b02      	ldr	r3, [sp, #8]
 8010822:	e780      	b.n	8010726 <_dtoa_r+0x7de>
 8010824:	2300      	movs	r3, #0
 8010826:	930a      	str	r3, [sp, #40]	@ 0x28
 8010828:	e782      	b.n	8010730 <_dtoa_r+0x7e8>
 801082a:	d099      	beq.n	8010760 <_dtoa_r+0x818>
 801082c:	9a08      	ldr	r2, [sp, #32]
 801082e:	331c      	adds	r3, #28
 8010830:	441a      	add	r2, r3
 8010832:	4498      	add	r8, r3
 8010834:	441e      	add	r6, r3
 8010836:	9208      	str	r2, [sp, #32]
 8010838:	e792      	b.n	8010760 <_dtoa_r+0x818>
 801083a:	4603      	mov	r3, r0
 801083c:	e7f6      	b.n	801082c <_dtoa_r+0x8e4>
 801083e:	9b07      	ldr	r3, [sp, #28]
 8010840:	9704      	str	r7, [sp, #16]
 8010842:	2b00      	cmp	r3, #0
 8010844:	dc20      	bgt.n	8010888 <_dtoa_r+0x940>
 8010846:	9300      	str	r3, [sp, #0]
 8010848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801084a:	2b02      	cmp	r3, #2
 801084c:	dd1e      	ble.n	801088c <_dtoa_r+0x944>
 801084e:	9b00      	ldr	r3, [sp, #0]
 8010850:	2b00      	cmp	r3, #0
 8010852:	f47f aec0 	bne.w	80105d6 <_dtoa_r+0x68e>
 8010856:	4621      	mov	r1, r4
 8010858:	2205      	movs	r2, #5
 801085a:	4658      	mov	r0, fp
 801085c:	f000 f9e4 	bl	8010c28 <__multadd>
 8010860:	4601      	mov	r1, r0
 8010862:	4604      	mov	r4, r0
 8010864:	4648      	mov	r0, r9
 8010866:	f000 fbf7 	bl	8011058 <__mcmp>
 801086a:	2800      	cmp	r0, #0
 801086c:	f77f aeb3 	ble.w	80105d6 <_dtoa_r+0x68e>
 8010870:	4656      	mov	r6, sl
 8010872:	2331      	movs	r3, #49	@ 0x31
 8010874:	f806 3b01 	strb.w	r3, [r6], #1
 8010878:	9b04      	ldr	r3, [sp, #16]
 801087a:	3301      	adds	r3, #1
 801087c:	9304      	str	r3, [sp, #16]
 801087e:	e6ae      	b.n	80105de <_dtoa_r+0x696>
 8010880:	9c07      	ldr	r4, [sp, #28]
 8010882:	9704      	str	r7, [sp, #16]
 8010884:	4625      	mov	r5, r4
 8010886:	e7f3      	b.n	8010870 <_dtoa_r+0x928>
 8010888:	9b07      	ldr	r3, [sp, #28]
 801088a:	9300      	str	r3, [sp, #0]
 801088c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801088e:	2b00      	cmp	r3, #0
 8010890:	f000 8104 	beq.w	8010a9c <_dtoa_r+0xb54>
 8010894:	2e00      	cmp	r6, #0
 8010896:	dd05      	ble.n	80108a4 <_dtoa_r+0x95c>
 8010898:	4629      	mov	r1, r5
 801089a:	4632      	mov	r2, r6
 801089c:	4658      	mov	r0, fp
 801089e:	f000 fb6f 	bl	8010f80 <__lshift>
 80108a2:	4605      	mov	r5, r0
 80108a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d05a      	beq.n	8010960 <_dtoa_r+0xa18>
 80108aa:	6869      	ldr	r1, [r5, #4]
 80108ac:	4658      	mov	r0, fp
 80108ae:	f000 f959 	bl	8010b64 <_Balloc>
 80108b2:	4606      	mov	r6, r0
 80108b4:	b928      	cbnz	r0, 80108c2 <_dtoa_r+0x97a>
 80108b6:	4b84      	ldr	r3, [pc, #528]	@ (8010ac8 <_dtoa_r+0xb80>)
 80108b8:	4602      	mov	r2, r0
 80108ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80108be:	f7ff bb5a 	b.w	800ff76 <_dtoa_r+0x2e>
 80108c2:	692a      	ldr	r2, [r5, #16]
 80108c4:	3202      	adds	r2, #2
 80108c6:	0092      	lsls	r2, r2, #2
 80108c8:	f105 010c 	add.w	r1, r5, #12
 80108cc:	300c      	adds	r0, #12
 80108ce:	f7ff faa2 	bl	800fe16 <memcpy>
 80108d2:	2201      	movs	r2, #1
 80108d4:	4631      	mov	r1, r6
 80108d6:	4658      	mov	r0, fp
 80108d8:	f000 fb52 	bl	8010f80 <__lshift>
 80108dc:	f10a 0301 	add.w	r3, sl, #1
 80108e0:	9307      	str	r3, [sp, #28]
 80108e2:	9b00      	ldr	r3, [sp, #0]
 80108e4:	4453      	add	r3, sl
 80108e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80108e8:	9b02      	ldr	r3, [sp, #8]
 80108ea:	f003 0301 	and.w	r3, r3, #1
 80108ee:	462f      	mov	r7, r5
 80108f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80108f2:	4605      	mov	r5, r0
 80108f4:	9b07      	ldr	r3, [sp, #28]
 80108f6:	4621      	mov	r1, r4
 80108f8:	3b01      	subs	r3, #1
 80108fa:	4648      	mov	r0, r9
 80108fc:	9300      	str	r3, [sp, #0]
 80108fe:	f7ff fa98 	bl	800fe32 <quorem>
 8010902:	4639      	mov	r1, r7
 8010904:	9002      	str	r0, [sp, #8]
 8010906:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801090a:	4648      	mov	r0, r9
 801090c:	f000 fba4 	bl	8011058 <__mcmp>
 8010910:	462a      	mov	r2, r5
 8010912:	9008      	str	r0, [sp, #32]
 8010914:	4621      	mov	r1, r4
 8010916:	4658      	mov	r0, fp
 8010918:	f000 fbba 	bl	8011090 <__mdiff>
 801091c:	68c2      	ldr	r2, [r0, #12]
 801091e:	4606      	mov	r6, r0
 8010920:	bb02      	cbnz	r2, 8010964 <_dtoa_r+0xa1c>
 8010922:	4601      	mov	r1, r0
 8010924:	4648      	mov	r0, r9
 8010926:	f000 fb97 	bl	8011058 <__mcmp>
 801092a:	4602      	mov	r2, r0
 801092c:	4631      	mov	r1, r6
 801092e:	4658      	mov	r0, fp
 8010930:	920e      	str	r2, [sp, #56]	@ 0x38
 8010932:	f000 f957 	bl	8010be4 <_Bfree>
 8010936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010938:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801093a:	9e07      	ldr	r6, [sp, #28]
 801093c:	ea43 0102 	orr.w	r1, r3, r2
 8010940:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010942:	4319      	orrs	r1, r3
 8010944:	d110      	bne.n	8010968 <_dtoa_r+0xa20>
 8010946:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801094a:	d029      	beq.n	80109a0 <_dtoa_r+0xa58>
 801094c:	9b08      	ldr	r3, [sp, #32]
 801094e:	2b00      	cmp	r3, #0
 8010950:	dd02      	ble.n	8010958 <_dtoa_r+0xa10>
 8010952:	9b02      	ldr	r3, [sp, #8]
 8010954:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010958:	9b00      	ldr	r3, [sp, #0]
 801095a:	f883 8000 	strb.w	r8, [r3]
 801095e:	e63f      	b.n	80105e0 <_dtoa_r+0x698>
 8010960:	4628      	mov	r0, r5
 8010962:	e7bb      	b.n	80108dc <_dtoa_r+0x994>
 8010964:	2201      	movs	r2, #1
 8010966:	e7e1      	b.n	801092c <_dtoa_r+0x9e4>
 8010968:	9b08      	ldr	r3, [sp, #32]
 801096a:	2b00      	cmp	r3, #0
 801096c:	db04      	blt.n	8010978 <_dtoa_r+0xa30>
 801096e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010970:	430b      	orrs	r3, r1
 8010972:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010974:	430b      	orrs	r3, r1
 8010976:	d120      	bne.n	80109ba <_dtoa_r+0xa72>
 8010978:	2a00      	cmp	r2, #0
 801097a:	dded      	ble.n	8010958 <_dtoa_r+0xa10>
 801097c:	4649      	mov	r1, r9
 801097e:	2201      	movs	r2, #1
 8010980:	4658      	mov	r0, fp
 8010982:	f000 fafd 	bl	8010f80 <__lshift>
 8010986:	4621      	mov	r1, r4
 8010988:	4681      	mov	r9, r0
 801098a:	f000 fb65 	bl	8011058 <__mcmp>
 801098e:	2800      	cmp	r0, #0
 8010990:	dc03      	bgt.n	801099a <_dtoa_r+0xa52>
 8010992:	d1e1      	bne.n	8010958 <_dtoa_r+0xa10>
 8010994:	f018 0f01 	tst.w	r8, #1
 8010998:	d0de      	beq.n	8010958 <_dtoa_r+0xa10>
 801099a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801099e:	d1d8      	bne.n	8010952 <_dtoa_r+0xa0a>
 80109a0:	9a00      	ldr	r2, [sp, #0]
 80109a2:	2339      	movs	r3, #57	@ 0x39
 80109a4:	7013      	strb	r3, [r2, #0]
 80109a6:	4633      	mov	r3, r6
 80109a8:	461e      	mov	r6, r3
 80109aa:	3b01      	subs	r3, #1
 80109ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80109b0:	2a39      	cmp	r2, #57	@ 0x39
 80109b2:	d052      	beq.n	8010a5a <_dtoa_r+0xb12>
 80109b4:	3201      	adds	r2, #1
 80109b6:	701a      	strb	r2, [r3, #0]
 80109b8:	e612      	b.n	80105e0 <_dtoa_r+0x698>
 80109ba:	2a00      	cmp	r2, #0
 80109bc:	dd07      	ble.n	80109ce <_dtoa_r+0xa86>
 80109be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80109c2:	d0ed      	beq.n	80109a0 <_dtoa_r+0xa58>
 80109c4:	9a00      	ldr	r2, [sp, #0]
 80109c6:	f108 0301 	add.w	r3, r8, #1
 80109ca:	7013      	strb	r3, [r2, #0]
 80109cc:	e608      	b.n	80105e0 <_dtoa_r+0x698>
 80109ce:	9b07      	ldr	r3, [sp, #28]
 80109d0:	9a07      	ldr	r2, [sp, #28]
 80109d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80109d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80109d8:	4293      	cmp	r3, r2
 80109da:	d028      	beq.n	8010a2e <_dtoa_r+0xae6>
 80109dc:	4649      	mov	r1, r9
 80109de:	2300      	movs	r3, #0
 80109e0:	220a      	movs	r2, #10
 80109e2:	4658      	mov	r0, fp
 80109e4:	f000 f920 	bl	8010c28 <__multadd>
 80109e8:	42af      	cmp	r7, r5
 80109ea:	4681      	mov	r9, r0
 80109ec:	f04f 0300 	mov.w	r3, #0
 80109f0:	f04f 020a 	mov.w	r2, #10
 80109f4:	4639      	mov	r1, r7
 80109f6:	4658      	mov	r0, fp
 80109f8:	d107      	bne.n	8010a0a <_dtoa_r+0xac2>
 80109fa:	f000 f915 	bl	8010c28 <__multadd>
 80109fe:	4607      	mov	r7, r0
 8010a00:	4605      	mov	r5, r0
 8010a02:	9b07      	ldr	r3, [sp, #28]
 8010a04:	3301      	adds	r3, #1
 8010a06:	9307      	str	r3, [sp, #28]
 8010a08:	e774      	b.n	80108f4 <_dtoa_r+0x9ac>
 8010a0a:	f000 f90d 	bl	8010c28 <__multadd>
 8010a0e:	4629      	mov	r1, r5
 8010a10:	4607      	mov	r7, r0
 8010a12:	2300      	movs	r3, #0
 8010a14:	220a      	movs	r2, #10
 8010a16:	4658      	mov	r0, fp
 8010a18:	f000 f906 	bl	8010c28 <__multadd>
 8010a1c:	4605      	mov	r5, r0
 8010a1e:	e7f0      	b.n	8010a02 <_dtoa_r+0xaba>
 8010a20:	9b00      	ldr	r3, [sp, #0]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	bfcc      	ite	gt
 8010a26:	461e      	movgt	r6, r3
 8010a28:	2601      	movle	r6, #1
 8010a2a:	4456      	add	r6, sl
 8010a2c:	2700      	movs	r7, #0
 8010a2e:	4649      	mov	r1, r9
 8010a30:	2201      	movs	r2, #1
 8010a32:	4658      	mov	r0, fp
 8010a34:	f000 faa4 	bl	8010f80 <__lshift>
 8010a38:	4621      	mov	r1, r4
 8010a3a:	4681      	mov	r9, r0
 8010a3c:	f000 fb0c 	bl	8011058 <__mcmp>
 8010a40:	2800      	cmp	r0, #0
 8010a42:	dcb0      	bgt.n	80109a6 <_dtoa_r+0xa5e>
 8010a44:	d102      	bne.n	8010a4c <_dtoa_r+0xb04>
 8010a46:	f018 0f01 	tst.w	r8, #1
 8010a4a:	d1ac      	bne.n	80109a6 <_dtoa_r+0xa5e>
 8010a4c:	4633      	mov	r3, r6
 8010a4e:	461e      	mov	r6, r3
 8010a50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a54:	2a30      	cmp	r2, #48	@ 0x30
 8010a56:	d0fa      	beq.n	8010a4e <_dtoa_r+0xb06>
 8010a58:	e5c2      	b.n	80105e0 <_dtoa_r+0x698>
 8010a5a:	459a      	cmp	sl, r3
 8010a5c:	d1a4      	bne.n	80109a8 <_dtoa_r+0xa60>
 8010a5e:	9b04      	ldr	r3, [sp, #16]
 8010a60:	3301      	adds	r3, #1
 8010a62:	9304      	str	r3, [sp, #16]
 8010a64:	2331      	movs	r3, #49	@ 0x31
 8010a66:	f88a 3000 	strb.w	r3, [sl]
 8010a6a:	e5b9      	b.n	80105e0 <_dtoa_r+0x698>
 8010a6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010a6e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010acc <_dtoa_r+0xb84>
 8010a72:	b11b      	cbz	r3, 8010a7c <_dtoa_r+0xb34>
 8010a74:	f10a 0308 	add.w	r3, sl, #8
 8010a78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010a7a:	6013      	str	r3, [r2, #0]
 8010a7c:	4650      	mov	r0, sl
 8010a7e:	b019      	add	sp, #100	@ 0x64
 8010a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a86:	2b01      	cmp	r3, #1
 8010a88:	f77f ae37 	ble.w	80106fa <_dtoa_r+0x7b2>
 8010a8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a90:	2001      	movs	r0, #1
 8010a92:	e655      	b.n	8010740 <_dtoa_r+0x7f8>
 8010a94:	9b00      	ldr	r3, [sp, #0]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	f77f aed6 	ble.w	8010848 <_dtoa_r+0x900>
 8010a9c:	4656      	mov	r6, sl
 8010a9e:	4621      	mov	r1, r4
 8010aa0:	4648      	mov	r0, r9
 8010aa2:	f7ff f9c6 	bl	800fe32 <quorem>
 8010aa6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010aaa:	f806 8b01 	strb.w	r8, [r6], #1
 8010aae:	9b00      	ldr	r3, [sp, #0]
 8010ab0:	eba6 020a 	sub.w	r2, r6, sl
 8010ab4:	4293      	cmp	r3, r2
 8010ab6:	ddb3      	ble.n	8010a20 <_dtoa_r+0xad8>
 8010ab8:	4649      	mov	r1, r9
 8010aba:	2300      	movs	r3, #0
 8010abc:	220a      	movs	r2, #10
 8010abe:	4658      	mov	r0, fp
 8010ac0:	f000 f8b2 	bl	8010c28 <__multadd>
 8010ac4:	4681      	mov	r9, r0
 8010ac6:	e7ea      	b.n	8010a9e <_dtoa_r+0xb56>
 8010ac8:	08011e70 	.word	0x08011e70
 8010acc:	08011df4 	.word	0x08011df4

08010ad0 <_free_r>:
 8010ad0:	b538      	push	{r3, r4, r5, lr}
 8010ad2:	4605      	mov	r5, r0
 8010ad4:	2900      	cmp	r1, #0
 8010ad6:	d041      	beq.n	8010b5c <_free_r+0x8c>
 8010ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010adc:	1f0c      	subs	r4, r1, #4
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	bfb8      	it	lt
 8010ae2:	18e4      	addlt	r4, r4, r3
 8010ae4:	f7fe fb90 	bl	800f208 <__malloc_lock>
 8010ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8010b60 <_free_r+0x90>)
 8010aea:	6813      	ldr	r3, [r2, #0]
 8010aec:	b933      	cbnz	r3, 8010afc <_free_r+0x2c>
 8010aee:	6063      	str	r3, [r4, #4]
 8010af0:	6014      	str	r4, [r2, #0]
 8010af2:	4628      	mov	r0, r5
 8010af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010af8:	f7fe bb8c 	b.w	800f214 <__malloc_unlock>
 8010afc:	42a3      	cmp	r3, r4
 8010afe:	d908      	bls.n	8010b12 <_free_r+0x42>
 8010b00:	6820      	ldr	r0, [r4, #0]
 8010b02:	1821      	adds	r1, r4, r0
 8010b04:	428b      	cmp	r3, r1
 8010b06:	bf01      	itttt	eq
 8010b08:	6819      	ldreq	r1, [r3, #0]
 8010b0a:	685b      	ldreq	r3, [r3, #4]
 8010b0c:	1809      	addeq	r1, r1, r0
 8010b0e:	6021      	streq	r1, [r4, #0]
 8010b10:	e7ed      	b.n	8010aee <_free_r+0x1e>
 8010b12:	461a      	mov	r2, r3
 8010b14:	685b      	ldr	r3, [r3, #4]
 8010b16:	b10b      	cbz	r3, 8010b1c <_free_r+0x4c>
 8010b18:	42a3      	cmp	r3, r4
 8010b1a:	d9fa      	bls.n	8010b12 <_free_r+0x42>
 8010b1c:	6811      	ldr	r1, [r2, #0]
 8010b1e:	1850      	adds	r0, r2, r1
 8010b20:	42a0      	cmp	r0, r4
 8010b22:	d10b      	bne.n	8010b3c <_free_r+0x6c>
 8010b24:	6820      	ldr	r0, [r4, #0]
 8010b26:	4401      	add	r1, r0
 8010b28:	1850      	adds	r0, r2, r1
 8010b2a:	4283      	cmp	r3, r0
 8010b2c:	6011      	str	r1, [r2, #0]
 8010b2e:	d1e0      	bne.n	8010af2 <_free_r+0x22>
 8010b30:	6818      	ldr	r0, [r3, #0]
 8010b32:	685b      	ldr	r3, [r3, #4]
 8010b34:	6053      	str	r3, [r2, #4]
 8010b36:	4408      	add	r0, r1
 8010b38:	6010      	str	r0, [r2, #0]
 8010b3a:	e7da      	b.n	8010af2 <_free_r+0x22>
 8010b3c:	d902      	bls.n	8010b44 <_free_r+0x74>
 8010b3e:	230c      	movs	r3, #12
 8010b40:	602b      	str	r3, [r5, #0]
 8010b42:	e7d6      	b.n	8010af2 <_free_r+0x22>
 8010b44:	6820      	ldr	r0, [r4, #0]
 8010b46:	1821      	adds	r1, r4, r0
 8010b48:	428b      	cmp	r3, r1
 8010b4a:	bf04      	itt	eq
 8010b4c:	6819      	ldreq	r1, [r3, #0]
 8010b4e:	685b      	ldreq	r3, [r3, #4]
 8010b50:	6063      	str	r3, [r4, #4]
 8010b52:	bf04      	itt	eq
 8010b54:	1809      	addeq	r1, r1, r0
 8010b56:	6021      	streq	r1, [r4, #0]
 8010b58:	6054      	str	r4, [r2, #4]
 8010b5a:	e7ca      	b.n	8010af2 <_free_r+0x22>
 8010b5c:	bd38      	pop	{r3, r4, r5, pc}
 8010b5e:	bf00      	nop
 8010b60:	20001c7c 	.word	0x20001c7c

08010b64 <_Balloc>:
 8010b64:	b570      	push	{r4, r5, r6, lr}
 8010b66:	69c6      	ldr	r6, [r0, #28]
 8010b68:	4604      	mov	r4, r0
 8010b6a:	460d      	mov	r5, r1
 8010b6c:	b976      	cbnz	r6, 8010b8c <_Balloc+0x28>
 8010b6e:	2010      	movs	r0, #16
 8010b70:	f7fe fa98 	bl	800f0a4 <malloc>
 8010b74:	4602      	mov	r2, r0
 8010b76:	61e0      	str	r0, [r4, #28]
 8010b78:	b920      	cbnz	r0, 8010b84 <_Balloc+0x20>
 8010b7a:	4b18      	ldr	r3, [pc, #96]	@ (8010bdc <_Balloc+0x78>)
 8010b7c:	4818      	ldr	r0, [pc, #96]	@ (8010be0 <_Balloc+0x7c>)
 8010b7e:	216b      	movs	r1, #107	@ 0x6b
 8010b80:	f000 fc1e 	bl	80113c0 <__assert_func>
 8010b84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b88:	6006      	str	r6, [r0, #0]
 8010b8a:	60c6      	str	r6, [r0, #12]
 8010b8c:	69e6      	ldr	r6, [r4, #28]
 8010b8e:	68f3      	ldr	r3, [r6, #12]
 8010b90:	b183      	cbz	r3, 8010bb4 <_Balloc+0x50>
 8010b92:	69e3      	ldr	r3, [r4, #28]
 8010b94:	68db      	ldr	r3, [r3, #12]
 8010b96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010b9a:	b9b8      	cbnz	r0, 8010bcc <_Balloc+0x68>
 8010b9c:	2101      	movs	r1, #1
 8010b9e:	fa01 f605 	lsl.w	r6, r1, r5
 8010ba2:	1d72      	adds	r2, r6, #5
 8010ba4:	0092      	lsls	r2, r2, #2
 8010ba6:	4620      	mov	r0, r4
 8010ba8:	f000 fc28 	bl	80113fc <_calloc_r>
 8010bac:	b160      	cbz	r0, 8010bc8 <_Balloc+0x64>
 8010bae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010bb2:	e00e      	b.n	8010bd2 <_Balloc+0x6e>
 8010bb4:	2221      	movs	r2, #33	@ 0x21
 8010bb6:	2104      	movs	r1, #4
 8010bb8:	4620      	mov	r0, r4
 8010bba:	f000 fc1f 	bl	80113fc <_calloc_r>
 8010bbe:	69e3      	ldr	r3, [r4, #28]
 8010bc0:	60f0      	str	r0, [r6, #12]
 8010bc2:	68db      	ldr	r3, [r3, #12]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d1e4      	bne.n	8010b92 <_Balloc+0x2e>
 8010bc8:	2000      	movs	r0, #0
 8010bca:	bd70      	pop	{r4, r5, r6, pc}
 8010bcc:	6802      	ldr	r2, [r0, #0]
 8010bce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010bd8:	e7f7      	b.n	8010bca <_Balloc+0x66>
 8010bda:	bf00      	nop
 8010bdc:	08011e01 	.word	0x08011e01
 8010be0:	08011e81 	.word	0x08011e81

08010be4 <_Bfree>:
 8010be4:	b570      	push	{r4, r5, r6, lr}
 8010be6:	69c6      	ldr	r6, [r0, #28]
 8010be8:	4605      	mov	r5, r0
 8010bea:	460c      	mov	r4, r1
 8010bec:	b976      	cbnz	r6, 8010c0c <_Bfree+0x28>
 8010bee:	2010      	movs	r0, #16
 8010bf0:	f7fe fa58 	bl	800f0a4 <malloc>
 8010bf4:	4602      	mov	r2, r0
 8010bf6:	61e8      	str	r0, [r5, #28]
 8010bf8:	b920      	cbnz	r0, 8010c04 <_Bfree+0x20>
 8010bfa:	4b09      	ldr	r3, [pc, #36]	@ (8010c20 <_Bfree+0x3c>)
 8010bfc:	4809      	ldr	r0, [pc, #36]	@ (8010c24 <_Bfree+0x40>)
 8010bfe:	218f      	movs	r1, #143	@ 0x8f
 8010c00:	f000 fbde 	bl	80113c0 <__assert_func>
 8010c04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c08:	6006      	str	r6, [r0, #0]
 8010c0a:	60c6      	str	r6, [r0, #12]
 8010c0c:	b13c      	cbz	r4, 8010c1e <_Bfree+0x3a>
 8010c0e:	69eb      	ldr	r3, [r5, #28]
 8010c10:	6862      	ldr	r2, [r4, #4]
 8010c12:	68db      	ldr	r3, [r3, #12]
 8010c14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010c18:	6021      	str	r1, [r4, #0]
 8010c1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010c1e:	bd70      	pop	{r4, r5, r6, pc}
 8010c20:	08011e01 	.word	0x08011e01
 8010c24:	08011e81 	.word	0x08011e81

08010c28 <__multadd>:
 8010c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c2c:	690d      	ldr	r5, [r1, #16]
 8010c2e:	4607      	mov	r7, r0
 8010c30:	460c      	mov	r4, r1
 8010c32:	461e      	mov	r6, r3
 8010c34:	f101 0c14 	add.w	ip, r1, #20
 8010c38:	2000      	movs	r0, #0
 8010c3a:	f8dc 3000 	ldr.w	r3, [ip]
 8010c3e:	b299      	uxth	r1, r3
 8010c40:	fb02 6101 	mla	r1, r2, r1, r6
 8010c44:	0c1e      	lsrs	r6, r3, #16
 8010c46:	0c0b      	lsrs	r3, r1, #16
 8010c48:	fb02 3306 	mla	r3, r2, r6, r3
 8010c4c:	b289      	uxth	r1, r1
 8010c4e:	3001      	adds	r0, #1
 8010c50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010c54:	4285      	cmp	r5, r0
 8010c56:	f84c 1b04 	str.w	r1, [ip], #4
 8010c5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010c5e:	dcec      	bgt.n	8010c3a <__multadd+0x12>
 8010c60:	b30e      	cbz	r6, 8010ca6 <__multadd+0x7e>
 8010c62:	68a3      	ldr	r3, [r4, #8]
 8010c64:	42ab      	cmp	r3, r5
 8010c66:	dc19      	bgt.n	8010c9c <__multadd+0x74>
 8010c68:	6861      	ldr	r1, [r4, #4]
 8010c6a:	4638      	mov	r0, r7
 8010c6c:	3101      	adds	r1, #1
 8010c6e:	f7ff ff79 	bl	8010b64 <_Balloc>
 8010c72:	4680      	mov	r8, r0
 8010c74:	b928      	cbnz	r0, 8010c82 <__multadd+0x5a>
 8010c76:	4602      	mov	r2, r0
 8010c78:	4b0c      	ldr	r3, [pc, #48]	@ (8010cac <__multadd+0x84>)
 8010c7a:	480d      	ldr	r0, [pc, #52]	@ (8010cb0 <__multadd+0x88>)
 8010c7c:	21ba      	movs	r1, #186	@ 0xba
 8010c7e:	f000 fb9f 	bl	80113c0 <__assert_func>
 8010c82:	6922      	ldr	r2, [r4, #16]
 8010c84:	3202      	adds	r2, #2
 8010c86:	f104 010c 	add.w	r1, r4, #12
 8010c8a:	0092      	lsls	r2, r2, #2
 8010c8c:	300c      	adds	r0, #12
 8010c8e:	f7ff f8c2 	bl	800fe16 <memcpy>
 8010c92:	4621      	mov	r1, r4
 8010c94:	4638      	mov	r0, r7
 8010c96:	f7ff ffa5 	bl	8010be4 <_Bfree>
 8010c9a:	4644      	mov	r4, r8
 8010c9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010ca0:	3501      	adds	r5, #1
 8010ca2:	615e      	str	r6, [r3, #20]
 8010ca4:	6125      	str	r5, [r4, #16]
 8010ca6:	4620      	mov	r0, r4
 8010ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cac:	08011e70 	.word	0x08011e70
 8010cb0:	08011e81 	.word	0x08011e81

08010cb4 <__hi0bits>:
 8010cb4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010cb8:	4603      	mov	r3, r0
 8010cba:	bf36      	itet	cc
 8010cbc:	0403      	lslcc	r3, r0, #16
 8010cbe:	2000      	movcs	r0, #0
 8010cc0:	2010      	movcc	r0, #16
 8010cc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010cc6:	bf3c      	itt	cc
 8010cc8:	021b      	lslcc	r3, r3, #8
 8010cca:	3008      	addcc	r0, #8
 8010ccc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010cd0:	bf3c      	itt	cc
 8010cd2:	011b      	lslcc	r3, r3, #4
 8010cd4:	3004      	addcc	r0, #4
 8010cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010cda:	bf3c      	itt	cc
 8010cdc:	009b      	lslcc	r3, r3, #2
 8010cde:	3002      	addcc	r0, #2
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	db05      	blt.n	8010cf0 <__hi0bits+0x3c>
 8010ce4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010ce8:	f100 0001 	add.w	r0, r0, #1
 8010cec:	bf08      	it	eq
 8010cee:	2020      	moveq	r0, #32
 8010cf0:	4770      	bx	lr

08010cf2 <__lo0bits>:
 8010cf2:	6803      	ldr	r3, [r0, #0]
 8010cf4:	4602      	mov	r2, r0
 8010cf6:	f013 0007 	ands.w	r0, r3, #7
 8010cfa:	d00b      	beq.n	8010d14 <__lo0bits+0x22>
 8010cfc:	07d9      	lsls	r1, r3, #31
 8010cfe:	d421      	bmi.n	8010d44 <__lo0bits+0x52>
 8010d00:	0798      	lsls	r0, r3, #30
 8010d02:	bf49      	itett	mi
 8010d04:	085b      	lsrmi	r3, r3, #1
 8010d06:	089b      	lsrpl	r3, r3, #2
 8010d08:	2001      	movmi	r0, #1
 8010d0a:	6013      	strmi	r3, [r2, #0]
 8010d0c:	bf5c      	itt	pl
 8010d0e:	6013      	strpl	r3, [r2, #0]
 8010d10:	2002      	movpl	r0, #2
 8010d12:	4770      	bx	lr
 8010d14:	b299      	uxth	r1, r3
 8010d16:	b909      	cbnz	r1, 8010d1c <__lo0bits+0x2a>
 8010d18:	0c1b      	lsrs	r3, r3, #16
 8010d1a:	2010      	movs	r0, #16
 8010d1c:	b2d9      	uxtb	r1, r3
 8010d1e:	b909      	cbnz	r1, 8010d24 <__lo0bits+0x32>
 8010d20:	3008      	adds	r0, #8
 8010d22:	0a1b      	lsrs	r3, r3, #8
 8010d24:	0719      	lsls	r1, r3, #28
 8010d26:	bf04      	itt	eq
 8010d28:	091b      	lsreq	r3, r3, #4
 8010d2a:	3004      	addeq	r0, #4
 8010d2c:	0799      	lsls	r1, r3, #30
 8010d2e:	bf04      	itt	eq
 8010d30:	089b      	lsreq	r3, r3, #2
 8010d32:	3002      	addeq	r0, #2
 8010d34:	07d9      	lsls	r1, r3, #31
 8010d36:	d403      	bmi.n	8010d40 <__lo0bits+0x4e>
 8010d38:	085b      	lsrs	r3, r3, #1
 8010d3a:	f100 0001 	add.w	r0, r0, #1
 8010d3e:	d003      	beq.n	8010d48 <__lo0bits+0x56>
 8010d40:	6013      	str	r3, [r2, #0]
 8010d42:	4770      	bx	lr
 8010d44:	2000      	movs	r0, #0
 8010d46:	4770      	bx	lr
 8010d48:	2020      	movs	r0, #32
 8010d4a:	4770      	bx	lr

08010d4c <__i2b>:
 8010d4c:	b510      	push	{r4, lr}
 8010d4e:	460c      	mov	r4, r1
 8010d50:	2101      	movs	r1, #1
 8010d52:	f7ff ff07 	bl	8010b64 <_Balloc>
 8010d56:	4602      	mov	r2, r0
 8010d58:	b928      	cbnz	r0, 8010d66 <__i2b+0x1a>
 8010d5a:	4b05      	ldr	r3, [pc, #20]	@ (8010d70 <__i2b+0x24>)
 8010d5c:	4805      	ldr	r0, [pc, #20]	@ (8010d74 <__i2b+0x28>)
 8010d5e:	f240 1145 	movw	r1, #325	@ 0x145
 8010d62:	f000 fb2d 	bl	80113c0 <__assert_func>
 8010d66:	2301      	movs	r3, #1
 8010d68:	6144      	str	r4, [r0, #20]
 8010d6a:	6103      	str	r3, [r0, #16]
 8010d6c:	bd10      	pop	{r4, pc}
 8010d6e:	bf00      	nop
 8010d70:	08011e70 	.word	0x08011e70
 8010d74:	08011e81 	.word	0x08011e81

08010d78 <__multiply>:
 8010d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d7c:	4614      	mov	r4, r2
 8010d7e:	690a      	ldr	r2, [r1, #16]
 8010d80:	6923      	ldr	r3, [r4, #16]
 8010d82:	429a      	cmp	r2, r3
 8010d84:	bfa8      	it	ge
 8010d86:	4623      	movge	r3, r4
 8010d88:	460f      	mov	r7, r1
 8010d8a:	bfa4      	itt	ge
 8010d8c:	460c      	movge	r4, r1
 8010d8e:	461f      	movge	r7, r3
 8010d90:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010d94:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010d98:	68a3      	ldr	r3, [r4, #8]
 8010d9a:	6861      	ldr	r1, [r4, #4]
 8010d9c:	eb0a 0609 	add.w	r6, sl, r9
 8010da0:	42b3      	cmp	r3, r6
 8010da2:	b085      	sub	sp, #20
 8010da4:	bfb8      	it	lt
 8010da6:	3101      	addlt	r1, #1
 8010da8:	f7ff fedc 	bl	8010b64 <_Balloc>
 8010dac:	b930      	cbnz	r0, 8010dbc <__multiply+0x44>
 8010dae:	4602      	mov	r2, r0
 8010db0:	4b44      	ldr	r3, [pc, #272]	@ (8010ec4 <__multiply+0x14c>)
 8010db2:	4845      	ldr	r0, [pc, #276]	@ (8010ec8 <__multiply+0x150>)
 8010db4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010db8:	f000 fb02 	bl	80113c0 <__assert_func>
 8010dbc:	f100 0514 	add.w	r5, r0, #20
 8010dc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010dc4:	462b      	mov	r3, r5
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	4543      	cmp	r3, r8
 8010dca:	d321      	bcc.n	8010e10 <__multiply+0x98>
 8010dcc:	f107 0114 	add.w	r1, r7, #20
 8010dd0:	f104 0214 	add.w	r2, r4, #20
 8010dd4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010dd8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010ddc:	9302      	str	r3, [sp, #8]
 8010dde:	1b13      	subs	r3, r2, r4
 8010de0:	3b15      	subs	r3, #21
 8010de2:	f023 0303 	bic.w	r3, r3, #3
 8010de6:	3304      	adds	r3, #4
 8010de8:	f104 0715 	add.w	r7, r4, #21
 8010dec:	42ba      	cmp	r2, r7
 8010dee:	bf38      	it	cc
 8010df0:	2304      	movcc	r3, #4
 8010df2:	9301      	str	r3, [sp, #4]
 8010df4:	9b02      	ldr	r3, [sp, #8]
 8010df6:	9103      	str	r1, [sp, #12]
 8010df8:	428b      	cmp	r3, r1
 8010dfa:	d80c      	bhi.n	8010e16 <__multiply+0x9e>
 8010dfc:	2e00      	cmp	r6, #0
 8010dfe:	dd03      	ble.n	8010e08 <__multiply+0x90>
 8010e00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d05b      	beq.n	8010ec0 <__multiply+0x148>
 8010e08:	6106      	str	r6, [r0, #16]
 8010e0a:	b005      	add	sp, #20
 8010e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e10:	f843 2b04 	str.w	r2, [r3], #4
 8010e14:	e7d8      	b.n	8010dc8 <__multiply+0x50>
 8010e16:	f8b1 a000 	ldrh.w	sl, [r1]
 8010e1a:	f1ba 0f00 	cmp.w	sl, #0
 8010e1e:	d024      	beq.n	8010e6a <__multiply+0xf2>
 8010e20:	f104 0e14 	add.w	lr, r4, #20
 8010e24:	46a9      	mov	r9, r5
 8010e26:	f04f 0c00 	mov.w	ip, #0
 8010e2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010e2e:	f8d9 3000 	ldr.w	r3, [r9]
 8010e32:	fa1f fb87 	uxth.w	fp, r7
 8010e36:	b29b      	uxth	r3, r3
 8010e38:	fb0a 330b 	mla	r3, sl, fp, r3
 8010e3c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010e40:	f8d9 7000 	ldr.w	r7, [r9]
 8010e44:	4463      	add	r3, ip
 8010e46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010e4a:	fb0a c70b 	mla	r7, sl, fp, ip
 8010e4e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010e52:	b29b      	uxth	r3, r3
 8010e54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010e58:	4572      	cmp	r2, lr
 8010e5a:	f849 3b04 	str.w	r3, [r9], #4
 8010e5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010e62:	d8e2      	bhi.n	8010e2a <__multiply+0xb2>
 8010e64:	9b01      	ldr	r3, [sp, #4]
 8010e66:	f845 c003 	str.w	ip, [r5, r3]
 8010e6a:	9b03      	ldr	r3, [sp, #12]
 8010e6c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010e70:	3104      	adds	r1, #4
 8010e72:	f1b9 0f00 	cmp.w	r9, #0
 8010e76:	d021      	beq.n	8010ebc <__multiply+0x144>
 8010e78:	682b      	ldr	r3, [r5, #0]
 8010e7a:	f104 0c14 	add.w	ip, r4, #20
 8010e7e:	46ae      	mov	lr, r5
 8010e80:	f04f 0a00 	mov.w	sl, #0
 8010e84:	f8bc b000 	ldrh.w	fp, [ip]
 8010e88:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010e8c:	fb09 770b 	mla	r7, r9, fp, r7
 8010e90:	4457      	add	r7, sl
 8010e92:	b29b      	uxth	r3, r3
 8010e94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010e98:	f84e 3b04 	str.w	r3, [lr], #4
 8010e9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010ea0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010ea4:	f8be 3000 	ldrh.w	r3, [lr]
 8010ea8:	fb09 330a 	mla	r3, r9, sl, r3
 8010eac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010eb0:	4562      	cmp	r2, ip
 8010eb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010eb6:	d8e5      	bhi.n	8010e84 <__multiply+0x10c>
 8010eb8:	9f01      	ldr	r7, [sp, #4]
 8010eba:	51eb      	str	r3, [r5, r7]
 8010ebc:	3504      	adds	r5, #4
 8010ebe:	e799      	b.n	8010df4 <__multiply+0x7c>
 8010ec0:	3e01      	subs	r6, #1
 8010ec2:	e79b      	b.n	8010dfc <__multiply+0x84>
 8010ec4:	08011e70 	.word	0x08011e70
 8010ec8:	08011e81 	.word	0x08011e81

08010ecc <__pow5mult>:
 8010ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ed0:	4615      	mov	r5, r2
 8010ed2:	f012 0203 	ands.w	r2, r2, #3
 8010ed6:	4607      	mov	r7, r0
 8010ed8:	460e      	mov	r6, r1
 8010eda:	d007      	beq.n	8010eec <__pow5mult+0x20>
 8010edc:	4c25      	ldr	r4, [pc, #148]	@ (8010f74 <__pow5mult+0xa8>)
 8010ede:	3a01      	subs	r2, #1
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010ee6:	f7ff fe9f 	bl	8010c28 <__multadd>
 8010eea:	4606      	mov	r6, r0
 8010eec:	10ad      	asrs	r5, r5, #2
 8010eee:	d03d      	beq.n	8010f6c <__pow5mult+0xa0>
 8010ef0:	69fc      	ldr	r4, [r7, #28]
 8010ef2:	b97c      	cbnz	r4, 8010f14 <__pow5mult+0x48>
 8010ef4:	2010      	movs	r0, #16
 8010ef6:	f7fe f8d5 	bl	800f0a4 <malloc>
 8010efa:	4602      	mov	r2, r0
 8010efc:	61f8      	str	r0, [r7, #28]
 8010efe:	b928      	cbnz	r0, 8010f0c <__pow5mult+0x40>
 8010f00:	4b1d      	ldr	r3, [pc, #116]	@ (8010f78 <__pow5mult+0xac>)
 8010f02:	481e      	ldr	r0, [pc, #120]	@ (8010f7c <__pow5mult+0xb0>)
 8010f04:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010f08:	f000 fa5a 	bl	80113c0 <__assert_func>
 8010f0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010f10:	6004      	str	r4, [r0, #0]
 8010f12:	60c4      	str	r4, [r0, #12]
 8010f14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010f18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010f1c:	b94c      	cbnz	r4, 8010f32 <__pow5mult+0x66>
 8010f1e:	f240 2171 	movw	r1, #625	@ 0x271
 8010f22:	4638      	mov	r0, r7
 8010f24:	f7ff ff12 	bl	8010d4c <__i2b>
 8010f28:	2300      	movs	r3, #0
 8010f2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8010f2e:	4604      	mov	r4, r0
 8010f30:	6003      	str	r3, [r0, #0]
 8010f32:	f04f 0900 	mov.w	r9, #0
 8010f36:	07eb      	lsls	r3, r5, #31
 8010f38:	d50a      	bpl.n	8010f50 <__pow5mult+0x84>
 8010f3a:	4631      	mov	r1, r6
 8010f3c:	4622      	mov	r2, r4
 8010f3e:	4638      	mov	r0, r7
 8010f40:	f7ff ff1a 	bl	8010d78 <__multiply>
 8010f44:	4631      	mov	r1, r6
 8010f46:	4680      	mov	r8, r0
 8010f48:	4638      	mov	r0, r7
 8010f4a:	f7ff fe4b 	bl	8010be4 <_Bfree>
 8010f4e:	4646      	mov	r6, r8
 8010f50:	106d      	asrs	r5, r5, #1
 8010f52:	d00b      	beq.n	8010f6c <__pow5mult+0xa0>
 8010f54:	6820      	ldr	r0, [r4, #0]
 8010f56:	b938      	cbnz	r0, 8010f68 <__pow5mult+0x9c>
 8010f58:	4622      	mov	r2, r4
 8010f5a:	4621      	mov	r1, r4
 8010f5c:	4638      	mov	r0, r7
 8010f5e:	f7ff ff0b 	bl	8010d78 <__multiply>
 8010f62:	6020      	str	r0, [r4, #0]
 8010f64:	f8c0 9000 	str.w	r9, [r0]
 8010f68:	4604      	mov	r4, r0
 8010f6a:	e7e4      	b.n	8010f36 <__pow5mult+0x6a>
 8010f6c:	4630      	mov	r0, r6
 8010f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f72:	bf00      	nop
 8010f74:	08011edc 	.word	0x08011edc
 8010f78:	08011e01 	.word	0x08011e01
 8010f7c:	08011e81 	.word	0x08011e81

08010f80 <__lshift>:
 8010f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f84:	460c      	mov	r4, r1
 8010f86:	6849      	ldr	r1, [r1, #4]
 8010f88:	6923      	ldr	r3, [r4, #16]
 8010f8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010f8e:	68a3      	ldr	r3, [r4, #8]
 8010f90:	4607      	mov	r7, r0
 8010f92:	4691      	mov	r9, r2
 8010f94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010f98:	f108 0601 	add.w	r6, r8, #1
 8010f9c:	42b3      	cmp	r3, r6
 8010f9e:	db0b      	blt.n	8010fb8 <__lshift+0x38>
 8010fa0:	4638      	mov	r0, r7
 8010fa2:	f7ff fddf 	bl	8010b64 <_Balloc>
 8010fa6:	4605      	mov	r5, r0
 8010fa8:	b948      	cbnz	r0, 8010fbe <__lshift+0x3e>
 8010faa:	4602      	mov	r2, r0
 8010fac:	4b28      	ldr	r3, [pc, #160]	@ (8011050 <__lshift+0xd0>)
 8010fae:	4829      	ldr	r0, [pc, #164]	@ (8011054 <__lshift+0xd4>)
 8010fb0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010fb4:	f000 fa04 	bl	80113c0 <__assert_func>
 8010fb8:	3101      	adds	r1, #1
 8010fba:	005b      	lsls	r3, r3, #1
 8010fbc:	e7ee      	b.n	8010f9c <__lshift+0x1c>
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	f100 0114 	add.w	r1, r0, #20
 8010fc4:	f100 0210 	add.w	r2, r0, #16
 8010fc8:	4618      	mov	r0, r3
 8010fca:	4553      	cmp	r3, sl
 8010fcc:	db33      	blt.n	8011036 <__lshift+0xb6>
 8010fce:	6920      	ldr	r0, [r4, #16]
 8010fd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010fd4:	f104 0314 	add.w	r3, r4, #20
 8010fd8:	f019 091f 	ands.w	r9, r9, #31
 8010fdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010fe0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010fe4:	d02b      	beq.n	801103e <__lshift+0xbe>
 8010fe6:	f1c9 0e20 	rsb	lr, r9, #32
 8010fea:	468a      	mov	sl, r1
 8010fec:	2200      	movs	r2, #0
 8010fee:	6818      	ldr	r0, [r3, #0]
 8010ff0:	fa00 f009 	lsl.w	r0, r0, r9
 8010ff4:	4310      	orrs	r0, r2
 8010ff6:	f84a 0b04 	str.w	r0, [sl], #4
 8010ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ffe:	459c      	cmp	ip, r3
 8011000:	fa22 f20e 	lsr.w	r2, r2, lr
 8011004:	d8f3      	bhi.n	8010fee <__lshift+0x6e>
 8011006:	ebac 0304 	sub.w	r3, ip, r4
 801100a:	3b15      	subs	r3, #21
 801100c:	f023 0303 	bic.w	r3, r3, #3
 8011010:	3304      	adds	r3, #4
 8011012:	f104 0015 	add.w	r0, r4, #21
 8011016:	4584      	cmp	ip, r0
 8011018:	bf38      	it	cc
 801101a:	2304      	movcc	r3, #4
 801101c:	50ca      	str	r2, [r1, r3]
 801101e:	b10a      	cbz	r2, 8011024 <__lshift+0xa4>
 8011020:	f108 0602 	add.w	r6, r8, #2
 8011024:	3e01      	subs	r6, #1
 8011026:	4638      	mov	r0, r7
 8011028:	612e      	str	r6, [r5, #16]
 801102a:	4621      	mov	r1, r4
 801102c:	f7ff fdda 	bl	8010be4 <_Bfree>
 8011030:	4628      	mov	r0, r5
 8011032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011036:	f842 0f04 	str.w	r0, [r2, #4]!
 801103a:	3301      	adds	r3, #1
 801103c:	e7c5      	b.n	8010fca <__lshift+0x4a>
 801103e:	3904      	subs	r1, #4
 8011040:	f853 2b04 	ldr.w	r2, [r3], #4
 8011044:	f841 2f04 	str.w	r2, [r1, #4]!
 8011048:	459c      	cmp	ip, r3
 801104a:	d8f9      	bhi.n	8011040 <__lshift+0xc0>
 801104c:	e7ea      	b.n	8011024 <__lshift+0xa4>
 801104e:	bf00      	nop
 8011050:	08011e70 	.word	0x08011e70
 8011054:	08011e81 	.word	0x08011e81

08011058 <__mcmp>:
 8011058:	690a      	ldr	r2, [r1, #16]
 801105a:	4603      	mov	r3, r0
 801105c:	6900      	ldr	r0, [r0, #16]
 801105e:	1a80      	subs	r0, r0, r2
 8011060:	b530      	push	{r4, r5, lr}
 8011062:	d10e      	bne.n	8011082 <__mcmp+0x2a>
 8011064:	3314      	adds	r3, #20
 8011066:	3114      	adds	r1, #20
 8011068:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801106c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011070:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011074:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011078:	4295      	cmp	r5, r2
 801107a:	d003      	beq.n	8011084 <__mcmp+0x2c>
 801107c:	d205      	bcs.n	801108a <__mcmp+0x32>
 801107e:	f04f 30ff 	mov.w	r0, #4294967295
 8011082:	bd30      	pop	{r4, r5, pc}
 8011084:	42a3      	cmp	r3, r4
 8011086:	d3f3      	bcc.n	8011070 <__mcmp+0x18>
 8011088:	e7fb      	b.n	8011082 <__mcmp+0x2a>
 801108a:	2001      	movs	r0, #1
 801108c:	e7f9      	b.n	8011082 <__mcmp+0x2a>
	...

08011090 <__mdiff>:
 8011090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011094:	4689      	mov	r9, r1
 8011096:	4606      	mov	r6, r0
 8011098:	4611      	mov	r1, r2
 801109a:	4648      	mov	r0, r9
 801109c:	4614      	mov	r4, r2
 801109e:	f7ff ffdb 	bl	8011058 <__mcmp>
 80110a2:	1e05      	subs	r5, r0, #0
 80110a4:	d112      	bne.n	80110cc <__mdiff+0x3c>
 80110a6:	4629      	mov	r1, r5
 80110a8:	4630      	mov	r0, r6
 80110aa:	f7ff fd5b 	bl	8010b64 <_Balloc>
 80110ae:	4602      	mov	r2, r0
 80110b0:	b928      	cbnz	r0, 80110be <__mdiff+0x2e>
 80110b2:	4b3f      	ldr	r3, [pc, #252]	@ (80111b0 <__mdiff+0x120>)
 80110b4:	f240 2137 	movw	r1, #567	@ 0x237
 80110b8:	483e      	ldr	r0, [pc, #248]	@ (80111b4 <__mdiff+0x124>)
 80110ba:	f000 f981 	bl	80113c0 <__assert_func>
 80110be:	2301      	movs	r3, #1
 80110c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80110c4:	4610      	mov	r0, r2
 80110c6:	b003      	add	sp, #12
 80110c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110cc:	bfbc      	itt	lt
 80110ce:	464b      	movlt	r3, r9
 80110d0:	46a1      	movlt	r9, r4
 80110d2:	4630      	mov	r0, r6
 80110d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80110d8:	bfba      	itte	lt
 80110da:	461c      	movlt	r4, r3
 80110dc:	2501      	movlt	r5, #1
 80110de:	2500      	movge	r5, #0
 80110e0:	f7ff fd40 	bl	8010b64 <_Balloc>
 80110e4:	4602      	mov	r2, r0
 80110e6:	b918      	cbnz	r0, 80110f0 <__mdiff+0x60>
 80110e8:	4b31      	ldr	r3, [pc, #196]	@ (80111b0 <__mdiff+0x120>)
 80110ea:	f240 2145 	movw	r1, #581	@ 0x245
 80110ee:	e7e3      	b.n	80110b8 <__mdiff+0x28>
 80110f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80110f4:	6926      	ldr	r6, [r4, #16]
 80110f6:	60c5      	str	r5, [r0, #12]
 80110f8:	f109 0310 	add.w	r3, r9, #16
 80110fc:	f109 0514 	add.w	r5, r9, #20
 8011100:	f104 0e14 	add.w	lr, r4, #20
 8011104:	f100 0b14 	add.w	fp, r0, #20
 8011108:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801110c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011110:	9301      	str	r3, [sp, #4]
 8011112:	46d9      	mov	r9, fp
 8011114:	f04f 0c00 	mov.w	ip, #0
 8011118:	9b01      	ldr	r3, [sp, #4]
 801111a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801111e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011122:	9301      	str	r3, [sp, #4]
 8011124:	fa1f f38a 	uxth.w	r3, sl
 8011128:	4619      	mov	r1, r3
 801112a:	b283      	uxth	r3, r0
 801112c:	1acb      	subs	r3, r1, r3
 801112e:	0c00      	lsrs	r0, r0, #16
 8011130:	4463      	add	r3, ip
 8011132:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011136:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801113a:	b29b      	uxth	r3, r3
 801113c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011140:	4576      	cmp	r6, lr
 8011142:	f849 3b04 	str.w	r3, [r9], #4
 8011146:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801114a:	d8e5      	bhi.n	8011118 <__mdiff+0x88>
 801114c:	1b33      	subs	r3, r6, r4
 801114e:	3b15      	subs	r3, #21
 8011150:	f023 0303 	bic.w	r3, r3, #3
 8011154:	3415      	adds	r4, #21
 8011156:	3304      	adds	r3, #4
 8011158:	42a6      	cmp	r6, r4
 801115a:	bf38      	it	cc
 801115c:	2304      	movcc	r3, #4
 801115e:	441d      	add	r5, r3
 8011160:	445b      	add	r3, fp
 8011162:	461e      	mov	r6, r3
 8011164:	462c      	mov	r4, r5
 8011166:	4544      	cmp	r4, r8
 8011168:	d30e      	bcc.n	8011188 <__mdiff+0xf8>
 801116a:	f108 0103 	add.w	r1, r8, #3
 801116e:	1b49      	subs	r1, r1, r5
 8011170:	f021 0103 	bic.w	r1, r1, #3
 8011174:	3d03      	subs	r5, #3
 8011176:	45a8      	cmp	r8, r5
 8011178:	bf38      	it	cc
 801117a:	2100      	movcc	r1, #0
 801117c:	440b      	add	r3, r1
 801117e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011182:	b191      	cbz	r1, 80111aa <__mdiff+0x11a>
 8011184:	6117      	str	r7, [r2, #16]
 8011186:	e79d      	b.n	80110c4 <__mdiff+0x34>
 8011188:	f854 1b04 	ldr.w	r1, [r4], #4
 801118c:	46e6      	mov	lr, ip
 801118e:	0c08      	lsrs	r0, r1, #16
 8011190:	fa1c fc81 	uxtah	ip, ip, r1
 8011194:	4471      	add	r1, lr
 8011196:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801119a:	b289      	uxth	r1, r1
 801119c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80111a0:	f846 1b04 	str.w	r1, [r6], #4
 80111a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80111a8:	e7dd      	b.n	8011166 <__mdiff+0xd6>
 80111aa:	3f01      	subs	r7, #1
 80111ac:	e7e7      	b.n	801117e <__mdiff+0xee>
 80111ae:	bf00      	nop
 80111b0:	08011e70 	.word	0x08011e70
 80111b4:	08011e81 	.word	0x08011e81

080111b8 <__d2b>:
 80111b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80111bc:	460f      	mov	r7, r1
 80111be:	2101      	movs	r1, #1
 80111c0:	ec59 8b10 	vmov	r8, r9, d0
 80111c4:	4616      	mov	r6, r2
 80111c6:	f7ff fccd 	bl	8010b64 <_Balloc>
 80111ca:	4604      	mov	r4, r0
 80111cc:	b930      	cbnz	r0, 80111dc <__d2b+0x24>
 80111ce:	4602      	mov	r2, r0
 80111d0:	4b23      	ldr	r3, [pc, #140]	@ (8011260 <__d2b+0xa8>)
 80111d2:	4824      	ldr	r0, [pc, #144]	@ (8011264 <__d2b+0xac>)
 80111d4:	f240 310f 	movw	r1, #783	@ 0x30f
 80111d8:	f000 f8f2 	bl	80113c0 <__assert_func>
 80111dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80111e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80111e4:	b10d      	cbz	r5, 80111ea <__d2b+0x32>
 80111e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80111ea:	9301      	str	r3, [sp, #4]
 80111ec:	f1b8 0300 	subs.w	r3, r8, #0
 80111f0:	d023      	beq.n	801123a <__d2b+0x82>
 80111f2:	4668      	mov	r0, sp
 80111f4:	9300      	str	r3, [sp, #0]
 80111f6:	f7ff fd7c 	bl	8010cf2 <__lo0bits>
 80111fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80111fe:	b1d0      	cbz	r0, 8011236 <__d2b+0x7e>
 8011200:	f1c0 0320 	rsb	r3, r0, #32
 8011204:	fa02 f303 	lsl.w	r3, r2, r3
 8011208:	430b      	orrs	r3, r1
 801120a:	40c2      	lsrs	r2, r0
 801120c:	6163      	str	r3, [r4, #20]
 801120e:	9201      	str	r2, [sp, #4]
 8011210:	9b01      	ldr	r3, [sp, #4]
 8011212:	61a3      	str	r3, [r4, #24]
 8011214:	2b00      	cmp	r3, #0
 8011216:	bf0c      	ite	eq
 8011218:	2201      	moveq	r2, #1
 801121a:	2202      	movne	r2, #2
 801121c:	6122      	str	r2, [r4, #16]
 801121e:	b1a5      	cbz	r5, 801124a <__d2b+0x92>
 8011220:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011224:	4405      	add	r5, r0
 8011226:	603d      	str	r5, [r7, #0]
 8011228:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801122c:	6030      	str	r0, [r6, #0]
 801122e:	4620      	mov	r0, r4
 8011230:	b003      	add	sp, #12
 8011232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011236:	6161      	str	r1, [r4, #20]
 8011238:	e7ea      	b.n	8011210 <__d2b+0x58>
 801123a:	a801      	add	r0, sp, #4
 801123c:	f7ff fd59 	bl	8010cf2 <__lo0bits>
 8011240:	9b01      	ldr	r3, [sp, #4]
 8011242:	6163      	str	r3, [r4, #20]
 8011244:	3020      	adds	r0, #32
 8011246:	2201      	movs	r2, #1
 8011248:	e7e8      	b.n	801121c <__d2b+0x64>
 801124a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801124e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011252:	6038      	str	r0, [r7, #0]
 8011254:	6918      	ldr	r0, [r3, #16]
 8011256:	f7ff fd2d 	bl	8010cb4 <__hi0bits>
 801125a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801125e:	e7e5      	b.n	801122c <__d2b+0x74>
 8011260:	08011e70 	.word	0x08011e70
 8011264:	08011e81 	.word	0x08011e81

08011268 <__sflush_r>:
 8011268:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801126c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011270:	0716      	lsls	r6, r2, #28
 8011272:	4605      	mov	r5, r0
 8011274:	460c      	mov	r4, r1
 8011276:	d454      	bmi.n	8011322 <__sflush_r+0xba>
 8011278:	684b      	ldr	r3, [r1, #4]
 801127a:	2b00      	cmp	r3, #0
 801127c:	dc02      	bgt.n	8011284 <__sflush_r+0x1c>
 801127e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011280:	2b00      	cmp	r3, #0
 8011282:	dd48      	ble.n	8011316 <__sflush_r+0xae>
 8011284:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011286:	2e00      	cmp	r6, #0
 8011288:	d045      	beq.n	8011316 <__sflush_r+0xae>
 801128a:	2300      	movs	r3, #0
 801128c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011290:	682f      	ldr	r7, [r5, #0]
 8011292:	6a21      	ldr	r1, [r4, #32]
 8011294:	602b      	str	r3, [r5, #0]
 8011296:	d030      	beq.n	80112fa <__sflush_r+0x92>
 8011298:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801129a:	89a3      	ldrh	r3, [r4, #12]
 801129c:	0759      	lsls	r1, r3, #29
 801129e:	d505      	bpl.n	80112ac <__sflush_r+0x44>
 80112a0:	6863      	ldr	r3, [r4, #4]
 80112a2:	1ad2      	subs	r2, r2, r3
 80112a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80112a6:	b10b      	cbz	r3, 80112ac <__sflush_r+0x44>
 80112a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80112aa:	1ad2      	subs	r2, r2, r3
 80112ac:	2300      	movs	r3, #0
 80112ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80112b0:	6a21      	ldr	r1, [r4, #32]
 80112b2:	4628      	mov	r0, r5
 80112b4:	47b0      	blx	r6
 80112b6:	1c43      	adds	r3, r0, #1
 80112b8:	89a3      	ldrh	r3, [r4, #12]
 80112ba:	d106      	bne.n	80112ca <__sflush_r+0x62>
 80112bc:	6829      	ldr	r1, [r5, #0]
 80112be:	291d      	cmp	r1, #29
 80112c0:	d82b      	bhi.n	801131a <__sflush_r+0xb2>
 80112c2:	4a2a      	ldr	r2, [pc, #168]	@ (801136c <__sflush_r+0x104>)
 80112c4:	410a      	asrs	r2, r1
 80112c6:	07d6      	lsls	r6, r2, #31
 80112c8:	d427      	bmi.n	801131a <__sflush_r+0xb2>
 80112ca:	2200      	movs	r2, #0
 80112cc:	6062      	str	r2, [r4, #4]
 80112ce:	04d9      	lsls	r1, r3, #19
 80112d0:	6922      	ldr	r2, [r4, #16]
 80112d2:	6022      	str	r2, [r4, #0]
 80112d4:	d504      	bpl.n	80112e0 <__sflush_r+0x78>
 80112d6:	1c42      	adds	r2, r0, #1
 80112d8:	d101      	bne.n	80112de <__sflush_r+0x76>
 80112da:	682b      	ldr	r3, [r5, #0]
 80112dc:	b903      	cbnz	r3, 80112e0 <__sflush_r+0x78>
 80112de:	6560      	str	r0, [r4, #84]	@ 0x54
 80112e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80112e2:	602f      	str	r7, [r5, #0]
 80112e4:	b1b9      	cbz	r1, 8011316 <__sflush_r+0xae>
 80112e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80112ea:	4299      	cmp	r1, r3
 80112ec:	d002      	beq.n	80112f4 <__sflush_r+0x8c>
 80112ee:	4628      	mov	r0, r5
 80112f0:	f7ff fbee 	bl	8010ad0 <_free_r>
 80112f4:	2300      	movs	r3, #0
 80112f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80112f8:	e00d      	b.n	8011316 <__sflush_r+0xae>
 80112fa:	2301      	movs	r3, #1
 80112fc:	4628      	mov	r0, r5
 80112fe:	47b0      	blx	r6
 8011300:	4602      	mov	r2, r0
 8011302:	1c50      	adds	r0, r2, #1
 8011304:	d1c9      	bne.n	801129a <__sflush_r+0x32>
 8011306:	682b      	ldr	r3, [r5, #0]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d0c6      	beq.n	801129a <__sflush_r+0x32>
 801130c:	2b1d      	cmp	r3, #29
 801130e:	d001      	beq.n	8011314 <__sflush_r+0xac>
 8011310:	2b16      	cmp	r3, #22
 8011312:	d11e      	bne.n	8011352 <__sflush_r+0xea>
 8011314:	602f      	str	r7, [r5, #0]
 8011316:	2000      	movs	r0, #0
 8011318:	e022      	b.n	8011360 <__sflush_r+0xf8>
 801131a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801131e:	b21b      	sxth	r3, r3
 8011320:	e01b      	b.n	801135a <__sflush_r+0xf2>
 8011322:	690f      	ldr	r7, [r1, #16]
 8011324:	2f00      	cmp	r7, #0
 8011326:	d0f6      	beq.n	8011316 <__sflush_r+0xae>
 8011328:	0793      	lsls	r3, r2, #30
 801132a:	680e      	ldr	r6, [r1, #0]
 801132c:	bf08      	it	eq
 801132e:	694b      	ldreq	r3, [r1, #20]
 8011330:	600f      	str	r7, [r1, #0]
 8011332:	bf18      	it	ne
 8011334:	2300      	movne	r3, #0
 8011336:	eba6 0807 	sub.w	r8, r6, r7
 801133a:	608b      	str	r3, [r1, #8]
 801133c:	f1b8 0f00 	cmp.w	r8, #0
 8011340:	dde9      	ble.n	8011316 <__sflush_r+0xae>
 8011342:	6a21      	ldr	r1, [r4, #32]
 8011344:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011346:	4643      	mov	r3, r8
 8011348:	463a      	mov	r2, r7
 801134a:	4628      	mov	r0, r5
 801134c:	47b0      	blx	r6
 801134e:	2800      	cmp	r0, #0
 8011350:	dc08      	bgt.n	8011364 <__sflush_r+0xfc>
 8011352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801135a:	81a3      	strh	r3, [r4, #12]
 801135c:	f04f 30ff 	mov.w	r0, #4294967295
 8011360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011364:	4407      	add	r7, r0
 8011366:	eba8 0800 	sub.w	r8, r8, r0
 801136a:	e7e7      	b.n	801133c <__sflush_r+0xd4>
 801136c:	dfbffffe 	.word	0xdfbffffe

08011370 <_fflush_r>:
 8011370:	b538      	push	{r3, r4, r5, lr}
 8011372:	690b      	ldr	r3, [r1, #16]
 8011374:	4605      	mov	r5, r0
 8011376:	460c      	mov	r4, r1
 8011378:	b913      	cbnz	r3, 8011380 <_fflush_r+0x10>
 801137a:	2500      	movs	r5, #0
 801137c:	4628      	mov	r0, r5
 801137e:	bd38      	pop	{r3, r4, r5, pc}
 8011380:	b118      	cbz	r0, 801138a <_fflush_r+0x1a>
 8011382:	6a03      	ldr	r3, [r0, #32]
 8011384:	b90b      	cbnz	r3, 801138a <_fflush_r+0x1a>
 8011386:	f7fe fc2f 	bl	800fbe8 <__sinit>
 801138a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d0f3      	beq.n	801137a <_fflush_r+0xa>
 8011392:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011394:	07d0      	lsls	r0, r2, #31
 8011396:	d404      	bmi.n	80113a2 <_fflush_r+0x32>
 8011398:	0599      	lsls	r1, r3, #22
 801139a:	d402      	bmi.n	80113a2 <_fflush_r+0x32>
 801139c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801139e:	f7fe fd38 	bl	800fe12 <__retarget_lock_acquire_recursive>
 80113a2:	4628      	mov	r0, r5
 80113a4:	4621      	mov	r1, r4
 80113a6:	f7ff ff5f 	bl	8011268 <__sflush_r>
 80113aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80113ac:	07da      	lsls	r2, r3, #31
 80113ae:	4605      	mov	r5, r0
 80113b0:	d4e4      	bmi.n	801137c <_fflush_r+0xc>
 80113b2:	89a3      	ldrh	r3, [r4, #12]
 80113b4:	059b      	lsls	r3, r3, #22
 80113b6:	d4e1      	bmi.n	801137c <_fflush_r+0xc>
 80113b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80113ba:	f7fe fd2b 	bl	800fe14 <__retarget_lock_release_recursive>
 80113be:	e7dd      	b.n	801137c <_fflush_r+0xc>

080113c0 <__assert_func>:
 80113c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80113c2:	4614      	mov	r4, r2
 80113c4:	461a      	mov	r2, r3
 80113c6:	4b09      	ldr	r3, [pc, #36]	@ (80113ec <__assert_func+0x2c>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	4605      	mov	r5, r0
 80113cc:	68d8      	ldr	r0, [r3, #12]
 80113ce:	b954      	cbnz	r4, 80113e6 <__assert_func+0x26>
 80113d0:	4b07      	ldr	r3, [pc, #28]	@ (80113f0 <__assert_func+0x30>)
 80113d2:	461c      	mov	r4, r3
 80113d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80113d8:	9100      	str	r1, [sp, #0]
 80113da:	462b      	mov	r3, r5
 80113dc:	4905      	ldr	r1, [pc, #20]	@ (80113f4 <__assert_func+0x34>)
 80113de:	f000 f841 	bl	8011464 <fiprintf>
 80113e2:	f000 f851 	bl	8011488 <abort>
 80113e6:	4b04      	ldr	r3, [pc, #16]	@ (80113f8 <__assert_func+0x38>)
 80113e8:	e7f4      	b.n	80113d4 <__assert_func+0x14>
 80113ea:	bf00      	nop
 80113ec:	20000138 	.word	0x20000138
 80113f0:	0801201d 	.word	0x0801201d
 80113f4:	08011fef 	.word	0x08011fef
 80113f8:	08011fe2 	.word	0x08011fe2

080113fc <_calloc_r>:
 80113fc:	b570      	push	{r4, r5, r6, lr}
 80113fe:	fba1 5402 	umull	r5, r4, r1, r2
 8011402:	b93c      	cbnz	r4, 8011414 <_calloc_r+0x18>
 8011404:	4629      	mov	r1, r5
 8011406:	f7fd fe7f 	bl	800f108 <_malloc_r>
 801140a:	4606      	mov	r6, r0
 801140c:	b928      	cbnz	r0, 801141a <_calloc_r+0x1e>
 801140e:	2600      	movs	r6, #0
 8011410:	4630      	mov	r0, r6
 8011412:	bd70      	pop	{r4, r5, r6, pc}
 8011414:	220c      	movs	r2, #12
 8011416:	6002      	str	r2, [r0, #0]
 8011418:	e7f9      	b.n	801140e <_calloc_r+0x12>
 801141a:	462a      	mov	r2, r5
 801141c:	4621      	mov	r1, r4
 801141e:	f7fe fc5c 	bl	800fcda <memset>
 8011422:	e7f5      	b.n	8011410 <_calloc_r+0x14>

08011424 <__ascii_mbtowc>:
 8011424:	b082      	sub	sp, #8
 8011426:	b901      	cbnz	r1, 801142a <__ascii_mbtowc+0x6>
 8011428:	a901      	add	r1, sp, #4
 801142a:	b142      	cbz	r2, 801143e <__ascii_mbtowc+0x1a>
 801142c:	b14b      	cbz	r3, 8011442 <__ascii_mbtowc+0x1e>
 801142e:	7813      	ldrb	r3, [r2, #0]
 8011430:	600b      	str	r3, [r1, #0]
 8011432:	7812      	ldrb	r2, [r2, #0]
 8011434:	1e10      	subs	r0, r2, #0
 8011436:	bf18      	it	ne
 8011438:	2001      	movne	r0, #1
 801143a:	b002      	add	sp, #8
 801143c:	4770      	bx	lr
 801143e:	4610      	mov	r0, r2
 8011440:	e7fb      	b.n	801143a <__ascii_mbtowc+0x16>
 8011442:	f06f 0001 	mvn.w	r0, #1
 8011446:	e7f8      	b.n	801143a <__ascii_mbtowc+0x16>

08011448 <__ascii_wctomb>:
 8011448:	4603      	mov	r3, r0
 801144a:	4608      	mov	r0, r1
 801144c:	b141      	cbz	r1, 8011460 <__ascii_wctomb+0x18>
 801144e:	2aff      	cmp	r2, #255	@ 0xff
 8011450:	d904      	bls.n	801145c <__ascii_wctomb+0x14>
 8011452:	228a      	movs	r2, #138	@ 0x8a
 8011454:	601a      	str	r2, [r3, #0]
 8011456:	f04f 30ff 	mov.w	r0, #4294967295
 801145a:	4770      	bx	lr
 801145c:	700a      	strb	r2, [r1, #0]
 801145e:	2001      	movs	r0, #1
 8011460:	4770      	bx	lr
	...

08011464 <fiprintf>:
 8011464:	b40e      	push	{r1, r2, r3}
 8011466:	b503      	push	{r0, r1, lr}
 8011468:	4601      	mov	r1, r0
 801146a:	ab03      	add	r3, sp, #12
 801146c:	4805      	ldr	r0, [pc, #20]	@ (8011484 <fiprintf+0x20>)
 801146e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011472:	6800      	ldr	r0, [r0, #0]
 8011474:	9301      	str	r3, [sp, #4]
 8011476:	f000 f837 	bl	80114e8 <_vfiprintf_r>
 801147a:	b002      	add	sp, #8
 801147c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011480:	b003      	add	sp, #12
 8011482:	4770      	bx	lr
 8011484:	20000138 	.word	0x20000138

08011488 <abort>:
 8011488:	b508      	push	{r3, lr}
 801148a:	2006      	movs	r0, #6
 801148c:	f000 fa00 	bl	8011890 <raise>
 8011490:	2001      	movs	r0, #1
 8011492:	f7f1 f847 	bl	8002524 <_exit>

08011496 <__sfputc_r>:
 8011496:	6893      	ldr	r3, [r2, #8]
 8011498:	3b01      	subs	r3, #1
 801149a:	2b00      	cmp	r3, #0
 801149c:	b410      	push	{r4}
 801149e:	6093      	str	r3, [r2, #8]
 80114a0:	da08      	bge.n	80114b4 <__sfputc_r+0x1e>
 80114a2:	6994      	ldr	r4, [r2, #24]
 80114a4:	42a3      	cmp	r3, r4
 80114a6:	db01      	blt.n	80114ac <__sfputc_r+0x16>
 80114a8:	290a      	cmp	r1, #10
 80114aa:	d103      	bne.n	80114b4 <__sfputc_r+0x1e>
 80114ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114b0:	f000 b932 	b.w	8011718 <__swbuf_r>
 80114b4:	6813      	ldr	r3, [r2, #0]
 80114b6:	1c58      	adds	r0, r3, #1
 80114b8:	6010      	str	r0, [r2, #0]
 80114ba:	7019      	strb	r1, [r3, #0]
 80114bc:	4608      	mov	r0, r1
 80114be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114c2:	4770      	bx	lr

080114c4 <__sfputs_r>:
 80114c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114c6:	4606      	mov	r6, r0
 80114c8:	460f      	mov	r7, r1
 80114ca:	4614      	mov	r4, r2
 80114cc:	18d5      	adds	r5, r2, r3
 80114ce:	42ac      	cmp	r4, r5
 80114d0:	d101      	bne.n	80114d6 <__sfputs_r+0x12>
 80114d2:	2000      	movs	r0, #0
 80114d4:	e007      	b.n	80114e6 <__sfputs_r+0x22>
 80114d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114da:	463a      	mov	r2, r7
 80114dc:	4630      	mov	r0, r6
 80114de:	f7ff ffda 	bl	8011496 <__sfputc_r>
 80114e2:	1c43      	adds	r3, r0, #1
 80114e4:	d1f3      	bne.n	80114ce <__sfputs_r+0xa>
 80114e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080114e8 <_vfiprintf_r>:
 80114e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114ec:	460d      	mov	r5, r1
 80114ee:	b09d      	sub	sp, #116	@ 0x74
 80114f0:	4614      	mov	r4, r2
 80114f2:	4698      	mov	r8, r3
 80114f4:	4606      	mov	r6, r0
 80114f6:	b118      	cbz	r0, 8011500 <_vfiprintf_r+0x18>
 80114f8:	6a03      	ldr	r3, [r0, #32]
 80114fa:	b90b      	cbnz	r3, 8011500 <_vfiprintf_r+0x18>
 80114fc:	f7fe fb74 	bl	800fbe8 <__sinit>
 8011500:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011502:	07d9      	lsls	r1, r3, #31
 8011504:	d405      	bmi.n	8011512 <_vfiprintf_r+0x2a>
 8011506:	89ab      	ldrh	r3, [r5, #12]
 8011508:	059a      	lsls	r2, r3, #22
 801150a:	d402      	bmi.n	8011512 <_vfiprintf_r+0x2a>
 801150c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801150e:	f7fe fc80 	bl	800fe12 <__retarget_lock_acquire_recursive>
 8011512:	89ab      	ldrh	r3, [r5, #12]
 8011514:	071b      	lsls	r3, r3, #28
 8011516:	d501      	bpl.n	801151c <_vfiprintf_r+0x34>
 8011518:	692b      	ldr	r3, [r5, #16]
 801151a:	b99b      	cbnz	r3, 8011544 <_vfiprintf_r+0x5c>
 801151c:	4629      	mov	r1, r5
 801151e:	4630      	mov	r0, r6
 8011520:	f000 f938 	bl	8011794 <__swsetup_r>
 8011524:	b170      	cbz	r0, 8011544 <_vfiprintf_r+0x5c>
 8011526:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011528:	07dc      	lsls	r4, r3, #31
 801152a:	d504      	bpl.n	8011536 <_vfiprintf_r+0x4e>
 801152c:	f04f 30ff 	mov.w	r0, #4294967295
 8011530:	b01d      	add	sp, #116	@ 0x74
 8011532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011536:	89ab      	ldrh	r3, [r5, #12]
 8011538:	0598      	lsls	r0, r3, #22
 801153a:	d4f7      	bmi.n	801152c <_vfiprintf_r+0x44>
 801153c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801153e:	f7fe fc69 	bl	800fe14 <__retarget_lock_release_recursive>
 8011542:	e7f3      	b.n	801152c <_vfiprintf_r+0x44>
 8011544:	2300      	movs	r3, #0
 8011546:	9309      	str	r3, [sp, #36]	@ 0x24
 8011548:	2320      	movs	r3, #32
 801154a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801154e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011552:	2330      	movs	r3, #48	@ 0x30
 8011554:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011704 <_vfiprintf_r+0x21c>
 8011558:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801155c:	f04f 0901 	mov.w	r9, #1
 8011560:	4623      	mov	r3, r4
 8011562:	469a      	mov	sl, r3
 8011564:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011568:	b10a      	cbz	r2, 801156e <_vfiprintf_r+0x86>
 801156a:	2a25      	cmp	r2, #37	@ 0x25
 801156c:	d1f9      	bne.n	8011562 <_vfiprintf_r+0x7a>
 801156e:	ebba 0b04 	subs.w	fp, sl, r4
 8011572:	d00b      	beq.n	801158c <_vfiprintf_r+0xa4>
 8011574:	465b      	mov	r3, fp
 8011576:	4622      	mov	r2, r4
 8011578:	4629      	mov	r1, r5
 801157a:	4630      	mov	r0, r6
 801157c:	f7ff ffa2 	bl	80114c4 <__sfputs_r>
 8011580:	3001      	adds	r0, #1
 8011582:	f000 80a7 	beq.w	80116d4 <_vfiprintf_r+0x1ec>
 8011586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011588:	445a      	add	r2, fp
 801158a:	9209      	str	r2, [sp, #36]	@ 0x24
 801158c:	f89a 3000 	ldrb.w	r3, [sl]
 8011590:	2b00      	cmp	r3, #0
 8011592:	f000 809f 	beq.w	80116d4 <_vfiprintf_r+0x1ec>
 8011596:	2300      	movs	r3, #0
 8011598:	f04f 32ff 	mov.w	r2, #4294967295
 801159c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80115a0:	f10a 0a01 	add.w	sl, sl, #1
 80115a4:	9304      	str	r3, [sp, #16]
 80115a6:	9307      	str	r3, [sp, #28]
 80115a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80115ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80115ae:	4654      	mov	r4, sl
 80115b0:	2205      	movs	r2, #5
 80115b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115b6:	4853      	ldr	r0, [pc, #332]	@ (8011704 <_vfiprintf_r+0x21c>)
 80115b8:	f7ee fe12 	bl	80001e0 <memchr>
 80115bc:	9a04      	ldr	r2, [sp, #16]
 80115be:	b9d8      	cbnz	r0, 80115f8 <_vfiprintf_r+0x110>
 80115c0:	06d1      	lsls	r1, r2, #27
 80115c2:	bf44      	itt	mi
 80115c4:	2320      	movmi	r3, #32
 80115c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80115ca:	0713      	lsls	r3, r2, #28
 80115cc:	bf44      	itt	mi
 80115ce:	232b      	movmi	r3, #43	@ 0x2b
 80115d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80115d4:	f89a 3000 	ldrb.w	r3, [sl]
 80115d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80115da:	d015      	beq.n	8011608 <_vfiprintf_r+0x120>
 80115dc:	9a07      	ldr	r2, [sp, #28]
 80115de:	4654      	mov	r4, sl
 80115e0:	2000      	movs	r0, #0
 80115e2:	f04f 0c0a 	mov.w	ip, #10
 80115e6:	4621      	mov	r1, r4
 80115e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115ec:	3b30      	subs	r3, #48	@ 0x30
 80115ee:	2b09      	cmp	r3, #9
 80115f0:	d94b      	bls.n	801168a <_vfiprintf_r+0x1a2>
 80115f2:	b1b0      	cbz	r0, 8011622 <_vfiprintf_r+0x13a>
 80115f4:	9207      	str	r2, [sp, #28]
 80115f6:	e014      	b.n	8011622 <_vfiprintf_r+0x13a>
 80115f8:	eba0 0308 	sub.w	r3, r0, r8
 80115fc:	fa09 f303 	lsl.w	r3, r9, r3
 8011600:	4313      	orrs	r3, r2
 8011602:	9304      	str	r3, [sp, #16]
 8011604:	46a2      	mov	sl, r4
 8011606:	e7d2      	b.n	80115ae <_vfiprintf_r+0xc6>
 8011608:	9b03      	ldr	r3, [sp, #12]
 801160a:	1d19      	adds	r1, r3, #4
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	9103      	str	r1, [sp, #12]
 8011610:	2b00      	cmp	r3, #0
 8011612:	bfbb      	ittet	lt
 8011614:	425b      	neglt	r3, r3
 8011616:	f042 0202 	orrlt.w	r2, r2, #2
 801161a:	9307      	strge	r3, [sp, #28]
 801161c:	9307      	strlt	r3, [sp, #28]
 801161e:	bfb8      	it	lt
 8011620:	9204      	strlt	r2, [sp, #16]
 8011622:	7823      	ldrb	r3, [r4, #0]
 8011624:	2b2e      	cmp	r3, #46	@ 0x2e
 8011626:	d10a      	bne.n	801163e <_vfiprintf_r+0x156>
 8011628:	7863      	ldrb	r3, [r4, #1]
 801162a:	2b2a      	cmp	r3, #42	@ 0x2a
 801162c:	d132      	bne.n	8011694 <_vfiprintf_r+0x1ac>
 801162e:	9b03      	ldr	r3, [sp, #12]
 8011630:	1d1a      	adds	r2, r3, #4
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	9203      	str	r2, [sp, #12]
 8011636:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801163a:	3402      	adds	r4, #2
 801163c:	9305      	str	r3, [sp, #20]
 801163e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011714 <_vfiprintf_r+0x22c>
 8011642:	7821      	ldrb	r1, [r4, #0]
 8011644:	2203      	movs	r2, #3
 8011646:	4650      	mov	r0, sl
 8011648:	f7ee fdca 	bl	80001e0 <memchr>
 801164c:	b138      	cbz	r0, 801165e <_vfiprintf_r+0x176>
 801164e:	9b04      	ldr	r3, [sp, #16]
 8011650:	eba0 000a 	sub.w	r0, r0, sl
 8011654:	2240      	movs	r2, #64	@ 0x40
 8011656:	4082      	lsls	r2, r0
 8011658:	4313      	orrs	r3, r2
 801165a:	3401      	adds	r4, #1
 801165c:	9304      	str	r3, [sp, #16]
 801165e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011662:	4829      	ldr	r0, [pc, #164]	@ (8011708 <_vfiprintf_r+0x220>)
 8011664:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011668:	2206      	movs	r2, #6
 801166a:	f7ee fdb9 	bl	80001e0 <memchr>
 801166e:	2800      	cmp	r0, #0
 8011670:	d03f      	beq.n	80116f2 <_vfiprintf_r+0x20a>
 8011672:	4b26      	ldr	r3, [pc, #152]	@ (801170c <_vfiprintf_r+0x224>)
 8011674:	bb1b      	cbnz	r3, 80116be <_vfiprintf_r+0x1d6>
 8011676:	9b03      	ldr	r3, [sp, #12]
 8011678:	3307      	adds	r3, #7
 801167a:	f023 0307 	bic.w	r3, r3, #7
 801167e:	3308      	adds	r3, #8
 8011680:	9303      	str	r3, [sp, #12]
 8011682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011684:	443b      	add	r3, r7
 8011686:	9309      	str	r3, [sp, #36]	@ 0x24
 8011688:	e76a      	b.n	8011560 <_vfiprintf_r+0x78>
 801168a:	fb0c 3202 	mla	r2, ip, r2, r3
 801168e:	460c      	mov	r4, r1
 8011690:	2001      	movs	r0, #1
 8011692:	e7a8      	b.n	80115e6 <_vfiprintf_r+0xfe>
 8011694:	2300      	movs	r3, #0
 8011696:	3401      	adds	r4, #1
 8011698:	9305      	str	r3, [sp, #20]
 801169a:	4619      	mov	r1, r3
 801169c:	f04f 0c0a 	mov.w	ip, #10
 80116a0:	4620      	mov	r0, r4
 80116a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116a6:	3a30      	subs	r2, #48	@ 0x30
 80116a8:	2a09      	cmp	r2, #9
 80116aa:	d903      	bls.n	80116b4 <_vfiprintf_r+0x1cc>
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d0c6      	beq.n	801163e <_vfiprintf_r+0x156>
 80116b0:	9105      	str	r1, [sp, #20]
 80116b2:	e7c4      	b.n	801163e <_vfiprintf_r+0x156>
 80116b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80116b8:	4604      	mov	r4, r0
 80116ba:	2301      	movs	r3, #1
 80116bc:	e7f0      	b.n	80116a0 <_vfiprintf_r+0x1b8>
 80116be:	ab03      	add	r3, sp, #12
 80116c0:	9300      	str	r3, [sp, #0]
 80116c2:	462a      	mov	r2, r5
 80116c4:	4b12      	ldr	r3, [pc, #72]	@ (8011710 <_vfiprintf_r+0x228>)
 80116c6:	a904      	add	r1, sp, #16
 80116c8:	4630      	mov	r0, r6
 80116ca:	f7fd fe49 	bl	800f360 <_printf_float>
 80116ce:	4607      	mov	r7, r0
 80116d0:	1c78      	adds	r0, r7, #1
 80116d2:	d1d6      	bne.n	8011682 <_vfiprintf_r+0x19a>
 80116d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80116d6:	07d9      	lsls	r1, r3, #31
 80116d8:	d405      	bmi.n	80116e6 <_vfiprintf_r+0x1fe>
 80116da:	89ab      	ldrh	r3, [r5, #12]
 80116dc:	059a      	lsls	r2, r3, #22
 80116de:	d402      	bmi.n	80116e6 <_vfiprintf_r+0x1fe>
 80116e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80116e2:	f7fe fb97 	bl	800fe14 <__retarget_lock_release_recursive>
 80116e6:	89ab      	ldrh	r3, [r5, #12]
 80116e8:	065b      	lsls	r3, r3, #25
 80116ea:	f53f af1f 	bmi.w	801152c <_vfiprintf_r+0x44>
 80116ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80116f0:	e71e      	b.n	8011530 <_vfiprintf_r+0x48>
 80116f2:	ab03      	add	r3, sp, #12
 80116f4:	9300      	str	r3, [sp, #0]
 80116f6:	462a      	mov	r2, r5
 80116f8:	4b05      	ldr	r3, [pc, #20]	@ (8011710 <_vfiprintf_r+0x228>)
 80116fa:	a904      	add	r1, sp, #16
 80116fc:	4630      	mov	r0, r6
 80116fe:	f7fe f8c7 	bl	800f890 <_printf_i>
 8011702:	e7e4      	b.n	80116ce <_vfiprintf_r+0x1e6>
 8011704:	0801211f 	.word	0x0801211f
 8011708:	08012129 	.word	0x08012129
 801170c:	0800f361 	.word	0x0800f361
 8011710:	080114c5 	.word	0x080114c5
 8011714:	08012125 	.word	0x08012125

08011718 <__swbuf_r>:
 8011718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801171a:	460e      	mov	r6, r1
 801171c:	4614      	mov	r4, r2
 801171e:	4605      	mov	r5, r0
 8011720:	b118      	cbz	r0, 801172a <__swbuf_r+0x12>
 8011722:	6a03      	ldr	r3, [r0, #32]
 8011724:	b90b      	cbnz	r3, 801172a <__swbuf_r+0x12>
 8011726:	f7fe fa5f 	bl	800fbe8 <__sinit>
 801172a:	69a3      	ldr	r3, [r4, #24]
 801172c:	60a3      	str	r3, [r4, #8]
 801172e:	89a3      	ldrh	r3, [r4, #12]
 8011730:	071a      	lsls	r2, r3, #28
 8011732:	d501      	bpl.n	8011738 <__swbuf_r+0x20>
 8011734:	6923      	ldr	r3, [r4, #16]
 8011736:	b943      	cbnz	r3, 801174a <__swbuf_r+0x32>
 8011738:	4621      	mov	r1, r4
 801173a:	4628      	mov	r0, r5
 801173c:	f000 f82a 	bl	8011794 <__swsetup_r>
 8011740:	b118      	cbz	r0, 801174a <__swbuf_r+0x32>
 8011742:	f04f 37ff 	mov.w	r7, #4294967295
 8011746:	4638      	mov	r0, r7
 8011748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801174a:	6823      	ldr	r3, [r4, #0]
 801174c:	6922      	ldr	r2, [r4, #16]
 801174e:	1a98      	subs	r0, r3, r2
 8011750:	6963      	ldr	r3, [r4, #20]
 8011752:	b2f6      	uxtb	r6, r6
 8011754:	4283      	cmp	r3, r0
 8011756:	4637      	mov	r7, r6
 8011758:	dc05      	bgt.n	8011766 <__swbuf_r+0x4e>
 801175a:	4621      	mov	r1, r4
 801175c:	4628      	mov	r0, r5
 801175e:	f7ff fe07 	bl	8011370 <_fflush_r>
 8011762:	2800      	cmp	r0, #0
 8011764:	d1ed      	bne.n	8011742 <__swbuf_r+0x2a>
 8011766:	68a3      	ldr	r3, [r4, #8]
 8011768:	3b01      	subs	r3, #1
 801176a:	60a3      	str	r3, [r4, #8]
 801176c:	6823      	ldr	r3, [r4, #0]
 801176e:	1c5a      	adds	r2, r3, #1
 8011770:	6022      	str	r2, [r4, #0]
 8011772:	701e      	strb	r6, [r3, #0]
 8011774:	6962      	ldr	r2, [r4, #20]
 8011776:	1c43      	adds	r3, r0, #1
 8011778:	429a      	cmp	r2, r3
 801177a:	d004      	beq.n	8011786 <__swbuf_r+0x6e>
 801177c:	89a3      	ldrh	r3, [r4, #12]
 801177e:	07db      	lsls	r3, r3, #31
 8011780:	d5e1      	bpl.n	8011746 <__swbuf_r+0x2e>
 8011782:	2e0a      	cmp	r6, #10
 8011784:	d1df      	bne.n	8011746 <__swbuf_r+0x2e>
 8011786:	4621      	mov	r1, r4
 8011788:	4628      	mov	r0, r5
 801178a:	f7ff fdf1 	bl	8011370 <_fflush_r>
 801178e:	2800      	cmp	r0, #0
 8011790:	d0d9      	beq.n	8011746 <__swbuf_r+0x2e>
 8011792:	e7d6      	b.n	8011742 <__swbuf_r+0x2a>

08011794 <__swsetup_r>:
 8011794:	b538      	push	{r3, r4, r5, lr}
 8011796:	4b29      	ldr	r3, [pc, #164]	@ (801183c <__swsetup_r+0xa8>)
 8011798:	4605      	mov	r5, r0
 801179a:	6818      	ldr	r0, [r3, #0]
 801179c:	460c      	mov	r4, r1
 801179e:	b118      	cbz	r0, 80117a8 <__swsetup_r+0x14>
 80117a0:	6a03      	ldr	r3, [r0, #32]
 80117a2:	b90b      	cbnz	r3, 80117a8 <__swsetup_r+0x14>
 80117a4:	f7fe fa20 	bl	800fbe8 <__sinit>
 80117a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117ac:	0719      	lsls	r1, r3, #28
 80117ae:	d422      	bmi.n	80117f6 <__swsetup_r+0x62>
 80117b0:	06da      	lsls	r2, r3, #27
 80117b2:	d407      	bmi.n	80117c4 <__swsetup_r+0x30>
 80117b4:	2209      	movs	r2, #9
 80117b6:	602a      	str	r2, [r5, #0]
 80117b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117bc:	81a3      	strh	r3, [r4, #12]
 80117be:	f04f 30ff 	mov.w	r0, #4294967295
 80117c2:	e033      	b.n	801182c <__swsetup_r+0x98>
 80117c4:	0758      	lsls	r0, r3, #29
 80117c6:	d512      	bpl.n	80117ee <__swsetup_r+0x5a>
 80117c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80117ca:	b141      	cbz	r1, 80117de <__swsetup_r+0x4a>
 80117cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80117d0:	4299      	cmp	r1, r3
 80117d2:	d002      	beq.n	80117da <__swsetup_r+0x46>
 80117d4:	4628      	mov	r0, r5
 80117d6:	f7ff f97b 	bl	8010ad0 <_free_r>
 80117da:	2300      	movs	r3, #0
 80117dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80117de:	89a3      	ldrh	r3, [r4, #12]
 80117e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80117e4:	81a3      	strh	r3, [r4, #12]
 80117e6:	2300      	movs	r3, #0
 80117e8:	6063      	str	r3, [r4, #4]
 80117ea:	6923      	ldr	r3, [r4, #16]
 80117ec:	6023      	str	r3, [r4, #0]
 80117ee:	89a3      	ldrh	r3, [r4, #12]
 80117f0:	f043 0308 	orr.w	r3, r3, #8
 80117f4:	81a3      	strh	r3, [r4, #12]
 80117f6:	6923      	ldr	r3, [r4, #16]
 80117f8:	b94b      	cbnz	r3, 801180e <__swsetup_r+0x7a>
 80117fa:	89a3      	ldrh	r3, [r4, #12]
 80117fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011804:	d003      	beq.n	801180e <__swsetup_r+0x7a>
 8011806:	4621      	mov	r1, r4
 8011808:	4628      	mov	r0, r5
 801180a:	f000 f883 	bl	8011914 <__smakebuf_r>
 801180e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011812:	f013 0201 	ands.w	r2, r3, #1
 8011816:	d00a      	beq.n	801182e <__swsetup_r+0x9a>
 8011818:	2200      	movs	r2, #0
 801181a:	60a2      	str	r2, [r4, #8]
 801181c:	6962      	ldr	r2, [r4, #20]
 801181e:	4252      	negs	r2, r2
 8011820:	61a2      	str	r2, [r4, #24]
 8011822:	6922      	ldr	r2, [r4, #16]
 8011824:	b942      	cbnz	r2, 8011838 <__swsetup_r+0xa4>
 8011826:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801182a:	d1c5      	bne.n	80117b8 <__swsetup_r+0x24>
 801182c:	bd38      	pop	{r3, r4, r5, pc}
 801182e:	0799      	lsls	r1, r3, #30
 8011830:	bf58      	it	pl
 8011832:	6962      	ldrpl	r2, [r4, #20]
 8011834:	60a2      	str	r2, [r4, #8]
 8011836:	e7f4      	b.n	8011822 <__swsetup_r+0x8e>
 8011838:	2000      	movs	r0, #0
 801183a:	e7f7      	b.n	801182c <__swsetup_r+0x98>
 801183c:	20000138 	.word	0x20000138

08011840 <_raise_r>:
 8011840:	291f      	cmp	r1, #31
 8011842:	b538      	push	{r3, r4, r5, lr}
 8011844:	4605      	mov	r5, r0
 8011846:	460c      	mov	r4, r1
 8011848:	d904      	bls.n	8011854 <_raise_r+0x14>
 801184a:	2316      	movs	r3, #22
 801184c:	6003      	str	r3, [r0, #0]
 801184e:	f04f 30ff 	mov.w	r0, #4294967295
 8011852:	bd38      	pop	{r3, r4, r5, pc}
 8011854:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011856:	b112      	cbz	r2, 801185e <_raise_r+0x1e>
 8011858:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801185c:	b94b      	cbnz	r3, 8011872 <_raise_r+0x32>
 801185e:	4628      	mov	r0, r5
 8011860:	f000 f830 	bl	80118c4 <_getpid_r>
 8011864:	4622      	mov	r2, r4
 8011866:	4601      	mov	r1, r0
 8011868:	4628      	mov	r0, r5
 801186a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801186e:	f000 b817 	b.w	80118a0 <_kill_r>
 8011872:	2b01      	cmp	r3, #1
 8011874:	d00a      	beq.n	801188c <_raise_r+0x4c>
 8011876:	1c59      	adds	r1, r3, #1
 8011878:	d103      	bne.n	8011882 <_raise_r+0x42>
 801187a:	2316      	movs	r3, #22
 801187c:	6003      	str	r3, [r0, #0]
 801187e:	2001      	movs	r0, #1
 8011880:	e7e7      	b.n	8011852 <_raise_r+0x12>
 8011882:	2100      	movs	r1, #0
 8011884:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011888:	4620      	mov	r0, r4
 801188a:	4798      	blx	r3
 801188c:	2000      	movs	r0, #0
 801188e:	e7e0      	b.n	8011852 <_raise_r+0x12>

08011890 <raise>:
 8011890:	4b02      	ldr	r3, [pc, #8]	@ (801189c <raise+0xc>)
 8011892:	4601      	mov	r1, r0
 8011894:	6818      	ldr	r0, [r3, #0]
 8011896:	f7ff bfd3 	b.w	8011840 <_raise_r>
 801189a:	bf00      	nop
 801189c:	20000138 	.word	0x20000138

080118a0 <_kill_r>:
 80118a0:	b538      	push	{r3, r4, r5, lr}
 80118a2:	4d07      	ldr	r5, [pc, #28]	@ (80118c0 <_kill_r+0x20>)
 80118a4:	2300      	movs	r3, #0
 80118a6:	4604      	mov	r4, r0
 80118a8:	4608      	mov	r0, r1
 80118aa:	4611      	mov	r1, r2
 80118ac:	602b      	str	r3, [r5, #0]
 80118ae:	f7f0 fe29 	bl	8002504 <_kill>
 80118b2:	1c43      	adds	r3, r0, #1
 80118b4:	d102      	bne.n	80118bc <_kill_r+0x1c>
 80118b6:	682b      	ldr	r3, [r5, #0]
 80118b8:	b103      	cbz	r3, 80118bc <_kill_r+0x1c>
 80118ba:	6023      	str	r3, [r4, #0]
 80118bc:	bd38      	pop	{r3, r4, r5, pc}
 80118be:	bf00      	nop
 80118c0:	20001dbc 	.word	0x20001dbc

080118c4 <_getpid_r>:
 80118c4:	f7f0 be16 	b.w	80024f4 <_getpid>

080118c8 <__swhatbuf_r>:
 80118c8:	b570      	push	{r4, r5, r6, lr}
 80118ca:	460c      	mov	r4, r1
 80118cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118d0:	2900      	cmp	r1, #0
 80118d2:	b096      	sub	sp, #88	@ 0x58
 80118d4:	4615      	mov	r5, r2
 80118d6:	461e      	mov	r6, r3
 80118d8:	da0d      	bge.n	80118f6 <__swhatbuf_r+0x2e>
 80118da:	89a3      	ldrh	r3, [r4, #12]
 80118dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80118e0:	f04f 0100 	mov.w	r1, #0
 80118e4:	bf14      	ite	ne
 80118e6:	2340      	movne	r3, #64	@ 0x40
 80118e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80118ec:	2000      	movs	r0, #0
 80118ee:	6031      	str	r1, [r6, #0]
 80118f0:	602b      	str	r3, [r5, #0]
 80118f2:	b016      	add	sp, #88	@ 0x58
 80118f4:	bd70      	pop	{r4, r5, r6, pc}
 80118f6:	466a      	mov	r2, sp
 80118f8:	f000 f848 	bl	801198c <_fstat_r>
 80118fc:	2800      	cmp	r0, #0
 80118fe:	dbec      	blt.n	80118da <__swhatbuf_r+0x12>
 8011900:	9901      	ldr	r1, [sp, #4]
 8011902:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011906:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801190a:	4259      	negs	r1, r3
 801190c:	4159      	adcs	r1, r3
 801190e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011912:	e7eb      	b.n	80118ec <__swhatbuf_r+0x24>

08011914 <__smakebuf_r>:
 8011914:	898b      	ldrh	r3, [r1, #12]
 8011916:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011918:	079d      	lsls	r5, r3, #30
 801191a:	4606      	mov	r6, r0
 801191c:	460c      	mov	r4, r1
 801191e:	d507      	bpl.n	8011930 <__smakebuf_r+0x1c>
 8011920:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011924:	6023      	str	r3, [r4, #0]
 8011926:	6123      	str	r3, [r4, #16]
 8011928:	2301      	movs	r3, #1
 801192a:	6163      	str	r3, [r4, #20]
 801192c:	b003      	add	sp, #12
 801192e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011930:	ab01      	add	r3, sp, #4
 8011932:	466a      	mov	r2, sp
 8011934:	f7ff ffc8 	bl	80118c8 <__swhatbuf_r>
 8011938:	9f00      	ldr	r7, [sp, #0]
 801193a:	4605      	mov	r5, r0
 801193c:	4639      	mov	r1, r7
 801193e:	4630      	mov	r0, r6
 8011940:	f7fd fbe2 	bl	800f108 <_malloc_r>
 8011944:	b948      	cbnz	r0, 801195a <__smakebuf_r+0x46>
 8011946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801194a:	059a      	lsls	r2, r3, #22
 801194c:	d4ee      	bmi.n	801192c <__smakebuf_r+0x18>
 801194e:	f023 0303 	bic.w	r3, r3, #3
 8011952:	f043 0302 	orr.w	r3, r3, #2
 8011956:	81a3      	strh	r3, [r4, #12]
 8011958:	e7e2      	b.n	8011920 <__smakebuf_r+0xc>
 801195a:	89a3      	ldrh	r3, [r4, #12]
 801195c:	6020      	str	r0, [r4, #0]
 801195e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011962:	81a3      	strh	r3, [r4, #12]
 8011964:	9b01      	ldr	r3, [sp, #4]
 8011966:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801196a:	b15b      	cbz	r3, 8011984 <__smakebuf_r+0x70>
 801196c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011970:	4630      	mov	r0, r6
 8011972:	f000 f81d 	bl	80119b0 <_isatty_r>
 8011976:	b128      	cbz	r0, 8011984 <__smakebuf_r+0x70>
 8011978:	89a3      	ldrh	r3, [r4, #12]
 801197a:	f023 0303 	bic.w	r3, r3, #3
 801197e:	f043 0301 	orr.w	r3, r3, #1
 8011982:	81a3      	strh	r3, [r4, #12]
 8011984:	89a3      	ldrh	r3, [r4, #12]
 8011986:	431d      	orrs	r5, r3
 8011988:	81a5      	strh	r5, [r4, #12]
 801198a:	e7cf      	b.n	801192c <__smakebuf_r+0x18>

0801198c <_fstat_r>:
 801198c:	b538      	push	{r3, r4, r5, lr}
 801198e:	4d07      	ldr	r5, [pc, #28]	@ (80119ac <_fstat_r+0x20>)
 8011990:	2300      	movs	r3, #0
 8011992:	4604      	mov	r4, r0
 8011994:	4608      	mov	r0, r1
 8011996:	4611      	mov	r1, r2
 8011998:	602b      	str	r3, [r5, #0]
 801199a:	f7f0 fe13 	bl	80025c4 <_fstat>
 801199e:	1c43      	adds	r3, r0, #1
 80119a0:	d102      	bne.n	80119a8 <_fstat_r+0x1c>
 80119a2:	682b      	ldr	r3, [r5, #0]
 80119a4:	b103      	cbz	r3, 80119a8 <_fstat_r+0x1c>
 80119a6:	6023      	str	r3, [r4, #0]
 80119a8:	bd38      	pop	{r3, r4, r5, pc}
 80119aa:	bf00      	nop
 80119ac:	20001dbc 	.word	0x20001dbc

080119b0 <_isatty_r>:
 80119b0:	b538      	push	{r3, r4, r5, lr}
 80119b2:	4d06      	ldr	r5, [pc, #24]	@ (80119cc <_isatty_r+0x1c>)
 80119b4:	2300      	movs	r3, #0
 80119b6:	4604      	mov	r4, r0
 80119b8:	4608      	mov	r0, r1
 80119ba:	602b      	str	r3, [r5, #0]
 80119bc:	f7f0 fe12 	bl	80025e4 <_isatty>
 80119c0:	1c43      	adds	r3, r0, #1
 80119c2:	d102      	bne.n	80119ca <_isatty_r+0x1a>
 80119c4:	682b      	ldr	r3, [r5, #0]
 80119c6:	b103      	cbz	r3, 80119ca <_isatty_r+0x1a>
 80119c8:	6023      	str	r3, [r4, #0]
 80119ca:	bd38      	pop	{r3, r4, r5, pc}
 80119cc:	20001dbc 	.word	0x20001dbc

080119d0 <_init>:
 80119d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119d2:	bf00      	nop
 80119d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119d6:	bc08      	pop	{r3}
 80119d8:	469e      	mov	lr, r3
 80119da:	4770      	bx	lr

080119dc <_fini>:
 80119dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119de:	bf00      	nop
 80119e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119e2:	bc08      	pop	{r3}
 80119e4:	469e      	mov	lr, r3
 80119e6:	4770      	bx	lr
